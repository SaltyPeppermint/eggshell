# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class Guide:
    r"""
    Wrapper type for Python
    """
    def __new__(cls, s_expr_str:builtins.str) -> Guide: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def tree_distance(self, other:Guide) -> builtins.int: ...
    def to_dot(self, name:builtins.str, path:builtins.str, marked_ids:typing.Optional[typing.Sequence[builtins.int]]=None, transparent:builtins.bool=False) -> None: ...

class RecExpr:
    r"""
    Wrapper type for Python
    """
    def __new__(cls, s_expr_str:builtins.str) -> RecExpr:
        r"""
        Parse from string
        """
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def to_dot(self, name:builtins.str, path:builtins.str, marked_ids:typing.Optional[typing.Sequence[builtins.int]]=None, transparent:builtins.bool=False) -> None: ...
    def tree_distance(self, other:RecExpr) -> builtins.int: ...

def eqsat_guide_check(start:RecExpr, goal:RecExpr, iter_limit:typing.Optional[builtins.int]=None, node_limit:typing.Optional[builtins.int]=None, time_limit:typing.Optional[builtins.float]=None, guides:typing.Sequence[RecExpr]=[]) -> tuple[builtins.str, builtins.bool]: ...

def eqsat_ordered_rules_check(start:RecExpr, goal:RecExpr, iter_limit:typing.Optional[builtins.int]=None, node_limit:typing.Optional[builtins.int]=None, time_limit:typing.Optional[builtins.float]=None, ordered_rules:typing.Sequence[builtins.str]=[]) -> builtins.str: ...

def name_to_id(s:builtins.str) -> typing.Optional[builtins.int]: ...

def num_symbols() -> builtins.int: ...

def operators() -> builtins.list[builtins.str]: ...

