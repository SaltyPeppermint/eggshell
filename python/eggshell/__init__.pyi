# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing
from . import arithmetic
from . import halide
from . import rise
from . import simple

class Node:
    raw_name: str
    arity: int
    nth_child: int
    dfs_order: int
    depth: int
    id: int
    value: typing.Optional[str]
    name: str

class TreeData:
    nodes: list[Node]
    def transposed_adjacency(self) -> list[list[int]]:
        ...

    def anc_matrix(self, max_abs_distance,double_pad = ...) -> list[list[int]]:
        r"""
        Gives a matrix that describes the relationship of an ancestor to a child as a distance between them
        maximum distance (positive or negative) to be encoded.
        If the distance is too large or no relationship exists, -1 is returned
        """
        ...

    def sib_matrix(self, max_abs_distance,double_pad = ...) -> list[list[int]]:
        r"""
        Gives a matrix that describes the sibling relationship in nodes
        max_abs_distance describes the maximum distance (positive or negative) to be encoded.
        If the distance is too large or no relationship exists, -1 is returned
        """
        ...

    def count_symbols(self, n_symbols:int, n_vars:int) -> list[int]:
        ...

    def values(self) -> list[str]:
        ...

    def names(self) -> list[str]:
        ...

    def arity(self, position:int) -> int:
        ...

    def depth(self) -> int:
        ...

    def size(self) -> int:
        ...

    def simple_feature_names(self, symbol_names:typing.Sequence[str], var_names:typing.Sequence[str]) -> list[str]:
        ...

    def simple_features(self, n_symbols:int, n_vars:int) -> list[float]:
        ...

    @staticmethod
    def batch_simple_features(tree_datas:typing.Sequence[TreeData], n_symbols:int, n_vars:int) -> list[list[float]]:
        ...


