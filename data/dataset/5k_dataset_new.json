[{"expression": {"start": "( == ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) v3 ) ( * v4 4 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) v3 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 76 ) 64 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 76 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 29 ) 4 ) ( / ( + v0 29 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 673 ) 669 ) ( / ( + v0 673 ) 669 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( * ( max ( - ( * v0 126 ) v1 ) -116 ) -1 ) ( + ( * v0 -126 ) v1 ) ) 14 ) 4 ) 4 ) ( * v0 126 ) ) ( + ( * ( / ( + ( min ( * ( max ( - ( * v0 126 ) v1 ) -116 ) -1 ) ( + ( * v0 -126 ) v1 ) ) 14 ) 4 ) 4 ) ( * v0 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 -12 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 84 ) ) ) ( / v2 8 ) ) ( - ( + ( * v0 -12 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 84 ) ) ) ( / v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 2 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( / v1 4 ) v2 ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 5 ) 2 ) 2 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 5 ) 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 66 ) 64 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 66 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 1 ) ( - v0 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) 65 ) ) ( min ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 36 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 36 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 2 ) ( + ( * ( / v1 250 ) 2 ) v2 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 2 ) ( + ( * ( / v1 250 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) 121 ) -3 ) ( max ( min ( + ( / v1 16 ) ( * v2 64 ) ) 126 ) 2 ) ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) ( - ( - ( max ( min ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) 121 ) -3 ) ( max ( min ( + ( / v1 16 ) ( * v2 64 ) ) 126 ) 2 ) ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 14 ) 4 ) ) ( / ( + ( min ( - ( min ( min ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + v4 9 ) ) ( + ( min ( / ( + v3 v0 ) 4 ) ( + v4 6 ) ) 3 ) ) ( + ( min ( / ( - ( + v3 v0 ) 5 ) 4 ) ( + v4 5 ) ) 4 ) ) ( / v1 4 ) ) ( + v2 12 ) ) 2 ) 4 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 14 ) 4 ) ) ( / ( + ( min ( - ( min ( min ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + v4 9 ) ) ( + ( min ( / ( + v3 v0 ) 4 ) ( + v4 6 ) ) 3 ) ) ( + ( min ( / ( - ( + v3 v0 ) 5 ) 4 ) ( + v4 5 ) ) 4 ) ) ( / v1 4 ) ) ( + v2 12 ) ) 2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 64 ) v3 ) 1 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 64 ) v3 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 503 ) ) ( - v0 ( * v1 503 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + ( + ( / v1 250 ) ( * v2 4 ) ) 3 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + ( + ( / v1 250 ) ( * v2 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 4 ( * ( max ( min ( * ( / ( + v0 29 ) 4 ) 4 ) ( + ( - ( * v1 2 ) ( min ( * v2 2 ) 251 ) ) 26 ) ) 1 ) 8 ) ) ( - 4 ( * ( max ( min ( * ( / ( + v0 29 ) 4 ) 4 ) ( + ( - ( * v1 2 ) ( min ( * v2 2 ) 251 ) ) 26 ) ) 1 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 2 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max v0 10 ) ( + ( + v1 v0 ) 18 ) ) ( min ( max v0 10 ) ( + ( + v1 v0 ) 18 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 2 ) ) ) ( + ( * v0 8 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + v0 v1 ) 16 ) v2 ) ( max ( + ( + v0 v1 ) 16 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 64 ) v3 ) 63 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 64 ) v3 ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) 113 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) 113 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 4 ) -3 ) ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 1000 ) ) ) ( - ( max ( * v0 4 ) -3 ) ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 1000 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v2 9 ) v3 ) 4 ) v4 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v2 9 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 32 ) ( + ( max ( min v2 126 ) 2 ) v3 ) ) ) ( + ( * v0 4 ) ( + ( * v1 32 ) ( + ( max ( min v2 126 ) 2 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( - ( * v1 504 ) v2 ) ( + ( * v3 4 ) ( + ( * v4 256 ) v0 ) ) ) ) ( - v0 ( + ( - ( * v1 504 ) v2 ) ( + ( * v3 4 ) ( + ( * v4 256 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( / ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 4 ) ( * ( + ( * v4 2 ) v5 ) 4 ) ) ) ( + ( * v0 16 ) ( + ( / ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 4 ) ( * ( + ( * v4 2 ) v5 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - v0 17 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min ( - ( - ( * ( / ( + ( + v3 v4 ) 3 ) 4 ) 4 ) ( * v5 126 ) ) ( * ( / v4 4 ) 4 ) ) 114 ) v0 ) 7 ) ) ( min ( max ( max ( - v0 17 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min ( - ( - ( * ( / ( + ( + v3 v4 ) 3 ) 4 ) 4 ) ( * v5 126 ) ) ( * ( / v4 4 ) 4 ) ) 114 ) v0 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -500 ) 20 ) 20 ) ( * v0 -500 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( max ( - v0 7 ) v1 ) ( - v0 3 ) ) ( min ( max ( - v0 7 ) v1 ) ( - v0 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 252 ) ) ( + ( * v3 4 ) ( + ( * v4 128 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 252 ) ) ( + ( * v3 4 ) ( + ( * v4 128 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 29 ) 25 ) ( * v1 4 ) ) ( + ( max ( min ( * v0 8 ) 29 ) 25 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) 241 ) ( + ( * v0 504 ) 241 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( - v0 ( max ( min v1 1996 ) -3 ) ) 4 ) 0 ) ( / ( + v2 11 ) 4 ) ) ( / ( - ( min ( - ( min ( min ( + v3 v0 ) ( + ( max ( min v1 1989 ) -10 ) 11 ) ) ( + ( min ( + ( max ( min v1 1989 ) -10 ) 8 ) ( + v3 v0 ) ) 3 ) ) ( max ( min v1 1996 ) -3 ) ) ( + v2 14 ) ) 3 ) 4 ) ) ( max ( min ( max ( / ( - v0 ( max ( min v1 1996 ) -3 ) ) 4 ) 0 ) ( / ( + v2 11 ) 4 ) ) ( / ( - ( min ( - ( min ( min ( + v3 v0 ) ( + ( max ( min v1 1989 ) -10 ) 11 ) ) ( + ( min ( + ( max ( min v1 1989 ) -10 ) 8 ) ( + v3 v0 ) ) 3 ) ) ( max ( min v1 1996 ) -3 ) ) ( + v2 14 ) ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 21 ) ) ( min ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 36 ) v1 ) 30 ) v2 ) ( min ( + ( + ( * v0 36 ) v1 ) 30 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( / ( + ( + v0 v1 ) 511 ) 4 ) v2 ) ( + ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 2 ) ) ( max ( - ( / ( + ( + v0 v1 ) 511 ) 4 ) v2 ) ( + ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( + ( / v1 128 ) 1 ) ) -128 ) 64 ) 64 ) ( * ( % v0 ( + ( / v1 128 ) 1 ) ) -128 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ( + ( * v0 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + v2 51 ) ) ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + v2 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max v0 127 ) ( + v0 128 ) ) ( min ( max v0 127 ) ( + v0 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 1 ) ( * v3 -2 ) ) ( + ( min ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 1 ) ( * v3 -2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 16 ) ) ( - v0 ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 4 ) 7 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "sub-to-add", "eq-comm", "eq-swap", "mul-comm", "add-comm"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) v2 ) ( - ( + ( + v0 v1 ) v2 ) 1 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 4 ) 52 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-comm", "add-comm", "eq-swap", "mul-comm", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) v2 ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ) ) ( <= ( + ( * v7 32 ) v8 ) ( + ( * v7 32 ) v8 ) ) ) ( >= ( + ( * v7 32 ) v8 ) ( + ( * v7 32 ) v8 ) ) )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a", "add-zero"]}, {"expression": {"start": "( == ( + ( / ( + ( + v0 v1 ) 62 ) 4 ) ( * ( / ( + ( % ( + ( + v0 v1 ) 2 ) 4 ) 62 ) 16 ) 4 ) ) ( + ( / ( + ( + v0 v1 ) 62 ) 4 ) ( * ( / ( + ( % ( + ( + v0 v1 ) 2 ) 4 ) 62 ) 16 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -71 ( min ( * v0 -36 ) -34 ) ) ( - ( max ( * v0 36 ) 34 ) 71 ) ) ( max ( - -71 ( min ( * v0 -36 ) -34 ) ) ( - ( max ( * v0 36 ) 34 ) 71 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * v0 4 ) 4 ) ( * v0 4 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 130 ) ( - ( + 133 ( - v0 2 ) ) 1 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( - v4 8 ) ( - ( - ( + 0 v4 ) 5 ) 3 ) ) ) ( >= ( + v4 60 ) ( - ( + ( + ( - ( + 64 0 ) 1 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * ( + v0 v1 ) 2 ) 2 ) ( * ( + ( + v0 1 ) v1 ) 2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-dist-mul", "mul-comm", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( / v1 4 ) ( * ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v0 -32 ) v3 ) ) 15 ) 8 ) ( * v2 2 ) ) 8 ) ) ) ( + ( * v0 32 ) ( + ( / v1 4 ) ( * ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v0 -32 ) v3 ) ) 15 ) 8 ) ( * v2 2 ) ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * ( + ( + ( * v0 8 ) v1 ) v2 ) 4 ) 3 ) ( * ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 4 ) )", "end": "1"}, "rules": ["add-comm", "lt-mul-pos-cancel", "add-assoc", "lt-swap-in", "lt-x-x-sub-a", "div-consts-add", "add-zero", "mul-one", "sub-to-add"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 126 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( min ( * v0 4 ) 126 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 500 ) v1 ) v2 ) 4 ) ( + ( + ( * v0 500 ) v1 ) ( + v2 1 ) ) )", "end": "0"}, "rules": ["add-comm", "sub-to-add", "add-const", "mul-one", "lt-swap-in", "mul-comm", "mul-zero", "add-assoc", "add-fact-mul"]}, {"expression": {"start": "( >= ( + ( * v0 2 ) v1 ) ( + ( + ( * ( - v0 1 ) 2 ) v1 ) 1 ) )", "end": "1"}, "rules": ["add-comm", "add-fact-mul", "mul-assoc", "mul-one", "mul-comm", "lt-swap-in", "lt-swap", "sub-to-add", "eqgt-to-not-lt", "mul-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 0 ) 4 ) ( - ( + 0 v0 ) 4 ) ) ) ( >= ( - ( + v0 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ) ) ( >= ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ) )", "end": "0"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( * ( + v0 v1 ) 4 ) ( - ( + ( * ( + v0 v1 ) 4 ) 4 ) 1 ) )", "end": "0"}, "rules": ["lt-min-term+cpos", "eqgt-to-not-lt", "not-gt-to-eqlt", "min-x-x-plus-a-pos", "add-comm", "add-assoc", "Eq-lt-min", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 34 ( max ( * v0 12 ) 21 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-add-both", "Eq-a-b", "Eq-min-c-neg", "sub-to-add", "min-consts-div-neg", "eq-swap", "eq-comm", "mul-comm", "mul-assoc", "max-to-min", "add-comm"]}, {"expression": {"start": "( == ( - -6 ( max v0 0 ) ) ( - ( + ( - -6 ( max v0 0 ) ) ( + ( max v0 0 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["min-mul-in-pos", "eq-comm", "add-comm", "mul-assoc", "max-to-min", "eq-swap", "Eq-min-c-pos", "add-assoc", "sub-to-add", "mul-comm", "min-add-both", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( * v0 4 ) 3 ) ( - ( - ( * ( - v0 1 ) 4 ) 7 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-comm", "eqlt-to-not-gt", "lt-swap", "lt-swap-out", "sub-to-add", "add-dist-mul", "mul-comm", "add-assoc"]}, {"expression": {"start": "( >= ( - v0 4 ) ( + ( + ( - v0 1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "mul-one", "sub-to-add", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 8 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( + v1 999 ) 250 ) 8 ) 5 ) ) 8 ) 8 ) ( min ( + ( * v0 8 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( + v1 999 ) 250 ) 8 ) 5 ) ) )", "end": "0"}, "rules": ["min-consts-div-neg", "min-comm", "mul-one", "mul-zero", "eq-x-y-0", "mod-consts", "mul-assoc", "sub-to-add", "mul-cancel-div", "add-assoc", "mul-comm", "add-fact-mul", "add-comm", "min-sub-both"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 8 ) v4 ) v5 ) ( + ( + ( * v3 8 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 8 ) v4 ) v5 ) ( + ( + ( * v3 8 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( >= ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - ( + ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - 13 ( * ( min ( - v0 v1 ) 5 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "min-add-both", "add-assoc", "min-mul-in-pos", "min-comm", "lt-min-term+cpos", "lt-swap-out", "add-comm", "mul-assoc"]}, {"expression": {"start": "( < ( + v0 3 ) ( - ( min ( max ( + ( + v0 1 ) 9 ) ( + ( min v1 4 ) v2 ) ) ( + ( + v0 1 ) 4 ) ) 6 ) )", "end": "0"}, "rules": ["min-comm", "add-assoc", "and-min-to-lt", "and-over-or", "mul-assoc", "min-sub-both", "mul-comm", "lt-swap-in", "lt-swap-out", "mul-one", "lt-mul-pos-cancel", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( min ( * v0 8 ) v1 ) ( min ( * v0 8 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 1 ) v1 ) ( min ( + v0 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( + ( * v0 500 ) 500 ) v1 ) ( * ( + ( * v0 125 ) v2 ) 4 ) ) ( - ( min ( + ( * v0 500 ) 500 ) v1 ) ( * ( + ( * v0 125 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 12 ) ) ( + ( / v0 4 ) ( * v1 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( / ( - 31 ( max ( * v0 12 ) 20 ) ) 3 ) 3 ) ( + ( * ( / ( max ( * v0 12 ) 20 ) 4 ) -4 ) 29 ) ) ( max ( * ( / ( - 31 ( max ( * v0 12 ) 20 ) ) 3 ) 3 ) ( + ( * ( / ( max ( * v0 12 ) 20 ) 4 ) -4 ) 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 4 ) ) ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( + ( / v0 4 ) ( * v1 63 ) ) v2 ) ( min ( - ( / ( + ( + v3 v0 ) 3 ) 4 ) ( * v4 251 ) ) ( + ( / v0 4 ) 250 ) ) ) ( - ( + ( + ( / v0 4 ) ( * v1 63 ) ) v2 ) ( min ( - ( / ( + ( + v3 v0 ) 3 ) 4 ) ( * v4 251 ) ) ( + ( / v0 4 ) 250 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 4 ) ( + ( min ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 64 ) ( - ( * v3 4 ) ( min ( * ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 16 ) v3 ) 4 ) ( + ( * v4 64 ) 165 ) ) ) ) 3 ) 165 ) ) ( max ( * v0 4 ) ( + ( min ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 64 ) ( - ( * v3 4 ) ( min ( * ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 16 ) v3 ) 4 ) ( + ( * v4 64 ) 165 ) ) ) ) 3 ) 165 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) ( * v3 128 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) ( * v3 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 8 ) ) ( + ( / v0 4 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 7 ) 4 ) ( / ( + v0 7 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 249 ) 250 ) ( / ( + v0 249 ) 250 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 70 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( + ( * v0 70 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) -4 ) ( + ( * ( / v1 4 ) 4 ) ( * v3 65 ) ) ) ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) -4 ) ( + ( * ( / v1 4 ) 4 ) ( * v3 65 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * ( + ( / ( + ( max ( * v0 -36 ) -99 ) 99 ) 4 ) ( * v0 9 ) ) 4 ) 99 ) ( * v1 4 ) ) ( + ( max ( * ( + ( / ( + ( max ( * v0 -36 ) -99 ) 99 ) 4 ) ( * v0 9 ) ) 4 ) 99 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( max v0 0 ) v1 ) 13 ) 4 ) 0 ) ( / ( + v2 21 ) 4 ) ) ( min ( max ( / ( + ( - ( max v0 0 ) v1 ) 13 ) 4 ) 0 ) ( / ( + v2 21 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( * v3 2 ) 4 ) ) ( min ( + ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( * v3 2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) ) 8 ) ( * ( + ( * v4 8 ) v5 ) 4 ) ) ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) ) 8 ) ( * ( + ( * v4 8 ) v5 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 2 ) v1 ) 4 ) ( - v0 1 ) ) ( min ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 2 ) v1 ) 4 ) ( - v0 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 63 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 63 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 306 ) 251 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 306 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 138 ) 128 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 138 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -2 ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( max ( * v1 4 ) -3 ) ( min ( * ( / v2 4 ) 4 ) 1999 ) ) 4 ) ) 1 ) ) ( - -6 ( max v0 -3 ) ) ) ( max ( - -2 ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( max ( * v1 4 ) -3 ) ( min ( * ( / v2 4 ) 4 ) 1999 ) ) 4 ) ) 1 ) ) ( - -6 ( max v0 -3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1003 ) 876 ) v1 ) ( min ( + ( * v0 1003 ) 876 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) ( min ( + v1 63 ) v2 ) ) ( - ( + v0 v1 ) ( min ( + v1 63 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 12 ) ( * v1 32 ) ) ( + ( * v0 12 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 70 ) 8 ) ( / ( + v2 70 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 30 ) 18 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 30 ) 18 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 5 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( + ( * v0 64 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 668 ) ) ( * v4 224 ) ) ( + v1 224 ) ) ) ( - ( + ( * v0 64 ) ( + ( * v4 224 ) v1 ) ) ( min ( - ( + v2 v1 ) ( * v3 668 ) ) ( + ( + ( min ( * v0 64 ) 166 ) ( + ( * v4 224 ) v1 ) ) 58 ) ) ) ) ( max ( - ( + ( * v0 64 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 668 ) ) ( * v4 224 ) ) ( + v1 224 ) ) ) ( - ( + ( * v0 64 ) ( + ( * v4 224 ) v1 ) ) ( min ( - ( + v2 v1 ) ( * v3 668 ) ) ( + ( + ( min ( * v0 64 ) 166 ) ( + ( * v4 224 ) v1 ) ) 58 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 4 ) v1 ) 4 ) v2 ) ( min ( + ( + ( * v0 4 ) v1 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( * v0 504 ) v1 ) ( * v2 256 ) ) ( + ( - ( * v0 504 ) v1 ) ( * v2 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 24 ) 8 ) 8 ) ( * v0 24 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 63 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 63 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( - ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) v1 ) ( + ( * ( + ( min ( * v0 2 ) 251 ) v2 ) 8 ) 188 ) ) ( min ( max ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) v1 ) ( + ( * ( + ( min ( * v0 2 ) 251 ) v2 ) 8 ) 188 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 32 ) 28 ) ( / v0 4 ) ) 223 ) ) ( * v4 -32 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 32 ) 28 ) ( / v0 4 ) ) 223 ) ) ( * v4 -32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 500 ) v1 ) v2 ) ( + ( + ( * v0 500 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 3 ) ( * v1 4 ) ) ( + ( min ( * v0 4 ) 3 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 8 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 8 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 672 ) 671 ) 0 )", "end": "1"}, "rules": ["Eq-lt-min", "lt-swap-in", "min-mod-const-to-const", "not-gt-to-eqlt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + ( - ( * v0 4 ) v1 ) 19 ) 16 ) 16 ) v1 ) ( + ( * v0 4 ) 4 ) ) ( min ( + ( * ( / ( + ( - ( * v0 4 ) v1 ) 19 ) 16 ) 16 ) v1 ) ( + ( * v0 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( >= ( + ( * v0 2 ) v1 ) ( + ( + ( * v0 2 ) ( - v1 1 ) ) 1 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "lt-swap-out", "lt-to-zero", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 2 ) 123 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 123 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 3 ) ( * v1 32 ) ) ( + ( min ( * v0 4 ) 3 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 500 ) ) ( + v1 500 ) ) ( + ( * v4 4 ) v1 ) ) ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 500 ) ) ( + v1 500 ) ) ( + ( * v4 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( min v0 45 ) 14 ) 4 ) ( / ( + ( min v0 45 ) 14 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-min-term-term+pos", "add-comm", "min-add-both", "lt-min-term+cpos", "add-assoc"]}, {"expression": {"start": "( == ( - ( - ( min ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * v3 64 ) 165 ) ) ( * v2 4 ) ) ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 64 ) ) ( - ( - ( min ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * v3 64 ) 165 ) ) ( * v2 4 ) ) ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 502 ) 501 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "add-comm", "min-sub-both", "not-gt-to-eqlt", "Eq-lt-min", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( + ( max ( min ( * ( / ( - ( + v1 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 13 ) ) ( min ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( + ( max ( min ( * ( / ( - ( + v1 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 4 ) 29 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 29 ( max ( * v3 4 ) 29 ) ) 7 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "sub-to-add", "add-denom-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - -92 ( * ( max ( min v0 -23 ) -24 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "sub-to-add", "add-comm", "Eq-a-b", "mul-assoc", "eq-comm", "mul-comm"]}, {"expression": {"start": "( == ( - ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( * v2 1000 ) ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( - ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( * v2 1000 ) ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 64 0 ) 1 ) v0 ) ( + ( - ( + 64 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 64 ) ( + ( * v2 4 ) ( + ( * v3 2 ) v4 ) ) ) v5 ) ( + ( + ( * v1 64 ) ( + ( * v2 4 ) ( + ( * v3 2 ) v4 ) ) ) v5 ) ) ) ( >= ( + ( + ( * v1 64 ) ( + ( * v2 4 ) ( + ( * v3 2 ) v4 ) ) ) v5 ) ( + ( + ( * v1 64 ) ( + ( * v2 4 ) ( + ( * v3 2 ) v4 ) ) ) v5 ) ) ) ( <= ( + ( min ( * ( % v6 5 ) 4 ) 14 ) 0 ) ( + ( min ( * ( % v6 5 ) 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * ( % v6 5 ) 4 ) 14 ) 3 ) ( + ( min ( * ( % v6 5 ) 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 3 ) 13 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 13 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + v0 v1 ) 0 ) 1002 ) ( - ( + v0 v1 ) 1011 ) ) ) ( >= ( - ( + ( + v0 v1 ) 3 ) 1002 ) ( - ( + v0 v1 ) 1002 ) ) ) ( <= ( - v2 11 ) ( - v2 11 ) ) ) ( >= ( + v2 41 ) ( + v2 41 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc", "lt-swap-in", "sub-to-add", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - v0 258 ) ( - ( + ( - v0 258 ) 265 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "mul-comm", "add-dist-mul", "eq-x-y-0", "add-fact-mul", "eq-comm", "sub-to-add", "mul-zero", "add-assoc"]}, {"expression": {"start": "( <= ( + v0 5 ) ( - ( - ( - v0 1 ) 4 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-comm", "sub-to-add", "lt-swap-out", "add-assoc", "eqlt-to-not-gt", "lt-swap-in"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( - ( * v0 8 ) ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ) ( * ( * v1 8 ) 8 ) ) 7 ) -4 ) 4 ) 4 ) ( * ( min ( + ( - ( * v0 8 ) ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ) ( * ( * v1 8 ) 8 ) ) 7 ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( + v0 v1 ) v2 ) 8 ) ( % ( + ( + v0 v1 ) v2 ) 8 ) ) ) ( >= ( % ( + ( + v0 v1 ) v2 ) 8 ) ( % ( + ( + v0 v1 ) v2 ) 8 ) ) ) ( <= ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ) ) ( <= ( + ( * ( % v6 16 ) 4 ) 0 ) ( + ( * ( % v6 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v6 16 ) 4 ) 3 ) ( + ( * ( % v6 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 65 ) v1 ) 10 ) ( - ( + ( + ( * v0 65 ) 0 ) v1 ) 10 ) ) ) ( >= ( + ( + ( * v0 65 ) v1 ) 54 ) ( - ( + ( + ( * v0 65 ) ( - ( + 65 0 ) 1 ) ) v1 ) 10 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 0 ) 10 ) ( - ( * ( + ( * v2 2 ) v3 ) 2 ) 10 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 3 ) 10 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 3 ) 10 ) ) ) ( <= ( * v4 5 ) ( + ( * v4 5 ) 0 ) ) ) ( >= ( + ( * v4 5 ) 4 ) ( + ( * v4 5 ) ( - ( + 5 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-comm", "lt-to-zero", "lt-swap-out", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 15 ( * ( % v0 3 ) 6 ) ) ( - ( + 0 6 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["max-consts-or", "add-comm", "eqlt-to-not-gt", "and-min-to-lt", "lt-swap", "lt-mul-pos-cancel", "lt-swap-out", "lt-const-mod", "mul-assoc", "mod-minus-in", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( max v0 3 ) -8 ) 4 ) 4 ) ( * ( max v0 3 ) -8 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + 3 ( + ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ( * ( / ( - ( + ( / ( + ( + ( min v0 4 ) v1 ) 44 ) 16 ) v2 ) ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ) 4 ) 4 ) ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( * v3 8 ) 1 ) ( - ( + ( * ( + ( * v3 2 ) 0 ) 4 ) 0 ) 1 ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( - ( + ( * ( + ( * v3 2 ) 3 ) 4 ) 3 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqgt-to-not-lt", "mul-comm", "mul-assoc", "lt-x-x-sub-a", "add-comm", "add-assoc", "sub-to-add", "add-dist-mul", "and-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 3 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 3 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "add-zero", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 32 ) 968 ) 4 ) 4 ) ( min ( * v0 32 ) 968 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "mul-assoc", "min-mul-in-pos", "min-div-in-pos", "div-consts-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( + ( * v2 63 ) v3 ) v4 ) ( + ( + ( * v2 63 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 63 ) v3 ) v4 ) ( + ( + ( * v2 63 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( >= ( / v0 16 ) ( - ( + ( / v0 16 ) ( / ( + ( % v0 16 ) 15 ) 16 ) ) 1 ) )", "end": "1"}, "rules": ["add-comm", "mul-assoc", "add-assoc", "add-fact-mul", "lt-swap-out", "add-dist-mul", "lt-const-mod-false", "mul-zero", "lt-mul-div-cancel", "sub-to-add", "mul-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( min ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) 1999 ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( <= ( + ( * ( + ( * 0 4 ) v3 ) 4 ) 0 ) ( + ( * ( + 0 v3 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( + ( min ( - ( * ( min ( - ( - 3 ( * v4 2 ) ) v5 ) 0 ) 2 ) v6 ) -1 ) 1 ) 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( min ( - ( * ( min ( - ( - 3 ( * v4 2 ) ) v5 ) 0 ) 2 ) v6 ) -1 ) 4 ) 7 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["lt-to-zero", "mul-comm", "eqlt-to-not-gt", "add-comm", "add-assoc", "and-min-to-lt", "max-consts-or", "eqgt-to-not-lt", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 3 ( / ( + v1 54 ) 4 ) ) ( / ( + v1 66 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["add-denom-mul", "add-zero", "add-assoc", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 3 ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 6 ) ( + ( + ( * v0 4 ) v1 ) 6 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 2 ) ( - v2 2 ) ) ) ( >= ( - ( + ( + ( * 32 4 ) v2 ) 3 ) 2 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-comm", "lt-swap-out", "sub-to-add", "mul-assoc", "mul-zero", "add-assoc", "max-consts-or", "add-comm", "add-fact-mul", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + -5 ( - ( + ( * v0 4 ) v1 ) 3 ) ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 3 ) ( + ( - ( - 6 5 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 506 ) ) v1 ) 506 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "min-comm", "and-min-to-lt", "max-to-min", "min-add-both", "eqgt-to-not-lt", "min-consts-div-neg", "add-comm", "mul-comm"]}, {"expression": {"start": "( == ( / ( + v0 260 ) 252 ) ( / ( + v0 260 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 7 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + v2 3 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 61 ) ( min ( * v1 63 ) 62 ) ) ( + ( min ( * v0 2 ) 61 ) ( min ( * v1 63 ) 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 20 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 20 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 8 ) ( + ( + ( * v1 8 ) v2 ) 28 ) ) ( max ( * v0 8 ) ( + ( + ( * v1 8 ) v2 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( max ( min v0 2001 ) 2 ) v2 ) ) ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( max ( min v0 2001 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1008 ) 993 ) v1 ) ( min ( + ( * v0 1008 ) 993 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 12 ) ) ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + v1 116 ) ) ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + v1 116 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - -59 ( * ( max ( + ( / v0 4 ) ( - ( * v1 32 ) ( / ( + ( + v2 v0 ) 3 ) 4 ) ) ) -31 ) 4 ) ) ( + ( * ( min ( - ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v1 32 ) ) ( / v0 4 ) ) 31 ) 4 ) 5 ) ) ( min ( - -59 ( * ( max ( + ( / v0 4 ) ( - ( * v1 32 ) ( / ( + ( + v2 v0 ) 3 ) 4 ) ) ) -31 ) 4 ) ) ( + ( * ( min ( - ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v1 32 ) ) ( / v0 4 ) ) 31 ) 4 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( / ( + ( * ( min v0 31 ) 4 ) 70 ) 65 ) ( / ( + ( * ( min v0 31 ) 4 ) 70 ) 65 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 11 ) v1 ) ( min ( + v0 11 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( * v1 3 ) v2 ) ) ( - v0 ( + ( * v1 3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * ( + ( * v1 16 ) v2 ) 2 ) ) ( - ( / ( - v0 1 ) 4 ) ( * ( + ( * v1 16 ) v2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 127 ) ) ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 127 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min v0 126 ) v1 ) ( max ( min v0 126 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 16 ) v2 ) ) ( + ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) 1 ) ) ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 16 ) v2 ) ) ( + ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * ( + ( / v0 250 ) v2 ) 256 ) 355 ) ) ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * ( + ( / v0 250 ) v2 ) 256 ) 355 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 667 ) ( - v1 667 ) ) ( min ( * v0 667 ) ( - v1 667 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 31 ) 4 ) ( * v3 4 ) ) ( + ( / v0 4 ) 1 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 31 ) 4 ) ( * v3 4 ) ) ( + ( / v0 4 ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 1 ) ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 1 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 1 ) ( - ( + ( + ( * v1 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( / v1 4 ) v2 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) 53 ) v1 ) ( min ( + ( * v0 64 ) 53 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 32 ) ) ( - v0 ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( * v1 36 ) ) ( + ( * v0 64 ) ( * v1 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( * v1 4 ) ) ( + v2 7 ) ) ( min ( + ( / v0 4 ) ( * v1 4 ) ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 64 ) 188 ) ( / v1 4 ) ) 63 ) ) ( + ( * v3 64 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 32 ) ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 64 ) 188 ) ( / v1 4 ) ) 63 ) ) ( + ( * v3 64 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 32 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( / v1 250 ) v2 ) 64 ) 3 ) ) ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( / v1 250 ) v2 ) 64 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 8 ) ( + v2 v3 ) ) 13 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 8 ) ( + v2 v3 ) ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max v0 1 ) -16 ) 4 ) 4 ) ( * ( max v0 1 ) -16 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( + ( min ( * v0 128 ) ( - v1 128 ) ) ( + ( * v2 4 ) v3 ) ) ( + ( min ( * v0 128 ) ( - v1 128 ) ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 4 ) ( + ( + ( min ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 4 ) 998 ) ) v3 ) 21 ) ) ( max ( * v0 4 ) ( + ( + ( min ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 4 ) 998 ) ) v3 ) 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 130 ) ( + v0 130 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 2 ) ) ( + ( / v0 8 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( - ( min ( * ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( * v3 12 ) ) 2 ) 253 ) ( max ( * ( min ( max ( min ( / ( + ( + v1 v2 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v1 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v1 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v3 12 ) 9 ) ) 2 ) 2 ) ( + ( * v3 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) ) ) ( + ( * v0 4 ) ( - ( min ( * ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( * v3 12 ) ) 2 ) 253 ) ( max ( * ( min ( max ( min ( / ( + ( + v1 v2 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v1 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v1 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v3 12 ) 9 ) ) 2 ) 2 ) ( + ( * v3 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) ( / ( + v0 v1 ) 250 ) ) ( + ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) ( / ( + v0 v1 ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 261 ) 252 ) ( / ( + v0 261 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 57 ) v3 ) ( min ( + ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 57 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 34 ) 32 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 34 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( min ( * ( + ( * v1 32 ) v2 ) 2 ) 253 ) ) ( - v0 ( min ( * ( + ( * v1 32 ) v2 ) 2 ) 253 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( min ( * v1 63 ) 62 ) ( + v2 v3 ) ) ) ( + ( * v0 16 ) ( + ( min ( * v1 63 ) 62 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 1000 ) ) ( - v0 ( * v1 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 16 ) v1 ) 25 ) ( + ( + ( * v0 16 ) v1 ) 25 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * ( / ( + ( % ( + v0 v1 ) 4 ) 62 ) 16 ) 4 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * ( / ( + ( % ( + v0 v1 ) 4 ) 62 ) 16 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 15 ) 16 ) ( / ( + v0 15 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v0 ) ( + ( - ( + 125 0 ) 1 ) v0 ) ) ) ( <= ( + v1 0 ) ( + 0 v1 ) ) ) ( >= ( + v1 3 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 4 ) 121 ) v1 ) v2 ) ( + ( + ( min ( * v0 4 ) 121 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( min ( * v0 4 ) 2003 ) 4 ) ( - ( min ( * v0 4 ) 2003 ) 4 ) ) ) ( >= ( - ( max ( * ( + ( / ( + ( min v1 4 ) v2 ) 4 ) ( * ( + ( / ( + ( min ( + ( * v3 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( / ( + ( min v1 4 ) v2 ) 4 ) ) ) 62 ) 9 ) 8 ) ( * v3 8 ) ) 8 ) ) 4 ) 5 ) 5 ) ( - ( max ( * ( + ( / ( + ( min v1 4 ) v2 ) 4 ) ( * ( + ( / ( + ( min ( + ( * v3 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( / ( + ( min v1 4 ) v2 ) 4 ) ) ) 62 ) 9 ) 8 ) ( * v3 8 ) ) 8 ) ) 4 ) 5 ) 5 ) ) ) ( <= ( max ( min ( * v4 4 ) 1999 ) ( + ( max ( + ( * v4 4 ) v5 ) -3 ) 4 ) ) ( max ( min ( * v4 4 ) 1999 ) ( + ( max ( + ( * v4 4 ) v5 ) -3 ) 4 ) ) ) ) ( >= ( + ( max ( + ( * v4 4 ) v5 ) -4 ) 4 ) ( + ( max ( + ( * v4 4 ) v5 ) -4 ) 4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 62 ) 63 ) ( + ( max ( / v3 63 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 62 ) 63 ) ( + ( max ( / v3 63 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -4 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 4 ) 3 ) v2 ) 4 ) 4 ) ) ) v3 ) ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -4 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 4 ) 3 ) v2 ) 4 ) 4 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -56 ) 4 ) 4 ) ( * v0 -56 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 125 ) ) ( + ( / v0 4 ) ( * v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( + ( * v1 504 ) ( + ( * v2 4 ) v3 ) ) ) ( + ( * v0 128 ) ( + ( * v1 504 ) ( + ( * v2 4 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + -494 ( * v0 256 ) ) ( + -494 ( * v0 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["gt-to-lt", "mul-comm", "add-assoc", "sub-to-add", "lt-swap-out", "mul-zero", "add-const", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( + ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) 113 ) ( + ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) 113 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 9 ) 4 ) 4 ) ) ( + ( * v3 2 ) 6 ) ) ( min ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 9 ) 4 ) 4 ) ) ( + ( * v3 2 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 252 ) ) -251 ) ( + ( max ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2251 ) 252 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 252 ) ) -251 ) ( + ( max ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2251 ) 252 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-const", "eq-x-y-0", "add-fact-mul", "mul-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 672 ) ( + ( * v1 12 ) v2 ) ) ( + ( * v0 672 ) ( + ( * v1 12 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( - ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ( * v0 8 ) ) 4 ) 4 ) 4 ) ( * ( - ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ( * v0 8 ) ) 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 75 ) 63 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 75 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["add-comm", "lt-x-x-sub-a", "add-assoc", "lt-swap-in", "lt-swap-out", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 382 ( max ( * ( min v0 191 ) 2 ) 379 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-to-min", "Eq-a-b", "mul-assoc", "min-consts-div-neg", "Eq-min-c-neg", "min-add-both", "mul-comm", "sub-to-add", "eq-swap", "eq-comm", "add-comm"]}, {"expression": {"start": "( >= ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 8 ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "sub-to-add", "lt-x-x-sub-a", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 23 ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap", "add-comm", "lt-mul-pos-cancel", "sub-to-add", "lt-mul-div-cancel", "lt-swap-out", "mul-one", "lt-const-mod", "mul-assoc", "eqgt-to-not-lt", "mul-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 12 ) ( + ( / ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 4 ) 168 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 12 ) ( + ( / ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 4 ) 168 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "mul-assoc", "div-consts-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) ) ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) 4 ) ) ( + ( + ( min ( * v1 32 ) 468 ) ( + ( * v2 8 ) 7 ) ) v3 ) ) ) ( <= ( + v4 v5 ) ( + v4 v5 ) ) ) ( >= ( + v4 v5 ) ( + v4 v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 4 ) 0 ) ( + ( * v2 4 ) 0 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * 125 4 ) v0 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * 125 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "add-assoc", "sub-to-add", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ) ) ( >= ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ) ) ( <= ( % ( + ( * v3 2 ) v4 ) 4 ) ( % ( + ( * v3 2 ) v4 ) 4 ) ) ) ( >= ( % ( + ( * v3 2 ) v4 ) 4 ) ( % ( + ( * v3 2 ) v4 ) 4 ) ) ) ( <= ( + ( min ( * v5 4 ) 14 ) 0 ) ( + ( min ( * v5 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 14 ) 3 ) ( + ( min ( * v5 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-min-c-pos", "add-const", "eq-swap", "mul-comm", "eq-comm", "add-assoc", "sub-to-add", "mul-zero", "add-comm", "add-fact-mul", "min-add-both", "max-min-switch"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * ( / v0 4 ) 16 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 13 ) ) 8 ) 8 ) ( min ( + ( * ( / v0 4 ) 16 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 13 ) ) )", "end": "0"}, "rules": ["min-mul-in-pos", "min-sub-both", "mul-assoc", "mul-zero", "mul-cancel-div", "add-comm", "eq-comm", "add-assoc", "mod-consts", "eq-x-y-0", "sub-to-add", "add-fact-mul", "min-div-in-pos", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( < ( + v0 5 ) ( - ( min ( max ( + ( + v0 1 ) 16 ) v1 ) ( + ( + v0 1 ) 7 ) ) 11 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-zero", "lt-swap-out", "and-min-to-lt", "min-comm", "mul-comm", "add-comm", "add-assoc", "sub-to-add", "add-const", "add-fact-mul", "mul-one"]}, {"expression": {"start": "( == ( - ( max ( * v0 128 ) 881 ) 1018 ) ( - ( + ( - ( max ( * v0 128 ) 881 ) 1018 ) ( - 1021 ( max ( * v0 128 ) 881 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-mul-x-y-0", "add-comm", "eq-swap", "max-to-min", "add-assoc", "min-mul-in-neg", "mul-assoc", "sub-to-add", "Eq-a-b", "mul-comm", "Eq-max-c-neg", "add-fact-mul", "eq-x-y-0", "mul-zero", "min-mul-in-pos", "min-add-both"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + ( * ( - v2 v1 ) 2 ) 52 ) ) ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + ( * ( - v2 v1 ) 2 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 64 ) 6 ) ( - ( * v0 64 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 500 ( max ( * ( + ( * v0 4 ) v1 ) 2 ) 497 ) ) ( - -6 ( max ( * ( min ( + ( * v0 4 ) v1 ) -3 ) 2 ) -9 ) ) ) ( max ( - 500 ( max ( * ( + ( * v0 4 ) v1 ) 2 ) 497 ) ) ( - -6 ( max ( * ( min ( + ( * v0 4 ) v1 ) -3 ) 2 ) -9 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 253 ) ( * v1 64 ) ) ( + ( min ( * v0 2 ) 253 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( * v3 8 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( * v3 8 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 32 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 15 ) ) ( max ( * v0 32 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 8 ) ) -7 ) ( + ( max ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2007 ) 8 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 8 ) ) -7 ) ( + ( max ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2007 ) 8 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 68 ) 63 ) ( / ( + ( * ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 68 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( * v1 44 ) ) ( + ( * v0 16 ) ( * v1 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 89 ) ( + v2 v3 ) ) ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 79 ) ) ( max ( min ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 89 ) ( + v2 v3 ) ) ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 79 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( min ( - ( - ( min ( + ( + ( min ( * v0 128 ) 872 ) v1 ) 128 ) ( + ( * v2 -1000 ) ( + v3 v1 ) ) ) ( * v0 128 ) ) v1 ) 4 ) ( * ( / ( - ( - ( - ( min ( + ( + ( min ( * v0 128 ) 872 ) ( + ( * v2 1000 ) v1 ) ) 128 ) ( + v3 v1 ) ) ( * v0 128 ) ) v1 ) 1 ) 4 ) 4 ) ) ) v1 ) v4 ) ( min ( + ( + ( * v0 128 ) ( + ( min ( - ( - ( min ( + ( + ( min ( * v0 128 ) 872 ) v1 ) 128 ) ( + ( * v2 -1000 ) ( + v3 v1 ) ) ) ( * v0 128 ) ) v1 ) 4 ) ( * ( / ( - ( - ( - ( min ( + ( + ( min ( * v0 128 ) 872 ) ( + ( * v2 1000 ) v1 ) ) 128 ) ( + v3 v1 ) ) ( * v0 128 ) ) v1 ) 1 ) 4 ) 4 ) ) ) v1 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 74 ) 63 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 74 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 126 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) 4 ) 4 ) ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( - ( / ( + ( + v3 v4 ) 31 ) 4 ) ( * v5 4 ) ) ( / v4 4 ) ) 1 ) 1 ) ) ( min ( - ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( - ( / ( + ( + v3 v4 ) 31 ) 4 ) ( * v5 4 ) ) ( / v4 4 ) ) 1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ( - v3 3 ) ) ( min ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ( - v3 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 32 ) 32 ) ) 32 ) ) 34 ) ( * ( / ( - ( max ( * ( min ( min ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 32 ) 32 ) ) 32 ) ) 34 ) 2 ) 5 ) 5 ) 4 ) 2 ) ) ( + ( max ( min ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 32 ) 32 ) ) 32 ) ) 34 ) ( * ( / ( - ( max ( * ( min ( min ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 32 ) 32 ) ) 32 ) ) 34 ) 2 ) 5 ) 5 ) 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( max ( min ( * v0 8 ) 113 ) -11 ) 13 ) ) ( min ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( max ( min ( * v0 8 ) 113 ) -11 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + v2 248 ) ) ( min ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + v2 248 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 128 ) ( + v2 v3 ) ) ) ( + ( * v0 4 ) ( + ( * v1 128 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 4 ) 4 ) 0 )", "end": "1"}, "rules": ["max-consts-and", "lt-swap-in", "and-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( * v0 16 ) v1 ) ( + ( * v0 16 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( == ( min ( * ( + ( / ( + v0 v1 ) 4 ) v2 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 125 ) ) ( min ( * ( + ( / ( + v0 v1 ) 4 ) v2 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( + ( * v3 20 ) ( + ( * v4 32 ) ( * v5 3 ) ) ) ) 17 ) ( + ( min ( / ( + ( + ( * v0 500 ) ( + v1 v2 ) ) 507 ) 8 ) ( + ( min ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * v4 32 ) ) v6 ) 31 ) ) ( * v5 3 ) ) ) ( min ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( + ( * v3 20 ) ( + ( * v4 32 ) ( * v5 3 ) ) ) ) 17 ) ( + ( min ( / ( + ( + ( * v0 500 ) ( + v1 v2 ) ) 507 ) 8 ) ( + ( min ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * v4 32 ) ) v6 ) 31 ) ) ( * v5 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 2 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 2 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) 7 ) ) ( min ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 140 ) 8 ) ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 140 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 4 ) ( * v1 256 ) ) 245 ) v2 ) ( min ( + ( + ( / v0 4 ) ( * v1 256 ) ) 245 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 16 ) v3 ) ) ( - ( * v0 16 ) ( + ( * ( / ( - ( + ( min v1 251 ) v2 ) 1 ) 250 ) 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + v0 v1 ) 64 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + v0 v1 ) 64 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1975 ) -24 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1975 ) -24 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 266 ) 252 ) ( / ( + v0 266 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 2 ) v1 ) ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 16 ) ) ( - ( + ( * v0 2 ) v1 ) ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( + ( + v0 v1 ) 999 ) 250 ) 16 ) ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) ) ( - ( * ( / ( + ( + v0 v1 ) 999 ) 250 ) 16 ) ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 13 ) ( + v1 v2 ) ) ( + ( * v0 13 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 257 ) 252 ) v1 ) ( / ( + v0 6 ) 252 ) ) ( max ( min ( / ( + v0 257 ) 252 ) v1 ) ( / ( + v0 6 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 257 0 ) 1 ) v0 ) ( + ( - ( + 257 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 4 ) 0 ) ( + ( * v2 4 ) 0 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( * v0 -4 ) ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 64 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) ) ( + ( * v0 -4 ) ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 64 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( max ( max ( min ( * ( / v1 8 ) 2 ) 509 ) ( - ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( max v2 -12 ) ) ) 10 ) ) ( - ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( max ( max ( min ( * ( / v1 8 ) 2 ) 509 ) ( - ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( max v2 -12 ) ) ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 1 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) ( min ( / ( - 1 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) 71 ) ) ( * v3 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 4 ) 1743 ) ( * v4 4 ) ) ) ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) 71 ) ) ( * v3 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 4 ) 1743 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + 0 v0 ) 2 ) 0 ) ( + ( * ( + 0 v0 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( * v1 2 ) 0 ) ( + ( * v1 2 ) 0 ) ) ) ( >= ( + ( * v1 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * v1 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -127 ( * ( / ( + v0 v1 ) 4 ) 4 ) ) ( - ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ) ( max ( - -127 ( * ( / ( + v0 v1 ) 4 ) 4 ) ) ( - ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ) ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 85 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 85 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 1004 ) 1003 ) 0 )", "end": "1"}, "rules": ["not-gt-to-eqlt", "eqgt-to-not-lt", "min-mod-const-to-const", "lt-swap-in", "Eq-lt-min"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( / ( - -60 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 4 ) ) 4 ) ( * ( + ( * ( + ( * v0 2 ) v4 ) 2 ) v5 ) 4 ) ) ) ( - ( * v0 16 ) ( + ( / ( - -60 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 4 ) ) 4 ) ( * ( + ( * ( + ( * v0 2 ) v4 ) 2 ) v5 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) ( * v1 4 ) ) ( * ( / v0 250 ) 8 ) ) ( - ( - ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) ( * v1 4 ) ) ( * ( / v0 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) 4 ) 4 ) ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -16 ) ( - ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( * v3 32 ) ) ( / v2 4 ) ) ) ( + ( * v0 -16 ) ( - ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( * v3 32 ) ) ( / v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 3 ) ) ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 4 ) ( * v1 128 ) ) 117 ) v2 ) ( min ( + ( + ( / v0 4 ) ( * v1 128 ) ) 117 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( min ( * v0 9 ) 128 ) ( + ( * v1 3 ) v2 ) ) ( + ( min ( * v0 9 ) 128 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( min ( + ( * v1 128 ) 123 ) v2 ) ( / v3 8 ) ) ) ( + ( * v0 8 ) ( + ( min ( + ( * v1 128 ) 123 ) v2 ) ( / v3 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 64 ) 140 ) 36 ) ) -144 ) 16 ) 16 ) ( * ( % v0 ( / ( + ( * v1 64 ) 140 ) 36 ) ) -144 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 64 ) ) -66 ) ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2065 ) 64 ) ) 2 ) ) ( - ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 64 ) ) -66 ) ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2065 ) 64 ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) 7 ) ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( + ( + ( min ( max ( * v0 500 ) -5 ) ( + ( * v0 500 ) 436 ) ) v1 ) 3 ) ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * 15 4 ) 3 ) ( + ( min ( + ( * ( / ( + ( min ( * v0 500 ) -5 ) 504 ) 64 ) 64 ) ( + ( max ( * v0 500 ) -5 ) v1 ) ) ( + ( + ( * v0 500 ) v1 ) 436 ) ) 3 ) ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + 0 ( - v2 2 ) ) ( + ( + ( + -5 v2 ) 0 ) 3 ) ) ) ( >= ( + 64 ( + v2 63 ) ) ( + ( + ( + 124 v2 ) 3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "and-comm", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) v2 ) ( * v3 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) v2 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + v5 v6 ) ( + v5 v6 ) ) ) ( >= ( + v5 v6 ) ( + v5 v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "add-const", "add-comm", "add-zero", "lt-to-zero"]}, {"expression": {"start": "( >= ( / ( + v0 v1 ) 4 ) ( - ( + ( / ( + v0 v1 ) 4 ) 33 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eqgt-to-not-lt", "lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]}, {"expression": {"start": "( < ( - ( + ( * v0 4 ) v1 ) 5 ) ( - ( + ( * v0 4 ) ( + v1 1 ) ) 17 ) )", "end": "0"}, "rules": ["mul-one", "add-const", "sub-to-add", "lt-swap-out", "mul-zero", "add-comm", "add-assoc", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 131 ( max ( * v0 33 ) 98 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-to-min", "mul-one", "mul-assoc", "eq-comm", "sub-to-add", "min-add-both", "mul-comm", "eq-swap", "Eq-min-c-neg", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + ( * v0 4 ) v1 ) 4 ) 1999 ) ( * ( / ( + v2 19 ) 4 ) 4 ) ) ( + ( max ( * v3 4 ) -15 ) 16 ) ) ( min ( + ( min ( * ( + ( * v0 4 ) v1 ) 4 ) 1999 ) ( * ( / ( + v2 19 ) 4 ) 4 ) ) ( + ( max ( * v3 4 ) -15 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - v0 5 ) 8 ) 256 ) 17 ) ( - ( + ( - ( * ( / ( - v0 5 ) 8 ) 256 ) 17 ) ( + ( * ( % ( + v0 3 ) 8 ) 32 ) 135 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eq-swap", "Eq-a-b", "eq-comm", "mul-comm", "sub-to-add", "mul-assoc", "mul-zero", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( == ( max ( - ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ( min ( + ( * v0 8 ) v5 ) ( + v6 7 ) ) ) 7 ) ( + ( * v0 8 ) v5 ) ) ( max ( - ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ( min ( + ( * v0 8 ) v5 ) ( + v6 7 ) ) ) 7 ) ( + ( * v0 8 ) v5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 511 ) 4 ) ( - ( + 0 ( / ( + ( % v0 4 ) 515 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["sub-to-add", "lt-const-mod", "lt-swap-out", "max-consts-or", "lt-mul-div-cancel", "and-min-to-lt", "add-comm", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * v0 8 ) 204 ) ( - ( + ( - ( * v0 8 ) 204 ) ( - 208 ( * v0 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "mul-zero", "add-comm", "eq-swap", "add-fact-mul", "mul-assoc", "Eq-a-b", "mul-comm"]}, {"expression": {"start": "( < v0 ( min ( max ( - ( * ( / v1 4 ) 4 ) 7 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["and-min-to-lt", "min-sub-both", "add-assoc", "mul-one", "mul-assoc", "sub-to-add", "min-comm", "add-fact-mul", "mul-comm", "lt-swap-out", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "eqlt-to-not-gt", "sub-to-add", "lt-swap-out", "lt-x-x-sub-a", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 2 ) ) ( - v0 2 ) ) ) ( >= ( + 3 ( + v0 999 ) ) ( + v0 1002 ) ) ) ( <= ( + ( + v1 v2 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["min-sub-both", "Eq-lt-min", "Eq-min-lt", "eq-swap", "lt-swap-out", "and-comm", "sub-to-add", "lt-x-x-sub-a", "add-assoc", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( * v4 4 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( min ( * v4 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-in", "add-comm", "sub-to-add", "or-to-and", "add-zero", "and-min-to-lt", "eqgt-to-not-lt", "min-x-x", "eq-x-x", "min-consts-or", "eqlt-to-not-gt", "mul-comm", "Eq-lt-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eq-x-x", "eqgt-to-not-lt", "min-x-x", "Eq-lt-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["min-mul-in-pos", "min-mul-in-neg", "lt-min-mutual-term", "lt-swap", "add-assoc", "max-consts-and", "min-add-both", "lt-to-zero", "eqgt-to-not-lt", "mul-comm", "max-to-min", "add-comm", "mul-assoc", "sub-to-add", "eqlt-to-not-gt", "min-comm"]}, {"expression": {"start": "( >= ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )", "end": "0"}, "rules": ["not-gt-to-eqlt", "min-mul-in-pos", "mul-assoc", "max-min-switch", "and-comm", "lt-swap-in", "add-comm", "eqgt-to-not-lt", "add-assoc", "and-min-to-eqlt", "add-fact-mul", "mul-comm", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( == ( / ( + v0 124 ) 125 ) ( / ( + v0 124 ) 125 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( + ( * ( / ( - 36 ( max v2 25 ) ) 4 ) 4 ) v2 ) ) ( + ( / ( + v0 v1 ) 4 ) ( + ( * ( / ( - 36 ( max v2 25 ) ) 4 ) 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 13 v0 ) 3 ) ( - 3 ( / v0 3 ) ) ) ( min ( / ( - 13 v0 ) 3 ) ( - 3 ( / v0 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 131 ) ) ( min ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 131 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) v2 ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( + v1 v2 ) ) ( + ( * v0 3 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( max v0 v1 ) ( + v2 v1 ) ) ( max ( max v0 v1 ) ( + v2 v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 32 ) ( + ( * v2 126 ) v3 ) ) ) ( + ( * v0 8 ) ( + ( * v1 32 ) ( + ( * v2 126 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( / v2 4 ) ( * v3 64 ) ) ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( / v2 4 ) ( * v3 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) 7 ) v2 ) ( min ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) 7 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 ( / ( + v1 v2 ) 4 ) ) ( + v0 ( / ( + v1 v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 501 ( * v0 63 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 63 ) v3 ) ) 5 ) ) ( min ( - 501 ( * v0 63 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 63 ) v3 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 3 ) 32 ) ) ( - v0 ( * ( / v1 3 ) 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 256 ) 252 ) ( / ( + v0 256 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 256 ) 250 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 256 ) 250 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -1028 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -1028 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 18 ( max ( - ( * v0 126 ) v1 ) -116 ) ) ( + ( min v2 116 ) 15 ) ) ( max ( - 18 ( max ( - ( * v0 126 ) v1 ) -116 ) ) ( + ( min v2 116 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 269 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 83 ) ( + v0 v1 ) ) 4 ) ( + v2 20 ) ) 68 ) ) ( * ( / v3 250 ) 64 ) ) ( + v4 89 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v3 250 ) 64 ) ) -69 ) ( + v4 21 ) ) 68 ) ) ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 269 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 83 ) ( + v0 v1 ) ) 4 ) ( + v2 20 ) ) 68 ) ) ( * ( / v3 250 ) 64 ) ) ( + v4 89 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v3 250 ) 64 ) ) -69 ) ( + v4 21 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 36 ) ( + ( * v1 18 ) v2 ) ) ( + ( * v0 36 ) ( + ( * v1 18 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) ( + v2 4 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) ( + v2 4 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 64 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 64 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + v1 v2 ) ) ( + ( * v0 8 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min v0 1976 ) 12 ) v1 ) ( min ( + ( min v0 1976 ) 12 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 3 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( * v1 4 ) -3 ) ) ( - v0 ( max ( * v1 4 ) -3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 64 ) ) ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( * ( / v0 4 ) 4 ) ( + v1 17 ) ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 12 ) ) ( + ( min ( + v3 v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 7 ) ) 5 ) ) ( max ( min ( max ( * ( / v0 4 ) 4 ) ( + v1 17 ) ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 12 ) ) ( + ( min ( + v3 v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 7 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + v0 v1 ) 1867 ) 1 ) v2 ) ( min ( + ( min ( + v0 v1 ) 1867 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 ( / v1 4 ) ) ( + v0 ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) 121 ) -3 ) ( max ( min ( + ( / v1 16 ) ( * v2 64 ) ) 126 ) 2 ) ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) ( - ( - ( max ( min ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) 121 ) -3 ) ( max ( min ( + ( / v1 16 ) ( * v2 64 ) ) 126 ) 2 ) ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= ( - ( + v3 v2 ) 1 ) ( - ( + v3 v2 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 16 ) ) ( + ( * v3 8 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 16 ) ) ( + ( * v3 8 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 285 ( * ( + ( * ( % v0 8 ) 9 ) ( + ( * v1 5 ) v2 ) ) 4 ) ) ( - 35 ( * ( + ( * v1 5 ) v2 ) 4 ) ) ) ( min ( - 285 ( * ( + ( * ( % v0 8 ) 9 ) ( + ( * v1 5 ) v2 ) ) 4 ) ) ( - 35 ( * ( + ( * v1 5 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1002 ( * v0 251 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 251 ) v3 ) ) 5 ) ) ( min ( - 1002 ( * v0 251 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 251 ) v3 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 15 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) 1 ) ( + ( min ( + ( * v1 252 ) 242 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) 1 ) ( + ( min ( + ( * v1 252 ) 242 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 4 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2499 ) 500 ) ) ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2499 ) 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2001 ) 2 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 64 ) 61 ) ( + v1 v2 ) ) 1933 ) -66 ) 65 ) ) ( min ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2001 ) 2 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 64 ) 61 ) ( + v1 v2 ) ) 1933 ) -66 ) 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) 4 ) ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 17 ( max ( * v0 3 ) 14 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-comm", "min-add-both", "add-comm", "sub-to-add", "min-mul-in-pos", "eq-swap", "Eq-a-b", "max-to-min", "Eq-min-c-neg", "mul-comm"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 81 ) 64 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 81 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 14 ) ( - ( + 0 ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 14 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 14 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 14 ) ) ) ( <= ( * v3 4 ) ( * v3 4 ) ) ) ( >= ( * v3 4 ) ( * v3 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 2 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( * v0 252 ) ( + ( * ( / ( max ( * v0 -252 ) -248 ) 4 ) -4 ) 3 ) ) ( min ( * v0 252 ) ( + ( * ( / ( max ( * v0 -252 ) -248 ) 4 ) -4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 126 ) ) 125 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 126 ) ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 1000 ) ( - v1 1000 ) ) ( min ( * v0 1000 ) ( - v1 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -64 ) 2 ) 2 ) ( * v0 -64 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + v0 11 ) ( + v1 v2 ) ) ( max ( + v0 11 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * ( min v2 14 ) 4 ) ( + ( / v1 4 ) ( * v3 252 ) ) ) 195 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * ( min v2 14 ) 4 ) ( + ( / v1 4 ) ( * v3 252 ) ) ) 195 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 10 ) ( - ( + ( - v0 10 ) ( + -16 17 ) ) 1 ) )", "end": "1"}, "rules": ["eq-x-x", "add-comm", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( <= ( + ( * v0 8 ) 8 ) ( * v0 8 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out"]}, {"expression": {"start": "( == ( * v0 8 ) ( - ( + ( * v0 8 ) 8 ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "mul-comm", "add-assoc", "add-fact-mul", "mul-zero", "add-const", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 255 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 255 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( > ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["gt-to-lt", "add-comm", "mul-assoc", "lt-swap-in", "sub-to-add", "add-assoc", "mul-zero", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( < ( + ( * v0 16 ) 15 ) ( * ( + v0 1 ) 16 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-in", "lt-x-x-sub-a", "add-dist-mul", "lt-swap-out", "sub-to-add", "add-assoc", "mul-comm"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 32 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 32 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( max ( + ( min ( - ( + ( + ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + v3 v4 ) ) v5 ) 5 ) v6 ) v7 ) ( + ( + ( + ( + ( * v1 4 ) v2 ) v4 ) v5 ) v8 ) ) ( + ( + ( min ( - ( + ( + ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + v3 v4 ) ) v5 ) 5 ) v6 ) ( - v7 1 ) ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "max-consts-and", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * v0 -64 ) 8 ) 8 ) ( * v0 -64 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) ( + 0 ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( + ( * v3 20 ) ( + ( * v4 32 ) ( * v5 3 ) ) ) ) 17 ) ( + ( min ( min ( / ( + ( + ( * v0 500 ) ( + v1 v2 ) ) 507 ) 8 ) ( + v6 31 ) ) ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * ( + ( / ( min ( + ( / ( + ( % ( + ( * v0 500 ) ( + v1 v7 ) ) 8 ) 507 ) 8 ) ( * v4 -32 ) ) 31 ) 4 ) ( * v4 8 ) ) 4 ) ) 3 ) ) ( * v5 3 ) ) ) ( min ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( + ( * v3 20 ) ( + ( * v4 32 ) ( * v5 3 ) ) ) ) 17 ) ( + ( min ( min ( / ( + ( + ( * v0 500 ) ( + v1 v2 ) ) 507 ) 8 ) ( + v6 31 ) ) ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * ( + ( / ( min ( + ( / ( + ( % ( + ( * v0 500 ) ( + v1 v7 ) ) 8 ) 507 ) 8 ) ( * v4 -32 ) ) 31 ) 4 ) ( * v4 8 ) ) 4 ) ) 3 ) ) ( * v5 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 7 ) ( - ( + ( - v0 7 ) 3 ) 1 ) )", "end": "0"}, "rules": ["add-fact-mul", "eq-swap", "add-const", "add-comm", "eq-comm", "mul-zero", "mul-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 16 ( max ( * ( % v0 3 ) 6 ) 10 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-add-both", "eq-swap", "eq-comm", "max-to-min", "Eq-a-b", "add-comm", "mul-comm", "min-consts-div-neg", "Eq-min-c-neg", "sub-to-add", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 4 ) -1 ) v1 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + 0 ( - v2 4 ) ) ( - ( + 0 v2 ) 1 ) ) ) ( >= ( + 3 ( + v2 1000 ) ) ( - ( + 3 ( + v2 1004 ) ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["add-comm", "eqgt-to-not-lt", "lt-x-x-sub-a", "lt-swap-in", "sub-to-add", "add-assoc", "and-comm"]}, {"expression": {"start": "( >= ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( - ( + ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( + ( * ( max ( min v0 12 ) -3 ) -4 ) 56 ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-zero", "max-min-switch", "add-comm", "min-mul-in-pos", "min-consts-or", "min-comm", "eqgt-to-not-lt", "add-fact-mul", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * 125 4 ) v0 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * 125 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "lt-to-zero", "add-zero", "add-comm"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( + ( * ( min v5 1 ) 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) 31 ) ) ( * v5 -32 ) ) ) ) ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( + ( * ( min v5 1 ) 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) 31 ) ) ( * v5 -32 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 57 ( max ( * v0 29 ) 28 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-min-c-neg", "min-consts-div-neg", "mul-assoc", "add-comm", "sub-to-add", "eq-comm", "mul-comm", "Eq-a-b", "min-add-both", "max-to-min", "eq-swap"]}, {"expression": {"start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + ( min v1 111 ) v2 ) -16 ) 17 ) ) 1 ) )", "end": "1"}, "rules": ["min-add-both", "add-comm", "min-comm", "min-sub-both", "and-min-to-lt", "lt-to-zero", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 483 ) 32 ) ( - ( + 0 ( / ( + ( % v3 8 ) 539 ) 32 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "lt-mul-div-cancel", "and-min-to-lt", "max-consts-or", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + 3 ( + v0 12 ) ) ) ) ( <= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 253 ) ( * v1 16 ) ) ( + ( min ( * v0 2 ) 253 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max ( min v0 19 ) ( + ( min 19 ( - ( + ( min v0 19 ) ( - 20 ( min v0 19 ) ) ) 1 ) ) 1 ) ) ( min v0 19 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "and-min-to-lt", "add-assoc", "max-consts-or", "and-comm", "eqlt-to-not-gt", "add-comm", "and-min-to-eqlt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( + -2 ( max ( - ( / v0 16 ) 5 ) ( / v0 16 ) ) ) ) ) ( >= ( + v1 3 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v2 ) 0 ) 60 ) ( - ( - ( + ( + ( * ( max -2 0 ) 4 ) 0 ) v2 ) 2 ) 63 ) ) ) ( >= ( - ( + ( + ( max ( * 2 4 ) -5 ) v2 ) 3 ) 60 ) ( - ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ( - ( - 6 2 ) 1 ) ) 63 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "max-consts-and", "add-zero", "lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 172 ) 16 ) 2 ) ) 7 ) ) ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 172 ) 16 ) 2 ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 126 ) ( + v1 9 ) ) ( min ( * v0 126 ) ( + v1 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 17 ) 8 ) ( - v2 5 ) ) ( min ( / ( - ( + v0 v1 ) 17 ) 8 ) ( - v2 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + ( * v0 1000 ) 1000 ) v1 ) v2 ) ( + ( + ( * v3 504 ) ( + ( * v0 1000 ) v2 ) ) 499 ) ) ( min ( + ( min ( + ( * v0 1000 ) 1000 ) v1 ) v2 ) ( + ( + ( * v3 504 ) ( + ( * v0 1000 ) v2 ) ) 499 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( * v0 128 ) ) ( + ( * v1 500 ) v2 ) ) ( - ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( * v0 128 ) ) ( + ( * v1 500 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 8 ) ( - v2 8 ) ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( * v1 8 ) ( - v2 8 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 504 ) ) ( + 494 255 ) ) ( min ( - v0 ( * v1 504 ) ) ( + 494 255 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 2 ) ) ( + ( min ( - ( / ( min ( + v3 v0 ) ( + ( + v4 v1 ) 35 ) ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 1 ) ) ( max ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 2 ) ) ( + ( min ( - ( / ( min ( + v3 v0 ) ( + ( + v4 v1 ) 35 ) ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 -4 ) v1 ) -9 ) ( * v2 -2 ) ) ( + ( min ( + ( * v0 -4 ) v1 ) -9 ) ( * v2 -2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 4 ) ( + v1 v2 ) ) 3000 ) 1001 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 4 ) ( + v1 v2 ) ) 3000 ) 1001 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( + ( * v0 8 ) v1 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 64 ) ) ) ( / ( + ( + v2 v3 ) 499 ) 4 ) ) ( - ( + ( + ( * v0 8 ) v1 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 64 ) ) ) ( / ( + ( + v2 v3 ) 499 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 997 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 997 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) 3 ) v2 ) ( min ( + ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) 3 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 16 ) v1 ) 1 ) v2 ) ( min ( - ( + ( * v0 16 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 4 ) ( * v0 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 64 ) v1 ) 55 ) v2 ) ( min ( + ( + ( * v0 64 ) v1 ) 55 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -996 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 125 ) ) ( + ( / ( - -996 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 10 ) 8 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 10 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -32 ) 16 ) 16 ) ( * v0 -32 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( + ( max ( min v0 2001 ) 2 ) ( * v1 8 ) ) ( + ( max ( min v0 2001 ) 2 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 8 ) 122 ) v1 ) ( min ( + ( / v0 8 ) 122 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 2 ) -3 ) ( * v1 126 ) ) ( + ( max ( * v0 2 ) -3 ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 68 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 68 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 510 ( max ( * ( + ( * v0 4 ) v1 ) 2 ) 507 ) ) ( - 4 ( max ( * ( min ( + ( * v0 4 ) v1 ) 2 ) 2 ) 1 ) ) ) ( max ( - 510 ( max ( * ( + ( * v0 4 ) v1 ) 2 ) 507 ) ) ( - 4 ( max ( * ( min ( + ( * v0 4 ) v1 ) 2 ) 2 ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 128 ) 382 ) ( * v1 4 ) ) ( + ( max ( * v0 128 ) 382 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 2 ) 3 ) ( + ( max ( / v3 3 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 2 ) 3 ) ( + ( max ( / v3 3 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( / v1 4 ) v2 ) ) ( + ( * v0 32 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 684 ) 667 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 684 ) 667 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 44 ( * ( max ( min v0 11 ) 10 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-comm", "add-comm", "eq-swap", "sub-to-add", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 2 ) ) ( + ( * v0 125 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( + ( max ( min v0 1991 ) -8 ) 8 ) v1 ) ( + ( + ( max ( min v0 1991 ) -8 ) v2 ) 66 ) ) ( min ( max ( + ( max ( min v0 1991 ) -8 ) 8 ) v1 ) ( + ( + ( max ( min v0 1991 ) -8 ) v2 ) 66 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / v0 16 ) 2 ) ( + ( + ( / v0 16 ) v1 ) 9 ) ) ( + ( min ( + ( / v0 16 ) v1 ) 118 ) 9 ) ) ( max ( min ( max ( / v0 16 ) 2 ) ( + ( + ( / v0 16 ) v1 ) 9 ) ) ( + ( min ( + ( / v0 16 ) v1 ) 118 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( min ( max ( / ( - 16 ( * v0 9 ) ) 2 ) ( - 8 ( / ( * v0 9 ) 2 ) ) ) 4 ) ( / ( - 68 ( max ( * v0 36 ) 33 ) ) 8 ) ) ( / ( max ( / ( - 68 ( max ( * v0 36 ) 33 ) ) 4 ) ( - 17 ( * ( max v0 1 ) 9 ) ) ) 2 ) ) ( / ( - 73 ( max ( * v0 36 ) 33 ) ) 8 ) ) ( max ( min ( max ( min ( max ( / ( - 16 ( * v0 9 ) ) 2 ) ( - 8 ( / ( * v0 9 ) 2 ) ) ) 4 ) ( / ( - 68 ( max ( * v0 36 ) 33 ) ) 8 ) ) ( / ( max ( / ( - 68 ( max ( * v0 36 ) 33 ) ) 4 ) ( - 17 ( * ( max v0 1 ) 9 ) ) ) 2 ) ) ( / ( - 73 ( max ( * v0 36 ) 33 ) ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 4 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 4 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 125 ) 125 ) ) 124 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 125 ) 125 ) ) 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 7 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 8 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 7 ) 8 ) v1 ) ( / v0 8 ) ) ( max ( min ( / ( + v0 7 ) 8 ) v1 ) ( / v0 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( min ( + ( * v0 -125 ) v1 ) 125 ) 4 ) 4 ) ( * v0 125 ) ) ( + ( * ( / ( min ( + ( * v0 -125 ) v1 ) 125 ) 4 ) 4 ) ( * v0 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 256 ) 251 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 256 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) ( - ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + ( + v3 v2 ) 7 ) 8 ) ( / ( + ( + v3 v2 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * v0 86 ) ( + ( / v1 8 ) ( * v2 29 ) ) ) ( + ( * v0 86 ) ( + ( / v1 8 ) ( * v2 29 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) -5 ) -13 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "Eq-a-b", "sub-to-add", "eq-comm", "mul-comm", "add-comm"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) 31 ) 15 ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) 31 ) 15 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 8 ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 128 ( * ( max ( min v0 2 ) 1 ) 64 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "Eq-a-b", "eq-comm", "mul-assoc", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( + ( / v1 250 ) 3 ) ) -64 ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) ( + ( * ( / v1 250 ) 64 ) ( * v5 24 ) ) ) ) ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( + ( / v1 250 ) 3 ) ) -64 ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) ( + ( * ( / v1 250 ) 64 ) ( * v5 24 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( / ( + ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) v1 ) 3 ) 4 ) ) ( / ( - ( min ( max ( min ( + v2 v3 ) 2000 ) 1 ) ( min ( min ( max ( min ( + v2 v3 ) 2000 ) 1 ) ( + ( + v4 v0 ) 3 ) ) ( + v4 v0 ) ) ) v1 ) 4 ) ) ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( / ( + ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) v1 ) 3 ) 4 ) ) ( / ( - ( min ( max ( min ( + v2 v3 ) 2000 ) 1 ) ( min ( min ( max ( min ( + v2 v3 ) 2000 ) 1 ) ( + ( + v4 v0 ) 3 ) ) ( + v4 v0 ) ) ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + v2 4 ) ) ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 16 ) ( - ( + ( - ( + v0 v1 ) 16 ) 143 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "lt-x-x-sub-a", "add-comm", "lt-swap-out", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 16 ) 2 ) 2 ) ( * v0 16 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 33 ( max ( * v0 12 ) 21 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-one", "mul-comm", "Eq-min-c-neg", "eq-comm", "Eq-a-b", "sub-to-add", "mul-assoc", "min-add-both", "eq-swap", "max-to-min"]}, {"expression": {"start": "( == ( * ( / ( * ( / v0 ( / ( + ( * v1 64 ) 224 ) 136 ) ) -70 ) 35 ) 35 ) ( * ( / v0 ( / ( + ( * v1 64 ) 224 ) 136 ) ) -70 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 8 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( + ( min v0 977 ) v1 ) 985 ) 4 ) ( * v2 2 ) ) ( + ( / ( - ( + ( min v0 977 ) v1 ) 985 ) 4 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-zero", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + v1 v2 ) ) ( + ( * v0 2 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( * v0 8 ) ( - ( + ( * v0 8 ) 8 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-fact-mul", "mul-assoc", "mul-zero", "add-assoc", "add-comm", "mul-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ( - ( + ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= v0 ( - ( - ( - v0 1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap-in", "lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( - ( * ( / v0 4 ) 4 ) 8 ) ( - ( + ( - ( * ( / v0 4 ) 4 ) 8 ) ( + ( * v1 4 ) 44 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "add-comm", "mul-assoc", "eq-swap", "sub-to-add", "eq-comm", "Eq-a-b", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 1 ( - ( + 0 ( / ( + ( % v0 8 ) 763 ) 256 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "max-consts-or", "lt-swap-out", "add-comm", "eqlt-to-not-gt", "lt-mul-div-cancel", "and-min-to-lt", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 27 ) 8 ) ( - ( + 0 ( / ( + ( % v0 4 ) 39 ) 8 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "lt-swap-out", "lt-const-mod", "lt-mul-div-cancel", "add-comm", "max-consts-or", "and-min-to-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 2 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 11 ) )", "end": "0"}, "rules": ["add-fact-mul", "add-comm", "add-const", "add-assoc", "lt-swap-in", "mul-one", "mul-comm", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( / v2 4 ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 32 ) ) ( + ( / v2 4 ) 32 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "min-comm", "min-add-both", "min-x-x-plus-a-pos", "add-zero", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "not-gt-to-eqlt", "min-x-x", "Eq-min-lt", "Eq-lt-min"]}, {"expression": {"start": "( == ( - ( max ( min v0 5 ) -58 ) 7 ) ( - ( + ( - ( max ( min v0 5 ) -58 ) 7 ) ( - 9 ( max ( min v0 5 ) -58 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eq-swap", "Eq-min-c-pos", "eq-comm", "add-const", "max-min-switch", "mul-zero", "sub-to-add", "add-comm", "mul-comm", "add-fact-mul", "min-add-both"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 968 ) v1 ) ) ( + ( min ( * v0 32 ) 968 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 968 ) 31 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 2 ) v0 ) 2 ) 0 ) ( * v0 2 ) ) ) ( >= ( + ( * ( + ( * 7 2 ) v0 ) 2 ) 3 ) ( + ( * v0 2 ) 31 ) ) ) ( <= ( - ( + v1 v2 ) 2 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( - ( + v1 v2 ) 2 ) ( - ( + v1 v2 ) 2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "not-gt-to-eqlt", "lt-to-zero", "add-comm", "lt-swap-in", "mul-comm", "eqgt-to-not-lt", "add-dist-mul", "sub-to-add"]}, {"expression": {"start": "( >= ( - -6 ( max v0 0 ) ) ( - ( + ( - -6 ( max v0 0 ) ) ( + ( max v0 0 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["or-comm", "eqgt-to-not-lt", "lt-swap", "max-consts-or", "lt-x-x-sub-a", "sub-to-add", "lt-swap-out", "add-dist-mul", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - ( + ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - 13 ( * ( min ( - v0 v1 ) 5 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-assoc", "eq-swap", "min-mul-in-pos", "add-comm", "eq-comm", "add-fact-mul", "min-mul-in-neg", "Eq-max-c-pos", "mul-zero", "mul-comm", "add-assoc", "min-add-both"]}, {"expression": {"start": "( < ( + ( / v0 4 ) 1 ) ( / ( + v0 1 ) 4 ) )", "end": "0"}, "rules": ["lt-const-mod-false", "add-denom-mul", "add-fact-mul", "mul-comm", "lt-mul-div-cancel", "lt-swap-out", "mod-minus-in", "add-const", "lt-swap-in", "add-comm", "mul-cancel-div", "add-assoc", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "lt-swap-in", "eqlt-to-not-gt", "sub-to-add", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + v2 ( * v3 128 ) ) 63 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + v2 ( * v3 128 ) ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( + ( * v1 2 ) v2 ) 4 ) ) ) ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( + ( * v1 2 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( * v1 2 ) v2 ) ) ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 85 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 85 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( min v0 8 ) 3 ) 4 ) ( / ( + ( min v0 8 ) 3 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 8 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -18 ) ( + ( * v2 16 ) 5 ) ) ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -18 ) ( + ( * v2 16 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + ( min ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( + v1 1 ) ) 1 ) ) ( min ( + ( * v0 2 ) v1 ) ( + ( min ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( + v1 1 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 162 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 162 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( + v2 9 ) ) ( min ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( + v2 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( + ( / v0 250 ) v1 ) 16 ) ( + ( * ( / v0 250 ) 16 ) v2 ) ) ( - ( * ( + ( / v0 250 ) v1 ) 16 ) ( + ( * ( / v0 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 63 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 63 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 269 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 269 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) ( + ( * ( + ( / v1 4 ) v2 ) 2 ) v3 ) ) ( + ( * v0 500 ) ( + ( * ( + ( / v1 4 ) v2 ) 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( * ( / v1 8 ) 2 ) ( + ( * ( + ( / v1 8 ) ( * v2 4 ) ) 2 ) 1 ) ) ( * v3 128 ) ) ) ( + ( * v0 4 ) ( + ( max ( * ( / v1 8 ) 2 ) ( + ( * ( + ( / v1 8 ) ( * v2 4 ) ) 2 ) 1 ) ) ( * v3 128 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 1000 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * ( / v1 4 ) 4 ) ) ( + ( / v0 4 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + -494 ( + ( * v1 4 ) ( + ( * v2 128 ) v0 ) ) ) ) ( - v0 ( + -494 ( + ( * v1 4 ) ( + ( * v2 128 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 667 ) 668 ) ( / ( + v0 667 ) 668 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 1008 ) 1007 ) 0 )", "end": "1"}, "rules": ["not-gt-to-eqlt", "Eq-lt-min", "eqgt-to-not-lt", "lt-swap-in", "min-mod-const-to-const"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 126 ) ) ( + ( / v0 8 ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ( min ( + ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) 89 ) ( + v1 v4 ) ) ) ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ( min ( + ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) 89 ) ( + v1 v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( min ( - v0 3 ) v1 ) 4 ) -7 ) 4 ) v2 ) ( min ( + ( max ( * ( min ( - v0 3 ) v1 ) 4 ) -7 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( - v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( - v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 64 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * v0 4 ) v1 ) ( + ( * ( + ( min v2 31 ) v0 ) 4 ) 4 ) ) ( min ( max ( * v0 4 ) v1 ) ( + ( * ( + ( min v2 31 ) v0 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + v2 1 ) ) ( min ( + ( * v0 2 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 503 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( + ( * ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( + ( + ( * v0 32 ) v1 ) v4 ) ) 4 ) 5 ) ) ( min ( - 503 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( + ( * ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( + ( + ( * v0 32 ) v1 ) v4 ) ) 4 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 124 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 124 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 505 ) 500 ) v1 ) ( / v0 500 ) ) ( max ( min ( / ( + v0 505 ) 500 ) v1 ) ( / v0 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 32 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 32 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( + ( * v0 4 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( max ( min v1 2001 ) 2 ) ) 5 ) 4 ) 0 ) ( + ( / v2 4 ) 2 ) ) ( min ( max ( / ( + ( - v0 ( max ( min v1 2001 ) 2 ) ) 5 ) 4 ) 0 ) ( + ( / v2 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 252 ) ) ( + ( / v0 4 ) ( * v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % ( + v0 v1 ) 250 ) 1999 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "min-mod-const-to-const", "Eq-lt-min", "not-gt-to-eqlt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( + ( * v0 64 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 668 ) ) ( + ( + ( min ( * v0 64 ) 162 ) v1 ) 506 ) ) ) ( - ( + ( * v0 64 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 668 ) ) ( + ( + ( min ( * v0 64 ) 162 ) v1 ) 506 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 3 ) ( * ( + v1 v2 ) 4 ) ) ( + ( min v0 3 ) ( * ( + v1 v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 9 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 9 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 63 ) v3 ) ) ( - 124 ( * v2 63 ) ) ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 63 ) v3 ) ) ( - 124 ( * v2 63 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 4 ) ) ( + v3 9 ) ) ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 4 ) ) ( + v3 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + v0 ( - 0 ( max ( min ( / ( + v1 v2 ) 8 ) 0 ) -125 ) ) ) 124 ) 8 ) 4 ) 4 ) ( * ( min ( + v0 ( - 0 ( max ( min ( / ( + v1 v2 ) 8 ) 0 ) -125 ) ) ) 124 ) 8 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( < ( + v0 v1 ) ( + ( + v0 1 ) v1 ) )", "end": "1"}, "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( + ( min ( / ( + v0 v1 ) 4 ) ( + v2 9 ) ) 1 ) ( / ( + v1 7 ) 4 ) ) ( / v3 4 ) ) -1 ) ( + v4 10 ) ) ( min ( max ( - ( max ( + ( min ( / ( + v0 v1 ) 4 ) ( + v2 9 ) ) 1 ) ( / ( + v1 7 ) 4 ) ) ( / v3 4 ) ) -1 ) ( + v4 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -252 ( % ( + ( min ( * v0 252 ) ( - v1 252 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -252 ( % ( + ( min ( * v0 252 ) ( - v1 252 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( min v1 1903 ) ) ( - v0 ( min v1 1903 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 224 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 224 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 7 ) ( - ( + ( - v0 7 ) 3 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt", "add-comm", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + v5 v6 ) ( + v5 v6 ) ) ) ( >= ( + v5 v6 ) ( + v5 v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm", "add-zero", "add-const", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 1 ) ) ) ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min v0 -11 ) -13 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "sub-to-add", "Eq-a-b", "eq-comm", "mul-comm", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 10 ) ) ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) 2 ) ) ) ( - ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 5 ) v2 ) ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 5 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + v0 9 ) 4 ) ( + ( max ( / ( - 0 ( / v1 8 ) ) 4 ) -2 ) 2 ) ) ( min ( / ( + v0 9 ) 4 ) ( + ( max ( / ( - 0 ( / v1 8 ) ) 4 ) -2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 504 ) 4 ) 4 ) ( * v0 504 ) )", "end": "1"}, "rules": ["sub-to-add", "div-consts-mul", "mul-zero", "add-comm", "add-const", "mul-comm", "add-fact-mul", "eq-x-y-0"]}, {"expression": {"start": "( == ( + ( max ( min v0 499 ) 0 ) ( * v1 15 ) ) ( + ( max ( min v0 499 ) 0 ) ( * v1 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 208 0 ) 1 ) ( - ( + 208 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( + ( + v0 v1 ) v2 ) 133 ) ( - ( + ( - ( + ( + v0 v1 ) v2 ) 133 ) 10 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-assoc", "sub-to-add", "add-dist-mul", "eq-x-y-0", "mul-zero", "eq-comm", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 253 ) 4 ) ( / ( + v2 253 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) 112 ) ( - ( + ( + ( + v0 v1 ) 112 ) 20 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-assoc", "eq-comm", "add-const", "add-fact-mul", "eq-swap", "add-comm", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 2 ) ( - ( + ( + ( * v1 4 ) 0 ) v2 ) 2 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 2 ) ( - ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) 2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 64 ) v1 ) ) 8 ) ( - ( - ( + 0 ( + ( * v0 64 ) v1 ) ) 5 ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( + ( * v0 -16 ) ( + ( / ( + v2 13 ) 4 ) ( * v0 16 ) ) ) 4 ) ( + ( * v0 64 ) v1 ) ) 4 ) ) 8 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + v2 9 ) 4 ) 4 ) ( + ( * v0 64 ) v1 ) ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( max ( - ( + ( * v3 16 ) v4 ) 8 ) v5 ) ( + -5 v5 ) ) ) ( >= v5 ( + ( - ( - 6 5 ) 1 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "0"}, "rules": ["max-consts-or", "or-to-and", "lt-x-x-sub-a", "add-comm", "lt-swap", "add-dist-mul", "lt-swap-out", "and-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v1 64 ) v2 ) ) 0 ) ( + ( * v1 64 ) v2 ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 64 ) v2 ) 60 ) ) 3 ) ( + ( + ( * v1 64 ) v2 ) 63 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( + v1 v2 ) 1882 ) -117 ) ) ( - v0 ( max ( min ( + v1 v2 ) 1882 ) -117 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - v0 4 ) ) ) ( >= ( - ( + ( + ( * 7 4 ) v0 ) 3 ) 4 ) ( + v0 27 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 13 13 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( / v2 250 ) ( / v2 250 ) ) ) ( >= ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / ( - ( + v3 v2 ) 1 ) 250 ) ) ) ( <= ( + v4 ( / v5 ( / ( + v6 95 ) 96 ) ) ) ( + ( / v5 ( / ( + v6 95 ) 96 ) ) v4 ) ) ) ( >= ( + v4 ( / v5 ( / ( + v6 95 ) 96 ) ) ) ( + ( / v5 ( / ( + v6 95 ) 96 ) ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x", "add-comm", "min-x-x", "Eq-lt-min", "lt-to-zero", "add-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 10 ) ) ( + -10 v0 ) ) ) ( >= ( + 3 ( + v0 63 ) ) ( + ( - ( - 13 10 ) 1 ) ( + v0 64 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "sub-to-add", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["min-x-x-plus-a-neg", "lt-swap-out", "eq-x-x", "eqgt-to-not-lt", "add-assoc", "Eq-lt-min", "eqlt-to-not-gt", "lt-to-zero", "not-gt-to-eqlt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( >= ( / ( + v0 10 ) 504 ) ( - ( + ( / ( + v0 10 ) 504 ) ( / ( + ( % ( + v0 10 ) 504 ) 503 ) 504 ) ) 1 ) )", "end": "1"}, "rules": ["mul-assoc", "eqgt-to-not-lt", "mul-comm", "add-dist-mul", "lt-swap-out", "mul-zero", "add-comm", "sub-to-add", "add-fact-mul", "lt-mul-div-cancel", "add-assoc", "lt-const-mod-false"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 119 ) ( - ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) 5 ) )", "end": "0"}, "rules": ["mul-zero", "sub-to-add", "lt-swap-out", "mul-comm", "add-comm", "mul-assoc", "add-assoc", "lt-swap-in", "add-fact-mul"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( min ( max ( * ( + v0 1 ) 2 ) -1 ) ( - ( * ( + v0 1 ) 2 ) 1 ) ) v1 ) )", "end": "0"}, "rules": ["lt-mul-div-cancel", "sub-to-add", "mul-assoc", "lt-to-zero", "min-comm", "lt-swap-in", "mul-zero", "and-min-to-lt", "lt-swap-out", "add-comm", "lt-mul-pos-cancel", "add-assoc"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 259 ) 252 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 259 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( + ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) ( * v2 6 ) ) 2 ) ( - ( * v3 2 ) 11 ) ) ( * v4 4 ) ) ( + ( min ( * ( + ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) ( * v2 6 ) ) 2 ) ( - ( * v3 2 ) 11 ) ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 253 ) ( * v1 4 ) ) ( + ( * v0 253 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) 1 ) ) 2 ) ( min ( * ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) 2 ) 253 ) ) ( - ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) 1 ) ) 2 ) ( min ( * ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) 2 ) 253 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 1000 ) v1 ) ( min ( * v0 1000 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min v0 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( - ( max ( min v0 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( / v1 5 ) 167 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( / v1 5 ) 167 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 6 ) ( + v0 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 270 ) 253 ) ( / ( + v0 270 ) 253 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 -2 ) ( + ( + ( * ( / ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) 5 ) 256 ) 256 ) ( * v1 500 ) ) v3 ) ) ( + ( min v0 -2 ) ( + ( + ( * ( / ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) 5 ) 256 ) 256 ) ( * v1 500 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( max ( - ( * v1 500 ) v2 ) -500 ) ( + ( * v3 4 ) ( + ( * v4 32 ) v0 ) ) ) ) ( - v0 ( + ( max ( - ( * v1 500 ) v2 ) -500 ) ( + ( * v3 4 ) ( + ( * v4 32 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 252 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 252 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( / ( + ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) 507 ) 8 ) ( + ( * v4 32 ) 31 ) ) ( * ( + ( * v4 8 ) v5 ) 4 ) ) ( - ( min ( / ( + ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) 507 ) 8 ) ( + ( * v4 32 ) 31 ) ) ( * ( + ( * v4 8 ) v5 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 500 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 500 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 249 ) 4 ) ( + v2 v3 ) ) ( - ( / ( + ( + v0 v1 ) 249 ) 4 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( * v2 3 ) ) ( / ( + v0 v1 ) 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( * v2 3 ) ) ( / ( + v0 v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * v2 4 ) 355 ) ) ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * v2 4 ) 355 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) 14 ) v2 ) ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) 14 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( + ( * v3 32 ) ( + ( * v4 4 ) ( + ( * v5 8 ) v1 ) ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( + ( * v3 32 ) ( + ( * v4 4 ) ( + ( * v5 8 ) v1 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( * v0 8 ) 1 ) ( + ( * v0 8 ) 13 ) ) ( + ( min ( * v0 8 ) 113 ) 13 ) ) ( max ( min ( max ( * v0 8 ) 1 ) ( + ( * v0 8 ) 13 ) ) ( + ( min ( * v0 8 ) 113 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 252 ) 248 ) ( * v1 4 ) ) ( + ( max ( * v0 252 ) 248 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 0 ) 33 ) 33 ) ( * v0 0 ) )", "end": "1"}, "rules": ["mul-zero"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 76 ) 63 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 76 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 498 ) ) ( min ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 498 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 504 ) v1 ) -494 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 504 ) v1 ) -494 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) v1 ) ( + v2 250 ) ) ( min ( + ( / v0 4 ) v1 ) ( + v2 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 62 ) ) ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * v0 672 ) 6 ) v1 ) ( min ( - ( * v0 672 ) 6 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 4 ) ( * ( + ( * v0 4 ) v1 ) 4 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 252 ) ) ( + ( + ( / v0 4 ) ( * v4 68 ) ) 57 ) ) ( * v4 -68 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 252 ) ) ( + ( + ( / v0 4 ) ( * v4 68 ) ) 57 ) ) ( * v4 -68 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 500 ) ( * v0 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1000 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 1000 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 8 ) ( - ( * ( / ( + ( % ( + v0 v1 ) 8 ) 539 ) 32 ) 4 ) 1 ) ) ( min ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 8 ) ( - ( * ( / ( + ( % ( + v0 v1 ) 8 ) 539 ) 32 ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( min ( * v3 12 ) 20 ) ( / v1 4 ) ) 11 ) ) ( * v3 -12 ) ) ( + ( / v1 4 ) v4 ) ) ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( min ( * v3 12 ) 20 ) ( / v1 4 ) ) 11 ) ) ( * v3 -12 ) ) ( + ( / v1 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 0 ) ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 3 ) ( + ( min ( * ( % v2 5 ) 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 -80 ) 4 ) 4 ) ( * v0 -80 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 8 ) ) ( + v1 8 ) ) ( + ( * v4 4 ) v1 ) ) ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 8 ) ) ( + v1 8 ) ) ( + ( * v4 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1999 ) 0 ) ( * v1 4 ) ) ( + ( max ( min v0 1999 ) 0 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) 2 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 128 ) 4 ) 4 ) ( * v0 128 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -1004 ) 4 ) 4 ) ( * v0 -1004 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1009 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 128 ) ) 5 ) ) ( min ( / ( - ( + v0 v1 ) 1009 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 128 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / ( + v0 v1 ) 4 ) 25 ) v2 ) ( min ( + ( / ( + v0 v1 ) 4 ) 25 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( * v1 12 ) ) ( + ( * v0 32 ) ( * v1 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "mul-comm", "max-to-min", "div-cancel-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( + 0 ( - v1 1 ) ) ( + 0 ( - v1 1 ) ) ) ) ( >= ( + 3 ( + v1 60 ) ) ( + ( - ( + 4 0 ) 1 ) ( + v1 60 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * ( + v3 v4 ) 1000 ) ( - v5 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * ( + v3 v4 ) 1000 ) ( - v5 1000 ) ) ) 1003 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * ( + v3 v4 ) 1000 ) ( - v5 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * ( + v3 v4 ) 1000 ) ( - v5 1000 ) ) ) 1003 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / v1 4 ) 4 ) ) ( + ( max ( min ( * v2 2 ) 497 ) -2 ) 1 ) ) ( min ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / v1 4 ) 4 ) ) ( + ( max ( min ( * v2 2 ) 497 ) -2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + 0 ( / ( + ( % v0 8 ) 167 ) 56 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "add-comm", "lt-mul-div-cancel", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 8 ) 3 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( min ( + ( * v0 8 ) 3 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( + ( * v0 63 ) v1 ) ) ( - 1999 ( + ( * v0 63 ) v1 ) ) )", "end": "0"}, "rules": ["add-const", "gt-to-lt", "lt-swap-in", "sub-to-add", "add-zero", "mul-comm", "add-fact-mul", "mul-zero", "add-comm"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 128 ) ( - v3 128 ) ) v0 ) 8 ) 135 ) 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 128 ) ( - v3 128 ) ) v0 ) 8 ) 135 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 91 ) ( + ( min ( * v1 46 ) 45 ) ( + ( min ( * v2 16 ) 30 ) v3 ) ) ) v4 ) ( + ( + ( * v0 91 ) ( + ( min ( * v1 46 ) 45 ) ( + ( min ( * v2 16 ) 30 ) ( + v3 1 ) ) ) ) v4 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( - ( min ( * ( + ( min v0 112 ) v1 ) 2 ) 721 ) 225 ) v2 ) ( min ( - ( min ( * ( + ( min v0 112 ) v1 ) 2 ) 721 ) 225 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 134 ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "add-assoc", "mul-zero", "add-comm", "eq-swap", "sub-to-add", "mul-comm", "mul-assoc", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( * v0 64 ) 64 ) 64 ) ( * v0 64 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * ( + ( * v2 7 ) 0 ) 4 ) 0 ) ( * v2 28 ) ) ) ( >= ( + ( * ( + ( * v2 7 ) 6 ) 4 ) 3 ) ( + ( * v2 28 ) 27 ) ) )", "end": "0"}, "rules": ["mul-assoc", "lt-mul-div-cancel", "lt-mul-pos-cancel", "lt-to-zero", "eqlt-to-not-gt", "add-dist-mul", "add-assoc", "mul-comm", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ) ) ( <= ( + ( * v5 4 ) v6 ) ( + ( * v5 4 ) v6 ) ) ) ( >= ( + ( * v5 4 ) v6 ) ( + ( * v5 4 ) v6 ) ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 119 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 119 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 680 ) 672 ) v1 ) ( / ( + v0 6 ) 672 ) ) ( max ( min ( / ( + v0 680 ) 672 ) v1 ) ( / ( + v0 6 ) 672 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) v3 ) ( + ( + ( * v1 4 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) v3 ) ( + ( + ( * v1 4 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["not-gt-to-eqlt", "eqgt-to-not-lt", "add-comm", "min-x-x", "Eq-lt-min", "eq-x-x", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 ( + 0 v0 ) ) ) ( >= ( + v0 37 ) ( + ( - ( + 38 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( - v0 127 ) ( - ( + ( - v0 127 ) 128 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-comm", "eq-swap", "sub-to-add", "add-const", "eq-x-y-0", "add-assoc", "add-fact-mul", "mul-zero"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( - ( * v1 16 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) ( + ( / v0 8 ) ( - ( * v1 16 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) 0 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) 3 ) ( + ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) 3 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-comm", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( * v4 4 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( min ( * v4 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["add-zero", "and-min-to-lt", "min-add-both", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) 108 ) 32 ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "eqlt-to-not-gt", "and-min-to-lt", "max-consts-or", "lt-swap-out", "lt-const-mod"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) 3 ) ( - ( - ( + ( - v0 1 ) v1 ) 2 ) 1 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a", "add-assoc", "lt-swap-out", "add-comm", "sub-to-add", "lt-swap-in"]}, {"expression": {"start": "( == ( max ( min v0 0 ) -62 ) ( - ( + ( max ( min v0 0 ) -62 ) ( - 5 ( max ( min v0 0 ) -62 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-swap", "add-const", "mul-comm", "add-assoc", "max-to-min", "min-add-both", "sub-to-add", "max-min-switch", "eq-comm", "add-fact-mul", "Eq-min-c-pos"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 64 ) 188 ) v1 ) ) ( + ( min ( * v0 64 ) 188 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 188 ) v1 ) 60 ) ) ( + ( + ( min ( * v0 64 ) 188 ) 63 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * ( + ( + ( / v0 4 ) ( * v1 4 ) ) 0 ) 4 ) 0 ) ( + ( * ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( / v0 4 ) ( * v1 4 ) ) 3 ) 4 ) 3 ) ( + ( * ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= ( * v2 2 ) ( + ( * v2 2 ) 0 ) ) ) ( >= ( + ( * v2 2 ) 1 ) ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-dist-mul", "mul-comm", "add-zero", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / ( + ( min v1 4 ) v2 ) 4 ) 4 ) 2003 ) ( + ( + v0 1 ) 8 ) ) ( + ( + v0 1 ) 4 ) ) 7 ) )", "end": "0"}, "rules": ["min-add-both", "min-sub-both", "and-min-to-lt", "min-comm", "add-comm", "lt-swap-out", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( == ( min ( - ( * v0 2 ) 2 ) v1 ) ( min ( - ( * v0 2 ) 2 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) 7 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) ) ( >= ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) ) ( <= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) ) ( >= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-swap-in", "add-assoc", "sub-to-add", "lt-to-zero", "add-dist-mul", "mul-comm", "mul-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( + v0 v1 ) ( + ( + ( - v0 1 ) v1 ) 1 ) )", "end": "1"}, "rules": ["lt-to-zero", "lt-swap-out", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < v0 ( min ( max ( - ( + ( * v1 16 ) v2 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["lt-swap-in", "min-comm", "sub-to-add", "min-sub-both", "lt-swap-out", "max-to-min", "add-comm", "and-min-to-lt", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( - ( min ( * ( min ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 64 ) ( + ( * ( max ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 8 ) 1 ) ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) ) 8 ) 193 ) ) 4 ) ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 256 ) 3 ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 64 ) ( + ( * ( max ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 8 ) 1 ) ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) ) 8 ) 193 ) ) 4 ) ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 256 ) 3 ) ) 20 ) -1 ) )", "end": "1"}, "rules": ["mul-assoc", "min-x-x-plus-a-pos", "div-consts-add", "eq-x-x", "add-dist-mul", "min-comm", "min-mul-in-pos", "sub-to-add", "min-ass", "mul-comm"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( + ( + v0 1 ) 8 ) v1 ) ( + ( + v0 1 ) 5 ) ) 7 ) )", "end": "0"}, "rules": ["add-comm", "and-lt-to-min", "min-sub-both", "lt-swap-out", "sub-to-add", "and-min-to-lt", "lt-swap-in", "min-comm"]}, {"expression": {"start": "( <= ( + ( - ( * ( max ( min v0 5 ) 2 ) 8 ) 44 ) ( - 48 ( * ( max ( min v0 5 ) 2 ) 8 ) ) ) ( - ( * ( max ( min v0 5 ) 2 ) 8 ) 44 ) )", "end": "0"}, "rules": ["add-dist-mul", "lt-min-term+neg-term", "lt-swap-in", "lt-swap", "min-consts-or", "mul-assoc", "min-comm", "eqlt-to-not-gt", "mul-comm", "min-add-both", "max-min-switch", "add-comm", "min-mul-in-pos", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 1 ) ) ) ( >= ( - ( + v0 263 ) 3 ) ( - ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-swap-in", "lt-swap-out", "sub-to-add", "add-const", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "mul-comm", "mul-zero", "eqlt-to-not-gt", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 15 ) ) ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - v0 v1 ) 4 ) ( * v2 -16 ) ) ( + ( / ( - v0 v1 ) 4 ) ( * v2 -16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max v0 127 ) ( + v0 128 ) ) ( + ( min v0 248 ) 128 ) ) ( max ( min ( max v0 127 ) ( + v0 128 ) ) ( + ( min v0 248 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 25 ) 17 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 25 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 28 ) ) ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( min v0 2 ) v1 ) 0 ) ( + ( max ( min v0 2 ) 0 ) v2 ) ) ( min ( max ( max ( min v0 2 ) v1 ) 0 ) ( + ( max ( min v0 2 ) 0 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 13 ) ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 13 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 19 ) 9 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 19 ) 9 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 16 ) -5 ) ( + ( * v1 32 ) v2 ) ) ( + ( max ( * v0 16 ) -5 ) ( + ( * v1 32 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( + ( * ( / ( + ( min ( + ( * v0 -500 ) v1 ) 500 ) 5 ) 256 ) 256 ) ( * v0 500 ) ) v2 ) ( + ( min ( - v1 ( * v0 500 ) ) -2 ) ( * ( min ( / ( + ( min ( - v1 ( * v0 500 ) ) 500 ) 5 ) 4 ) 63 ) 4 ) ) ) ( + ( + ( + ( * ( / ( + ( min ( + ( * v0 -500 ) v1 ) 500 ) 5 ) 256 ) 256 ) ( * v0 500 ) ) v2 ) ( + ( min ( - v1 ( * v0 500 ) ) -2 ) ( * ( min ( / ( + ( min ( - v1 ( * v0 500 ) ) 500 ) 5 ) 4 ) 63 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 252 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 252 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 32 ) 15 ) v2 ) 8 ) 8 ) ) 15 ) v3 ) ( min ( + ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 32 ) 15 ) v2 ) 8 ) 8 ) ) 15 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + ( + ( min ( * v3 224 ) 444 ) v1 ) 224 ) ) ( + ( * v3 224 ) ( + ( * v4 4 ) ( + ( * v5 64 ) v1 ) ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + ( + ( min ( * v3 224 ) 444 ) v1 ) 224 ) ) ( + ( * v3 224 ) ( + ( * v4 4 ) ( + ( * v5 64 ) v1 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) v2 ) ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( != ( + ( * v0 4 ) 5 ) 0 )", "end": "1"}, "rules": ["ineq-to-eq", "eq-swap", "Eq-a-b", "mul-comm"]}, {"expression": {"start": "( == ( + ( min ( + ( + ( / v0 8 ) ( * v1 128 ) ) 122 ) v2 ) ( * v3 44 ) ) ( + ( min ( + ( + ( / v0 8 ) ( * v1 128 ) ) 122 ) v2 ) ( * v3 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 9 ) 4 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 9 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( + ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( min ( / ( min ( + ( * v1 -16 ) v2 ) 15 ) 4 ) 1 ) 4 ) ) ) ) ( + ( / v0 8 ) ( + ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( min ( / ( min ( + ( * v1 -16 ) v2 ) 15 ) 4 ) 1 ) 4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 1003 ) ) ( - v0 ( * v1 1003 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 49 ) v1 ) ( min ( + v0 49 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -16 ) 8 ) 8 ) ( * v0 -16 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 4 ) ) ( - v0 ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + v1 v2 ) 8 ) ) ( - v0 ( / ( + v1 v2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 56 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 56 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) ( + ( * v2 4 ) 1 ) ) ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) ( + ( * v2 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min v0 500 ) ( min v0 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 8 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) ( + v2 2 ) ) ( + ( max v3 -1 ) 1 ) ) ( max ( min ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) ( + v2 2 ) ) ( + ( max v3 -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) 20 ) 17 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) 20 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( + ( * v1 63 ) v2 ) v3 ) ) ( - v0 ( + ( + ( * v1 63 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 4 ) ) ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 4 ) 4 ) 4 ) ( * v0 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( * v3 63 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( * v3 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 9 ) 4 ) ( / ( + v0 9 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + ( * ( / ( - ( + ( min v0 751 ) v1 ) 1 ) 250 ) 8 ) v2 ) 2 ) v3 ) 4 ) ( + ( * v4 8 ) 277 ) ) ( min ( * ( + ( * ( + ( * ( / ( - ( + ( min v0 751 ) v1 ) 1 ) 250 ) 8 ) v2 ) 2 ) v3 ) 4 ) ( + ( * v4 8 ) 277 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 46 ) 44 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 46 ) 44 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 135 ( * ( + ( * v0 9 ) v1 ) 4 ) ) ( + ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v0 9 ) v1 ) 4 ) v4 ) ) 88 ) ) ( min ( - 135 ( * ( + ( * v0 9 ) v1 ) 4 ) ) ( + ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v0 9 ) v1 ) 4 ) v4 ) ) 88 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 65 ) 64 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 65 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 67 ) ( + ( * v1 126 ) v2 ) ) 49 ) ( + ( min ( + ( * v1 126 ) 116 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 67 ) ( + ( * v1 126 ) v2 ) ) 49 ) ( + ( min ( + ( * v1 126 ) 116 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( / v1 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( min ( - ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v3 250 ) ) ( max ( min ( * ( / v2 8 ) 2 ) 509 ) 10 ) ) ( + ( min ( * v0 16 ) 234 ) 3 ) ) ) ( - ( * v0 16 ) ( min ( - ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v3 250 ) ) ( max ( min ( * ( / v2 8 ) 2 ) 509 ) 10 ) ) ( + ( min ( * v0 16 ) 234 ) 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) 2 ) v2 ) 4 ) 4 ) ( + ( * ( + ( * ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) 2 ) v2 ) 4 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 233 ) 32 ) ( - ( + 0 9 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-mul-div-cancel", "lt-const-mod", "and-min-to-lt", "max-consts-or"]}, {"expression": {"start": "( > ( - 0 ( + ( * v0 3 ) v1 ) ) ( - 1999 ( + ( * v0 3 ) v1 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "lt-swap-out", "gt-to-lt", "add-assoc", "sub-to-add", "mul-assoc", "add-comm", "mul-comm", "mul-zero"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 16 ) 28 ) ( + ( * v1 44 ) v2 ) ) ( + v2 112 ) ) ( min ( + ( min ( * v0 16 ) 28 ) ( + ( * v1 44 ) v2 ) ) ( + v2 112 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 31 ) ( * v1 8 ) ) ( + ( * v0 31 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 32 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) ( min ( + ( + ( * v0 32 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 500 ) 500 ) 500 ) ( * v0 500 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 2 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( * ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 86 ) ) 80 ) ) 2 ) 497 ) -2 ) ( max ( * ( min ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 86 ) ) 52 ) ) 248 ) 2 ) -3 ) ) ( * v3 15 ) ) ( - ( - ( max ( min ( * ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 86 ) ) 80 ) ) 2 ) 497 ) -2 ) ( max ( * ( min ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 86 ) ) 52 ) ) 248 ) 2 ) -3 ) ) ( * v3 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 85 ( * v0 29 ) ) ( + ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( * v0 29 ) v3 ) ) 5 ) ) ( min ( - 85 ( * v0 29 ) ) ( + ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( * v0 29 ) v3 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 139 ) 35 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 139 ) 35 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-zero", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 4 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 4 ) ) -3 ) ( + ( max ( min ( + ( * v0 4 ) v1 ) ( - ( min ( + v2 v1 ) 2003 ) 4 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 4 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 4 ) ) -3 ) ( + ( max ( min ( + ( * v0 4 ) v1 ) ( - ( min ( + v2 v1 ) 2003 ) 4 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 4 ) 500 ) ) ( - v0 ( * ( / v1 4 ) 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 9 ) v1 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * v0 9 ) v1 ) 4 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 500 ) ( - v2 500 ) ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( * v1 500 ) ( - v2 500 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( max ( + v0 3 ) v1 ) 4 ) ( + ( / v1 4 ) v2 ) ) ( min ( / ( max ( + v0 3 ) v1 ) 4 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 556 ) 501 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 556 ) 501 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 21 ) 9 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 21 ) 9 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 68 ) v1 ) 0 ) ( + ( + ( * v0 68 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 8 ) 25 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 25 ( max ( * v3 8 ) 25 ) ) 11 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "add-comm", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "add-denom-mul"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 127 ) 126 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 127 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -4 ) 2 ) 2 ) ( * v0 -4 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( - 11 ( max ( * ( % v0 3 ) 4 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-consts-and", "lt-swap", "lt-const-mod", "mul-assoc", "mul-comm", "eqgt-to-not-lt", "add-comm", "lt-mul-pos-cancel", "sub-to-add", "lt-swap-out", "mod-minus-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 68 ) v1 ) v2 ) ( + ( + ( * v0 68 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( / ( - -125 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -125 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / v0 ( / ( + v1 63 ) 64 ) ) -1000 ) 4 ) 4 ) ( * ( / v0 ( / ( + v1 63 ) 64 ) ) -1000 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -63 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 6 ) 8 ) ) 8 ) ( * v3 5 ) ) ( + ( / ( - -63 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 6 ) 8 ) ) 8 ) ( * v3 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( - v0 ( max ( min ( / v1 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( > ( - 0 ( * v0 32 ) ) ( - 63 ( * v0 32 ) ) )", "end": "1"}, "rules": ["mul-zero", "add-fact-mul", "gt-to-lt", "lt-swap-in", "mul-assoc", "sub-to-add", "mul-comm", "add-comm", "add-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 252 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 252 ) v1 ) ( + v2 1 ) ) 8 ) )", "end": "0"}, "rules": ["mul-one", "add-const", "mul-comm", "add-comm", "add-assoc", "mul-zero", "lt-swap-in", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( == ( - 0 ( max v0 0 ) ) ( - ( + ( - 0 ( max v0 0 ) ) ( + ( max v0 0 ) 3 ) ) 1 ) )", "end": "0"}, "rules": ["mul-one", "mul-comm", "mul-assoc", "eq-comm", "max-to-min", "eq-swap", "add-assoc", "add-fact-mul", "add-comm", "min-add-both", "sub-to-add", "Eq-min-c-pos"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / v1 4 ) 4 ) 1999 ) ( + ( + v0 1 ) 6 ) ) ( + ( + v0 1 ) 3 ) ) 5 ) )", "end": "0"}, "rules": ["and-lt-to-min", "lt-swap-out", "add-comm", "add-assoc", "and-min-to-lt", "and-over-or", "sub-to-add", "min-sub-both", "min-comm", "lt-swap-in"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 3 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-in", "lt-swap-out", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( min ( - ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v3 250 ) ) ( + ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( min ( * v1 16 ) 234 ) ) 3 ) ) ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( min ( - ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v3 250 ) ) ( + ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( min ( * v1 16 ) 234 ) ) 3 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 529 ) ( - ( + ( - ( * v0 4 ) 529 ) ( + ( * ( max ( * v1 31 ) 162 ) -4 ) 775 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-swap", "add-const", "Eq-a-b", "sub-to-add", "eq-comm", "add-fact-mul", "add-comm", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 3 ) 122 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 122 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["min-add-both", "add-comm", "lt-min-term-term+pos", "lt-min-term+cpos", "add-assoc"]}, {"expression": {"start": "( >= ( + ( max ( * ( - v0 v1 ) 16 ) -22 ) 22 ) ( - ( + ( + ( max ( * ( - v0 v1 ) 16 ) -22 ) 22 ) ( + ( max ( min ( * ( - v0 v1 ) 16 ) -22 ) -23 ) 23 ) ) 1 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "min-add-both", "lt-to-zero", "min-comm", "max-min-switch", "add-comm", "and-min-to-lt", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * ( + v0 v1 ) 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + ( + v0 1 ) v1 ) 8 ) 5 ) ) ( * ( + ( + v0 1 ) v1 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-assoc", "min-comm", "and-min-to-lt", "mul-zero", "sub-to-add", "add-comm", "mul-comm", "lt-swap-out", "mul-one", "lt-swap-in", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 4 ) 8 ) ( - ( + ( + ( * v0 4 ) 8 ) ( + ( * ( min ( - ( - ( max ( min ( * ( min ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( + ( / v2 8 ) ( * v3 86 ) ) 80 ) ) 2 ) 497 ) -2 ) ( max ( * ( min ( min ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( + ( / v2 8 ) ( * v3 86 ) ) 52 ) ) 248 ) 2 ) -3 ) ) ( * v4 15 ) ) 15 ) 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-swap", "add-comm", "sub-to-add", "add-assoc", "Eq-a-b", "mul-zero", "eq-comm", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 1530 ) 1108 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 1530 ) 1108 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( / ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 4 ) ( * v4 16 ) ) ) ( + ( * v0 8 ) ( + ( / ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 4 ) ( * v4 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 62 ) v2 ) ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 62 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 29 ) v2 ) ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 29 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 64 ) 188 ) ( * v1 4 ) ) ( + ( max ( * v0 64 ) 188 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 672 ) 442 ) ( + ( * v0 672 ) 442 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 5 ) ( * ( % v1 8 ) 9 ) ) ( + ( * v0 5 ) ( * ( % v1 8 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 45 ) 33 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 45 ) 33 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 4 ) 44 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v4 32 ) ) ( max ( min ( * ( / v3 8 ) 2 ) 509 ) 10 ) ) 19 ) v0 ) 4 ) 12 ) ) ( min ( max ( - ( * v0 4 ) 44 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v4 32 ) ) ( max ( min ( * ( / v3 8 ) 2 ) 509 ) 10 ) ) 19 ) v0 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 126 ) v1 ) -116 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 126 ) v1 ) -116 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) v2 ) ( min ( + ( * v0 4 ) v1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 3 ) 4 ) v3 ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 3 ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 4 ) v1 ) ( min ( + v0 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 4 ) ) ( - ( / v0 4 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 65 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 65 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( + ( min ( * v0 12 ) 20 ) ( * v1 2 ) ) ( + ( * ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) 14 ) ) ( + ( min ( * ( + ( * v0 6 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) ( - ( min ( + ( min ( * v0 12 ) 20 ) ( * v1 2 ) ) ( + ( * ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) 14 ) ) ( + ( min ( * ( + ( * v0 6 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ) ( min ( max ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 64 ) 188 ) ( / v0 4 ) ) 63 ) ) ( * v4 -64 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 64 ) 188 ) ( / v0 4 ) ) 63 ) ) ( * v4 -64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -136 ) 4 ) 4 ) ( * v0 -136 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 64 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( min v2 3 ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( / v1 8 ) ( * ( / v2 4 ) 4 ) ) ) ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( min v2 3 ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( / v1 8 ) ( * ( / v2 4 ) 4 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) ( * ( + ( * v2 251 ) ( + ( / v1 4 ) v3 ) ) 4 ) ) ( - ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) ( * ( + ( * v2 251 ) ( + ( / v1 4 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 32 ) ) ( / v2 4 ) ) ( - ( - v0 ( * v1 32 ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) 19 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) 19 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( - ( min ( + ( * v0 -500 ) v1 ) 500 ) 1 ) 32 ) 32 ) ( * v0 500 ) ) ( + ( * ( / ( - ( min ( + ( * v0 -500 ) v1 ) 500 ) 1 ) 32 ) 32 ) ( * v0 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( + ( max ( min ( * ( / ( + ( + v1 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) ) ( min ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( + ( max ( min ( * ( / ( + ( + v1 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) ( + ( max ( * v1 500 ) -5 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 492 ) ) ( min ( + ( * v0 8 ) ( + ( max ( * v1 500 ) -5 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 492 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 749 ) 250 ) ( / v1 250 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 749 ) 250 ) ( / v1 250 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 672 ) 6 ) ( - ( * v0 672 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 63 ( * v0 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "sub-to-add", "eq-comm", "mul-comm", "eq-swap", "Eq-a-b", "mul-assoc"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) 2 ) ( + ( * ( / ( - v0 19 ) 8 ) 2 ) v1 ) ) ( + ( * ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) 2 ) ( + ( * ( / ( - v0 19 ) 8 ) 2 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * v0 32 ) 32 ) ( * v0 32 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( max ( + ( + ( + ( min ( + ( * v0 126 ) 116 ) v1 ) v2 ) v3 ) 16 ) ( + ( * v0 126 ) v2 ) ) ( max ( + ( + ( + ( min ( + ( * v0 126 ) 116 ) v1 ) v2 ) v3 ) 16 ) ( + ( * v0 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( / v0 8 ) ( - ( * v1 16 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) v3 ) ( max ( + ( / v0 8 ) ( - ( * v1 16 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 269 ) 4 ) ( * ( / v2 250 ) 64 ) ) ( + ( min ( / ( min ( - ( + v0 v1 ) ( * ( / v2 250 ) 256 ) ) ( + ( * v3 256 ) 83 ) ) 4 ) ( + ( * v3 64 ) 20 ) ) 68 ) ) ( + ( * v3 64 ) 89 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v2 250 ) 64 ) ) -69 ) ( + ( * v3 64 ) 21 ) ) 68 ) ) ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 269 ) 4 ) ( * ( / v2 250 ) 64 ) ) ( + ( min ( / ( min ( - ( + v0 v1 ) ( * ( / v2 250 ) 256 ) ) ( + ( * v3 256 ) 83 ) ) 4 ) ( + ( * v3 64 ) 20 ) ) 68 ) ) ( + ( * v3 64 ) 89 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v2 250 ) 64 ) ) -69 ) ( + ( * v3 64 ) 21 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( / ( + ( - ( max v0 0 ) ( + ( * v1 504 ) v2 ) ) 13 ) 4 ) ( + ( / ( - 13 v2 ) 4 ) ( * v1 -126 ) ) ) 0 ) ( / ( + 241 21 ) 4 ) ) ( min ( max ( max ( / ( + ( - ( max v0 0 ) ( + ( * v1 504 ) v2 ) ) 13 ) 4 ) ( + ( / ( - 13 v2 ) 4 ) ( * v1 -126 ) ) ) 0 ) ( / ( + 241 21 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( min ( - 258 ( / v0 8 ) ) ( + v1 9 ) ) 4 ) v2 ) ( max ( / ( min ( - 258 ( / v0 8 ) ) ( + v1 9 ) ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 4 ) ( + v1 v2 ) ) ( min ( + v0 4 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) ( * v1 256 ) ) ( + ( * v0 500 ) ( * v1 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 1003 ) 6 ) ( - ( * v0 1003 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 4 ) ) ( + 0 ( - v0 4 ) ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( - ( + 4 0 ) 1 ) ( + v0 28 ) ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 3 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 2 ) 251 ) ) ( - ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 3 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) 7 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) 7 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 2 ) 509 ) 10 ) ( + ( max ( min ( * v1 2 ) 497 ) -2 ) 13 ) ) ( min ( max ( min ( * v0 2 ) 509 ) 10 ) ( + ( max ( min ( * v1 2 ) 497 ) -2 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( / ( + v0 v1 ) 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( / ( + v0 v1 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) v1 ) v2 ) ( min ( + ( / v0 4 ) v1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 2 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 10 v0 ) ( - 509 v0 ) )", "end": "0"}, "rules": ["add-const", "add-fact-mul", "add-assoc", "mul-zero", "add-comm", "lt-swap-in", "gt-to-lt", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( * v1 1000 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 128 ) ( + ( * v1 1000 ) v2 ) ) 128 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) ( + ( * v0 16 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( / ( + ( - 494 ( * v0 256 ) ) 21 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-comm", "sub-to-add", "add-comm", "add-assoc", "eq-swap", "mul-comm", "Eq-a-b", "div-consts-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 63 ) ( + ( + ( + ( * 0 4 ) 0 ) v1 ) v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 63 ) ( + ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) v0 ) ) ) ( <= ( - ( * v2 8 ) 1 ) ( + ( - ( + ( * v2 8 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( * v2 8 ) 67 ) ( + ( + ( + ( * v2 8 ) ( - ( + 64 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( * v3 8 ) ( + ( * v3 8 ) 0 ) ) ) ( >= ( + ( * v3 8 ) 7 ) ( + ( * v3 8 ) ( - ( + 8 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["add-zero", "add-comm", "lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 173 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 243 ) ( + v0 v1 ) ) 4 ) ( + v2 60 ) ) 44 ) ) ( * ( / v3 250 ) 64 ) ) ( + v4 105 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v3 250 ) 64 ) ) -45 ) ( + v4 61 ) ) 44 ) ) ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 173 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 243 ) ( + v0 v1 ) ) 4 ) ( + v2 60 ) ) 44 ) ) ( * ( / v3 250 ) 64 ) ) ( + v4 105 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v3 250 ) 64 ) ) -45 ) ( + v4 61 ) ) 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) 0 ) ( + ( * v0 4 ) 0 ) ) ) ( >= ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 0 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 15 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["add-comm", "add-dist-mul", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "mul-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 261 ) 252 ) ) -252 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 261 ) 252 ) ) -252 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( * ( min v2 7 ) 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 7 ) ) ( * v4 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( * v3 64 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 125 ) ) ) ) 4 ) 1999 ) ( * v5 4 ) ) ) ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( * ( min v2 7 ) 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) 7 ) ) ( * v4 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( * v3 64 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 125 ) ) ) ) 4 ) 1999 ) ( * v5 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) 15 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-dist-mul", "mul-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-zero", "mul-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * 0 4 ) v3 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * 7 4 ) v3 ) 3 ) ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 3 ) )", "end": "0"}, "rules": ["mul-one", "add-const", "add-fact-mul", "lt-swap-in", "add-assoc", "add-comm", "mul-comm", "sub-to-add", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 8 ( * ( % v0 5 ) 2 ) ) ( - ( + 0 2 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "min-sub-both", "lt-swap-out", "max-consts-or", "lt-swap", "eqlt-to-not-gt", "and-min-to-lt", "mod-minus-in", "mul-assoc", "sub-to-add", "lt-mul-pos-cancel"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 13 ) ( - ( + ( + ( * v0 32 ) v1 ) ( + v2 1 ) ) 25 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap-out", "add-fact-mul", "mul-assoc", "mul-zero", "sub-to-add", "lt-swap-in", "mul-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 7 ) ( + ( - ( + 8 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 24 ) ) ( + ( + ( * ( - ( + 7 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["min-x-x", "lt-to-zero", "eq-x-x", "Eq-lt-min", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( + ( * v1 4 ) v2 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )", "end": "0"}, "rules": ["and-lt-to-min", "min-comm", "and-min-to-lt", "sub-to-add", "lt-swap-in", "min-x-x", "lt-swap-out", "min-sub-both", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-const", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 8 ) ( - ( * ( + 0 v0 ) 8 ) 8 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) 6 ) 4 ) 3 ) 8 ) ( - ( * ( + ( - ( + 4 0 ) 1 ) v0 ) 8 ) 8 ) ) ) ( <= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( >= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "sub-to-add", "add-comm", "lt-to-zero", "lt-swap-out", "mul-assoc", "mul-comm", "add-fact-mul", "mul-zero", "eqgt-to-not-lt", "add-dist-mul"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-one", "mul-comm", "add-assoc", "add-comm", "lt-swap-out", "mul-zero", "add-const", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) 4 ) 4 ) ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) )", "end": "1"}, "rules": ["min-mul-in-pos", "div-cancel-mul", "min-ass", "mul-assoc", "min-comm", "eq-x-x", "add-comm", "min-x-x-plus-a-pos", "add-const", "mul-comm", "add-assoc"]}, {"expression": {"start": "( <= ( + ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) ( - 48 ( min ( * ( max v0 1 ) 16 ) 40 ) ) ) ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap-out", "min-consts-or", "mul-assoc", "add-assoc", "min-add-both", "min-sub-both", "lt-swap", "sub-to-add", "eqlt-to-not-gt", "min-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 8 ) ( + v2 4 ) ) ( + v2 0 ) ) ) ( >= ( + v2 4 ) ( + v2 4 ) ) ) ( <= ( + ( min ( * v3 64 ) 129 ) v4 ) ( + 0 ( + ( * v3 64 ) v4 ) ) ) ) ( >= ( + ( + ( min ( * v3 64 ) 61 ) v4 ) 67 ) ( + 4 ( + ( min ( + ( - ( + ( * ( / ( - 124 ( max ( * v3 64 ) 93 ) ) 4 ) 4 ) ( + ( * v3 64 ) v4 ) ) ( max ( * v3 64 ) 121 ) ) 93 ) ( + ( min ( * v3 64 ) 61 ) v4 ) ) 63 ) ) ) ) ( <= ( + ( + ( * 0 4 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 22 4 ) 89 ) 3 ) 88 ) )", "end": "0"}, "rules": ["add-zero", "or-comm", "lt-swap-out", "max-consts-or", "eqlt-to-not-gt", "lt-x-x-sub-a"]}, {"expression": {"start": "( >= ( max ( - ( + ( min v0 ( min v0 v1 ) ) ( * v2 8 ) ) 7 ) ( + ( max v3 ( max v3 v4 ) ) ( * v5 8 ) ) ) ( + ( + ( min v0 ( min v0 v1 ) ) ( * ( - v2 1 ) 8 ) ) 1 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "add-dist-mul", "mul-comm", "lt-to-zero", "max-consts-and", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( * v3 8 ) ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v3 2 ) ( max -2 0 ) ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) ( + ( * v3 8 ) 9 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v3 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ) )", "end": "1"}, "rules": ["mul-zero", "lt-swap-in", "mul-comm", "lt-swap", "eqgt-to-not-lt", "eqlt-to-not-gt", "mul-assoc", "sub-to-add", "add-comm", "add-dist-mul", "add-fact-mul", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 32 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 32 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 3 ) v4 ) v5 ) ( + ( + ( * v3 3 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 3 ) v4 ) v5 ) ( + ( + ( * v3 3 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "add-const", "add-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 63 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= ( * ( / v1 4 ) 4 ) ( * ( / v1 4 ) 4 ) ) ) ( >= ( + ( * ( / v1 4 ) 4 ) 128 ) ( * ( - ( + 33 ( / v1 4 ) ) 1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-dist-mul", "mul-comm", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < ( + v0 3 ) ( - ( min ( max ( / v1 16 ) ( + ( + v0 1 ) 5 ) ) ( + v0 1 ) ) 2 ) )", "end": "0"}, "rules": ["sub-to-add", "min-sub-both", "lt-swap-in", "and-min-to-lt", "min-add-both", "min-comm", "add-comm", "and-eqlt-to-max", "or-to-and", "max-consts-or", "add-assoc", "or-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "Eq-lt-min", "min-x-x", "lt-swap-out", "add-assoc", "min-x-x-plus-a-neg", "mul-comm", "not-gt-to-eqlt", "eq-x-x", "add-comm", "sub-to-add", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) 4 ) v3 ) 2 ) 0 ) ( + ( * ( + ( * ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) 4 ) v3 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) 4 ) v3 ) 4 ) 2 ) 3 ) ( + ( * ( + ( + ( * ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) 4 ) v3 ) 3 ) 2 ) 2 ) ) ) ( <= ( + 0 ( * v4 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v4 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 8 ( + ( * v4 2 ) 9 ) ) ( + ( * ( + ( + ( * 1 4 ) v4 ) 3 ) 2 ) 2 ) ) ) ( <= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) ) ( >= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) )", "end": "0"}, "rules": ["mul-assoc", "div-minus-in", "mod-one", "mul-cancel-div", "eqlt-to-not-gt", "mul-comm", "mod-two", "mul-one", "mul-zero", "lt-mul-pos-cancel", "lt-to-zero", "min-min-div-pos", "div-consts-add", "add-comm", "and-min-to-lt", "max-to-min", "and-min-to-eqlt", "eq-swap", "lt-swap", "eqgt-to-not-lt", "add-fact-mul", "lt-swap-in", "min-add-both", "sub-to-add", "add-denom-div", "div-separate", "mod-consts", "div-minus-down", "min-sub-both", "add-assoc", "add-dist-mul", "eq-x-y-0", "lt-mul-div-cancel", "min-x-x", "Eq-lt-min", "add-zero"]}, {"expression": {"start": "( == ( + ( / ( - v0 v1 ) 4 ) ( * v2 -3 ) ) ( + ( / ( - v0 v1 ) 4 ) ( * v2 -3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 500 ) ) v2 ) ( min ( - v0 ( * v1 500 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 105 ) ) ( min ( * ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 105 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 136 ) 130 ) ) 130 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 136 ) 130 ) ) 130 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 273 ) 256 ) ( / ( + v0 273 ) 256 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 12 ) 118 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( min ( * v0 12 ) 118 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 504 ) ) ( - v0 ( * v1 504 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * v0 4 ) -3 ) ( + v1 492 ) ) ( min ( max ( * v0 4 ) -3 ) ( + v1 492 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) 4 ) 2 ) v2 ) ( min ( + ( / ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) 4 ) 2 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 1000 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 1000 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( min ( * v2 8 ) 13 ) ( + ( / v1 8 ) ( * v3 16 ) ) ) 2 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( min ( * v2 8 ) 13 ) ( + ( / v1 8 ) ( * v3 16 ) ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 63 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 511 ) 504 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 511 ) 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -7 ( max ( min ( - ( - ( - ( - ( + v0 v1 ) ( * v2 668 ) ) ( * v3 64 ) ) ( * v4 224 ) ) v1 ) 58 ) -5 ) ) ( - ( max ( min ( - ( + ( * v3 64 ) v1 ) ( min ( - ( - ( + v0 v1 ) ( * v2 668 ) ) ( * v4 224 ) ) ( + v1 224 ) ) ) 5 ) -58 ) 7 ) ) ( max ( - -7 ( max ( min ( - ( - ( - ( - ( + v0 v1 ) ( * v2 668 ) ) ( * v3 64 ) ) ( * v4 224 ) ) v1 ) 58 ) -5 ) ) ( - ( max ( min ( - ( + ( * v3 64 ) v1 ) ( min ( - ( - ( + v0 v1 ) ( * v2 668 ) ) ( * v4 224 ) ) ( + v1 224 ) ) ) 5 ) -58 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) ( + ( * v0 3 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 64 ) 188 ) ( + ( min ( * v1 252 ) ( - v2 252 ) ) v3 ) ) ( + ( min ( * v0 64 ) 188 ) ( + ( min ( * v1 252 ) ( - v2 252 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 261 ( max ( * v0 4 ) 257 ) ) ( + v1 3 ) ) ( min ( - 261 ( max ( * v0 4 ) 257 ) ) ( + v1 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -3 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 16 ) ( + v2 v3 ) ) 12 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -3 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 16 ) ( + v2 v3 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 18 18 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( min ( * v0 72 ) 68 ) ( + v1 v2 ) ) ( + ( min ( * v0 72 ) 68 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 32 ) 2 ) 2 ) ( * v0 32 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) 1 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 16 ) ( + ( * v1 252 ) v2 ) ) 1 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 16 ) ( * v1 64 ) ) ( + ( / v0 16 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( min ( * v0 252 ) ( + ( * ( / ( max ( * v0 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) ( * ( + ( * v0 63 ) v1 ) 4 ) ) ( - ( min ( min ( * v0 252 ) ( + ( * ( / ( max ( * v0 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) ( * ( + ( * v0 63 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) 1 ) ( + ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( / v0 8 ) ( - ( * v1 128 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) v3 ) ( max ( + ( / v0 8 ) ( - ( * v1 128 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -10 ( max ( min ( - ( - ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) 4 ) ( * v3 65 ) ) ( * ( / v1 4 ) 4 ) ) 59 ) -5 ) ) ( - ( max ( min v4 5 ) -59 ) 10 ) ) ( max ( - -10 ( max ( min ( - ( - ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) 4 ) ( * v3 65 ) ) ( * ( / v1 4 ) 4 ) ) 59 ) -5 ) ) ( - ( max ( min v4 5 ) -59 ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 68 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 68 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 33 ) ( * ( / v1 8 ) 2 ) ) ( + ( * v0 33 ) ( * ( / v1 8 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 3 ) v1 ) ( + v2 8 ) ) ( min ( + ( * v0 3 ) v1 ) ( + v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 12 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 32 ) ) ( + ( / v0 8 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 1008 ) ) ( + ( * v3 504 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 1008 ) ) ( + ( * v3 504 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 128 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 128 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + ( * v0 -1000 ) v1 ) 900 ) ( * ( / ( - ( min ( + ( * v0 1000 ) 1000 ) v1 ) 897 ) 4 ) 4 ) ) v2 ) ( min ( + ( min ( + ( * v0 -1000 ) v1 ) 900 ) ( * ( / ( - ( min ( + ( * v0 1000 ) 1000 ) v1 ) 897 ) 4 ) 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 251 ) v3 ) ) ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 251 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + v0 v1 ) 15 ) v2 ) ( min ( + ( + v0 v1 ) 15 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( min ( min ( - ( * v0 4 ) 12 ) v1 ) ( - ( max ( min ( + ( * ( / ( + ( - ( * v0 4 ) v1 ) 19 ) 16 ) 16 ) v1 ) ( + ( * v0 4 ) 4 ) ) 1 ) 252 ) ) ( min ( min ( - ( * v0 4 ) 12 ) v1 ) ( - ( max ( min ( + ( * ( / ( + ( - ( * v0 4 ) v1 ) 19 ) 16 ) 16 ) v1 ) ( + ( * v0 4 ) 4 ) ) 1 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 3 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 3 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 125 ) ) -127 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2126 ) 125 ) ) 2 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 125 ) ) -127 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2126 ) 125 ) ) 2 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 394 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 394 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 125 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["mul-comm", "sub-to-add", "eq-x-y-0", "add-comm", "mul-assoc", "mul-zero", "add-fact-mul", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 7 ( max ( * v0 4 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-mul-in-pos", "eq-comm", "Eq-a-b", "sub-to-add", "add-comm", "eq-swap", "mul-assoc", "Eq-min-c-neg", "mul-comm", "min-add-both", "max-to-min"]}, {"expression": {"start": "( == ( + ( * v0 1000 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 1000 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) 1 ) 2 ) ( + ( max ( / v3 2 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) 1 ) 2 ) ( + ( max ( / v3 2 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 33 ) 32 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 33 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( + v0 v1 ) 8 ) 67 ) ( - ( + ( - ( * ( + v0 v1 ) 8 ) 67 ) 9 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "mul-comm", "mul-assoc", "add-comm", "eq-swap", "mul-zero", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( == ( / ( + v0 30 ) 16 ) ( / ( + v0 30 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) v2 ) 7 ) ( - ( + ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) ( + v2 1 ) ) 7 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 35 ( max ( * v0 18 ) 17 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-mul-in-pos", "min-add-both", "Eq-a-b", "Eq-min-c-neg", "mul-assoc", "eq-swap", "max-to-min", "add-comm", "sub-to-add", "eq-comm", "mul-comm"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 128 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 2 ) ( - ( + ( - ( + v0 v1 ) 2 ) 69 ) 1 ) )", "end": "0"}, "rules": ["add-fact-mul", "add-comm", "eq-comm", "eq-swap", "mul-comm", "sub-to-add", "mul-zero", "mul-assoc", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min v0 -1 ) -3 ) 2 ) 6 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-a-b", "add-comm", "sub-to-add", "eq-swap", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 168 ) 332 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) ) ) ( >= ( + ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) 13 ) ( + ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) 13 ) v7 ) ) ) ( <= v8 v8 ) ) ( >= v8 v8 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 8 ) 117 ) v2 ) ( + ( + ( min ( * v1 8 ) 117 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) 7 ) ( + ( + ( min ( * v1 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 1 ) )", "end": "0"}, "rules": ["add-const", "lt-swap-in", "mul-comm", "lt-swap-out", "add-assoc", "mul-zero", "sub-to-add", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( >= ( + ( * ( + v0 v1 ) 2 ) v2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 2 ) v2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x", "sub-to-add", "Eq-lt-min", "add-dist-mul", "min-x-x-plus-a-neg", "eqgt-to-not-lt", "add-comm", "add-assoc", "not-gt-to-eqlt", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( + ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "0"}, "rules": ["lt-swap-in", "sub-to-add", "add-comm", "eqgt-to-not-lt", "add-assoc", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["add-fact-mul", "mul-comm", "add-const", "sub-to-add", "eq-mul-x-y-0", "max-to-min", "eq-x-y-0"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) 64 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-one", "add-comm", "add-assoc", "add-const", "sub-to-add", "mul-comm", "mul-zero", "add-fact-mul"]}, {"expression": {"start": "( == ( max ( min v0 8 ) ( + ( min ( - ( - ( - ( + v1 v2 ) ( * v3 1000 ) ) ( * v4 8 ) ) v2 ) 8 ) 3 ) ) ( max ( min v0 8 ) ( + ( min ( - ( - ( - ( + v1 v2 ) ( * v3 1000 ) ) ( * v4 8 ) ) v2 ) 8 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) 2 ) ( + ( * ( + v0 1 ) 2 ) v1 ) )", "end": "0"}, "rules": ["mul-comm", "add-assoc", "lt-to-zero", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( >= ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) 81 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-x-x-sub-a", "add-comm", "sub-to-add", "lt-swap-out", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 7 ) )", "end": "0"}, "rules": ["add-fact-mul", "add-const", "add-comm", "lt-swap-in", "sub-to-add", "mul-one", "add-assoc", "mul-comm", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( >= ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) ( - ( + ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) 9 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "eqgt-to-not-lt", "sub-to-add", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( - 35 ( max ( * ( % v0 4 ) 9 ) 26 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-consts-and", "lt-swap-out", "mul-assoc", "eqgt-to-not-lt", "lt-mul-pos-cancel", "sub-to-add", "add-comm", "mul-comm", "lt-const-mod", "lt-swap", "mod-minus-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( >= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( <= v9 v9 ) ) ( >= v9 v9 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "add-zero", "add-comm", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( - 250 ( * v0 16 ) ) ( + ( - v1 ( + ( * v0 16 ) ( * v2 251 ) ) ) 4 ) ) ( min ( - 250 ( * v0 16 ) ) ( + ( - v1 ( + ( * v0 16 ) ( * v2 251 ) ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( * ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( max ( min v0 0 ) -15 ) ( - ( + ( max ( min v0 0 ) -15 ) ( - 5 ( max ( min v0 0 ) -15 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "max-to-min", "Eq-min-c-pos", "add-const", "eq-comm", "add-comm", "min-add-both", "eq-swap", "max-min-switch", "add-fact-mul", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 v0 ) ( + -5 v0 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v0 ) ( + ( - ( - 6 5 ) 1 ) v0 ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( * v3 4 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( min ( * v3 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["and-min-to-lt", "eqlt-to-not-gt", "add-zero", "min-add-both", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( * ( min v0 253 ) 8 ) 36 ) ( - ( + ( - ( * ( min v0 253 ) 8 ) 36 ) ( + ( * v1 8 ) 16 ) ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "mul-comm", "add-comm", "eq-swap", "add-fact-mul", "sub-to-add", "eq-x-y-0", "mul-assoc", "add-dist-mul", "add-assoc", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 0 ( + ( * v0 4 ) v1 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 3 ( + ( + ( * v0 4 ) v1 ) 8 ) ) 2 ) ) ) ( <= ( - v2 2 ) ( + ( + -5 v2 ) 3 ) ) ) ( >= ( + v2 127 ) ( + ( + 124 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-comm", "eqlt-to-not-gt", "lt-swap-out", "add-assoc", "sub-to-add", "lt-x-x-sub-a", "add-zero"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) 4 ) 4 ) ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) )", "end": "1"}, "rules": ["mul-assoc", "min-mul-in-pos", "add-denom-div", "eq-x-x", "add-zero", "add-comm", "min-div-in-pos", "min-comm", "add-dist-mul", "div-minus-out", "min-x-x-plus-a-pos", "mul-comm", "add-assoc", "min-ass"]}, {"expression": {"start": "( == ( * ( / ( * ( - ( min ( * ( min ( + ( * v2 64 ) ( * ( / v1 8 ) 64 ) ) ( + ( * v3 8 ) 193 ) ) 4 ) ( + ( * v2 256 ) ( + ( * ( / v1 8 ) 256 ) 3 ) ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( + ( * v2 64 ) ( * ( / v1 8 ) 64 ) ) ( + ( * v3 8 ) 193 ) ) 4 ) ( + ( * v2 256 ) ( + ( * ( / v1 8 ) 256 ) 3 ) ) ) 20 ) -1 ) )", "end": "1"}, "rules": ["min-comm", "min-ass", "min-mul-in-pos", "eq-x-x", "sub-to-add", "add-assoc", "mul-comm", "div-consts-add", "min-x-x-plus-a-pos", "add-dist-mul", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 503 ) 4 ) ( / ( + v2 503 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "lt-swap-out", "add-comm", "lt-to-zero", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 8 ) ( * v1 2 ) ) ( - ( / ( - v0 1 ) 8 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 71 ) 8 ) ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 71 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( * ( / v0 4 ) 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 4 ) ) ( min ( max ( max ( * ( / v0 4 ) 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * ( / ( - v1 19 ) 8 ) 16 ) v2 ) ) ( - ( * v0 2 ) ( + ( * ( / ( - v1 19 ) 8 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( * v3 32 ) ( + ( / v1 4 ) ( * v4 64 ) ) ) 31 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) ( - ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( * v3 32 ) ( + ( / v1 4 ) ( * v4 64 ) ) ) 31 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) ( min ( + ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - ( + ( / v1 4 ) ( * v2 252 ) ) 1 ) ) 11 ) ( + ( / v1 4 ) ( * v2 252 ) ) ) ) ( - ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) ( min ( + ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - ( + ( / v1 4 ) ( * v2 252 ) ) 1 ) ) 11 ) ( + ( / v1 4 ) ( * v2 252 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 63 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 63 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) v2 ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) v2 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) ( + ( * ( + ( / ( + ( min ( + ( min ( + ( * v0 -252 ) v1 ) 242 ) ( * v2 -16 ) ) 1 ) 21 ) 4 ) ( * v2 4 ) ) 4 ) v3 ) ) ( + v4 18 ) ) ( min ( + ( * v0 252 ) ( + ( * ( + ( / ( + ( min ( + ( min ( + ( * v0 -252 ) v1 ) 242 ) ( * v2 -16 ) ) 1 ) 21 ) 4 ) ( * v2 4 ) ) 4 ) v3 ) ) ( + v4 18 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 125 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 125 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( min v1 1999 ) ) ( - v0 ( min v1 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + v0 v1 ) 51 ) v2 ) ( max ( + ( + v0 v1 ) 51 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( * v0 4 ) -3 ) 28 ) v1 ) ( min ( - ( max ( * v0 4 ) -3 ) 28 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + v0 11 ) ( + ( min ( * v1 63 ) 62 ) ( + v2 v3 ) ) ) ( max ( + v0 11 ) ( + ( min ( * v1 63 ) 62 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( min ( + ( * ( / v1 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v2 -16 ) v3 ) 15 ) 4 ) 5 ) 33 ) 33 ) ( * v2 64 ) ) ) ( + ( * v0 4 ) 5 ) ) ( min ( * ( min ( - ( - ( / ( + ( + v4 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( / v1 4 ) ) 15 ) 4 ) 27 ) ) ) ( min ( * v0 4 ) ( + ( min ( + ( * ( / v1 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v2 -16 ) v3 ) 15 ) 4 ) 5 ) 33 ) 33 ) ( * v2 64 ) ) ) ( + ( * v0 4 ) 5 ) ) ( min ( * ( min ( - ( - ( / ( + ( + v4 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( / v1 4 ) ) 15 ) 4 ) 27 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 458 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 458 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) ) ( + ( * v0 4 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * v1 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * v1 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= ( - ( + v3 v2 ) 1 ) ( - ( + v3 v2 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-assoc", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( max ( min v0 509 ) 10 ) ( * v1 4 ) ) ( + ( max ( min v0 509 ) 10 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( min ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) 10 ) 8 ) 30 ) ( + ( * ( min ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) 10 ) 8 ) 30 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) ( + v1 22 ) ) ( min ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) ( + v1 22 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) 507 ) 8 ) ( * v4 4 ) ) ( - ( / ( + ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) 507 ) 8 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( - ( * v1 32 ) ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( - ( * v1 32 ) ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2001 ) 2 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2001 ) 2 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 24 ) 18 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 24 ) 18 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 16 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( + ( * v0 2 ) v1 ) 0 ) ( + ( + ( * v0 2 ) v1 ) 2 ) ) ( min ( max ( + ( * v0 2 ) v1 ) 0 ) ( + ( + ( * v0 2 ) v1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 264 ) 251 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 264 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( max ( * v2 4 ) -15 ) 12 ) ) ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( max ( * v2 4 ) -15 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 507 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) ( min ( / ( - 507 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 500 ) ) ( + v1 500 ) ) ( + ( * v3 4 ) ( + ( * v4 256 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 500 ) ) ( + v1 500 ) ) ( + ( * v3 4 ) ( + ( * v4 256 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( min ( * ( / ( + v1 v2 ) 4 ) 4 ) 1999 ) ( * v3 4 ) ) ) ( + ( * v0 64 ) ( + ( min ( * ( / ( + v1 v2 ) 4 ) 4 ) 1999 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( / v1 4 ) ) 15 ) 7 ) v4 ) ( min ( - ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( / v1 4 ) ) 15 ) 7 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 136 ) 130 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 136 ) 130 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1000 ) 1000 ) v1 ) ( min ( + ( * v0 1000 ) 1000 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 29 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + v2 1 ) ) ( + ( min ( + ( - ( / ( min ( * ( min ( + ( * v3 2 ) v4 ) 251 ) 8 ) ( + ( + v5 v0 ) 12 ) ) 4 ) ( * v1 2 ) ) 1 ) v2 ) 1 ) ) ( max ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + v2 1 ) ) ( + ( min ( + ( - ( / ( min ( * ( min ( + ( * v3 2 ) v4 ) 251 ) 8 ) ( + ( + v5 v0 ) 12 ) ) 4 ) ( * v1 2 ) ) 1 ) v2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 44 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 44 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( + ( * v0 8 ) v1 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( min ( * ( + ( * v0 8 ) v1 ) 4 ) 1999 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 4 ) 6 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 4 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 2 ) ) ( + ( / v0 4 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1979 ) -20 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1979 ) -20 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ( + ( * v0 64 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 3 ) 4 ) ( max ( min ( * v1 2 ) 513 ) 14 ) ) -15 ) ( + v2 3 ) ) ( min ( max ( - ( / ( + v0 3 ) 4 ) ( max ( min ( * v1 2 ) 513 ) 14 ) ) -15 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -144 ) 4 ) 4 ) ( * v0 -144 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) ( - 31 ( * ( + ( * v2 3 ) v3 ) 4 ) ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) ( - 31 ( * ( + ( * v2 3 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 504 ) 503 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "min-mod-const-to-const", "Eq-lt-min", "eqgt-to-not-lt", "not-gt-to-eqlt"]}, {"expression": {"start": "( == ( min ( - v0 ( / v1 4 ) ) v2 ) ( min ( - v0 ( / v1 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 15 ) 4 ) ) ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 15 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 26 ( * ( max ( min v0 2 ) 1 ) 13 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-swap", "add-comm", "mul-assoc", "Eq-a-b", "eq-comm", "mul-comm"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 257 ) 255 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 257 ) 255 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( - ( * ( + ( / v1 4 ) ( + ( * v2 64 ) ( + ( min ( min ( - ( + ( min ( + ( + ( / v1 4 ) ( * v2 64 ) ) 63 ) ( + ( * v3 -128 ) v4 ) ) ( * v2 -64 ) ) ( / v1 4 ) ) ( + ( * v2 -64 ) ( + ( * v3 -128 ) v5 ) ) ) 63 ) ( * v3 128 ) ) ) ) 4 ) ( max ( * ( max ( + ( * v2 64 ) ( + ( * v3 128 ) ( - ( / v1 4 ) v4 ) ) ) -63 ) 4 ) 2 ) ) 4 ) ) ( min ( * v0 4 ) ( + ( - ( * ( + ( / v1 4 ) ( + ( * v2 64 ) ( + ( min ( min ( - ( + ( min ( + ( + ( / v1 4 ) ( * v2 64 ) ) 63 ) ( + ( * v3 -128 ) v4 ) ) ( * v2 -64 ) ) ( / v1 4 ) ) ( + ( * v2 -64 ) ( + ( * v3 -128 ) v5 ) ) ) 63 ) ( * v3 128 ) ) ) ) 4 ) ( max ( * ( max ( + ( * v2 64 ) ( + ( * v3 128 ) ( - ( / v1 4 ) v4 ) ) ) -63 ) 4 ) 2 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) 0 ) ( * v3 32 ) ) ( + ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) 0 ) ( * v3 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 8 ) ) ( / v1 4 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 8 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 10 ) v1 ) ( min ( - v0 10 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 500 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 125 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) ( min ( - 500 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 125 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 18 ( * ( max ( min v0 6 ) 5 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "Eq-a-b", "add-comm", "eq-swap", "mul-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 9 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 9 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 9 ) 126 ) ( * v1 2 ) ) ( - ( / ( + v0 9 ) 126 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -128 ) 64 ) 64 ) ( * v0 -128 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + 0 v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + 3 ( + v0 248 ) ) ) ) ( <= ( / v1 250 ) ( / ( + ( + ( min ( * 0 4 ) 121 ) 0 ) v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( + ( min ( * ( - ( + 32 0 ) 1 ) 4 ) 121 ) ( - ( + 4 0 ) 1 ) ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( / ( + v0 5 ) 4 ) ( * v1 32 ) ) ( - ( / ( + v0 5 ) 4 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( + ( / ( + ( % ( + v0 v1 ) 4 ) 1003 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) 2 ) ) ( * v2 3 ) ) ( + ( min ( * ( + ( / ( + ( % ( + v0 v1 ) 4 ) 1003 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) 2 ) ) ( * v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) ( + v2 19 ) ) ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) ( + v2 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( * ( / ( + v1 14 ) 4 ) 4 ) ) ( + v2 11 ) ) ( min ( + ( / v0 4 ) ( * ( / ( + v1 14 ) 4 ) 4 ) ) ( + v2 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( - ( * ( + ( / ( + v1 v2 ) 4 ) ( + ( * v3 16 ) ( + ( min ( min ( - ( + ( min ( + ( + ( / ( + v1 v2 ) 4 ) ( * v3 16 ) ) 15 ) ( + ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v4 -32 ) ) ) ( * v3 -16 ) ) ( / ( + v1 v2 ) 4 ) ) ( + ( * v3 -16 ) ( + ( / ( + ( % ( + v1 v2 ) 4 ) 255 ) 4 ) ( * v4 -32 ) ) ) ) 15 ) ( * v4 32 ) ) ) ) 4 ) ( max ( * ( max ( + ( / ( + v1 v2 ) 4 ) ( - ( * v3 16 ) ( + ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v4 -32 ) ) ) ) -15 ) 4 ) 2 ) ) 4 ) ) ( min ( * v0 4 ) ( + ( - ( * ( + ( / ( + v1 v2 ) 4 ) ( + ( * v3 16 ) ( + ( min ( min ( - ( + ( min ( + ( + ( / ( + v1 v2 ) 4 ) ( * v3 16 ) ) 15 ) ( + ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v4 -32 ) ) ) ( * v3 -16 ) ) ( / ( + v1 v2 ) 4 ) ) ( + ( * v3 -16 ) ( + ( / ( + ( % ( + v1 v2 ) 4 ) 255 ) 4 ) ( * v4 -32 ) ) ) ) 15 ) ( * v4 32 ) ) ) ) 4 ) ( max ( * ( max ( + ( / ( + v1 v2 ) 4 ) ( - ( * v3 16 ) ( + ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v4 -32 ) ) ) ) -15 ) 4 ) 2 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( * v1 4 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 255 0 ) 1 ) v0 ) ( + ( - ( + 255 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * 7 4 ) v1 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 3 ( - ( + 4 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) v2 ) 7 ) ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) ( + v2 1 ) ) 7 ) )", "end": "1"}, "rules": ["add-assoc", "sub-to-add", "lt-x-x-sub-a", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 8 ) 105 ) -19 ) ( + ( * v1 4 ) v2 ) ) ( - ( max ( min ( * v0 8 ) 105 ) -19 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v3 4 ) 133 ) 0 ) ( + ( min ( * v3 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 133 ) 3 ) ( + ( min ( * v3 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + v0 8 ) ( - ( + v0 1 ) 2 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-fact-mul", "mul-comm", "add-assoc", "add-comm", "sub-to-add", "lt-swap-out", "add-const", "mul-zero"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 62 ( max ( * v0 16 ) 46 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-consts-div-neg", "add-comm", "Eq-a-b", "mul-assoc", "eq-mul-x-y-0", "sub-to-add", "eq-x-y-0", "Eq-min-c-neg", "max-to-min", "min-add-both", "mul-comm", "eq-swap"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 5 ) )", "end": "0"}, "rules": ["add-dist-mul", "mul-zero", "add-assoc", "lt-swap", "mul-assoc", "sub-to-add", "add-fact-mul", "mul-comm", "add-comm", "lt-swap-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( - ( / v0 16 ) 2 ) ) ) ( >= ( - ( + ( / ( + ( % v0 16 ) 223 ) 16 ) ( - ( / v0 16 ) 2 ) ) 1 ) ( - ( + ( / ( + ( % v0 16 ) 223 ) 16 ) ( - ( / v0 16 ) 2 ) ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * ( + ( * v2 8 ) 0 ) 4 ) 0 ) ( * v2 32 ) ) ) ( >= ( + ( * ( + ( * v2 8 ) 7 ) 4 ) 3 ) ( + ( * v2 32 ) 31 ) ) )", "end": "1"}, "rules": ["mul-zero", "lt-swap-out", "add-fact-mul", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-const", "mul-comm", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( * v4 9 ) ( + ( * v4 9 ) 0 ) ) ) ( >= ( + ( * v4 9 ) 8 ) ( + ( * v4 9 ) ( - ( + 9 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "add-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( + -2 v0 ) ) ) ( >= ( + v0 39 ) ( + ( - ( - 11 2 ) 1 ) ( - ( + 32 v0 ) 1 ) ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 16 ) ( - ( * v1 8 ) 5 ) ) ( - ( * v2 8 ) 13 ) ) 8 ) 8 ) ( min ( + ( * v0 16 ) ( - ( * v1 8 ) 5 ) ) ( - ( * v2 8 ) 13 ) ) )", "end": "0"}, "rules": ["add-zero", "min-mul-in-pos", "min-sub-both", "sub-to-add", "add-comm", "mod-consts", "min-div-in-pos", "add-const", "mul-comm", "mul-zero", "mul-cancel-div", "eq-x-y-0", "add-assoc", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 16 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 16 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 16 ) v1 ) 36 ) ) 5 ) ( + ( + ( * v0 16 ) v1 ) 20 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["not-gt-to-eqlt", "Eq-lt-min", "add-assoc", "add-comm", "min-x-x-plus-a-pos", "lt-to-zero", "eqlt-to-not-gt", "lt-swap-in", "lt-x-x-sub-a", "min-consts-or", "sub-to-add", "and-comm"]}, {"expression": {"start": "( == ( + ( / v0 16 ) ( * v1 8 ) ) ( + ( / v0 16 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( + ( * v1 252 ) 247 ) v2 ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( + ( * v1 252 ) 247 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - 14 ( max ( - ( * v0 504 ) v1 ) -494 ) ) ( + ( min ( - v1 ( * v0 504 ) ) 494 ) 11 ) ) ( + ( min v2 494 ) 14 ) ) ( min ( max ( - 14 ( max ( - ( * v0 504 ) v1 ) -494 ) ) ( + ( min ( - v1 ( * v0 504 ) ) 494 ) 11 ) ) ( + ( min v2 494 ) 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 63 ) 62 ) ( + ( * v1 125 ) v2 ) ) 63 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 63 ) 62 ) ( + ( * v1 125 ) v2 ) ) 63 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 1 ) 1003 ) ( / ( + ( % ( + v0 1 ) 1003 ) 1007 ) 1003 ) ) ( + ( / ( + v0 1 ) 1003 ) ( / ( + ( % ( + v0 1 ) 1003 ) 1007 ) 1003 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( + v2 3 ) ) ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 179 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 179 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 128 ) ) v1 ) 128 ) 3 ) 4 ) ( + ( / ( min ( - v0 ( * v2 1000 ) ) ( + ( * v3 128 ) 128 ) ) 4 ) ( * v3 -32 ) ) ) ( min ( / ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 128 ) ) v1 ) 128 ) 3 ) 4 ) ( + ( / ( min ( - v0 ( * v2 1000 ) ) ( + ( * v3 128 ) 128 ) ) 4 ) ( * v3 -32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( min ( / ( + ( min ( + v0 253 ) v1 ) 507 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / ( + ( % ( + ( * v2 500 ) ( + ( min ( * v3 1000 ) ( - v4 1000 ) ) v5 ) ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) ( + ( / v1 8 ) 81 ) ) ( * v6 3 ) ) ( + ( min ( min ( / ( + ( min ( + v0 253 ) v1 ) 507 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / ( + ( % ( + ( * v2 500 ) ( + ( min ( * v3 1000 ) ( - v4 1000 ) ) v5 ) ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) ( + ( / v1 8 ) 81 ) ) ( * v6 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 24 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 24 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 8 ) 36 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 8 ) 36 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( + ( * v0 2 ) v1 ) 0 ) ( + ( + ( * v0 2 ) v1 ) 2 ) ) ( + ( min ( + ( * v0 2 ) v1 ) 498 ) 2 ) ) ( max ( min ( max ( + ( * v0 2 ) v1 ) 0 ) ( + ( + ( * v0 2 ) v1 ) 2 ) ) ( + ( min ( + ( * v0 2 ) v1 ) 498 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 63 ) ) 60 ) ) 2 ) ( min ( + ( * v2 126 ) ( + ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ( * v3 63 ) ) ) 253 ) ) ( - ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 63 ) ) 60 ) ) 2 ) ( min ( + ( * v2 126 ) ( + ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ( * v3 63 ) ) ) 253 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 126 ) ) ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( >= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 125 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 11 ) 4 ) ( / ( + v0 11 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 63 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 8 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) 3 ) v3 ) ( min ( + ( + ( / v0 8 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) 3 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - 253 ( / v0 2 ) ) ( + ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v3 ) 3 ) ) ( + ( * v4 4 ) v5 ) ) ( - ( min ( - 253 ( / v0 2 ) ) ( + ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v3 ) 3 ) ) ( + ( * v4 4 ) v5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 126 ) 116 ) v1 ) ( min ( + ( * v0 126 ) 116 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) ( + ( * v1 8 ) 16 ) ) ( max ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) ( + ( * v1 8 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 4 ) 177 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) ( * v5 35 ) ) ( * ( / v4 250 ) 64 ) ) -70 ) v0 ) 4 ) 246 ) ) ( min ( max ( max ( - ( * v0 4 ) 177 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) ( * v5 35 ) ) ( * ( / v4 250 ) 64 ) ) -70 ) v0 ) 4 ) 246 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 15 ) 16 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 15 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 4 ) 271 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "Eq-lt-min", "min-mod-const-to-const", "not-gt-to-eqlt"]}, {"expression": {"start": "( == ( + ( * v0 36 ) ( + ( * v1 9 ) v2 ) ) ( + ( * v0 36 ) ( + ( * v1 9 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( * v1 2 ) ) ( + ( * v0 63 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -5 ( * ( max ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( / v1 250 ) ) 3 ) 0 ) 8 ) ) ( - ( * ( max ( min v3 0 ) -3 ) 8 ) 5 ) ) ( max ( - -5 ( * ( max ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( / v1 250 ) ) 3 ) 0 ) 8 ) ) ( - ( * ( max ( min v3 0 ) -3 ) 8 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( / v1 4 ) v2 ) 4 ) ) ( - v0 ( * ( + ( / v1 4 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( + ( * v2 16 ) v3 ) 15 ) ) ( min ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( + ( * v2 16 ) v3 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( + ( * v0 -252 ) v1 ) 242 ) 14 ) 68 ) 68 ) ( * v0 252 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -252 ) v1 ) 242 ) 14 ) 68 ) 68 ) ( * v0 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) v2 ) ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 10 ) 15 ) ( - ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 10 ) 15 ) ) ) ( >= ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) ( - ( - 13 10 ) 1 ) ) 15 ) ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) ( - ( - 13 10 ) 1 ) ) 15 ) ) ) ( <= ( - ( + ( * ( + v3 0 ) 4 ) 0 ) 7 ) ( - ( * v3 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v3 17 ) 4 ) 3 ) 7 ) ( - ( + ( * v3 4 ) 71 ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-dist-mul", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "add-zero", "mul-comm", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v1 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 63 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 63 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 8 ) 34 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "eq-comm", "Eq-a-b", "sub-to-add", "eq-swap"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( / v1 2 ) 2 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( / v1 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 4 ) ( + v0 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 7 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) ( + v2 1 ) ) 7 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "sub-to-add", "lt-x-x-sub-a", "lt-swap-out"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) 6 ) ) ( min ( * v0 4 ) ( + ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 126 ) 2 ) ( * v1 8 ) ) ( + ( max ( min v0 126 ) 2 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 8 ) ) ( + ( * v0 500 ) 492 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ( + ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 8 ) ) ( + ( * v0 500 ) 492 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( * v3 32 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( * v3 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 63 ) 64 ) ( / ( + v0 63 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 2 ) ( + ( * ( + ( * v1 4 ) v0 ) 2 ) 1 ) ) ( max ( * v0 2 ) ( + ( * ( + ( * v1 4 ) v0 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 672 ) ( + v1 5 ) ) ( min ( * v0 672 ) ( + v1 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( - ( / ( + ( min v2 1000 ) v3 ) 8 ) 125 ) ( - ( / ( + ( min v2 1000 ) v3 ) 8 ) 125 ) ) ) ( >= ( / ( + ( + v2 v3 ) 7 ) 8 ) ( / ( + ( + v2 v3 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "add-zero", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( max ( - ( + ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ( min ( + ( * v4 8 ) v5 ) ( + v6 7 ) ) ) 7 ) ( + ( * v4 8 ) v5 ) ) ( max ( - ( + ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ( min ( + ( * v4 8 ) v5 ) ( + v6 7 ) ) ) 7 ) ( + ( * v4 8 ) v5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "add-comm", "add-assoc", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( * v2 32 ) ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 19 ) 4 ) 52 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "sub-to-add", "Eq-a-b", "eq-swap", "add-comm"]}, {"expression": {"start": "( < ( + ( min ( * v0 69 ) 68 ) v1 ) ( + ( min ( * v0 69 ) 68 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 500 ) ) -499 ) ( + ( max ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2499 ) 500 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 500 ) ) -499 ) ( + ( max ( min ( + ( * v0 500 ) v1 ) ( - ( min ( + v2 v1 ) 2499 ) 500 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - ( * v0 2 ) 6 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "Eq-a-b", "eq-comm", "add-comm", "mul-comm", "eq-swap"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 31 ) 4 ) 4 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 31 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -1008 ) 4 ) 4 ) ( * v0 -1008 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 76 ) 64 ) ) -64 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 76 ) 64 ) ) -64 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 1 ) ) ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( min ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) ( + ( + ( max ( * ( + ( * v0 64 ) v2 ) 2 ) ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 1 ) ) ( * ( / ( - 0 ( max ( * v1 -4 ) 1 ) ) 4 ) 4 ) ) 3 ) ) 1 ) ) ( + ( * ( + ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 1 ) 2 ) 2 ) ) ) ( <= ( + 0 ( * v3 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v3 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 2 ( + ( * v3 2 ) 14 ) ) ( + ( * ( + ( + ( * 1 4 ) v3 ) 3 ) 2 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "add-zero", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 32 ) 93 ) v1 ) v2 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 4 ) v2 ) 125 ) ) ( - v0 ( * ( + ( * v1 4 ) v2 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -16 ) 2 ) 2 ) ( * v0 -16 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( < ( + v0 4 ) ( + v0 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-zero", "add-assoc", "mul-assoc", "add-comm", "mul-comm", "lt-swap-in", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( - 1 ( max v0 1 ) ) 2 )", "end": "0"}, "rules": ["eq-x-y-0", "Eq-min-c-pos", "min-consts-div-neg", "min-add-both", "mul-comm", "sub-to-add", "add-comm", "max-to-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 208 0 ) 1 ) ( - ( + 208 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) 0 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) 3 ) ( + ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) 3 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "add-zero", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 -256 ) 4 ) 4 ) ( * v0 -256 ) )", "end": "1"}, "rules": ["add-fact-mul", "mul-zero", "sub-to-add", "mul-assoc", "div-consts-mul", "eq-x-y-0", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + 3 ( + v0 64 ) ) ( + ( + ( * 16 4 ) v0 ) 3 ) ) ) ( <= ( + ( * v1 6 ) v2 ) ( + ( * v1 6 ) v2 ) ) ) ( >= ( + ( + ( * v1 6 ) v2 ) 5 ) ( + ( + ( * v1 6 ) v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( * ( / ( * v0 252 ) 12 ) 12 ) ( * v0 252 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( >= ( + ( * v0 8 ) v1 ) ( + ( + ( * v0 8 ) ( - v1 1 ) ) 1 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "lt-swap-out", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( * v0 250 ) v1 ) 4 ) 129 ) 128 ) ( - ( + 0 ( / ( + ( % ( + ( * v0 250 ) v1 ) 4 ) 381 ) 128 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "and-min-to-lt", "eqlt-to-not-gt", "lt-mul-div-cancel", "sub-to-add", "lt-const-mod", "add-comm", "max-consts-or"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 252 ) ( - v1 252 ) ) v2 ) 4 ) 243 ) 16 ) ( - ( + 0 ( / ( + ( % v3 4 ) 271 ) 16 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "lt-mul-div-cancel", "eqlt-to-not-gt", "sub-to-add", "lt-const-mod", "max-consts-or", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) -23 ) ( * v1 2 ) ) ( - ( max ( * v0 2 ) -23 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 3 ) 1 ) )", "end": "0"}, "rules": ["add-dist-mul", "lt-swap", "add-comm", "add-assoc", "sub-to-add", "lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * v0 2 ) 4 ) ( - ( + ( - ( * v0 2 ) 4 ) ( + ( * ( min v1 0 ) 2 ) 6 ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-swap", "add-fact-mul", "add-comm", "sub-to-add", "mul-comm", "eq-comm", "Eq-a-b", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ( - ( + ( * ( + 0 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 15 ) 4 ) ( - ( + ( * ( + 3 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 3 ) 4 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( <= ( + ( * 0 2 ) 0 ) 0 ) ) ( >= ( + ( * 9 2 ) 1 ) 19 ) )", "end": "1"}, "rules": ["eq-x-x", "add-comm", "lt-to-zero", "Eq-lt-min", "add-assoc", "min-x-x", "add-dist-mul", "eqgt-to-not-lt", "mul-comm"]}, {"expression": {"start": "( >= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) ( - v1 1 ) ) 1 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "min-x-x", "eq-x-x", "not-gt-to-eqlt", "lt-swap-out", "Eq-lt-min", "sub-to-add"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 8 ) ( - ( + ( - ( * v0 4 ) 8 ) ( + ( * ( min v1 5 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-const", "add-fact-mul", "add-assoc", "eq-comm", "mul-comm", "eq-swap", "mul-zero", "sub-to-add", "Eq-a-b"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 16 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 13 ) ) 8 ) 8 ) ( min ( + ( * v0 16 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 13 ) ) )", "end": "0"}, "rules": ["mod-consts", "min-div-in-pos", "min-sub-both", "add-zero", "min-mul-in-pos", "add-fact-mul", "Eq-a-b", "mul-comm", "add-comm", "mul-assoc", "eq-swap", "sub-to-add", "mul-cancel-div", "add-assoc", "eq-x-y-0"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-min-switch", "min-consts-or", "add-zero", "eqgt-to-not-lt", "mul-assoc", "mul-comm", "lt-swap-out", "or-comm", "add-assoc", "add-fact-mul", "sub-to-add", "add-comm", "mul-zero"]}, {"expression": {"start": "( < ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) ) v4 ) ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) ( + v3 1 ) ) ) ) v4 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -12 ) ( + ( * v2 2 ) 15 ) ) ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -12 ) ( + ( * v2 2 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 9 ) 8 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 9 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) ( + ( * v3 12 ) ( + ( / v1 8 ) ( * v4 84 ) ) ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) ( + ( * v3 12 ) ( + ( / v1 8 ) ( * v4 84 ) ) ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) 20 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v3 ) 16 ) 188 ) ) ( min ( max ( max ( - ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) 20 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v3 ) 16 ) 188 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 64 ) v1 ) 1 ) v2 ) ( min ( - ( + ( * v0 64 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( / ( + v0 v1 ) 4 ) ( * v2 12 ) ) 4 ) v3 ) ( min ( - ( + ( / ( + v0 v1 ) 4 ) ( * v2 12 ) ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max v0 v1 ) ( + v2 v1 ) ) ( + ( * ( max ( min ( * v3 2 ) 497 ) -2 ) 4 ) 12 ) ) ( min ( max ( max v0 v1 ) ( + v2 v1 ) ) ( + ( * ( max ( min ( * v3 2 ) 497 ) -2 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + v0 v1 ) 9 ) v2 ) ( max ( + ( + v0 v1 ) 9 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) 2 ) 251 ) ) ( - ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 -12 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( / v2 8 ) ) ) ( + ( * v3 84 ) 11 ) ) ( min ( + ( * v0 -12 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( / v2 8 ) ) ) ( + ( * v3 84 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 2 ) 225 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 2 ) 225 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 250 ) 8 ) ( + ( * v1 3 ) ( + ( * ( + ( min ( / ( - ( + v2 v0 ) 1 ) 250 ) ( + ( + ( / v0 250 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) -8 ) v4 ) ) ) ( + ( * ( / v0 250 ) 8 ) ( + ( * v1 3 ) ( + ( * ( + ( min ( / ( - ( + v2 v0 ) 1 ) 250 ) ( + ( + ( / v0 250 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) -8 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 4 ) ) 3 ) ) ( max ( + ( * v2 4 ) ( - ( / v1 4 ) ( / ( + ( + v0 v1 ) 3 ) 4 ) ) ) 0 ) ) v3 ) ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 4 ) ) 3 ) ) ( max ( + ( * v2 4 ) ( - ( / v1 4 ) ( / ( + ( + v0 v1 ) 3 ) 4 ) ) ) 0 ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 184 ) ( - v1 184 ) ) ( min ( * v0 184 ) ( - v1 184 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 128 ) ) ( + ( / v0 4 ) ( * v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 2 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 252 ) ) ( / v2 4 ) ) ( - ( - v0 ( * v1 252 ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 0 v0 ) ( - v0 1999 ) ) ( max ( - 0 v0 ) ( - v0 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 251 ) ) 250 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 251 ) ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( + ( / v1 8 ) 15 ) ) ( + ( * v3 4 ) ( + ( / v1 8 ) ( * v4 8 ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( + ( / v1 8 ) 15 ) ) ( + ( * v3 4 ) ( + ( / v1 8 ) ( * v4 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 509 ) 504 ) ( / ( + v0 509 ) 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 2 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 33 ) 32 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 33 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 64 ) ) ( + ( / v0 4 ) 63 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 64 ) ) ( + ( / v0 4 ) 63 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 31 ) v1 ) 1 ) ) ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 31 ) v1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 126 ) ) ( + ( min v2 116 ) 3 ) ) ( min ( - v0 ( * v1 126 ) ) ( + ( min v2 116 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2007 ) 8 ) ) ( min ( + ( * v0 8 ) v1 ) ( - ( min ( + v2 v1 ) 2007 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 32 ) 93 ) ( * v1 4 ) ) ( + ( max ( * v0 32 ) 93 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 34 ( * v0 9 ) ) ( + ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 64 ) ( + ( * v0 9 ) v3 ) ) 104 ) ) ( min ( - 34 ( * v0 9 ) ) ( + ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 64 ) ( + ( * v0 9 ) v3 ) ) 104 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 252 ) 753 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) ( + ( min ( * v0 252 ) 753 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 255 ) 252 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 255 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 4 ) -31 ) 32 ) v1 ) ( min ( + ( max ( * v0 4 ) -31 ) 32 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 32 ) ) ( + ( / v0 4 ) 21 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 32 ) ) ( + ( / v0 4 ) 21 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) 5 ) v2 ) ( min ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) 5 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) ( / v1 4 ) ) 257 ) 256 ) 0 ) ( / ( + v2 266 ) 256 ) ) ( / ( + ( min ( - ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min ( / ( + ( + v3 v0 ) 983 ) 4 ) v4 ) 9 ) ) ( / v1 4 ) ) ( + v2 264 ) ) 2 ) 256 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) ( / v1 4 ) ) 257 ) 256 ) 0 ) ( / ( + v2 266 ) 256 ) ) ( / ( + ( min ( - ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min ( / ( + ( + v3 v0 ) 983 ) 4 ) v4 ) 9 ) ) ( / v1 4 ) ) ( + v2 264 ) ) 2 ) 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 500 ) v1 ) ( min ( * v0 500 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 8 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -667 ( % ( + ( min ( * v0 667 ) ( - v1 667 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -667 ( % ( + ( min ( * v0 667 ) ( - v1 667 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 32 ( * ( max ( min v0 2 ) 1 ) 16 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-assoc", "mul-comm", "eq-comm", "eq-swap", "sub-to-add", "Eq-a-b"]}, {"expression": {"start": "( == ( + ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) 15 ) ( + ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) 15 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) 4 ) ( * ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -528 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 4 ) ) 4 ) ( * ( + ( * v3 17 ) v4 ) 4 ) ) ( + ( / ( - -528 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 4 ) ) 4 ) ( * ( + ( * v3 17 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( + v0 v1 ) v2 ) 1996 ) -3 ) ( * v3 4 ) ) ( + ( max ( min ( + ( + v0 v1 ) v2 ) 1996 ) -3 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 64 ) ) ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) ( + v2 59 ) ) ( min ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) ( + v2 59 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -64 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 64 ) 63 ) v2 ) 4 ) 4 ) ) ) v3 ) ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -64 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 64 ) 63 ) v2 ) 4 ) 4 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 44 ) 34 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 44 ) 34 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * ( min ( + ( min v0 112 ) v1 ) 362 ) 2 ) 225 ) v2 ) ( min ( - ( * ( min ( + ( min v0 112 ) v1 ) 362 ) 2 ) 225 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 24 ) ( * ( + ( / v1 250 ) ( * v2 4 ) ) 64 ) ) ( + ( * v3 64 ) 65 ) ) ( min ( + ( * v0 24 ) ( * ( + ( / v1 250 ) ( * v2 4 ) ) 64 ) ) ( + ( * v3 64 ) 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 3 ) ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 15 ) v1 ) ( min ( + v0 15 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 32 ) ( + v1 v2 ) ) ( min ( + v0 32 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + v0 v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) v1 ) ( + v2 20 ) ) ( min ( + ( * v0 12 ) v1 ) ( + v2 20 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 3 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 36 ) ) ( min ( max ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 125 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-zero", "add-const", "lt-swap-out", "mul-comm", "gt-to-lt", "sub-to-add", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 136 ) 130 ) ) -130 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 136 ) 130 ) ) -130 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 17 ) )", "end": "0"}, "rules": ["mul-comm", "add-fact-mul", "lt-swap-out", "add-const", "sub-to-add", "add-comm", "add-assoc", "mul-one", "mul-zero"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 9 ( max ( * v0 5 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-mul-in-pos", "sub-to-add", "eq-swap", "Eq-min-c-neg", "eq-comm", "mul-assoc", "Eq-a-b", "add-comm", "min-add-both", "max-to-min", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 28 ) v1 ) 17 ) v2 ) ( min ( + ( + ( * v0 28 ) v1 ) 17 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( / ( + ( min v0 4 ) v1 ) 4 ) ) 1 ) ( - ( + 0 ( / ( + ( min v0 4 ) v1 ) 4 ) ) 1 ) ) ) ( >= ( - ( + 3 ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( / ( + v2 1 ) 4 ) 4 ) ) ) 1 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( / ( + v2 1 ) 4 ) 4 ) ) ) 1 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 31 ) ( - ( + 32 ( / v3 4 ) ) 1 ) ) ) ( <= ( + ( * v4 104 ) v5 ) ( + ( * v4 104 ) v5 ) ) ) ( >= ( + ( * v4 104 ) v5 ) ( + ( * v4 104 ) v5 ) ) )", "end": "1"}, "rules": ["add-assoc", "sub-to-add", "add-comm", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( max ( + ( / ( + ( + v0 v1 ) 35 ) 4 ) ( * v2 2 ) ) ( - ( / ( + v0 v1 ) 4 ) 2 ) ) ( max ( + ( / ( + ( + v0 v1 ) 35 ) 4 ) ( * v2 2 ) ) ( - ( / ( + v0 v1 ) 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ( - ( + ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "eq-x-y-0", "add-comm", "sub-to-add", "mul-comm", "add-const", "add-fact-mul", "add-assoc"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 63 ) v1 ) 4 ) ( + ( * v2 4 ) 6 ) ) ( min ( * ( + ( * v0 63 ) v1 ) 4 ) ( + ( * v2 4 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )", "end": "0"}, "rules": ["mul-zero", "lt-swap-in", "lt-swap-out", "mul-comm", "sub-to-add", "mul-assoc", "add-assoc", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 54 ) 16 ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "eqlt-to-not-gt", "lt-mul-div-cancel", "lt-swap-out", "and-min-to-lt", "max-consts-or"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ) ) ( <= ( / ( - ( + ( min v2 3 ) v3 ) 3 ) 4 ) ( / ( + 0 ( - ( + ( min v2 3 ) v3 ) 3 ) ) 4 ) ) ) ( >= ( / ( - ( + v2 v3 ) 1 ) 4 ) ( / ( + ( - ( + 3 0 ) 1 ) ( - ( + v2 v3 ) 3 ) ) 4 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "mul-comm", "add-dist-mul", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "mul-assoc", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 63 ) ( * v2 250 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 63 ) ( * v2 250 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 132 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "sub-to-add", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 500 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 500 ) v1 ) ( + v2 1 ) ) 5 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-assoc", "lt-swap-in", "sub-to-add", "add-comm", "mul-comm", "add-assoc", "mul-zero", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( * v0 -32 ) 2 ) 2 ) ( * v0 -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "sub-to-add", "eq-x-y-0", "add-fact-mul", "eq-mul-x-y-0", "eq-comm", "mul-comm", "add-const"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + ( / ( + ( + ( min v0 4 ) v1 ) 44 ) 16 ) v2 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( * v3 8 ) 1 ) ( - ( + ( + ( * 0 4 ) ( * v3 8 ) ) 0 ) 1 ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( - ( + ( + ( * 3 4 ) ( + ( * v3 8 ) 9 ) ) 3 ) 1 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "add-comm", "and-comm", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( - ( * v0 8 ) 5 ) ( - ( + ( - ( * v0 8 ) 5 ) ( + ( * ( min v1 15 ) 8 ) 11 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "add-assoc", "add-const", "eq-comm", "mul-comm", "add-fact-mul", "Eq-a-b", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v1 ) 0 ) 7 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v1 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 1000 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "min-x-x", "lt-swap-in", "add-assoc", "eq-x-x", "sub-to-add", "min-x-x-plus-a-neg", "not-gt-to-eqlt", "eqgt-to-not-lt", "Eq-lt-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 1 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 15 ) ( + ( * ( + 7 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 4 4 ) 3 ) 19 ) )", "end": "1"}, "rules": ["add-assoc", "mul-comm", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "add-dist-mul", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 0 ) ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 3 ) ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 3 ) ) ) ( <= ( - ( * v3 4 ) 1000 ) ( - ( + ( * v3 4 ) 0 ) 1000 ) ) ) ( >= ( - ( * v3 4 ) 1 ) ( - ( + ( * v3 4 ) ( - ( + 1000 0 ) 1 ) ) 1000 ) ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( + ( min ( * v0 42 ) 83 ) ( * v1 6 ) ) v2 ) 6 ) ( - ( + ( + ( min ( * v0 42 ) 83 ) ( * ( + v1 1 ) 6 ) ) v2 ) 5 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-comm", "mul-zero", "add-assoc", "sub-to-add", "mul-assoc", "add-fact-mul", "lt-swap", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + v0 v1 ) 2 ) 0 ) ( + ( * ( + v0 v1 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 2 ) 8 ) ( - ( min ( max ( * v1 2 ) ( + ( * ( + ( + v0 1 ) v1 ) 2 ) 1 ) ) ( * ( + ( + v0 1 ) v1 ) 2 ) ) 10 ) )", "end": "0"}, "rules": ["sub-to-add", "min-comm", "mul-comm", "lt-to-zero", "add-assoc", "add-comm", "min-add-both", "add-dist-mul", "and-min-to-lt"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 252 ) v1 ) ( min ( * v0 252 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( * ( / v0 125 ) 8 ) 125 ) ( + ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 13 ) ) ( max ( min ( * ( / v0 125 ) 8 ) 125 ) ( + ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 68 ( * ( + ( * v0 9 ) ( + ( * v1 2 ) v2 ) ) 4 ) ) ( - 35 ( * ( + ( * v1 2 ) v2 ) 4 ) ) ) ( min ( - 68 ( * ( + ( * v0 9 ) ( + ( * v1 2 ) v2 ) ) 4 ) ) ( - 35 ( * ( + ( * v1 2 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 124 ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ) ( + v1 12 ) ) ( min ( - 124 ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ) ( + v1 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 8 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 5 ) ) ) ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 8 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 5 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 252 ) -13 ) v2 ) ) ( + ( + ( * v1 252 ) v2 ) 248 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 252 ) -13 ) v2 ) ) ( + ( + ( * v1 252 ) v2 ) 248 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) 36 ) 32 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) 36 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 4 ) 4 ) ) ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 64 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 64 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 128 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 16 ) ) ( + v1 16 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 16 ) ) ( + v1 16 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 65 ) 63 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 65 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 1003 ) ) ( * v2 126 ) ) ( - ( - v0 ( * v1 1003 ) ) ( * v2 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( + ( / ( - 8 v0 ) 4 ) v1 ) 4 ) v2 ) ( + ( * v3 4 ) 5 ) ) ( min ( + ( * ( + ( / ( - 8 v0 ) 4 ) v1 ) 4 ) v2 ) ( + ( * v3 4 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 34 ) 32 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 34 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 29 ) ) ( + ( / v0 8 ) ( * v1 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max v0 1 ) ( min v1 1999 ) ) ( - ( max v0 1 ) ( min v1 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 7 ( max ( * v0 4 ) 3 ) ) ( - 1 v1 ) ) ( max ( - 7 ( max ( * v0 4 ) 3 ) ) ( - 1 v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 24 ) ) ( + ( / v0 4 ) ( * v1 24 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 23 ) 16 ) 0 ) ( / ( + v2 6 ) 4 ) ) ( + ( min ( min ( / ( + ( - ( + v3 v0 ) ( * ( / v1 4 ) 4 ) ) 7 ) 16 ) ( / ( - ( - ( / ( + ( + v4 v1 ) 31 ) 4 ) ( / v1 4 ) ) 1 ) 4 ) ) ( / ( + v2 2 ) 4 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 23 ) 16 ) 0 ) ( / ( + v2 6 ) 4 ) ) ( + ( min ( min ( / ( + ( - ( + v3 v0 ) ( * ( / v1 4 ) 4 ) ) 7 ) 16 ) ( / ( - ( - ( / ( + ( + v4 v1 ) 31 ) 4 ) ( / v1 4 ) ) 1 ) 4 ) ) ( / ( + v2 2 ) 4 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 17 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 4 ) ) 5 ) ) ( min ( / ( - ( + v0 v1 ) 17 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 4 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 128 ) 872 ) ( + v1 v2 ) ) ( + ( min ( * v0 128 ) 872 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 97 ) 9 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 97 ) 9 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) ( + ( * v1 1008 ) ( + ( * v2 4 ) v3 ) ) ) ( + ( * v0 504 ) ( + ( * v1 1008 ) ( + ( * v2 4 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 7 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 7 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 10 ) 8 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 10 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 12 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 12 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 504 ) 501 ) ( + ( * v1 4 ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ) ( + ( min ( * v0 504 ) 501 ) ( + ( * v1 4 ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -69 ) ( + v2 21 ) ) ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -69 ) ( + v2 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 251 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 251 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( - v1 ( / ( + ( + v2 v3 ) 3 ) 4 ) ) ) ( + ( * v0 64 ) ( - v1 ( / ( + ( + v2 v3 ) 3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % ( + v0 v1 ) 125 ) 999 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "not-gt-to-eqlt", "Eq-lt-min", "lt-swap-in", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 250 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) 31 ) ) ( * v5 16 ) ) ( + ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 250 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) 31 ) ) ( * v5 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( max ( max ( max ( max ( - 0 ( / v0 3 ) ) ( + ( / ( - ( max v1 0 ) v0 ) 3 ) 1 ) ) ( / ( + ( - ( max v1 0 ) v0 ) 4 ) 3 ) ) ( / ( - 4 v0 ) 3 ) ) ( / ( + ( - v1 v0 ) 2 ) 3 ) ) 0 ) ( / ( + v2 7 ) 3 ) ) ( + ( min ( / ( min ( min ( min ( min ( min ( min ( - 1999 v0 ) ( + ( min ( - ( + v3 v1 ) v0 ) ( + ( min ( - 1999 v0 ) v2 ) 1 ) ) 1 ) ) ( - 2001 v0 ) ) ( + v2 2 ) ) ( - ( - ( + v3 v1 ) v0 ) 1 ) ) ( - ( + v3 v1 ) v0 ) ) ( + v2 4 ) ) 3 ) ( - 666 ( / v0 3 ) ) ) 1 ) ) ( max ( min ( max ( max ( max ( max ( max ( - 0 ( / v0 3 ) ) ( + ( / ( - ( max v1 0 ) v0 ) 3 ) 1 ) ) ( / ( + ( - ( max v1 0 ) v0 ) 4 ) 3 ) ) ( / ( - 4 v0 ) 3 ) ) ( / ( + ( - v1 v0 ) 2 ) 3 ) ) 0 ) ( / ( + v2 7 ) 3 ) ) ( + ( min ( / ( min ( min ( min ( min ( min ( min ( - 1999 v0 ) ( + ( min ( - ( + v3 v1 ) v0 ) ( + ( min ( - 1999 v0 ) v2 ) 1 ) ) 1 ) ) ( - 2001 v0 ) ) ( + v2 2 ) ) ( - ( - ( + v3 v1 ) v0 ) 1 ) ) ( - ( + v3 v1 ) v0 ) ) ( + v2 4 ) ) 3 ) ( - 666 ( / v0 3 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 8 ) 113 ) -11 ) 1 ) v1 ) ( min ( + ( max ( min ( * v0 8 ) 113 ) -11 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( + ( * v1 32 ) v2 ) ) ( + ( * v0 63 ) ( + ( * v1 32 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 63 ) 63 ) ) 62 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 63 ) 63 ) ) 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 109 ) ( + v0 109 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 500 ) 4 ) 4 ) ( * v0 500 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 16 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( / ( + ( % ( + ( min ( * v2 500 ) ( - v3 500 ) ) v0 ) 8 ) 507 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( - ( % ( + ( min ( * v2 500 ) ( - v3 500 ) ) v0 ) 8 ) 5 ) 32 ) 4 ) ) ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( / ( + ( % ( + ( min ( * v2 500 ) ( - v3 500 ) ) v0 ) 8 ) 507 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( - ( % ( + ( min ( * v2 500 ) ( - v3 500 ) ) v0 ) 8 ) 5 ) 32 ) 4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )", "end": "0"}, "rules": ["lt-swap-in", "min-consts-or", "eqgt-to-not-lt", "or-comm", "sub-to-add"]}, {"expression": {"start": "( >= ( + ( % v0 1000 ) 999 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "lt-swap-in", "eqgt-to-not-lt", "not-gt-to-eqlt", "Eq-lt-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v0 ) 0 ) 61 ) ( - ( + 0 v0 ) 66 ) ) ) ( >= ( - ( + ( + ( max ( * 249 4 ) -5 ) v0 ) 3 ) 61 ) ( - ( + 3 ( + v0 1004 ) ) 66 ) ) ) ( <= ( + ( + ( max ( * v1 3 ) -5 ) ( + ( * v2 9 ) v3 ) ) 3 ) ( - ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 2 ) ) ) ( >= ( + ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 5 ) ( + ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["sub-to-add", "and-comm", "add-comm", "lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 132 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-fact-mul", "add-const", "eq-x-y-0", "mul-comm", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( max ( min ( / ( max ( + v0 10 ) v1 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 11 ) ) ( + ( min ( / ( - ( + v3 v0 ) 5 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 8 ) ) 3 ) ) ( max ( min ( / ( max ( + v0 10 ) v1 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 11 ) ) ( + ( min ( / ( - ( + v3 v0 ) 5 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 8 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( / v1 8 ) ( * v2 8 ) ) ) ( + ( * v0 4 ) ( + ( / v1 8 ) ( * v2 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 2 ) 4 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 2 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( + v0 1 ) 2 ) )", "end": "0"}, "rules": ["mul-comm", "lt-swap-out", "add-fact-mul", "add-const", "mul-zero", "add-comm", "sub-to-add", "lt-swap-in"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 8 ) ( + ( * ( / ( + v2 v3 ) 4 ) 4 ) v4 ) ) ) ( + ( * v0 4 ) ( + ( * v1 8 ) ( + ( * ( / ( + v2 v3 ) 4 ) 4 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max v0 1 ) -4 ) 4 ) 4 ) ( * ( max v0 1 ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "mul-assoc", "div-consts-mul"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 46 ) 34 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 46 ) 34 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 v1 ) ( - ( + ( + v0 1 ) v1 ) 5 ) )", "end": "0"}, "rules": ["add-const", "sub-to-add", "mul-one", "add-fact-mul", "mul-comm", "lt-swap-out", "add-assoc", "mul-zero", "add-comm"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 67 ) 65 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 67 ) 65 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 14 ) 8 ) ( - ( + 0 ( / ( + ( % v0 8 ) 29 ) 8 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "lt-const-mod", "and-min-to-lt", "max-consts-or", "lt-swap-out", "lt-mul-div-cancel", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( / v1 4 ) ) 0 ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) 32 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 32 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ( - ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) 1 ) ) ) ( <= ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 4 ) ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 4 ) ) ) ( >= ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 66 ) 4 ) ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 66 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) ( + ( max ( * v2 4 ) -15 ) 19 ) ) ( min ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) ( + ( max ( * v2 4 ) -15 ) 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v2 4 ) 29 ) ) 4 ) 4 ) v1 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 29 ( max ( * v2 4 ) 29 ) ) 7 ) 4 ) 0 ) 1 ) 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["sub-to-add", "add-assoc", "add-comm", "lt-to-zero", "div-separate", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( + ( * v0 252 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 252 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( * v0 4 ) 177 ) ( - ( + ( - ( * v0 4 ) 177 ) 63 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "sub-to-add", "eqgt-to-not-lt", "add-comm", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 177 ) ( - ( + ( - ( * v0 4 ) 177 ) 63 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-fact-mul", "eq-x-y-0", "add-assoc", "add-const", "add-comm", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 220 ) v1 ) ) ( + ( min ( * v0 32 ) 220 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 220 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 64 ) ( - v1 64 ) ) v2 ) 8 ) 47 ) 32 ) ( - ( + 0 3 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "lt-swap-out", "eqlt-to-not-gt", "and-min-to-lt", "lt-mul-div-cancel", "max-consts-or"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 4 ) 246 ) v1 ) v2 ) ( + ( + ( min ( * v0 4 ) 246 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 0 ) 4 ) ( - ( + 0 ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 4 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( >= ( max ( min v0 0 ) -62 ) ( - ( + ( max ( min v0 0 ) -62 ) ( - 5 ( max ( min v0 0 ) -62 ) ) ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-min-term+cpos", "min-sub-both", "eqgt-to-not-lt", "lt-swap-out", "add-comm", "min-comm", "lt-swap-in", "add-assoc", "min-add-both", "max-consts-and", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )", "end": "0"}, "rules": ["mul-one", "lt-swap-in", "sub-to-add", "add-comm", "add-fact-mul", "add-assoc", "mul-zero", "mul-comm", "add-const"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 2 ) 18 ) ) ( - ( + 0 18 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "and-min-to-lt", "sub-to-add", "min-sub-both", "max-consts-or", "lt-swap", "lt-mul-pos-cancel", "lt-const-mod", "mod-minus-in", "eqlt-to-not-gt", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 2 ) -1 ) v1 ) ( - ( + ( * v0 2 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= ( + 0 ( - v2 1 ) ) ( - v2 1 ) ) ) ( >= ( + 3 ( + v2 998 ) ) ( + v2 1001 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["max-consts-or", "lt-swap-out", "eqlt-to-not-gt", "lt-swap-in", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( < ( + ( + ( + ( min ( * v0 502 ) 501 ) ( + ( * v1 251 ) v2 ) ) v3 ) 1 ) ( - ( + ( + ( min ( * v0 502 ) 501 ) ( + ( * v1 251 ) ( + v2 1 ) ) ) v3 ) 2 ) )", "end": "0"}, "rules": ["add-fact-mul", "lt-swap", "add-comm", "lt-swap-out", "add-dist-mul", "mul-zero", "mul-comm", "add-assoc", "mul-assoc", "sub-to-add"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( max v0 0 ) 138 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["min-add-both", "or-comm", "max-to-min", "min-consts-or", "lt-mul-div-cancel", "eqgt-to-not-lt", "lt-swap-out", "min-consts-div-neg", "mul-comm", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v2 -64 ) ( min ( * v1 -252 ) -248 ) ) -436 ) 4 ) 4 ) ( min ( + ( * v2 -64 ) ( min ( * v1 -252 ) -248 ) ) -436 ) )", "end": "1"}, "rules": ["add-fact-mul", "mul-assoc", "mul-comm", "eq-x-y-0", "div-consts-mul", "eq-mul-x-y-0", "add-dist-mul", "sub-to-add", "div-consts-add", "min-mul-in-pos", "min-div-in-pos"]}, {"expression": {"start": "( < ( + ( + ( + ( min ( * v0 8 ) 118 ) ( + ( * v1 2 ) v2 ) ) v3 ) 1 ) ( - ( + ( + ( min ( * v0 8 ) 118 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) 2 ) )", "end": "0"}, "rules": ["mul-assoc", "lt-swap", "lt-swap-out", "add-comm", "mul-zero", "sub-to-add", "mul-one", "add-fact-mul", "add-assoc", "mul-comm"]}, {"expression": {"start": "( >= ( - ( * ( min v0 12 ) 4 ) 52 ) ( - ( + ( - ( * ( min v0 12 ) 4 ) 52 ) ( + ( * ( min v0 12 ) -4 ) 56 ) ) 1 ) )", "end": "0"}, "rules": ["lt-mul-pos-cancel", "min-comm", "add-assoc", "mul-zero", "lt-swap-in", "min-consts-or", "add-fact-mul", "eqgt-to-not-lt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eq-x-x", "lt-to-zero", "min-x-x", "add-comm", "Eq-lt-min", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 125 ) v1 ) -125 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 125 ) v1 ) -125 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 500 ) v1 ) 2 ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * v0 500 ) v1 ) 502 ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["and-comm", "lt-swap-out", "lt-x-x-sub-a", "lt-swap-in", "add-assoc", "eqlt-to-not-gt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( - ( + ( * 0 4 ) v1 ) 2 ) 0 ) 8 ) ( + -2 ( - v1 8 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 35 0 ) 1 ) 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 8 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 131 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "not-gt-to-eqlt", "add-assoc", "min-x-x", "sub-to-add", "eq-x-x", "add-comm", "Eq-lt-min"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 71 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 64 ) ( - v3 64 ) ) v0 ) 8 ) 71 ) 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 71 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 64 ) ( - v3 64 ) ) v0 ) 8 ) 71 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 68 ) ( + ( * v1 252 ) v2 ) ) ( + ( * v0 68 ) ( + ( * v1 252 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 668 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 668 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - v0 ( * v1 252 ) ) ( + ( / v2 4 ) 251 ) ) ( + ( / v2 4 ) ( * v3 4 ) ) ) ( - ( min ( - v0 ( * v1 252 ) ) ( + ( / v2 4 ) 251 ) ) ( + ( / v2 4 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( - ( min v0 1000 ) 893 ) 4 ) ( / ( - ( min v0 1000 ) 893 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 251 ) ) ( + ( / v0 4 ) ( * v1 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 252 ) ( + ( * v1 504 ) v2 ) ) ( + ( * v0 252 ) ( + ( * v1 504 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 67 ) 63 ) ( / ( + v0 67 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 1 ) v1 ) 1 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min v2 1 ) v1 ) ) 1 ) ) ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 1 ) v1 ) 1 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min v2 1 ) v1 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( + ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( min ( / ( min ( + ( * v1 -16 ) v2 ) 15 ) 4 ) 1 ) 4 ) ) ) ) ( + ( / v0 4 ) ( + ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( min ( / ( min ( + ( * v1 -16 ) v2 ) 15 ) 4 ) 1 ) 4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 255 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 255 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) ( + ( max ( * ( min ( max ( min ( / ( + ( + v2 v3 ) 547 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v2 v3 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v2 v4 ) 547 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v2 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v5 8 ) 5 ) ) 2 ) 2 ) ( + ( * v5 8 ) 4 ) ) ) 1 ) ) 2 ) -1 ) 2 ) ) ( min ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) ( + ( max ( * ( min ( max ( min ( / ( + ( + v2 v3 ) 547 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v2 v3 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v2 v4 ) 547 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v2 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v5 8 ) 5 ) ) 2 ) 2 ) ( + ( * v5 8 ) 4 ) ) ) 1 ) ) 2 ) -1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( + ( * v0 4 ) v1 ) 1996 ) -3 ) ( + ( * v2 4 ) v3 ) ) ( min ( max ( min ( + ( * v0 4 ) v1 ) 1996 ) -3 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1003 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( * ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( + ( + ( * v0 16 ) v1 ) v4 ) ) 4 ) 5 ) ) ( min ( - 1003 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( * ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( + ( + ( * v0 16 ) v1 ) v4 ) ) 4 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 216 ) 112 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 216 ) 112 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 32 ) ( + ( * v2 8 ) 33 ) ) ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 32 ) ( + ( * v2 8 ) 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 127 ) 126 ) ( + ( min ( * v1 32 ) 95 ) v2 ) ) ( + ( min ( * v0 127 ) 126 ) ( + ( min ( * v1 32 ) 95 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 -1 ) v0 ) 16 ) 12 ) ) ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 -1 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( + v0 18 ) 4 ) 4 ) ( * ( / ( + v0 18 ) 4 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( max ( - ( * v1 252 ) v2 ) -242 ) ( + ( * v3 4 ) ( + ( * v4 68 ) v0 ) ) ) ) ( - v0 ( + ( max ( - ( * v1 252 ) v2 ) -242 ) ( + ( * v3 4 ) ( + ( * v4 68 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 4 ) ) ( * v2 32 ) ) ( - ( - v0 ( * v1 4 ) ) ( * v2 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 8 ) ) ( + v1 8 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 8 ) ) ( + v1 8 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( / ( + ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) v1 ) 3 ) 4 ) ) ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( / ( + ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) v1 ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( + ( * v2 126 ) ( * ( / v1 4 ) 4 ) ) 120 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( + ( * v2 126 ) ( * ( / v1 4 ) 4 ) ) 120 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 95 ) 96 ) ( / ( + v0 95 ) 96 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 16 ) v1 ) ( + ( * v2 8 ) v3 ) ) ( + ( + ( * v0 16 ) v1 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -28 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 1 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -28 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 1 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 1 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 64 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 64 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 64 ) ) ( + ( / v0 8 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) ( + ( + v1 v2 ) v3 ) ) ( + v4 2 ) ) ( min ( + ( * v0 12 ) ( + ( + v1 v2 ) v3 ) ) ( + v4 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 258 v0 ) ( + ( min v1 63 ) 9 ) ) ( min ( - 258 v0 ) ( + ( min v1 63 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 18 ) 16 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 4 ) 44 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * ( / v4 5 ) 167 ) ) ( max ( min ( * ( / v3 8 ) 2 ) 509 ) 10 ) ) 154 ) v0 ) 4 ) 12 ) ) ( min ( max ( - ( * v0 4 ) 44 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * ( / v4 5 ) 167 ) ) ( max ( min ( * ( / v3 8 ) 2 ) 509 ) 10 ) ) 154 ) v0 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 249 ) ( * v1 4 ) ) ( + ( min ( * v0 2 ) 249 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -250 ( % ( + ( * v0 250 ) ( + v1 v2 ) ) 4 ) ) 4 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) ( + ( / ( - -250 ( % ( + ( * v0 250 ) ( + v1 v2 ) ) 4 ) ) 4 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 256 ) ) ( + ( / v0 4 ) ( * v1 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 16 ) 28 ) ( * v1 44 ) ) ( + ( min ( * v0 16 ) 28 ) ( * v1 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 16 ) ( * v1 2 ) ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( + ( * v0 16 ) ( * v1 2 ) ) 499 ) 0 ) 2 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 8 ) ) ( - v0 ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( * ( min v0 31 ) 4 ) 70 ) 65 ) ( + ( max ( / v1 65 ) -1 ) 1 ) ) ( max ( / ( + ( * ( min v0 31 ) 4 ) 70 ) 65 ) ( + ( max ( / v1 65 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + v0 v1 ) 4 ) ( + ( * v2 2 ) v3 ) ) ( + ( * ( + v0 v1 ) 4 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 1879 ) -120 ) ( * v1 4 ) ) ( + ( max ( min v0 1868 ) -131 ) 8 ) ) ( min ( + ( max ( min v0 1879 ) -120 ) ( * v1 4 ) ) ( + ( max ( min v0 1868 ) -131 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 158 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - v3 ( * ( / v2 250 ) 8 ) ) 2 ) 14 ) ) 11 ) ) ( + ( * v4 2 ) 26 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -12 ) ( + ( * v4 2 ) 15 ) ) 11 ) ) ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 158 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - v3 ( * ( / v2 250 ) 8 ) ) 2 ) 14 ) ) 11 ) ) ( + ( * v4 2 ) 26 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -12 ) ( + ( * v4 2 ) 15 ) ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 4 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 7 ) ) 3 ) ) ( * v4 2 ) ) ( + ( min ( + ( * v0 4 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 7 ) ) 3 ) ) ( * v4 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 v0 ) ( - 248 v0 ) )", "end": "0"}, "rules": ["add-zero", "lt-swap-in", "mul-assoc", "gt-to-lt", "sub-to-add", "mul-comm", "add-fact-mul", "mul-zero", "add-comm"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 63 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 60 ) ) -2 ) ( + ( * v3 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ) ( + ( * ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 63 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 60 ) ) -2 ) ( + ( * v3 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 68 ( max ( * v0 32 ) 33 ) ) ( + v1 4 ) ) ( min ( - 68 ( max ( * v0 32 ) 33 ) ) ( + v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 128 ) v2 ) ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 128 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( * v3 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( * v3 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 15 ) 16 ) 0 ) ( + ( / v2 4 ) 1 ) ) ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 15 ) 16 ) 0 ) ( + ( / v2 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 2 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 62 ( * v0 8 ) ) ( - 124 ( + ( * v0 8 ) ( * v1 63 ) ) ) ) ( min ( - 62 ( * v0 8 ) ) ( - 124 ( + ( * v0 8 ) ( * v1 63 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 2001 ) 2 ) ) 5 ) 4 ) 0 ) ( + ( / v2 4 ) 2 ) ) ( / ( + ( min ( - ( min ( + v3 v0 ) ( + ( max ( min ( + v4 v1 ) 1997 ) -2 ) 3 ) ) ( max ( min v1 2001 ) 2 ) ) ( + v2 6 ) ) 2 ) 4 ) ) ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 2001 ) 2 ) ) 5 ) 4 ) 0 ) ( + ( / v2 4 ) 2 ) ) ( / ( + ( min ( - ( min ( + v3 v0 ) ( + ( max ( min ( + v4 v1 ) 1997 ) -2 ) 3 ) ) ( max ( min v1 2001 ) 2 ) ) ( + v2 6 ) ) 2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 2 ) -1 ) 2 ) v1 ) ( min ( + ( max ( * v0 2 ) -1 ) 2 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 252 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 252 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 143 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "add-assoc", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 32 ) v3 ) ) ( - 250 ( * v2 32 ) ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 32 ) v3 ) ) ( - 250 ( * v2 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 16 ) 4 ) 4 ) ( * v0 16 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 24 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 24 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 31 ) ) ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 4 ) 32 ) ) ( - v0 ( * ( / v1 4 ) 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-comm", "sub-to-add", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 36 ) ) ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * v1 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) ) ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( + ( * v0 2 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) ( - ( + 2 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 125 ) ( + 0 ( / v2 125 ) ) ) ) ( >= ( + ( + ( / v2 125 ) ( * ( / v3 4 ) 4 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v2 125 ) ( * ( / v3 4 ) 4 ) ) ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 15 4 ) 3 ) ( - ( + 64 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 748 ) v1 ) ) ( + ( min ( * v0 252 ) 748 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 748 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 748 ) 251 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "lt-swap-in", "sub-to-add", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( >= ( - 1 ( max v0 1 ) ) 2 )", "end": "0"}, "rules": ["eqgt-to-not-lt", "mul-assoc", "max-to-min", "or-comm", "add-comm", "lt-swap-out", "max-consts-or", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 124 ) ( + ( - ( + 125 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( * v0 6 ) v1 ) 5 ) ( + ( * ( + v0 1 ) 6 ) v1 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-swap-in", "lt-x-x-sub-a", "add-comm", "lt-mul-div-cancel", "lt-mul-pos-cancel", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ) ) ( <= ( - ( + ( * ( + ( * v4 6 ) v5 ) 2 ) 0 ) 2 ) ( - ( * ( + ( * v4 6 ) v5 ) 2 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v4 6 ) v5 ) 4 ) 2 ) 3 ) 2 ) ( - ( + ( * ( + ( * v4 6 ) v5 ) 2 ) 11 ) 2 ) ) ) ( <= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) ) ( >= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "sub-to-add", "add-assoc", "eqlt-to-not-gt", "mul-comm", "add-dist-mul", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( max ( * ( + v0 1 ) 2 ) -1 ) v1 ) )", "end": "1"}, "rules": ["mul-comm", "lt-swap-in", "min-consts-div-neg", "lt-min-term+cpos", "max-to-min", "sub-to-add", "add-comm", "lt-swap-out", "min-add-both", "add-assoc", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( / v1 4 ) ) 0 ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) 28 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 28 ) ) ) ) ( <= ( + ( * v2 104 ) 0 ) ( + ( * v2 104 ) 0 ) ) ) ( >= ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "eq-x-x", "Eq-lt-min", "add-assoc", "not-gt-to-eqlt", "min-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 223 ) 444 ) 0 ) v3 ) ( + ( + ( min ( * v2 223 ) 444 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 223 ) 444 ) ( - ( + 223 0 ) 1 ) ) v3 ) ( + ( + ( min ( * v2 223 ) 444 ) ( - ( + 223 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-assoc", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) 3 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 3 ) ) ) ( <= ( + ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 2 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v5 32 ) v6 ) ( + ( * v5 32 ) v6 ) ) ) ( >= ( + ( * v5 32 ) v6 ) ( + ( * v5 32 ) v6 ) ) )", "end": "1"}, "rules": ["not-gt-to-eqlt", "eq-x-x", "min-x-x-plus-a-pos", "add-comm", "eqgt-to-not-lt", "add-assoc", "min-comm", "Eq-lt-min", "min-x-x", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["Eq-lt-min", "add-const", "not-gt-to-eqlt", "min-x-x", "add-zero", "eqgt-to-not-lt", "add-comm", "eq-x-x", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( + v0 6 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( - ( * v1 8 ) 1 ) ( + ( - ( + ( * v1 8 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( * v1 8 ) 19 ) ( + ( + ( + ( * v1 8 ) ( - ( + 16 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 0 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["add-comm", "eq-x-x", "add-zero", "not-gt-to-eqlt", "Eq-lt-min", "min-x-x", "add-assoc", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( + ( max ( - ( max ( + ( min ( * v0 33 ) 98 ) v1 ) ( + ( min ( - ( + ( * v0 33 ) v1 ) ( max ( * v0 33 ) 98 ) ) v1 ) 98 ) ) ( + ( * v0 33 ) v1 ) ) 0 ) 45 ) 1024 )", "end": "1"}, "rules": ["min-comm", "add-fact-mul", "add-assoc", "add-comm", "min-max", "min-add-both", "sub-to-add", "min-mul-in-neg", "mul-assoc", "mul-zero", "mul-comm", "max-to-min", "mul-one"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 4 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 14 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 14 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 187 ) 4 ) 4 ) ( + ( * ( + ( / ( + ( % ( + v0 v2 ) 4 ) 19 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) 171 ) ) ( min ( * ( / ( + ( + v0 v1 ) 187 ) 4 ) 4 ) ( + ( * ( + ( / ( + ( % ( + v0 v2 ) 4 ) 19 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) 171 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) 9 ) ) -2 ) ( + ( max ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 116 ) 9 ) ) 1 ) ( * v3 4 ) ) ) ( - ( max ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) 9 ) ) -2 ) ( + ( max ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 116 ) 9 ) ) 1 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( - ( min ( * ( / ( - ( + v1 v2 ) 1 ) 4 ) 4 ) 2495 ) 496 ) ) ( min ( * v0 4 ) ( - ( min ( * ( / ( - ( + v1 v2 ) 1 ) 4 ) 4 ) 2495 ) 496 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 8 ) 117 ) ( * ( + ( * v2 2 ) ( + ( * v1 8 ) ( + ( * v0 16 ) v3 ) ) ) 4 ) ) ( - ( min ( * ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 8 ) 117 ) ( * ( + ( * v2 2 ) ( + ( * v1 8 ) ( + ( * v0 16 ) v3 ) ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( max ( - ( * v1 504 ) v2 ) -494 ) ( + ( * v3 4 ) ( + ( * v4 128 ) v0 ) ) ) ) ( - v0 ( + ( max ( - ( * v1 504 ) v2 ) -494 ) ( + ( * v3 4 ) ( + ( * v4 128 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) ( + ( * ( min ( + ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) ( * v3 6 ) ) ( + ( max ( min ( * ( / ( - ( + v4 v2 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 2 ) 8 ) ) ( min ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) ( + ( * ( min ( + ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) ( * v3 6 ) ) ( + ( max ( min ( * ( / ( - ( + v4 v2 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 12 ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 11 ) ) ( max ( + ( / v1 4 ) ( - ( * v2 12 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v3 -32 ) ) ) ) 0 ) ) v4 ) ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 12 ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 11 ) ) ( max ( + ( / v1 4 ) ( - ( * v2 12 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v3 -32 ) ) ) ) 0 ) ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) 241 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) 241 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( min v4 15 ) ( + ( * v0 16 ) v1 ) ) 4 ) 4 ) ) ( min ( max ( max ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( min v4 15 ) ( + ( * v0 16 ) v1 ) ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 6 ) 4 ) ) -4 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 6 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( - 251 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( * ( - ( min ( - ( / ( - ( + v2 v3 ) 1 ) 4 ) ( * v4 128 ) ) ( + ( / v3 4 ) 127 ) ) ( + ( + ( * v0 16 ) v1 ) ( + ( / v3 4 ) ( * v5 63 ) ) ) ) 4 ) 3 ) ) ( min ( - 251 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( * ( - ( min ( - ( / ( - ( + v2 v3 ) 1 ) 4 ) ( * v4 128 ) ) ( + ( / v3 4 ) 127 ) ) ( + ( + ( * v0 16 ) v1 ) ( + ( / v3 4 ) ( * v5 63 ) ) ) ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 252 ) 6 ) ( - ( * v0 252 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * ( + ( * ( / ( - ( + ( min v1 751 ) v2 ) 1 ) 250 ) 8 ) v3 ) 2 ) v4 ) ) ( - ( * v0 2 ) ( + ( * ( + ( * ( / ( - ( + ( min v1 751 ) v2 ) 1 ) 250 ) 8 ) v3 ) 2 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( + ( * v1 9 ) v2 ) v3 ) ) ( - v0 ( + ( + ( * v1 9 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + 3 v3 ) ( + ( - ( + 4 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 63 ) ) ( + ( / v0 4 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( + ( / v0 4 ) ( * v1 16 ) ) 4 ) 53 ) v2 ) ( min ( + ( * ( + ( / v0 4 ) ( * v1 16 ) ) 4 ) 53 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 2 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 4 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( / v0 16 ) 2 ) ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == ( min ( + ( - ( min ( + ( + ( min ( * v0 68 ) 194 ) ( + ( / v1 4 ) ( * v2 252 ) ) ) 57 ) v3 ) ( max ( + ( / v1 4 ) ( - ( * v0 68 ) ( min ( + ( + ( min ( * v0 68 ) 194 ) ( / v1 4 ) ) 57 ) ( + ( * v2 -252 ) v3 ) ) ) ) 10 ) ) 10 ) v4 ) ( min ( + ( - ( min ( + ( + ( min ( * v0 68 ) 194 ) ( + ( / v1 4 ) ( * v2 252 ) ) ) 57 ) v3 ) ( max ( + ( / v1 4 ) ( - ( * v0 68 ) ( min ( + ( + ( min ( * v0 68 ) 194 ) ( / v1 4 ) ) 57 ) ( + ( * v2 -252 ) v3 ) ) ) ) 10 ) ) 10 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * ( % v2 16 ) 4 ) 0 ) ( + ( * ( % v2 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v2 16 ) 4 ) 3 ) ( + ( * ( % v2 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( max ( / ( - ( - v0 ( + ( * v1 64 ) v2 ) ) 3 ) 4 ) ( + ( / ( - v0 v2 ) 4 ) ( * v1 -16 ) ) ) ( max ( / ( - ( - v0 ( + ( * v1 64 ) v2 ) ) 3 ) 4 ) ( + ( / ( - v0 v2 ) 4 ) ( * v1 -16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * ( / ( - v1 19 ) 8 ) 2 ) v2 ) ) ( + ( * v0 2 ) ( + ( * ( / ( - v1 19 ) 8 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 250 ) 64 ) ( + ( * ( / ( + ( * ( min ( + ( * ( / v1 5 ) -23 ) ( * v2 8 ) ) 10 ) 8 ) 104 ) 31 ) 31 ) ( * ( / v1 5 ) 184 ) ) ) ( + ( * ( / v0 250 ) 64 ) ( + ( * ( / ( + ( * ( min ( + ( * ( / v1 5 ) -23 ) ( * v2 8 ) ) 10 ) 8 ) 104 ) 31 ) 31 ) ( * ( / v1 5 ) 184 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 251 ) ( * v1 16 ) ) ( + ( min ( * v0 2 ) 251 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 2 ) 9 ) ) ( * ( / v1 250 ) 8 ) ) ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 2 ) 9 ) ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -16 ) ( - ( - ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v3 32 ) ) ( / ( + v1 v2 ) 4 ) ) ) ( + ( * v0 -16 ) ( - ( - ( / ( + ( + v1 v2 ) 255 ) 4 ) ( * v3 32 ) ) ( / ( + v1 v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( - v0 1 ) 4 ) ( / v1 4 ) ) -1 ) v2 ) ( min ( max ( - ( / ( - v0 1 ) 4 ) ( / v1 4 ) ) -1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 251 ) ) ( - ( * ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 64 ) 140 ) 36 ) ) 36 ) 4 ) 4 ) ( * ( % v0 ( / ( + ( * v1 64 ) 140 ) 36 ) ) 36 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 39 ) ) ( + ( * v2 64 ) v3 ) ) ( - ( - v0 ( * v1 39 ) ) ( + ( * v2 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 499 ( * ( + ( * v0 63 ) ( + ( * v1 32 ) v2 ) ) 4 ) ) ( - 251 ( * ( + ( * v1 32 ) v2 ) 4 ) ) ) ( min ( - 499 ( * ( + ( * v0 63 ) ( + ( * v1 32 ) v2 ) ) 4 ) ) ( - 251 ( * ( + ( * v1 32 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( + ( / v1 4 ) 3 ) ) ( + ( / v1 4 ) v3 ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( + ( / v1 4 ) 3 ) ) ( + ( / v1 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 6 ) ( - ( + ( + v0 1 ) v1 ) 6 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v3 491 ) v0 ) 5 ) ) ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v3 491 ) v0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) 61 ) ) 2 ) ( + ( + ( * v3 16 ) ( + ( min ( * v4 2 ) 253 ) ( * v5 64 ) ) ) 10 ) ) ( min ( * ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) 61 ) ) 2 ) ( + ( + ( * v3 16 ) ( + ( min ( * v4 2 ) 253 ) ( * v5 64 ) ) ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 1 v0 ) ( - 125 v0 ) )", "end": "0"}, "rules": ["mul-assoc", "add-assoc", "mul-comm", "add-fact-mul", "lt-swap-in", "mul-zero", "add-comm", "gt-to-lt", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 27 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "mul-comm", "sub-to-add", "Eq-a-b", "eq-comm", "add-comm"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 8 ) 28 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 8 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 3 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 3 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + v0 v1 ) 2 ) v2 ) ( min ( + ( + v0 v1 ) 2 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / v0 16 ) 126 ) 2 ) ( + ( max ( min ( / ( + ( + v1 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( min ( max ( min ( / v0 16 ) 126 ) 2 ) ( + ( max ( min ( / ( + ( + v1 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 3 ) -5 ) ( + ( * v1 9 ) ( + v2 v3 ) ) ) ( + ( max ( * v0 3 ) -5 ) ( + ( * v1 9 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -528 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -528 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 16 ) 236 ) 4 ) 4 ) ( min ( * v0 16 ) 236 ) )", "end": "1"}, "rules": ["min-div-in-pos", "div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm", "min-mul-in-pos"]}, {"expression": {"start": "( == ( * ( / ( * v0 36 ) 4 ) 4 ) ( * v0 36 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - v0 ( + ( * v1 8 ) v2 ) ) ( - v0 ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 4 ) 72 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 4 ) 72 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - v0 11 ) v1 ) ( + v2 v1 ) ) ( + ( + v3 v0 ) 7 ) ) ( min ( max ( max ( - v0 11 ) v1 ) ( + v2 v1 ) ) ( + ( + v3 v0 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 16 ) ( + ( / ( - ( * v0 64 ) ( max ( * ( + ( * v0 16 ) v1 ) 4 ) 121 ) ) 4 ) 31 ) ) ( min ( * v0 16 ) ( + ( / ( - ( * v0 64 ) ( max ( * ( + ( * v0 16 ) v1 ) 4 ) 121 ) ) 4 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( + ( / v1 4 ) 15 ) ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 8 ) ) ) ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( + ( / v1 4 ) 15 ) ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 125 ) 125 ) 125 ) ( * v0 125 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-one"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 128 ) 128 ) ) 127 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 128 ) 128 ) ) 127 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 8 ) ( + ( max ( - ( / v1 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) -45 ) 11 ) ) ( min ( * v0 8 ) ( + ( max ( - ( / v1 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) -45 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ( * v4 -4 ) ) 7 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ( * v4 -4 ) ) 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -500 ) 4 ) 4 ) ( * v0 -500 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 128 ) ) ( + ( / v0 8 ) ( * v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + v1 v2 ) ) ( + ( * v0 16 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( max ( - ( + ( + v0 v1 ) v2 ) 1 ) ( + v3 v1 ) ) ( + ( - ( + ( + v0 v1 ) ( - v2 1 ) ) 1 ) 1 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-assoc", "max-consts-and", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) 4 ) ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) 4 ) ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) ( - ( + 16 0 ) 1 ) ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-dist-mul", "mul-comm", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 116 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * v3 126 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 116 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) ) ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 116 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * v3 126 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 116 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 968 ) v1 ) ) ( + ( min ( * v0 32 ) 968 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 968 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt", "add-comm", "add-zero", "lt-to-zero"]}, {"expression": {"start": "( >= ( - ( * v0 8 ) 1 ) ( + ( + ( * ( - v0 1 ) 8 ) 11 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-out", "add-dist-mul", "lt-x-x-sub-a", "mul-comm", "lt-swap-in", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( * v1 8 ) ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) ( max -2 0 ) ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) ( + ( * v1 8 ) 9 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "mul-comm", "add-assoc", "lt-to-zero", "add-const", "sub-to-add", "mul-zero", "eqgt-to-not-lt", "mul-assoc", "lt-swap-out", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 250 ) v3 ) v4 ) ( + ( + ( * v2 250 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 250 ) v3 ) v4 ) ( + ( + ( * v2 250 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 125 ) v1 ) ) ( + ( * v0 125 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 125 ) v1 ) 121 ) ) ( + ( + ( * v0 125 ) v1 ) 124 ) ) ) ( <= ( + ( * v2 125 ) v3 ) ( + ( * v2 125 ) v3 ) ) ) ( >= ( + ( + ( * v2 125 ) v3 ) 124 ) ( + ( + ( * v2 125 ) v3 ) 124 ) ) ) ( <= ( + ( * 0 7 ) 0 ) 0 ) ) ( >= ( + ( * 1 7 ) 6 ) 13 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( / v5 4 ) ( / v5 4 ) ) ) ( >= ( - ( + v6 ( / v5 4 ) ) 1 ) ( - ( + v6 ( / v5 4 ) ) 1 ) ) ) ( <= ( + ( * v7 12 ) v8 ) ( + ( * v7 12 ) v8 ) ) ) ( >= ( + ( * v7 12 ) v8 ) ( + ( * v7 12 ) v8 ) ) )", "end": "1"}, "rules": ["add-zero", "Eq-lt-min", "eq-x-x", "eqgt-to-not-lt", "min-x-x", "add-const", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "sub-to-add", "max-min-switch", "min-add-both", "add-assoc", "add-fact-mul", "add-comm", "mul-assoc", "add-dist-mul", "mul-zero", "mul-comm", "Eq-min-c-pos"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( * ( / ( - ( min ( min ( * v1 252 ) ( + ( * ( / ( max ( * v1 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) ( * v1 252 ) ) 4 ) 4 ) ( - ( min ( min ( * v1 252 ) ( + ( * ( / ( max ( * v1 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) ( * v1 252 ) ) )", "end": "1"}, "rules": ["div-minus-out", "mul-assoc", "add-dist-mul", "add-comm", "min-ass", "div-consts-add", "min-x-x-plus-a-pos", "sub-to-add", "eq-x-x", "min-comm", "min-mul-in-pos", "div-consts-mul", "min-div-in-pos", "min-consts-div-neg", "eq-x-y-0", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( + 0 ( * v4 69 ) ) ( * v4 69 ) ) ) ( >= ( + 3 ( + ( * v4 69 ) 68 ) ) ( + ( * v4 69 ) 68 ) ) )", "end": "0"}, "rules": ["div-minus-in", "mul-assoc", "lt-mul-div-cancel", "mul-comm", "add-assoc", "eqlt-to-not-gt", "lt-swap", "sub-to-add", "lt-swap-in", "add-zero", "eqgt-to-not-lt", "mul-zero", "add-comm", "add-fact-mul", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "lt-swap-out", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 32 ) v3 ) 29 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 32 ) v3 ) 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 8 ) 9 ) 0 )", "end": "1"}, "rules": ["and-comm", "max-consts-and", "lt-swap-in", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + -500 ( * v0 4 ) ) ( + -500 ( * v0 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -252 ) ( - v1 ( * v2 504 ) ) ) ( + ( * v0 -252 ) ( - v1 ( * v2 504 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( min ( * v2 12 ) 20 ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 11 ) ) ( max ( + ( / v1 4 ) ( - ( * v2 12 ) ( min ( + ( + ( min ( * v2 12 ) 20 ) ( / v1 4 ) ) 11 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v3 -32 ) ) ) ) ) 0 ) ) v4 ) ( min ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( min ( * v2 12 ) 20 ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 11 ) ) ( max ( + ( / v1 4 ) ( - ( * v2 12 ) ( min ( + ( + ( min ( * v2 12 ) 20 ) ( / v1 4 ) ) 11 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v3 -32 ) ) ) ) ) 0 ) ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 256 ) 251 ) ( / ( + v0 256 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( * v3 128 ) v1 ) 128 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( * v3 128 ) v1 ) 128 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( / ( - -60 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 4 ) ) 4 ) ( * ( + ( * v0 4 ) v4 ) 4 ) ) ) ( - ( * v0 16 ) ( + ( / ( - -60 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 4 ) ) 4 ) ( * ( + ( * v0 4 ) v4 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + v2 v3 ) ) ( - ( + ( / v0 4 ) v1 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( / ( + ( + v0 v1 ) 235 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) ) ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( / ( + ( + v0 v1 ) 235 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 62 ) 63 ) ( / ( + v0 62 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 126 ) 2 ) ( * v1 16 ) ) ( + ( max ( min v0 126 ) 2 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + v1 v2 ) ) ( - v0 ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 1999 ) ( * v1 4 ) ) ( + ( min v0 1999 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 3 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( / v1 16 ) ( * v2 64 ) ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 64 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 702 ) 280 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 702 ) 280 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 91 ) 86 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 91 ) 86 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( + ( * v1 16 ) v2 ) 4 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( + ( * v1 16 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) 45 ) ( * v1 2 ) ) ( - ( max ( * v0 2 ) 45 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 252 ) ) ( - v0 ( * v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) 7 ) 4 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) 7 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 4 ) ( - ( min ( * ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( * v3 12 ) ) 2 ) 253 ) ( max ( * ( min ( max ( min ( / ( + ( + v1 v2 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v1 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v1 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v3 12 ) 9 ) ) 2 ) 2 ) ( + ( * v3 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) ) ) 5 ) 2 ) ( min ( + ( max ( * v5 2 ) -1 ) 2 ) v6 ) ) ( + ( max ( min ( + ( * v0 4 ) ( - ( min ( * ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( * v3 12 ) ) 2 ) 253 ) ( max ( * ( min ( max ( min ( / ( + ( + v1 v2 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v1 v2 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v1 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v1 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v3 12 ) 9 ) ) 2 ) 2 ) ( + ( * v3 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) ) ) 5 ) 2 ) ( min ( + ( max ( * v5 2 ) -1 ) 2 ) v6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 2 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) ( * v3 16 ) ) ( - ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) ( * v3 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 127 ( * ( + ( * v0 11 ) ( + ( * v1 4 ) v2 ) ) 4 ) ) ( - 43 ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) ( min ( - 127 ( * ( + ( * v0 11 ) ( + ( * v1 4 ) v2 ) ) 4 ) ) ( - 43 ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 252 ) ( + ( * v2 126 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 252 ) ( + ( * v2 126 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 128 ) 6 ) ( - ( * v0 128 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * v2 8 ) v3 ) ) ( + ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 0 ) v0 ) 4 ) 4 ) ) ( min ( max ( max ( - ( * v0 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 0 ) v0 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( + v0 v1 ) 8 ) ( + ( / v2 4 ) 69 ) ) ( + ( * ( + v0 v1 ) 8 ) 9 ) ) ( min ( max ( * ( + v0 v1 ) 8 ) ( + ( / v2 4 ) 69 ) ) ( + ( * ( + v0 v1 ) 8 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + ( - v0 v1 ) 11 ) 4 ) 4 ) v1 ) ( + v0 12 ) ) ( min ( + ( * ( / ( + ( - v0 v1 ) 11 ) 4 ) 4 ) v1 ) ( + v0 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) ) ( + ( * v0 32 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 46 ) ) ( + ( / v0 4 ) 45 ) ) ( * v4 -4 ) ) 7 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 46 ) ) ( + ( / v0 4 ) 45 ) ) ( * v4 -4 ) ) 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * v1 4 ) ) ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 251 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 16 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( max ( + ( * v0 2 ) ( - ( max ( min ( / v1 16 ) 126 ) 2 ) ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) ) ) 1 ) 16 ) 40 ) ( * ( min ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v0 2 ) ) ( + ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) 16 ) ) ( + ( min ( * ( max ( + ( * v0 2 ) ( - ( max ( min ( / v1 16 ) 126 ) 2 ) ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) ) ) 1 ) 16 ) 40 ) ( * ( min ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v0 2 ) ) ( + ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 32 ) ) 31 ) ) ( max ( - ( / v1 4 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 -32 ) ) ) -24 ) ) 24 ) ( - ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 32 ) ) 31 ) ) ( max ( - ( / v1 4 ) ( + ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 -32 ) ) ) -24 ) ) 24 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( min ( - v0 ( * v1 252 ) ) 242 ) ( * v2 -32 ) ) ( + ( min ( - v0 ( * v1 252 ) ) 242 ) ( * v2 -32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 89 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 8 ) ( + ( * v1 126 ) v2 ) ) 89 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 8 ) v1 ) 2 ) v2 ) ( min ( + ( + ( * v0 8 ) v1 ) 2 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 32 ) ) ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 252 ) 251 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 252 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 64 ) ( + ( * ( / ( + ( + v1 v2 ) 124 ) 250 ) 64 ) 1 ) ) ( min ( * v0 64 ) ( + ( * ( / ( + ( + v1 v2 ) 124 ) 250 ) 64 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 4 ) ( / ( + 0 v2 ) 4 ) ) ) ( >= ( + ( / v2 4 ) 31 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["div-separate", "add-comm", "add-assoc", "eqgt-to-not-lt", "add-zero", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( max ( * v0 2 ) ( + ( * ( + ( * v1 2 ) v0 ) 2 ) 1 ) ) ( max ( * v0 2 ) ( + ( * ( + ( * v1 2 ) v0 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 2 ) ( - ( + ( - v0 2 ) ( + -5 6 ) ) 1 ) )", "end": "1"}, "rules": ["sub-to-add", "add-comm", "add-assoc", "eq-x-x"]}, {"expression": {"start": "( > ( - 2 v0 ) ( - 251 v0 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-fact-mul", "sub-to-add", "mul-comm", "add-comm", "gt-to-lt", "mul-zero", "add-const", "add-assoc"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * ( / v1 8 ) 8 ) ) ( + ( / v0 4 ) ( * ( / v1 8 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 1000 ) 8 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "min-max-const", "Eq-lt-min", "not-gt-to-eqlt", "lt-swap-in"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 255 ) ) ( + ( / v0 4 ) ( * v1 255 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2001 ) 2 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2001 ) 2 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -512 ) 256 ) 256 ) ( * v0 -512 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( - ( * ( + v0 v1 ) 2 ) 4 ) ( - ( + ( - ( * ( + v0 v1 ) 2 ) 4 ) 2 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-assoc", "add-fact-mul", "mul-zero", "add-const", "add-comm", "sub-to-add", "eq-x-y-0"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( - ( * v1 128 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) ( + ( / v0 8 ) ( - ( * v1 128 ) ( / ( + ( + v2 v0 ) 7 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "add-comm", "mul-assoc", "add-assoc", "lt-to-zero", "add-dist-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + 3 v2 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ) ) ( >= ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ) ) ( <= ( + 0 v4 ) ( + 0 v4 ) ) ) ( >= ( + 3 v4 ) ( + ( - ( + 4 0 ) 1 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( * ( max v0 -5 ) -8 ) 44 ) ( - ( + ( - ( * ( max v0 -5 ) -8 ) 44 ) ( + ( * ( max v0 -5 ) 8 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "sub-to-add", "eq-swap", "Eq-a-b", "add-fact-mul", "mul-comm", "add-assoc", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * ( + ( * v1 8 ) 0 ) 4 ) 0 ) ( * v1 32 ) ) ) ( >= ( + ( * ( + ( * v1 8 ) 7 ) 4 ) 3 ) ( + ( * v1 32 ) 31 ) ) )", "end": "1"}, "rules": ["add-zero", "mul-comm", "add-assoc", "eqgt-to-not-lt", "mul-assoc", "lt-to-zero", "eqlt-to-not-gt", "add-dist-mul", "add-comm"]}, {"expression": {"start": "( >= v0 ( - ( + v0 16 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "add-assoc", "lt-swap-out", "sub-to-add", "add-comm"]}, {"expression": {"start": "( <= ( + ( * ( + ( * v0 16 ) v1 ) 2 ) 2 ) ( * ( + ( * v0 16 ) v1 ) 2 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * v2 8 ) 0 ) v3 ) ( + ( + ( * v2 8 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 8 ) ( - ( + 8 0 ) 1 ) ) v3 ) ( + ( + ( * v2 8 ) ( - ( + 8 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "add-assoc", "add-zero", "lt-to-zero", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 125 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "add-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) ( - ( + ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) ( + ( * v1 8 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "add-comm", "mul-assoc", "add-fact-mul", "mul-comm", "add-assoc", "eq-swap", "sub-to-add", "Eq-a-b"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 7 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - ( + ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - 9 ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-add-both", "mul-assoc", "Eq-min-c-pos", "add-comm", "max-to-min", "mul-comm", "max-min-switch", "mul-zero", "add-assoc", "eq-x-y-0", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * 7 4 ) v1 ) 3 ) ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "lt-to-zero", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) v2 ) ( - ( - ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc", "min-add-both", "Eq-min-lt", "lt-swap-in"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 12 ) ) ( / v1 4 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 12 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 16 ) 989 ) ( + ( * v1 4 ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ) ( + ( min ( * v0 16 ) 989 ) ( + ( * v1 4 ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 16 ) ) 15 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 16 ) ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 32 ) v3 ) 1 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 32 ) v3 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) 500 ) ( + ( * v0 500 ) 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) 4 ) ) ( - v0 ( / ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( * v0 2 ) 251 ) v3 ) 8 ) 188 ) ) ( min ( max ( max ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( * v0 2 ) 251 ) v3 ) 8 ) 188 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + v1 1000 ) ) ( + ( * v3 4 ) ( + ( * v4 504 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + v1 1000 ) ) ( + ( * v3 4 ) ( + ( * v4 504 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( min ( + ( * v0 4 ) 3 ) v1 ) 4 ) v0 ) ( min ( / ( min ( + ( * v0 4 ) 3 ) v1 ) 4 ) v0 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 9 ) ) ( / ( + v2 v3 ) 8 ) ) ( - ( - v0 ( * v1 9 ) ) ( / ( + v2 v3 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 128 ) ( + v1 5 ) ) ( min ( * v0 128 ) ( + v1 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 7 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 7 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( + v0 v1 ) 2 ) 4 ) ( max ( * ( + v0 v1 ) 2 ) 5 ) ) ( min ( max ( * ( + v0 v1 ) 2 ) 4 ) ( max ( * ( + v0 v1 ) 2 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 4 ) 8 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "and-comm", "eqgt-to-not-lt", "max-consts-and"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 4 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 1011 ) 1003 ) v1 ) ( / ( + v0 1 ) 1003 ) ) ( max ( min ( / ( + v0 1011 ) 1003 ) v1 ) ( / ( + v0 1 ) 1003 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1005 ) 995 ) v1 ) ( min ( + ( * v0 1005 ) 995 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + v1 v2 ) 125 ) ) ( - v0 ( / ( + v1 v2 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( * ( + ( * v1 16 ) v2 ) 4 ) v3 ) ) ( - v0 ( + ( * ( + ( * v1 16 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1987 ) -12 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1987 ) -12 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( max v0 18 ) ( * v1 2 ) ) 2 ) ( + ( max ( * v0 2 ) 5 ) 28 ) ) ( min ( * ( + ( max v0 18 ) ( * v1 2 ) ) 2 ) ( + ( max ( * v0 2 ) 5 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( max ( min ( + v0 v1 ) 1999 ) v2 ) ( + v3 v2 ) ) 0 ) ( + ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) v4 ) 3 ) ) ( min ( max ( max ( max ( min ( + v0 v1 ) 1999 ) v2 ) ( + v3 v2 ) ) 0 ) ( + ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) v4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) 7 ) ) ( * v3 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 4 ) 1999 ) ( * v4 4 ) ) ) ( - ( max ( * ( + ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) 7 ) ) ( * v3 125 ) ) 4 ) -3 ) ( + ( min ( * ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 4 ) 1999 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 -4 ) -3 ) ( * ( - ( - ( min ( * ( + ( * v1 2 ) v2 ) 4 ) ( + ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) 101 ) ) ( * v2 4 ) ) ( * v1 8 ) ) 4 ) ) ( + ( min ( * v0 -4 ) -3 ) ( * ( - ( - ( min ( * ( + ( * v1 2 ) v2 ) 4 ) ( + ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) 101 ) ) ( * v2 4 ) ) ( * v1 8 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 63 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 63 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 2 ) ) ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 55 ) ( * v4 63 ) ) 117 ) ( + ( / ( + v0 v1 ) 4 ) ( * v5 125 ) ) ) 7 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 55 ) ( * v4 63 ) ) 117 ) ( + ( / ( + v0 v1 ) 4 ) ( * v5 125 ) ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) v1 ) ( + ( * v0 8 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 127 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 127 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 31 ) 32 ) ( / ( + v0 31 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 2000 ) 1 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 2000 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 2 ) ) ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( - ( * v0 8 ) ( min ( + ( * v1 -126 ) v2 ) 116 ) ) -82 ) -89 ) ( min ( + ( min ( + ( * v1 126 ) 116 ) v2 ) v3 ) ( + v4 89 ) ) ) ( + ( max ( min ( - ( * v0 8 ) ( min ( + ( * v1 -126 ) v2 ) 116 ) ) -82 ) -89 ) ( min ( + ( min ( + ( * v1 126 ) 116 ) v2 ) v3 ) ( + v4 89 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 16 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 16 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 4 ) v3 ) 771 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 4 ) v3 ) 771 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 64 ) 63 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 64 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 4 ) ) ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) ( + ( / v1 8 ) ( * v3 12 ) ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) ( + ( / v1 8 ) ( * v3 12 ) ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 64 ) 8 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "and-comm", "eqgt-to-not-lt", "max-consts-and"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( >= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( + ( * v0 500 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 500 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 4 ( * ( max v0 1 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "mul-comm", "mul-assoc", "Eq-a-b", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( == ( max ( - v0 v1 ) ( - ( - v0 ( * v2 8 ) ) ( / v3 4 ) ) ) ( max ( - v0 v1 ) ( - ( - v0 ( * v2 8 ) ) ( / v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + -494 ( + ( * v1 4 ) ( + ( * v2 256 ) v0 ) ) ) ) ( - v0 ( + -494 ( + ( * v1 4 ) ( + ( * v2 256 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 16 ) v3 ) 15 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 16 ) v3 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) 8 ) v1 ) ( min ( + ( * v0 2 ) 8 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 15 ) 16 ) ) -16 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 15 ) 16 ) ) -16 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min v0 -1 ) 2 ) 6 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-comm", "sub-to-add", "Eq-a-b", "eq-comm", "eq-swap"]}, {"expression": {"start": "( == ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 4 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "mul-comm", "add-dist-mul", "add-fact-mul", "mul-zero", "eq-x-y-0", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 255 ) 252 ) ) -252 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 255 ) 252 ) ) -252 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) v2 ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) v2 ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) v2 ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) v2 ) 515 ) 8 ) ) -8 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( * v2 4 ) ( + ( / v1 16 ) ( * v3 64 ) ) ) 3 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( + ( * v2 4 ) ( + ( / v1 16 ) ( * v3 64 ) ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) 1027 ) 16 ) ( - ( + 0 ( / ( + ( % v3 4 ) 1055 ) 16 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "and-min-to-lt", "add-comm", "max-consts-or", "lt-mul-div-cancel", "lt-const-mod", "lt-swap-out"]}, {"expression": {"start": "( == ( min ( max ( max ( * v0 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - v3 ( max ( min v4 509 ) 10 ) ) -11 ) v0 ) 4 ) 48 ) ) ( min ( max ( max ( * v0 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - v3 ( max ( min v4 509 ) 10 ) ) -11 ) v0 ) 4 ) 48 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -12 ) 4 ) 4 ) ( * v0 -12 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) ( - ( + ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) 9 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 8 ) 117 ) v1 ) v2 ) ( + ( + ( min ( * v0 8 ) 117 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) 110 ) ( - ( + ( + ( + v0 v1 ) 110 ) 23 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "mul-zero", "add-assoc", "add-fact-mul", "eq-x-y-0", "add-dist-mul", "eq-comm", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) 116 ) ( - ( + ( + ( + v0 v1 ) 116 ) 9 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "eqgt-to-not-lt", "lt-x-x-sub-a", "sub-to-add", "lt-swap-out"]}, {"expression": {"start": "( < ( + ( + ( * v0 250 ) ( + ( min ( * v1 32 ) 218 ) v2 ) ) v3 ) ( + ( + ( * v0 250 ) ( + ( min ( * v1 32 ) 218 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( >= ( + ( + ( + v0 v1 ) v2 ) v3 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) v3 ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "add-comm", "eqgt-to-not-lt", "sub-to-add", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 10 ) ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 10 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 10 ) ( - ( + ( + ( * v1 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) 10 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) ( + ( + ( / v1 4 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) ( + ( / v1 4 ) v4 ) ) ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) ( + ( + ( / v1 4 ) ( * v3 4 ) ) 3 ) ) ( * v3 -4 ) ) ( + ( / v1 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 4 ) ( + ( + ( + ( - v0 1 ) v1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt", "add-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 12 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) 2 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 12 ) 11 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["mul-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-zero", "mul-assoc", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( == ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - ( + ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 10 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "mul-assoc", "add-comm", "mul-zero", "eq-swap", "add-assoc", "mul-comm", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( < v0 ( min ( max ( - v1 1 ) ( + v0 1 ) ) ( - ( + v0 1 ) 1 ) ) )", "end": "0"}, "rules": ["and-min-to-lt", "min-comm", "lt-swap-in", "lt-to-zero", "lt-swap", "sub-to-add", "add-dist-mul"]}, {"expression": {"start": "( >= v0 ( - ( + v0 3 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "eqgt-to-not-lt", "sub-to-add", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 8 ) v4 ) ( + ( * v3 8 ) v4 ) ) ) ( >= ( + ( * v3 8 ) v4 ) ( + ( * v3 8 ) v4 ) ) )", "end": "0"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 7 ) ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 5 ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v0 ) 3 ) 7 ) ( - ( + ( + ( + ( * ( - ( + 252 0 ) 1 ) 4 ) v0 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ) ) ( <= ( - v1 7 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( + v1 126 ) ( + ( - ( - 4 2 ) 1 ) ( - ( + 131 ( - v1 5 ) ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "not-gt-to-eqlt", "sub-to-add", "eq-x-x", "Eq-lt-min", "min-x-x-plus-a-neg", "min-x-x", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["min-comm", "not-gt-to-eqlt", "add-assoc", "sub-to-add", "and-min-to-lt", "min-sub-both", "lt-to-zero", "add-comm", "Eq-lt-min", "eqgt-to-not-lt", "Eq-min-lt", "eqlt-to-not-gt", "min-ass"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + 0 v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["mul-assoc", "not-gt-to-eqlt", "Eq-lt-min", "eq-x-x", "add-comm", "mul-comm", "eqgt-to-not-lt", "add-assoc", "add-zero", "min-x-x", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 132 ) ( + v0 132 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-in", "lt-x-x-sub-a", "and-comm", "add-comm", "lt-swap-out", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 2 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 2 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) v2 ) ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -12 ) ( + ( * v2 16 ) 15 ) ) ( min ( max ( - ( / v0 16 ) ( * ( / v1 250 ) 16 ) ) -12 ) ( + ( * v2 16 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( + ( min ( + ( * v1 -32 ) v2 ) 15 ) ( * ( / ( min ( + ( * v1 32 ) 31 ) v2 ) 16 ) 16 ) ) ) v3 ) ( min ( + ( / v0 4 ) ( + ( min ( + ( * v1 -32 ) v2 ) 15 ) ( * ( / ( min ( + ( * v1 32 ) 31 ) v2 ) 16 ) 16 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 131 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 131 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 499 ( + ( * v0 32 ) ( * v1 63 ) ) ) ( - 62 ( * v0 32 ) ) ) ( min ( - 499 ( + ( * v0 32 ) ( * v1 63 ) ) ) ( - 62 ( * v0 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 1003 ) 1000 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 1003 ) 1000 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 34 ) 32 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 34 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 2 ) ) ( min ( max ( - ( / ( + v0 7 ) 4 ) ( / v1 4 ) ) -1 ) ( + v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -128 ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -128 ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( * ( / v0 250 ) 64 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 89 ) ) ( + ( min ( / ( - ( + v3 v1 ) 2 ) 4 ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 21 ) ) 68 ) ) ( max ( min ( max ( * ( / v0 250 ) 64 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 89 ) ) ( + ( min ( / ( - ( + v3 v1 ) 2 ) 4 ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 21 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 8 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 8 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 8 ) ( + ( * ( + ( * ( max v3 0 ) 2 ) v4 ) 4 ) 28 ) ) ( min ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 8 ) ( + ( * ( + ( * ( max v3 0 ) 2 ) v4 ) 4 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -16 ( max ( min ( - v0 ( * v1 256 ) ) 241 ) -14 ) ) ( - ( max v2 -241 ) 16 ) ) ( max ( - -16 ( max ( min ( - v0 ( * v1 256 ) ) 241 ) -14 ) ) ( - ( max v2 -241 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( - ( * v0 2 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + v0 v1 ) 1882 ) -117 ) ( * ( / ( + v2 11 ) 4 ) 4 ) ) ( + ( max ( min ( + v0 v1 ) 1875 ) -124 ) 8 ) ) ( min ( + ( max ( min ( + v0 v1 ) 1882 ) -117 ) ( * ( / ( + v2 11 ) 4 ) 4 ) ) ( + ( max ( min ( + v0 v1 ) 1875 ) -124 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) v2 ) ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * ( max ( min ( / v0 16 ) 126 ) 2 ) 2 ) v1 ) 8 ) ( * ( + ( * ( max ( min ( / v0 16 ) 126 ) 2 ) 2 ) v1 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max v0 18 ) ( * v1 2 ) ) ( + ( max v0 18 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 44 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 44 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( min ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v2 8 ) 2 ) 509 ) 10 ) ) ( + ( min ( * v0 16 ) 234 ) 3 ) ) ) ( - ( * v0 16 ) ( min ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v2 8 ) 2 ) 509 ) 10 ) ) ( + ( min ( * v0 16 ) 234 ) 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( * v3 4 ) ) ( / v1 8 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( * v3 4 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( * v2 32 ) 218 ) ( + ( / v1 4 ) ( * v3 250 ) ) ) 31 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( * v2 32 ) 218 ) ( + ( / v1 4 ) ( * v3 250 ) ) ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 1017 ) 1000 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 1017 ) 1000 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 32 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 32 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) 64 ) v1 ) ( min ( + ( * v0 64 ) 64 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 64 ) ( - v1 64 ) ) ( min ( * v0 64 ) ( - v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 500 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) v2 ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( + ( / v1 64 ) 1 ) ) -64 ) 32 ) 32 ) ( * ( % v0 ( + ( / v1 64 ) 1 ) ) -64 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * v0 32 ) 29 ) ( * ( + ( * v0 8 ) v1 ) 4 ) ) ( - ( min ( * v0 32 ) 29 ) ( * ( + ( * v0 8 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 4 ) 59 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 4 ) 59 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( max ( max ( min v0 2 ) v1 ) ( + v2 v1 ) ) 0 ) ( + ( max ( min v0 2 ) 0 ) v3 ) ) ( min ( max ( max ( max ( min v0 2 ) v1 ) ( + v2 v1 ) ) 0 ) ( + ( max ( min v0 2 ) 0 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 126 ) ( + ( * v2 63 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 126 ) ( + ( * v2 63 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( % ( + ( + ( min ( + ( * v0 500 ) 500 ) v1 ) v2 ) 7 ) 8 ) 515 ) 8 ) ( * v3 4 ) ) ( + ( / ( - ( % ( + ( + ( min ( + ( * v0 500 ) 500 ) v1 ) v2 ) 7 ) 8 ) 515 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 11 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 32 ) v2 ) ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 32 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 12 ) v2 ) ) ( + ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 12 ) v2 ) ) ( + ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 8 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - ( + v2 ( * v3 128 ) ) 1 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - ( + v2 ( * v3 128 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + ( max ( * v2 4 ) -3 ) 4 ) ) ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + ( max ( * v2 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - -2 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - 497 ( * ( + ( * v0 2 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["mul-assoc", "add-fact-mul", "sub-to-add", "mul-zero", "lt-swap-in", "mul-comm", "gt-to-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 983 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) 5 ) ) ( min ( / ( + ( + v0 v1 ) 983 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( * v0 4 ) ( min ( * ( + ( * ( / v1 250 ) 2 ) v0 ) 4 ) ( + ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 9 ) ) ) 2 ) ( + ( * ( / v1 250 ) 16 ) v3 ) ) ( + ( * ( - ( * v0 4 ) ( min ( * ( + ( * ( / v1 250 ) 2 ) v0 ) 4 ) ( + ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 9 ) ) ) 2 ) ( + ( * ( / v1 250 ) 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 249 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 249 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 109 ) v1 ) ( min ( + v0 109 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - v2 1 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( - v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 7 ) ( * ( / v1 250 ) 4 ) ) ( + ( / v0 7 ) ( * ( / v1 250 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / v0 ( / ( + ( * v1 4 ) 507 ) 502 ) ) -502 ) 251 ) 251 ) ( * ( / v0 ( / ( + ( * v1 4 ) 507 ) 502 ) ) -502 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 256 ) ( - ( / v1 4 ) v2 ) ) ( + ( * v0 256 ) ( - ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 -3 ) ( / v1 4 ) ) ( + ( min v0 -3 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 252 ) ( + ( / v1 4 ) ( * v2 68 ) ) ) 7 ) v3 ) ( min ( - ( + ( * v0 252 ) ( + ( / v1 4 ) ( * v2 68 ) ) ) 7 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-zero", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + ( + v3 v2 ) 3 ) 4 ) ( / ( + ( + v3 v2 ) 3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) ( + v1 1 ) ) v2 ) 3 ) )", "end": "1"}, "rules": ["add-comm", "sub-to-add", "lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( * ( + ( / ( + ( % ( + v1 v2 ) 4 ) 1003 ) 4 ) ( / ( + v1 v2 ) 4 ) ) 4 ) ) ( + ( * v0 3 ) ( * ( + ( / ( + ( % ( + v1 v2 ) 4 ) 1003 ) 4 ) ( / ( + v1 v2 ) 4 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 128 ( * ( max ( min v0 4 ) 3 ) 32 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "Eq-a-b", "eq-swap", "sub-to-add", "mul-comm", "eq-x-y-0", "eq-mul-x-y-0", "mul-assoc"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 9 ) 4 ) 4 ) ( + v0 10 ) ) ( min ( * ( / ( + v0 9 ) 4 ) 4 ) ( + v0 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) ) 2 ) 0 ) 10 ) ( - ( * ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) 2 ) 10 ) ) ) ( >= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) ) 2 ) 3 ) 10 ) ( - ( + ( * ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) 2 ) 3 ) 10 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 6 ) ( - ( + ( - ( + v0 v1 ) 6 ) 131 ) 1 ) )", "end": "0"}, "rules": ["add-const", "mul-one", "mul-comm", "add-comm", "add-assoc", "eq-swap", "add-fact-mul", "sub-to-add", "mul-zero"]}, {"expression": {"start": "( == ( min ( max ( * v0 8 ) 1 ) ( + ( * v0 8 ) 13 ) ) ( min ( max ( * v0 8 ) 1 ) ( + ( * v0 8 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 10 ) ) ( - ( + 0 ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 2 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "sub-to-add", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 10 ) ( - ( + ( - ( + v0 v1 ) 10 ) 143 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "sub-to-add", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - v3 8 ) ( - ( - ( + 0 v3 ) 5 ) 3 ) ) ) ( >= ( + v3 60 ) ( - ( + ( + ( - ( + 64 0 ) 1 ) v3 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( max ( * v0 252 ) -13 ) ( + ( * v0 252 ) 248 ) ) v1 ) 3 ) ) ( - ( + 0 ( + ( * v0 252 ) v1 ) ) 10 ) ) ) ( >= ( + 3 ( + ( min ( + ( + ( * ( / ( min ( * v0 252 ) -13 ) 4 ) 4 ) ( + ( max ( * v0 252 ) -13 ) v1 ) ) 16 ) ( + ( * v0 252 ) v1 ) ) 251 ) ) ( + ( + 3 ( + ( + ( * v0 252 ) v1 ) 252 ) ) 2 ) ) ) ( <= ( - v2 7 ) ( - v2 7 ) ) ) ( >= ( + v3 4 ) ( + v3 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["min-comm", "and-comm", "add-comm", "lt-min-term+cpos", "min-add-both", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 128 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 128 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + v0 v1 ) ( - ( - 11 2 ) 1 ) ) ( + ( + v0 v1 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * ( + ( * ( % v3 4 ) 3 ) 0 ) 4 ) 0 ) ( * ( % v3 4 ) 12 ) ) ) ( >= ( + ( * ( + ( * ( % v3 4 ) 3 ) 2 ) 4 ) 3 ) ( + ( * ( % v3 4 ) 12 ) 11 ) ) )", "end": "0"}, "rules": ["add-zero", "lt-to-zero", "add-dist-mul", "eqgt-to-not-lt", "mul-assoc", "eqlt-to-not-gt", "add-comm", "add-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 11 ) ( - v0 11 ) ) ) ( >= ( + v0 134 ) ( - ( + 146 ( - v0 11 ) ) 1 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "lt-to-zero", "add-comm", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( * v0 250 ) v1 ) 249 ) ( + ( * ( + v0 1 ) 250 ) v1 ) )", "end": "1"}, "rules": ["lt-mul-div-cancel", "lt-swap-in", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "add-comm", "lt-mul-pos-cancel", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - v0 10 ) ( - ( + 0 v0 ) 10 ) ) ) ( >= ( + v0 4 ) ( - ( + ( - ( + 15 0 ) 1 ) v0 ) 10 ) ) ) ( <= ( + ( * v1 4 ) 0 ) ( + ( * v1 4 ) 0 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "sub-to-add", "add-assoc", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( max ( + ( * ( / ( + ( min ( * v0 63 ) -3 ) 65 ) 33 ) 33 ) ( + ( max ( * v0 63 ) -3 ) v1 ) ) ( + ( + ( * v0 63 ) v1 ) 30 ) ) 33 ) ( - ( + ( * ( + v0 1 ) 63 ) v1 ) 2 ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-swap-out", "add-comm", "add-fact-mul", "add-dist-mul", "add-const", "max-consts-and", "add-assoc", "mul-zero", "and-comm", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( == ( + ( / v0 250 ) ( * v1 2 ) ) ( + ( / v0 250 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * v2 2 ) v3 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( max v2 4 ) 8 ) 4 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( max v2 4 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( * v1 5 ) ) ( + ( * v0 4 ) ( * v1 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 74 ) 64 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 74 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 116 ) 9 ) ) ( min ( * ( + ( * ( / v0 125 ) 2 ) v1 ) 4 ) ( + ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 116 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 80 ) 64 ) 0 ) ( / ( + v2 74 ) 64 ) ) ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 80 ) 64 ) 0 ) ( / ( + v2 74 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 503 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 503 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -30 ( * ( min ( - ( - 112 ( max ( * v0 44 ) 84 ) ) ( * v1 16 ) ) 0 ) 2 ) ) ( - ( * ( max v2 112 ) 2 ) 254 ) ) ( max ( - -30 ( * ( min ( - ( - 112 ( max ( * v0 44 ) 84 ) ) ( * v1 16 ) ) 0 ) 2 ) ) ( - ( * ( max v2 112 ) 2 ) 254 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 4 ) v1 ) 1999 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( + ( * v0 4 ) v1 ) 1999 ) 0 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 126 ) ( * v0 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) 242 ) v1 ) ( min ( + ( * v0 252 ) 242 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 61 ) v1 ) 2 ) -1 ) ( * ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v2 2 ) ) 2 ) ) ( - ( max ( * ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) 61 ) v1 ) 2 ) -1 ) ( * ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v2 2 ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( * v0 500 ) v1 ) ( * v2 4 ) ) ( + ( - ( * v0 500 ) v1 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) v2 ) ) ( - ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 63 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 125 ) 125 ) v1 ) ( min ( + ( * v0 125 ) 125 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 129 ) 128 ) 0 ) ( / ( + v2 138 ) 128 ) ) ( / ( + ( min ( - ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min ( / ( + ( + v3 v0 ) 471 ) 4 ) v4 ) 9 ) ) ( / v1 4 ) ) ( + v2 136 ) ) 2 ) 128 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 129 ) 128 ) 0 ) ( / ( + v2 138 ) 128 ) ) ( / ( + ( min ( - ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min ( / ( + ( + v3 v0 ) 471 ) 4 ) v4 ) 9 ) ) ( / v1 4 ) ) ( + v2 136 ) ) 2 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( * v1 224 ) v2 ) ) ( + ( * v0 64 ) ( + ( * v1 224 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / v1 8 ) ) ( - v0 ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 3 ) v1 ) ( + ( * v2 9 ) ( + v3 v4 ) ) ) ( + ( + ( * v0 3 ) v1 ) ( + ( * v2 9 ) ( + v3 v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 999 ) 250 ) ( + ( / ( + v0 v1 ) 250 ) ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) ) ) ( - ( / ( + ( + v0 v1 ) 999 ) 250 ) ( + ( / ( + v0 v1 ) 250 ) ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1003 ) 876 ) ( + ( * v0 1003 ) 876 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 16 ) ) 16 ) v2 ) ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 16 ) ) 16 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( * v2 16 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( * v2 16 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 504 ) v2 ) ) ( + ( + v2 v3 ) 14 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 504 ) v2 ) ) ( + ( + v2 v3 ) 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) ( + v1 v2 ) ) ( + v3 2 ) ) ( min ( + ( * v0 12 ) ( + v1 v2 ) ) ( + v3 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( - ( min ( * v1 2 ) 251 ) ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v1 3 ) ) 2 ) ) ) ( + ( * v0 4 ) ( - ( min ( * v1 2 ) 251 ) ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v1 3 ) ) 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 16 ) ( + ( * v2 252 ) v3 ) ) ) ( + v4 14 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 16 ) ( + ( * v2 252 ) v3 ) ) ) ( + v4 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( + ( * v3 16 ) v4 ) ( + ( / v1 4 ) ( * v5 63 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( + ( * v3 16 ) v4 ) ( + ( / v1 4 ) ( * v5 63 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * v2 4 ) -31 ) 30 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * v2 4 ) -31 ) 30 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 2 ) 1 ) v3 ) ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 2 ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( / ( + v1 v2 ) 4 ) v3 ) ) ( - v0 ( + ( / ( + v1 v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( * v3 64 ) ) ( / v1 4 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( * v3 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 1 ) ( + ( - v0 1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( max ( + ( + ( max ( * v0 32 ) -9 ) v1 ) 5 ) v2 ) ( + v3 v2 ) ) ( + ( + ( min ( * v0 32 ) -9 ) ( + ( max ( * v0 32 ) -9 ) v1 ) ) 46 ) ) ( min ( max ( max ( + ( + ( max ( * v0 32 ) -9 ) v1 ) 5 ) v2 ) ( + v3 v2 ) ) ( + ( + ( min ( * v0 32 ) -9 ) ( + ( max ( * v0 32 ) -9 ) v1 ) ) 46 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( - v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( - v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * ( / ( - ( + ( min v1 751 ) v2 ) 1 ) 250 ) 16 ) v3 ) ) ( + ( * v0 2 ) ( + ( * ( / ( - ( + ( min v1 751 ) v2 ) 1 ) 250 ) 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 256 ) ) ( + ( / v0 4 ) 245 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 256 ) ) ( + ( / v0 4 ) 245 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 33 ) 16 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 33 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( + ( min ( + ( * v1 6 ) 1 ) v2 ) v3 ) ) ( + ( * v0 3 ) ( + ( min ( + ( * v1 6 ) 1 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( min v0 15 ) 4 ) 38 ) 33 ) ( / ( + ( * ( min v0 15 ) 4 ) 38 ) 33 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + v0 15 ) 4 ) 4 ) v1 ) ( + ( max ( * ( min ( + ( / v2 4 ) ( * ( / ( min ( + ( * v3 8 ) 7 ) v4 ) 4 ) 4 ) ) ( - v5 3 ) ) 4 ) -15 ) 16 ) ) ( min ( + ( * ( / ( + v0 15 ) 4 ) 4 ) v1 ) ( + ( max ( * ( min ( + ( / v2 4 ) ( * ( / ( min ( + ( * v3 8 ) 7 ) v4 ) 4 ) 4 ) ) ( - v5 3 ) ) 4 ) -15 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) v3 ) 5 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) v3 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 12 ) v1 ) ( + ( * v0 12 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( >= ( - ( + ( + v0 v1 ) v2 ) 1 ) ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-x-x-sub-a", "add-zero", "eqgt-to-not-lt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 1996 ) -3 ) ( * v1 4 ) ) ( + ( max ( min v0 1989 ) -10 ) 4 ) ) ( min ( + ( max ( min v0 1996 ) -3 ) ( * v1 4 ) ) ( + ( max ( min v0 1989 ) -10 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( % ( + v0 v1 ) 125 ) 124 ) 125 ) ( / ( + v0 v1 ) 125 ) ) ( + ( / ( + ( % ( + v0 v1 ) 125 ) 124 ) 125 ) ( / ( + v0 v1 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 4 ) ( - ( min ( * v1 2 ) 251 ) ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v1 3 ) ) 2 ) ) ) 25 ) 22 ) ( min ( + ( * v4 2 ) 22 ) v5 ) ) ( + ( max ( min ( + ( * v0 4 ) ( - ( min ( * v1 2 ) 251 ) ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v1 3 ) ) 2 ) ) ) 25 ) 22 ) ( min ( + ( * v4 2 ) 22 ) v5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * v1 64 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 240 ) 4 ) 4 ) ( * v0 240 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 8 ) 113 ) -11 ) 11 ) v2 ) ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 8 ) 113 ) -11 ) 11 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 16 ) 4 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "and-comm", "lt-swap-in", "max-consts-and"]}, {"expression": {"start": "( == ( + ( * v0 1004 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 1004 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 2 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) -1 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "add-comm", "Eq-a-b", "sub-to-add", "mul-comm", "eq-swap"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( * v0 4 ) v1 ) 4 ) ( % ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( % ( + ( * v0 4 ) v1 ) 4 ) ( % ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 0 ) ( + ( * ( + ( + ( * v2 4 ) v3 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * v2 4 ) v3 ) 3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "mul-comm", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( >= ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( / ( + v0 15 ) 4 ) ( / ( + v0 15 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( + ( * ( + ( / v1 250 ) v2 ) 8 ) 3 ) ) ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( + ( * ( + ( / v1 250 ) v2 ) 8 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + ( + ( min ( * v0 128 ) 881 ) v1 ) v2 ) 137 ) ( + ( * v0 128 ) v1 ) ) ( max ( + ( + ( + ( min ( * v0 128 ) 881 ) v1 ) v2 ) 137 ) ( + ( * v0 128 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 -252 ) v1 ) ( / v2 4 ) ) ( - ( + ( * v0 -252 ) v1 ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( - v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( - v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-zero", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-zero", "add-comm"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 16 ) v3 ) 4 ) ) ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 16 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["eq-x-y-0", "mul-zero", "add-comm", "mul-assoc", "mul-comm", "add-assoc", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( / v0 8 ) -4 ) 2 ) 2 ) ( * ( / v0 8 ) -4 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-zero", "mul-comm", "eq-x-y-0", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( - ( + ( * ( + v0 1 ) 8 ) v1 ) 3 ) )", "end": "0"}, "rules": ["mul-one", "sub-to-add", "lt-swap-out", "add-comm", "add-fact-mul", "add-dist-mul", "add-const", "mul-zero", "add-assoc", "mul-comm"]}, {"expression": {"start": "( <= ( + v0 4 ) ( - ( - v0 1 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "sub-to-add", "eqlt-to-not-gt", "lt-swap-in", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ) ) ( >= ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= ( + ( min ( * v5 4 ) 14 ) 0 ) ( + ( min ( * v5 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 14 ) 3 ) ( + ( min ( * v5 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 1 ) ( - ( + 0 v0 ) 1 ) ) ) ( >= ( - ( + 3 v0 ) 1 ) ( - ( + ( - ( + 4 0 ) 1 ) v0 ) 1 ) ) ) ( <= ( - ( + ( + ( * 0 2 ) v1 ) 0 ) 1 ) ( - ( + 0 v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * 3 2 ) v1 ) 1 ) 1 ) ( - ( + ( - ( + 8 0 ) 1 ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - ( + ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - -439 ( max ( min v0 -443 ) -506 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-min-c-pos", "mul-zero", "mul-comm", "add-fact-mul", "add-assoc", "max-min-switch", "add-comm", "sub-to-add", "max-to-min", "mul-assoc", "eq-x-y-0", "min-add-both"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 16 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) 3 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 16 ) 15 ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "add-comm", "add-zero", "mul-assoc", "lt-to-zero", "eqlt-to-not-gt", "add-dist-mul", "mul-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 0 ) 8 ) ( - ( + 0 ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 8 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 3 ) 8 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 2 ) ( - ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 2 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 64 ) v1 ) 5 ) ) 3 ) ( - ( + ( * v0 64 ) v1 ) 2 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 64 ) v1 ) 128 ) ) 3 ) ( + ( + ( * v0 64 ) v1 ) 66 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-x-x-sub-a", "add-assoc", "lt-swap-out", "eqlt-to-not-gt", "lt-swap-in", "add-comm", "and-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( min v0 1999 ) 5 ) v1 ) ( + ( + ( min v0 1999 ) v2 ) 2 ) ) ( min ( max ( - ( min v0 1999 ) 5 ) v1 ) ( + ( + ( min v0 1999 ) v2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * ( + ( * ( / v1 250 ) 4 ) v2 ) 4 ) v3 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * ( + ( * ( / v1 250 ) 4 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 371 ) -128 ) 129 ) v1 ) ( min ( + ( max ( min ( * v0 2 ) 371 ) -128 ) 129 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( - ( + ( min ( * v2 4 ) 7 ) ( / ( + v0 v1 ) 8 ) ) 2 ) ) 2 ) v3 ) ( - ( * ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) 2 ) 10 ) ) ( max ( + ( * ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( - ( + ( min ( * v2 4 ) 7 ) ( / ( + v0 v1 ) 8 ) ) 2 ) ) 2 ) v3 ) ( - ( * ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) 2 ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 3 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) 992 ) v3 ) ( min ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) 992 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 1 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + ( * v0 126 ) 116 ) v1 ) v2 ) ( + v3 89 ) ) ( min ( + ( min ( + ( * v0 126 ) 116 ) v1 ) v2 ) ( + v3 89 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 16 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 16 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 2 ) ( * v0 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 7 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( * v2 8 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( * ( + ( * ( max ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -1 ) 0 ) ( + ( min ( / ( + ( * ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) -1 ) 241 ) 8 ) 7 ) 1 ) ) 8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 515 ) 16 ) 2 ) 2 ) 2 ) ( * ( max ( min ( * ( + ( * ( max ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -1 ) 0 ) ( + ( min ( / ( + ( * ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) -1 ) 241 ) 8 ) 7 ) 1 ) ) 8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 515 ) 16 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) -9 ) ( + ( max ( * v0 4 ) -9 ) ( + v1 v2 ) ) ) ( + ( min ( * v0 4 ) -9 ) ( + ( max ( * v0 4 ) -9 ) ( + v1 v2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 36 ) 32 ) ( / ( + v0 36 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 251 ( * ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 8 ) v1 ) ) 4 ) ) 9 ) ) ( min ( - 251 ( * ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 8 ) v1 ) ) 4 ) ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) ) 126 ) ( - ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) 15 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) 15 ) 4 ) ( * v2 251 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -28 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -28 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 125 ) v3 ) 124 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 125 ) v3 ) 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 79 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 79 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 16 ) ( + v1 v2 ) ) 1987 ) -12 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 16 ) ( + v1 v2 ) ) 1987 ) -12 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 16 ) ( * v1 63 ) ) ( + ( / v0 16 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( max ( min v1 2 ) 0 ) 16 ) v2 ) 2 ) v3 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( max ( min v1 2 ) 0 ) 16 ) v2 ) 2 ) v3 ) 2 ) ) 499 ) 0 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( max ( - -5 v0 ) ( - ( min ( - ( / ( + v1 v2 ) 8 ) v3 ) 0 ) 5 ) ) ( max ( - -5 v0 ) ( - ( min ( - ( / ( + v1 v2 ) 8 ) v3 ) 0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 64 ) 188 ) ( * ( + ( * v1 3 ) v2 ) 4 ) ) ( + ( max ( * v0 64 ) 188 ) ( * ( + ( * v1 3 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * ( + ( * v1 2 ) v2 ) 64 ) v3 ) ) ( + ( * v0 4 ) ( + ( * ( + ( * v1 2 ) v2 ) 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 2 ) 144 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 2 ) 144 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v2 3 ) ) ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 16 ) ) ( + ( / v0 8 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 128 ) ) -130 ) ( + ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2129 ) 128 ) ) 2 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 1997 ) 128 ) ) -130 ) ( + ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2129 ) 128 ) ) 2 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 65 ) ( + ( * v1 252 ) v2 ) ) ( + ( * v0 65 ) ( + ( * v1 252 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 499 ) 500 ) v1 ) ( / v0 500 ) ) ( max ( min ( / ( + v0 499 ) 500 ) v1 ) ( / v0 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % ( + v0 v1 ) 250 ) 999 ) 0 )", "end": "1"}, "rules": ["lt-const-mod-false", "lt-swap-in", "lt-swap", "mod-minus-in", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 125 ) ( / ( + 0 v2 ) 125 ) ) ) ( >= ( / ( + v2 249 ) 125 ) ( / ( + ( - ( + 250 0 ) 1 ) v2 ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 259 ) 256 ) ( - ( + 0 ( / ( + ( % v0 8 ) 763 ) 256 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "sub-to-add", "add-comm", "eqlt-to-not-gt", "lt-const-mod", "max-consts-or", "lt-swap-out", "and-min-to-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( + ( max ( * v0 16 ) -23 ) ( * v0 -16 ) ) ( + v1 7 ) ) 4 ) -4 ) 4 ) 4 ) ( * ( / ( + ( + ( max ( * v0 16 ) -23 ) ( * v0 -16 ) ) ( + v1 7 ) ) 4 ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * ( + ( * v1 4 ) v2 ) 4 ) v3 ) ) ( + ( * v0 2 ) ( + ( * ( + ( * v1 4 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) ( + ( * v1 1008 ) v2 ) ) ( + ( * v0 504 ) ( + ( * v1 1008 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( % ( + ( + v0 v1 ) 2 ) 4 ) 78 ) 16 ) ) 1 ) )", "end": "0"}, "rules": ["lt-const-mod", "lt-mul-div-cancel", "lt-swap-out", "add-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 112 ) 4 ) 4 ) ( * v0 112 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( min ( * v2 8 ) 55 ) v3 ) ( + ( + ( min ( * v2 8 ) 55 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 55 ) v3 ) 7 ) ( + ( + ( min ( * v2 8 ) 55 ) ( - ( + 8 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-zero", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 2 ) ) ( / ( + v0 v1 ) 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 2 ) ) ( / ( + v0 v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * v0 16 ) ) ( - 63 ( * v0 16 ) ) )", "end": "0"}, "rules": ["mul-zero", "lt-swap-in", "add-zero", "add-const", "sub-to-add", "add-comm", "mul-comm", "add-fact-mul", "gt-to-lt"]}, {"expression": {"start": "( == ( / ( + v0 1008 ) 1004 ) ( / ( + v0 1008 ) 1004 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -128 ) 4 ) 4 ) ( * v0 -128 ) )", "end": "1"}, "rules": ["eq-swap", "add-dist-mul", "mul-cancel-div", "mod-consts", "add-assoc", "sub-to-add", "add-zero", "eq-x-x", "eq-x-y-0"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 21 ) v1 ) ( min ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 21 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["mul-zero", "sub-to-add", "mul-comm", "add-fact-mul", "add-comm", "mul-assoc", "lt-swap-in", "add-zero", "gt-to-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / v0 4 ) ) ( + 0 ( / v0 4 ) ) ) ) ( >= ( + 3 ( + ( / v0 4 ) 248 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) 248 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 16 ) 0 ) ( + ( * v2 16 ) 0 ) ) ) ( >= ( + ( * v2 16 ) ( - ( + 16 0 ) 1 ) ) ( + ( * v2 16 ) ( - ( + 16 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 16 ) 984 ) v1 ) ) ( + ( min ( * v0 16 ) 984 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 12 ) ) ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 15 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-swap-in", "add-comm", "sub-to-add", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 4 ) ) ) ( >= ( - ( + ( + ( * 15 4 ) v0 ) 3 ) 4 ) ( - ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 3 ( - ( + 4 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( - ( + ( * ( + v2 v3 ) 4 ) 0 ) 7 ) ( - ( + ( * ( + v2 v3 ) 4 ) 0 ) 7 ) ) ) ( >= ( - ( + ( * ( + v2 v3 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v2 v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) 116 ) ( - ( + ( + ( + v0 v1 ) 116 ) 9 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-swap", "mul-assoc", "sub-to-add", "mul-comm", "eq-comm", "add-fact-mul", "add-assoc", "mul-zero"]}, {"expression": {"start": "( == ( - v0 5 ) ( - ( + ( - v0 5 ) 5 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-dist-mul", "eq-x-y-0", "sub-to-add", "add-const", "add-assoc", "eq-comm", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( == ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + v0 ( / ( + ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 3 ) 4 ) ) ( / ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + v0 ( / ( + ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 3 ) 4 ) ) ( / ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 11 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 17 ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "add-dist-mul", "lt-swap-in", "mul-comm", "add-fact-mul", "mul-zero", "add-comm", "mul-assoc"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / v1 8 ) 5 ) ) ( / ( + v2 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / v1 8 ) 5 ) ) ( / ( + v2 515 ) 8 ) ) -8 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( min ( - v2 15 ) v3 ) ( min ( - v2 15 ) v3 ) ) ) ( >= ( min ( + ( + ( * ( / ( - v2 v3 ) 16 ) 16 ) v3 ) 15 ) v2 ) ( min ( + ( + ( * ( / ( - v2 v3 ) 16 ) 16 ) v3 ) 15 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( - ( * ( / v0 250 ) 64 ) 67 ) ( - ( + ( - ( * ( / v0 250 ) 64 ) 67 ) ( + ( * v1 64 ) 89 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "Eq-a-b", "mul-comm", "add-const", "add-fact-mul", "eq-swap", "eq-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) ) ( + ( + ( * v3 64 ) ( * v4 32 ) ) v5 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) 28 ) ) ( + ( + ( * v3 64 ) ( + ( * v4 32 ) 31 ) ) v5 ) ) ) ( <= ( + ( + ( min ( * v1 4 ) 7 ) ( min ( * v2 11 ) 53 ) ) v6 ) ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) ) ) ( >= ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) 3 ) ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) 3 ) v6 ) ) ) ( <= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) ) ( >= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "add-assoc", "add-const", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 2 ) ( + ( + ( + ( - v0 1 ) v1 ) 3 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-comm", "lt-x-x-sub-a", "add-assoc", "eqgt-to-not-lt", "lt-swap-in"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 18 ( * ( % v0 2 ) 10 ) ) ( - ( + 0 10 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-pos-cancel", "min-sub-both", "lt-swap-out", "lt-swap", "lt-const-mod", "mul-assoc", "and-min-to-lt", "mod-minus-in", "max-consts-or", "sub-to-add", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 4 ) ) ) ( >= ( - ( + ( + ( * 124 4 ) v0 ) 3 ) 4 ) ( - ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 128 ) v1 ) ) ( + ( * v0 128 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 128 ) v1 ) 124 ) ) ( + ( + ( * v0 128 ) v1 ) 127 ) ) ) ( <= v2 v2 ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["eq-x-x", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "min-x-x", "Eq-lt-min", "add-zero", "add-assoc"]}, {"expression": {"start": "( >= ( / ( - -168 ( % ( + v0 v1 ) 8 ) ) 8 ) ( - ( + ( / ( - -168 ( % ( + v0 v1 ) 8 ) ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 183 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["lt-const-mod", "mul-zero", "lt-mul-div-cancel", "lt-swap-in", "add-fact-mul", "lt-swap-out", "add-const", "eqgt-to-not-lt", "add-comm", "add-assoc", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 1000 0 ) 1 ) v2 ) ( + ( - ( + 1000 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + -5 v0 ) 0 ) 3 ) ( + ( + 0 v0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + 3 v0 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eq-x-x", "not-gt-to-eqlt", "eqgt-to-not-lt", "min-x-x-plus-a-pos", "add-comm", "min-comm", "Eq-lt-min", "min-x-x", "add-assoc"]}, {"expression": {"start": "( >= ( - ( * v0 4 ) 7 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )", "end": "1"}, "rules": ["add-dist-mul", "add-assoc", "eqgt-to-not-lt", "lt-swap-in", "add-comm", "mul-comm", "lt-x-x-sub-a", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + v0 7 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( / ( + v1 1003 ) 4 ) ( / ( + v1 1003 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "sub-to-add", "add-comm", "eqlt-to-not-gt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 500 ) v1 ) 5 ) ) 3 ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 500 ) v1 ) 1000 ) ) 3 ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-out", "and-comm", "add-comm", "lt-x-x-sub-a", "lt-swap-in", "add-assoc", "eqlt-to-not-gt", "not-gt-to-eqlt", "sub-to-add"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 177 ) ( - ( + ( - ( * v0 4 ) 177 ) ( + ( * ( min ( - ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 64 ) ( * v3 35 ) ) ( * ( / v2 250 ) 64 ) ) -70 ) 4 ) 423 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "mul-comm", "add-fact-mul", "add-assoc", "sub-to-add", "eq-swap", "eq-comm", "add-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-assoc", "max-to-min", "mul-zero", "eq-x-y-0", "add-comm", "add-fact-mul", "min-consts-div-neg", "min-add-both", "mul-comm", "add-assoc", "Eq-min-c-pos"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) 0 ) ( * v0 4 ) ) ) ( >= ( + ( * ( + ( + ( * 62 4 ) v0 ) 3 ) 4 ) 3 ) ( + ( * v0 4 ) 1007 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )", "end": "0"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-dist-mul", "mul-comm", "add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( >= ( - 0 ( max v0 0 ) ) ( - ( + ( - 0 ( max v0 0 ) ) ( + ( max v0 0 ) 3 ) ) 1 ) )", "end": "0"}, "rules": ["add-zero", "max-to-min", "min-mul-in-neg", "min-max", "lt-min-term+cpos", "min-comm", "add-assoc", "min-sub-both", "mul-one", "min-add-both", "min-max-min-y", "add-const", "mul-assoc", "sub-to-add", "add-comm", "mul-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 2 ) ( + ( * ( / v1 4 ) 2 ) v2 ) ) ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 2 ) ( + ( * ( / v1 4 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( - v0 ( * v1 500 ) ) 500 ) ( + ( min v2 500 ) 4 ) ) ( min v2 500 ) ) ( min ( max ( min ( - v0 ( * v1 500 ) ) 500 ) ( + ( min v2 500 ) 4 ) ) ( min v2 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 250 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 8 ) ) ( + ( * v0 500 ) 492 ) ) ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 8 ) ) ( + ( * v0 500 ) 492 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 8 ) 5 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 15 ) v0 ) 8 ) 6 ) ) ( min ( max ( max ( - ( * v0 8 ) 5 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 15 ) v0 ) 8 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 128 ) ) ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 4 ) 44 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v3 v4 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v5 32 ) ) ( max ( min ( * ( / v4 8 ) 2 ) 509 ) 10 ) ) 19 ) v0 ) 4 ) 12 ) ) ( min ( max ( max ( - ( * v0 4 ) 44 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v3 v4 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * v5 32 ) ) ( max ( min ( * ( / v4 8 ) 2 ) 509 ) 10 ) ) 19 ) v0 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min v0 1987 ) 12 ) v1 ) ( min ( + ( min v0 1987 ) 12 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 32 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 32 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 v3 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * ( / v1 4 ) 4 ) ) ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 -252 ) ( + ( min ( / ( + ( + v3 v0 ) 3 ) 4 ) ( + ( + ( / v0 4 ) ( * ( min ( / ( min ( + ( * ( + ( * v2 63 ) v4 ) 4 ) 3 ) v5 ) 4 ) ( + ( * v2 63 ) v4 ) ) 4 ) ) 3 ) ) ( * v4 -4 ) ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 -252 ) ( + ( min ( / ( + ( + v3 v0 ) 3 ) 4 ) ( + ( + ( / v0 4 ) ( * ( min ( / ( min ( + ( * ( + ( * v2 63 ) v4 ) 4 ) 3 ) v5 ) 4 ) ( + ( * v2 63 ) v4 ) ) 4 ) ) 3 ) ) ( * v4 -4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( + ( * v0 16 ) v1 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( max ( * ( + ( * v0 16 ) v1 ) 4 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 32 ) v1 ) ( - v2 31 ) ) ( min ( + ( * v0 32 ) v1 ) ( - v2 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( + v0 v1 ) ( * v2 672 ) ) ( * v3 336 ) ) ( + v1 331 ) ) ( + ( * v4 4 ) v1 ) ) ( - ( min ( - ( - ( + v0 v1 ) ( * v2 672 ) ) ( * v3 336 ) ) ( + v1 331 ) ) ( + ( * v4 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( / ( + v1 12 ) 250 ) 250 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * ( / ( + v1 12 ) 250 ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1983 ) -16 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1983 ) -16 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 8 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 8 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( / v1 250 ) v2 ) 64 ) 7 ) ) ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( / v1 250 ) v2 ) 64 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( / v1 8 ) ) 11 ) ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( / v1 8 ) ) 11 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 141 ) ( * v1 64 ) ) ( + ( * v0 141 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 16 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * v0 16 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 26 ) v3 ) ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 26 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( + ( + ( - ( + 8 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ( + ( + ( - ( + 8 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( % v3 16 ) 4 ) 0 ) ( + ( * ( % v3 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v3 16 ) 4 ) 3 ) ( + ( * ( % v3 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / v0 ( / ( + v1 20 ) 17 ) ) ( / v0 ( / ( + v1 20 ) 17 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( + v2 3 ) ) ( + ( min ( min ( / ( - ( - ( min ( + ( * v3 4 ) 9 ) ( + v4 v0 ) ) v1 ) 1 ) 4 ) ( - ( min ( / ( - ( + v4 v0 ) v1 ) 4 ) ( + ( - v3 ( / v1 4 ) ) 3 ) ) 1 ) ) ( + v2 2 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( + v2 3 ) ) ( + ( min ( min ( / ( - ( - ( min ( + ( * v3 4 ) 9 ) ( + v4 v0 ) ) v1 ) 1 ) 4 ) ( - ( min ( / ( - ( + v4 v0 ) v1 ) 4 ) ( + ( - v3 ( / v1 4 ) ) 3 ) ) 1 ) ) ( + v2 2 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 32 ) ) ( + ( / v0 4 ) 31 ) ) ( * v4 -4 ) ) 7 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( + ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 32 ) ) ( + ( / v0 4 ) 31 ) ) ( * v4 -4 ) ) 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 125 ) ) 124 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 125 ) ) 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ( + v3 1 ) ) ( min ( + ( / v0 4 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ( + v3 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["mul-assoc", "add-assoc", "mul-zero", "mul-comm", "eq-x-y-0", "add-comm", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 10 ( * ( max ( min v0 5 ) 4 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "mul-assoc", "Eq-a-b", "eq-swap", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( - ( * v0 8 ) ( + v1 v2 ) ) ( - ( * v0 8 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - v0 ( * v1 252 ) ) ( + ( / v2 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v2 4 ) ( * v4 68 ) ) ) ) ( - ( min ( - v0 ( * v1 252 ) ) ( + ( / v2 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v2 4 ) ( * v4 68 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 3 ) 125 ) ) ( - v0 ( * ( / v1 3 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( * ( + v0 1 ) 4 ) v1 ) )", "end": "1"}, "rules": ["lt-swap-out", "mul-comm", "add-comm", "add-dist-mul", "lt-swap", "sub-to-add", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( + ( * ( max ( min ( / ( + ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) v1 ) 128 ) 3 ) 0 ) 32 ) ( * ( % v0 ( / ( + v1 499 ) 500 ) ) 125 ) ) -4 ) 4 ) 4 ) ( * ( + ( * ( max ( min ( / ( + ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) v1 ) 128 ) 3 ) 0 ) 32 ) ( * ( % v0 ( / ( + v1 499 ) 500 ) ) 125 ) ) -4 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( max ( + ( min ( + ( * v0 8 ) v1 ) ( + v2 7 ) ) 10 ) ( + ( * v0 8 ) v1 ) ) ( max ( + ( min ( + ( * v0 8 ) v1 ) ( + v2 7 ) ) 10 ) ( + ( * v0 8 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 6 ) 4 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 6 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) 4 ) 1 ) )", "end": "0"}, "rules": ["add-const", "mul-zero", "add-comm", "mul-comm", "add-fact-mul", "eq-x-y-0", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 8 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )", "end": "0"}, "rules": ["lt-swap-out", "sub-to-add", "add-fact-mul", "mul-comm", "lt-swap-in", "add-assoc", "mul-assoc", "add-comm", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v1 8 ) v2 ) ) 0 ) ( + ( * v1 8 ) v2 ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 8 ) v2 ) 4 ) ) 3 ) ( + ( + ( * v1 8 ) v2 ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-zero"]}, {"expression": {"start": "( >= v0 ( + v0 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( + ( min ( * v0 128 ) 372 ) v1 ) ) ( + ( min ( * v0 128 ) 372 ) v1 ) ) ) ( >= ( + ( + ( * 3 4 ) 3 ) ( + ( + ( min ( * v0 128 ) 372 ) v1 ) 112 ) ) ( + ( + ( min ( * v0 128 ) 372 ) 127 ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt", "lt-to-zero", "add-zero"]}, {"expression": {"start": "( >= ( + ( * v0 4 ) v1 ) ( + ( + ( * ( - v0 1 ) 4 ) v1 ) 1 ) )", "end": "1"}, "rules": ["mul-assoc", "add-assoc", "sub-to-add", "mul-comm", "add-dist-mul", "lt-swap-out", "add-fact-mul", "add-comm", "lt-swap", "mul-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 34 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 34 ) v1 ) ( + v2 1 ) ) 8 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap-out", "sub-to-add", "mul-zero", "add-assoc", "add-fact-mul", "mul-comm", "mul-assoc", "lt-swap-in"]}, {"expression": {"start": "( >= ( + ( * v0 4 ) ( + v1 v2 ) ) ( + ( + ( * v0 4 ) ( + ( - v1 1 ) v2 ) ) 1 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-zero", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * v1 4 ) 1999 ) ( + ( + v0 1 ) 6 ) ) ( + ( + v0 1 ) 3 ) ) 5 ) )", "end": "0"}, "rules": ["min-sub-both", "add-comm", "lt-swap-in", "and-min-to-lt", "min-comm", "sub-to-add", "lt-swap-out", "and-lt-to-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( * ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 15 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-dist-mul", "lt-to-zero", "add-assoc", "add-zero", "add-comm", "mul-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( min 0 ( / ( - 66 ( * ( % v0 8 ) 9 ) ) 5 ) ) ( - ( + 0 2 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "lt-swap-out", "lt-mul-div-cancel", "max-consts-or", "lt-swap", "lt-mul-pos-cancel", "eqlt-to-not-gt", "lt-const-mod", "sub-to-add", "mul-assoc", "add-comm", "mod-minus-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 1002 ) ( + v0 1002 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-x-x-sub-a", "sub-to-add", "add-comm", "and-comm", "lt-swap-out", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 1 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-assoc", "sub-to-add", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( <= ( + ( max ( - ( min ( + ( min ( * v0 32 ) ( + ( - ( max ( * v1 4 ) -3 ) v2 ) 3 ) ) v2 ) ( + ( max ( * v1 4 ) -3 ) 3 ) ) ( + ( * v0 32 ) v2 ) ) ( - ( min ( + ( min ( + ( * v0 32 ) v3 ) ( + ( - ( max ( * v1 4 ) -3 ) v2 ) 3 ) ) v2 ) ( + ( max ( * v1 4 ) -3 ) 3 ) ) ( + ( + ( * v0 32 ) v3 ) v2 ) ) ) 5 ) 1024 )", "end": "1"}, "rules": ["add-dist-mul", "sub-to-add", "max-consts-or", "min-mul-in-neg", "eqlt-to-not-gt", "max-consts-and", "lt-swap-out", "mul-assoc", "lt-swap", "mul-comm", "mul-zero", "add-fact-mul"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 69 ) 64 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 69 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 4 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - 500 ( / v0 4 ) ) ( - 0 ( min ( / v0 4 ) 0 ) ) ) ( / ( - v1 v0 ) 4 ) ) ( min ( max ( - 500 ( / v0 4 ) ) ( - 0 ( min ( / v0 4 ) 0 ) ) ) ( / ( - v1 v0 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 507 ) 8 ) ( * v1 4 ) ) ( + ( max ( min ( * v0 2 ) 507 ) 8 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 33 ) ( * v1 4 ) ) ( + ( * v0 33 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 32 ) ) ( + ( / v0 4 ) 31 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 32 ) ) ( + ( / v0 4 ) 31 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( max ( + v0 15 ) v1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 5 ) ) ( min ( / ( max ( + v0 15 ) v1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( * v0 8 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 31 ) v1 ) 1 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min v2 31 ) v1 ) ) 1 ) ) ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 31 ) v1 ) 1 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 4 ) ( + ( min v2 31 ) v1 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) 4 ) ( + ( * v0 4 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( / ( + ( - v0 ( + ( * v1 1008 ) v2 ) ) 13 ) 4 ) ( + ( + ( / ( - 9 v2 ) 4 ) ( * v1 -252 ) ) 1 ) ) 0 ) ( / ( + 993 21 ) 4 ) ) ( min ( max ( max ( / ( + ( - v0 ( + ( * v1 1008 ) v2 ) ) 13 ) 4 ) ( + ( + ( / ( - 9 v2 ) 4 ) ( * v1 -252 ) ) 1 ) ) 0 ) ( / ( + 993 21 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 1999 ) ( * v1 64 ) ) ( + ( min v0 1999 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 1 ) v3 ) ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) ) ( >= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 64 ) ) ) ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 1022 ) 1008 ) ( / ( + v0 1022 ) 1008 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 16 ) ) ( - ( / v0 4 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 1997 ) 1 ) ) -1 ) ( + ( max ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 2000 ) 1 ) ) 2 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 1997 ) 1 ) ) -1 ) ( + ( max ( min ( + ( * v0 4 ) v1 ) ( + ( min ( + v2 v1 ) 2000 ) 1 ) ) 2 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( + ( * v0 -504 ) ( + ( * v1 -1008 ) v2 ) ) -11 ) ( * ( / ( + ( min ( + ( * ( + ( * v1 2 ) v0 ) 504 ) 494 ) v2 ) 14 ) 4 ) 4 ) ) v3 ) v4 ) ( min ( + ( + ( min ( + ( * v0 -504 ) ( + ( * v1 -1008 ) v2 ) ) -11 ) ( * ( / ( + ( min ( + ( * ( + ( * v1 2 ) v0 ) 504 ) 494 ) v2 ) 14 ) 4 ) 4 ) ) v3 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 55 ) 8 ) ( - ( + ( / v1 8 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) 4 ) ) ( min ( / ( + ( + v0 v1 ) 55 ) 8 ) ( - ( + ( / v1 8 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 12 ) 1 ) ( + v1 v2 ) ) ( + ( min ( * v0 12 ) 1 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( - ( * v1 504 ) v2 ) ( + ( * v3 4 ) ( + ( * v4 128 ) v0 ) ) ) ) ( - v0 ( + ( - ( * v1 504 ) v2 ) ( + ( * v3 4 ) ( + ( * v4 128 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 113 ) ( + v1 v2 ) ) ( min ( + v0 113 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 64 ) 949 ) ( + ( * v1 1005 ) v2 ) ) 46 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 64 ) 949 ) ( + ( * v1 1005 ) v2 ) ) 46 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( * v0 33 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 33 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 64 ) 61 ) ( + v1 v2 ) ) ( + ( min ( * v0 64 ) 61 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1903 ) ( * v1 4 ) ) ( + ( min ( * v0 4 ) 1903 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 25 ) 4 ) ( * ( / v2 8 ) 2 ) ) ( + ( min ( * ( - v3 ( / v2 8 ) ) 2 ) ( - ( / ( min ( + ( * v3 8 ) 3 ) ( + v0 v1 ) ) 4 ) ( * ( / v2 8 ) 2 ) ) ) 7 ) ) ( + ( * v4 2 ) 8 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v2 8 ) 2 ) ) -8 ) ( + ( * v4 2 ) 1 ) ) 7 ) ) ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 25 ) 4 ) ( * ( / v2 8 ) 2 ) ) ( + ( min ( * ( - v3 ( / v2 8 ) ) 2 ) ( - ( / ( min ( + ( * v3 8 ) 3 ) ( + v0 v1 ) ) 4 ) ( * ( / v2 8 ) 2 ) ) ) 7 ) ) ( + ( * v4 2 ) 8 ) ) ( + ( min ( max ( - ( / v1 4 ) ( * ( / v2 8 ) 2 ) ) -8 ) ( + ( * v4 2 ) 1 ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( * v1 1005 ) v2 ) ) ( + ( * v0 64 ) ( + ( * v1 1005 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 2 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "eq-swap", "sub-to-add", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 18 ) 4 ) 4 ) ( + v1 19 ) ) ( min ( * ( / ( + v0 18 ) 4 ) 4 ) ( + v1 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / v0 250 ) 64 ) ( + ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 64 ) 105 ) ) ( min ( * ( / v0 250 ) 64 ) ( + ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 64 ) 105 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 999 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( + ( * ( - ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + ( + ( * v0 32 ) v1 ) v4 ) ) 4 ) 3 ) ) ( min ( - 999 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( + ( * ( - ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + ( + ( * v0 32 ) v1 ) v4 ) ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )", "end": "0"}, "rules": ["mul-zero", "sub-to-add", "eq-swap", "add-const", "add-fact-mul", "mul-comm", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( / v0 250 ) ( * ( / v1 72 ) 3 ) ) ( + ( / v0 250 ) ( * ( / v1 72 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 21 ) 16 ) ( / ( + v0 21 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( + v0 v1 ) 1993 ) -6 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) ( min ( max ( min ( + v0 v1 ) 1993 ) -6 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1008 ) ) ( * v3 504 ) ) ( + v1 494 ) ) ( + ( * v4 4 ) v1 ) ) ( - ( min ( - ( - ( + v0 v1 ) ( * v2 1008 ) ) ( * v3 504 ) ) ( + v1 494 ) ) ( + ( * v4 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 32 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 249 ) ) 31 ) ) ( min ( + ( * v0 32 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 249 ) ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 4 ) ( * ( / v1 8 ) 2 ) ) -8 ) ( + ( * v2 2 ) 1 ) ) ( min ( max ( - ( / v0 4 ) ( * ( / v1 8 ) 2 ) ) -8 ) ( + ( * v2 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 8 ) ( * v1 128 ) ) 122 ) v2 ) ( min ( + ( + ( / v0 8 ) ( * v1 128 ) ) 122 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( min ( / ( - 25 ( * ( - ( max ( min ( * v0 8 ) 125 ) 1 ) ( max ( min ( * v0 8 ) 113 ) -11 ) ) 2 ) ) 4 ) ( + ( / v1 2 ) 6 ) ) 2 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( min ( / ( - 25 ( * ( - ( max ( min ( * v0 8 ) 125 ) 1 ) ( max ( min ( * v0 8 ) 113 ) -11 ) ) 2 ) ) 4 ) ( + ( / v1 2 ) 6 ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == v0 ( - ( + v0 68 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "add-const", "add-dist-mul", "add-fact-mul", "sub-to-add", "eq-comm", "mul-zero", "mul-comm", "eq-x-y-0"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 32 ) 93 ) v2 ) v3 ) ( + ( + ( min ( * v1 32 ) 93 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 32 ) 93 ) v2 ) v3 ) ( + ( + ( min ( * v1 32 ) 93 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 751 ) 256 ) ( - ( + 0 4 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "and-min-to-lt", "max-consts-or", "eqlt-to-not-gt", "lt-mul-div-cancel"]}, {"expression": {"start": "( == ( * ( / ( * v0 -4 ) 4 ) 4 ) ( * v0 -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( / ( + ( min v0 121 ) 18 ) 4 ) ( / ( + ( min v0 121 ) 18 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 24 ) 18 ) ) -18 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 24 ) 18 ) ) -18 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 32 ) ) ) ( + ( * v0 4 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 8 ) 2 ) 2 ) ( * v0 8 ) )", "end": "1"}, "rules": ["mul-cancel-div", "eq-x-x", "add-zero", "sub-to-add", "mod-multiple", "mul-comm"]}, {"expression": {"start": "( == ( min ( * v0 252 ) ( + v1 15 ) ) ( min ( * v0 252 ) ( + v1 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -48 ) 16 ) 16 ) ( * v0 -48 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + v2 30 ) ) ( min ( + ( * v0 2 ) v1 ) ( + v2 30 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 0 ) ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( max ( - 35 ( max ( * ( % v0 4 ) 9 ) 26 ) ) ( - 34 ( max ( * ( % v0 4 ) 9 ) 25 ) ) ) ( max ( - 35 ( max ( * ( % v0 4 ) 9 ) 26 ) ) ( - 34 ( max ( * ( % v0 4 ) 9 ) 25 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 503 ) 502 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "lt-swap-in", "Eq-lt-min", "not-gt-to-eqlt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( + ( * ( / ( + v0 v1 ) 8 ) 2 ) v2 ) 10 ) ( - ( + ( + ( + ( * ( / ( + v0 v1 ) 8 ) 2 ) v2 ) 10 ) ( + -10 11 ) ) 1 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "eq-x-x", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( * ( + v0 1 ) 2 ) v1 ) )", "end": "1"}, "rules": ["sub-to-add", "add-assoc", "add-comm", "lt-swap-out", "lt-x-x-sub-a", "lt-swap", "add-dist-mul", "mul-comm"]}, {"expression": {"start": "( == ( * ( / ( * v0 12 ) 2 ) 2 ) ( * v0 12 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -28 ( % ( + ( min ( * v0 32 ) ( - v1 32 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -28 ( % ( + ( min ( * v0 32 ) ( - v1 32 ) ) v2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 32 ) 220 ) 4 ) 4 ) ( min ( * v0 32 ) 220 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "min-mul-in-pos", "min-div-in-pos", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( + ( max ( min v0 1999 ) 0 ) ( * v1 8 ) ) ( + ( max ( min v0 1999 ) 0 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( - ( + ( min v2 1000 ) v3 ) 1000 ) ( - ( + ( min v2 1000 ) v3 ) 1000 ) ) ) ( >= ( - ( + v2 v3 ) 1 ) ( - ( + v2 v3 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 3 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "add-comm", "add-assoc", "sub-to-add", "lt-swap-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 5 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out", "eqgt-to-not-lt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 12 ) v1 ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 12 ) v1 ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) ( + ( * v0 12 ) v1 ) ) 4 ) 15 ) ( + ( * ( + 3 ( + ( * v2 4 ) ( + ( * v0 12 ) v1 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ) ) ( >= ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "mul-comm", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / ( + ( * v0 4 ) v1 ) 8 ) ( / ( + ( + ( * v0 4 ) v1 ) 0 ) 8 ) ) ) ( >= ( / ( + ( + ( * v0 4 ) v1 ) 3 ) 8 ) ( / ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 8 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( + ( * 0 4 ) v3 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * 2 4 ) v3 ) 3 ) ( + ( + ( * ( - ( + 3 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "add-comm", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( >= ( + ( + ( + ( + v0 v1 ) v2 ) v3 ) v4 ) ( + ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) v3 ) v4 ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-to-zero", "add-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / v1 4 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-comm", "and-min-to-lt", "min-comm", "add-fact-mul", "lt-swap-out", "mul-zero", "add-const", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 106 ( max ( * v0 56 ) 49 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-one", "eq-swap", "eq-comm", "sub-to-add", "min-add-both", "mul-assoc", "max-to-min", "Eq-min-c-neg", "mul-comm", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v1 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 32 ) 0 ) v4 ) ( + ( + ( * v3 32 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) v4 ) ( + ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) v4 ) ) ) ( <= ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ) ) ( >= ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "add-const"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 16 ) ( + ( * v2 32 ) v3 ) ) ) 0 ) 3 ) ( - ( - ( + ( + ( * v2 32 ) v3 ) ( * v1 16 ) ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 5 4 ) ( + ( * v1 16 ) ( + ( * v2 32 ) v3 ) ) ) 3 ) 3 ) ( - ( + ( + ( + ( * v2 32 ) v3 ) ( + ( * v1 16 ) 15 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + -2 v4 ) ( + -2 v4 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v4 ) ( + ( - ( - 6 2 ) 1 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "not-gt-to-eqlt", "min-x-x-plus-a-neg", "eqlt-to-not-gt", "and-min-to-lt", "Eq-lt-min", "add-assoc", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == -127 ( - ( + -127 ( - 134 ( max ( * v0 4 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-comm", "Eq-a-b", "Eq-min-c-neg", "eq-comm", "min-mul-in-pos", "sub-to-add", "mul-comm", "max-to-min", "min-add-both", "eq-swap", "eq-x-y-0"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + v0 999 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "add-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 7 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 10 ) )", "end": "0"}, "rules": ["sub-to-add", "add-fact-mul", "mul-comm", "lt-swap-out", "mul-assoc", "add-assoc", "lt-swap-in", "add-comm", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 32 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 32 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 32 ) v1 ) 68 ) ) 5 ) ( + ( + ( * v0 32 ) v1 ) 36 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "and-comm", "eqlt-to-not-gt", "add-comm", "lt-swap-out", "lt-swap-in", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 252 ) 248 ) 4 ) 4 ) ( min ( * v0 252 ) 248 ) )", "end": "1"}, "rules": ["mul-assoc", "min-mul-in-pos", "min-div-in-pos", "eq-x-x", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( <= ( + ( max ( - ( max ( + ( min ( * v0 4 ) 61 ) v1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 61 ) ) ( + ( * v0 4 ) v1 ) ) 0 ) 16 ) 1024 )", "end": "1"}, "rules": ["min-comm", "mul-assoc", "min-div-in-neg", "lt-swap-out", "div-cancel-mul", "mul-zero", "div-minus-down", "lt-swap-in", "sub-to-add", "and-min-to-lt", "lt-mul-pos-cancel", "eqlt-to-not-gt", "add-fact-mul", "max-consts-or", "div-separate", "div-consts-add", "add-comm", "mul-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 1 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 64 ) 445 ) ( + v1 v2 ) ) ( + ( min ( * v0 64 ) 445 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( + ( min ( * v2 16 ) 484 ) ( + v3 v4 ) ) 15 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( + ( min ( * v2 16 ) 484 ) ( + v3 v4 ) ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( - ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 135 ) 8 ) ( * v3 4 ) ) 3 ) v4 ) v5 ) ( min ( + ( min ( - ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 135 ) 8 ) ( * v3 4 ) ) 3 ) v4 ) v5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( min ( * v1 32 ) ( - v2 32 ) ) v3 ) ) ( + ( * v0 8 ) ( + ( min ( * v1 32 ) ( - v2 32 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 504 ) 499 ) v1 ) ( min ( + ( * v0 504 ) 499 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 135 ) 126 ) ( / ( + v0 135 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 127 ) v1 ) ( min ( + v0 127 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 16 ) -5 ) ( * v1 8 ) ) ( + ( * v0 16 ) 8 ) ) ( min ( + ( max ( * v0 16 ) -5 ) ( * v1 8 ) ) ( + ( * v0 16 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / v0 16 ) 126 ) 2 ) ( + ( max ( min v1 121 ) -3 ) 6 ) ) ( min ( max ( min ( / v0 16 ) 126 ) 2 ) ( + ( max ( min v1 121 ) -3 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) ( + ( * v2 4 ) 502 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) ( + ( * v2 4 ) 502 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( / v1 8 ) ( * ( / v2 128 ) 128 ) ) ) ( + ( min v2 3 ) ( * ( min ( / v2 4 ) 31 ) 4 ) ) ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( / v1 8 ) ( * ( / v2 128 ) 128 ) ) ) ( + ( min v2 3 ) ( * ( min ( / v2 4 ) 31 ) 4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 17 ) 9 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 17 ) 9 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 252 ) 248 ) ( + ( min ( * v2 500 ) ( - v3 500 ) ) v4 ) ) ) ( + ( * v0 4 ) ( + ( min ( * v1 252 ) 248 ) ( + ( min ( * v2 500 ) ( - v3 500 ) ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + v1 241 ) ) ( min ( * v0 4 ) ( + v1 241 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 18 ) 16 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 18 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( / ( + ( + v0 v1 ) 35 ) 4 ) ( * v2 125 ) ) ( - ( / ( + v0 v1 ) 4 ) 2 ) ) ( max ( + ( / ( + ( + v0 v1 ) 35 ) 4 ) ( * v2 125 ) ) ( - ( / ( + v0 v1 ) 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1995 ) -4 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1995 ) -4 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + -8 ( * v0 4 ) ) ( + -8 ( * v0 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 8 ) ( * v2 63 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 8 ) ( * v2 63 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )", "end": "0"}, "rules": ["sub-to-add", "and-min-to-lt", "min-comm", "min-mul-in-pos", "lt-swap-out", "gt-to-lt"]}, {"expression": {"start": "( == ( + ( * ( + ( * ( max ( min ( / v0 16 ) 126 ) 2 ) 4 ) v1 ) 4 ) 4 ) ( + ( * ( + ( * ( max ( min ( / v0 16 ) 126 ) 2 ) 4 ) v1 ) 4 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 16 ) 109 ) ( + v1 v2 ) ) ( + ( min ( * v0 16 ) 109 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * ( / v1 3 ) 125 ) v2 ) ) ( + ( * v0 16 ) ( + ( * ( / v1 3 ) 125 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) 4 ) v1 ) ( min ( + ( * v0 4 ) 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) 1007 ) 8 ) ( * v3 4 ) ) ( - ( / ( + ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) 1007 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 27 ) 17 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 27 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + v2 2 ) ) ( min ( + ( * v0 2 ) v1 ) ( + v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( + ( / v1 4 ) v2 ) ) ( + ( * v0 128 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( / ( + ( % ( + v0 v1 ) 4 ) 1003 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) 2 ) ) ( min ( * ( + ( / ( + ( % ( + v0 v1 ) 4 ) 1003 ) 4 ) ( / ( + v0 v1 ) 4 ) ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 125 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 125 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -4 ) ( + ( * v1 -64 ) ( - ( / ( - ( + v2 v3 ) 1 ) 16 ) ( / v3 16 ) ) ) ) ( + ( * v0 -4 ) ( + ( * v1 -64 ) ( - ( / ( - ( + v2 v3 ) 1 ) 16 ) ( / v3 16 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 7 ) 20 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 7 ) 20 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( max ( + ( - ( * v0 32 ) ( + ( * v1 -126 ) ( + v2 v3 ) ) ) v3 ) -22 ) ( * v4 8 ) ) 14 ) 7 ) ( min ( + ( min ( + v5 22 ) ( + v2 v3 ) ) 7 ) v6 ) ) ( + ( max ( min ( + ( max ( + ( - ( * v0 32 ) ( + ( * v1 -126 ) ( + v2 v3 ) ) ) v3 ) -22 ) ( * v4 8 ) ) 14 ) 7 ) ( min ( + ( min ( + v5 22 ) ( + v2 v3 ) ) 7 ) v6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -1 ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) ) ( - ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) 1999 ) ) ( max ( - -1 ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) ) ( - ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -68 ) 4 ) 4 ) ( * v0 -68 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 20 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 20 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( + v2 3 ) ) ( min ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( + ( min ( * v3 256 ) 250 ) v1 ) 250 ) ) ( * v3 256 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( + ( min ( * v3 256 ) 250 ) v1 ) 250 ) ) ( * v3 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 10 ( + ( * v0 673 ) v1 ) ) ( - 2009 ( + ( * v0 673 ) v1 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-assoc", "add-comm", "add-assoc", "lt-swap-in", "mul-zero", "sub-to-add", "mul-comm", "gt-to-lt"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) v2 ) ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - v0 v1 ) -11 ) -13 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "eq-swap", "sub-to-add", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( max ( - -5 ( * ( max ( - v0 v1 ) 0 ) 8 ) ) ( - ( * ( max ( min v2 0 ) -3 ) 8 ) 5 ) ) ( max ( - -5 ( * ( max ( - v0 v1 ) 0 ) 8 ) ) ( - ( * ( max ( min v2 0 ) -3 ) 8 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 12 ) v1 ) ( min ( + v0 12 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) 16 ) 23 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-comm", "sub-to-add", "mul-comm", "eq-swap", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 16 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( min ( + ( * v0 500 ) v1 ) ( - ( + v2 v1 ) 500 ) ) 8 ) 8 ) 4 ) 4 ) ( * ( / ( min ( + ( * v0 500 ) v1 ) ( - ( + v2 v1 ) 500 ) ) 8 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) v1 ) ( + ( * ( + ( min ( * v0 2 ) 253 ) v2 ) 8 ) 12 ) ) ( min ( max ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) v1 ) ( + ( * ( + ( min ( * v0 2 ) 253 ) v2 ) 8 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 16 ) ( + v2 v3 ) ) 12 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 16 ) ( + v2 v3 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) ( * v4 4 ) ) ( - ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - 20 ( max ( * v0 12 ) 20 ) ) ( * v1 4 ) ) ( - ( - 20 ( max ( * v0 12 ) 20 ) ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( * v1 4 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "eq-swap", "sub-to-add", "add-comm", "mul-assoc", "mul-comm", "Eq-a-b", "add-const"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 11 ) 4 ) ( / ( + v2 11 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "sub-to-add", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 4 ) 78 ) 16 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-const-mod", "eqgt-to-not-lt", "lt-mul-div-cancel", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 186 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 186 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max v0 v1 ) ( + ( * ( max ( min ( * v2 2 ) 497 ) -2 ) 4 ) 12 ) ) ( min ( max v0 v1 ) ( + ( * ( max ( min ( * v2 2 ) 497 ) -2 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 128 ) ) 127 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 128 ) ) 127 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 4 ) v4 ) v5 ) ( + ( + ( * v3 4 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 4 ) v4 ) v5 ) ( + ( + ( * v3 4 ) v4 ) v5 ) ) ) ( <= ( + ( * v6 3 ) v7 ) ( + ( * v6 3 ) v7 ) ) ) ( >= ( + ( * v6 3 ) v7 ) ( + ( * v6 3 ) v7 ) ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( * v0 32 ) 4 ) 4 ) ( * v0 32 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( <= ( + ( * v0 9 ) 9 ) ( * v0 9 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-const", "add-comm"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 8 ) 539 ) 32 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-const-mod", "lt-mul-div-cancel", "lt-swap-out", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == ( - ( * v0 8 ) ( min ( + ( * v1 -126 ) v2 ) 116 ) ) ( - ( * v0 8 ) ( min ( + ( * v1 -126 ) v2 ) 116 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( + ( * v0 16 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 16 ) v1 ) 4 ) ( + ( * ( min v2 15 ) 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "sub-to-add", "add-const", "Eq-a-b", "eq-mul-x-y-0", "eq-x-y-0", "mul-comm", "add-assoc"]}, {"expression": {"start": "( >= ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-assoc", "add-fact-mul", "lt-swap-out", "add-const", "sub-to-add", "mul-comm", "mul-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * v1 4 ) 0 ) ( * v1 4 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( * ( min v1 11 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["min-add-both", "eqgt-to-not-lt", "and-min-to-lt", "min-mul-in-pos", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - v0 3 ) ) ) ( >= ( + v0 1 ) ( + v0 1 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 3 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-in", "add-comm", "sub-to-add", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( <= ( + ( * v0 4 ) 3 ) ( - ( - ( * ( - v0 1 ) 4 ) 4 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "Eq-lt-min", "add-dist-mul", "eq-x-y-0", "add-comm", "mul-assoc", "sub-to-add", "mul-zero", "min-add-both", "add-fact-mul", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 5 ) ( - ( + v0 v1 ) 4 ) ) ) ( >= ( + ( + v0 v1 ) 5 ) ( + ( + v0 v1 ) 5 ) ) ) ( <= ( + ( + ( * 0 4 ) ( - v2 11 ) ) 0 ) ( - v2 11 ) ) ) ( >= ( + ( + ( * 35 4 ) ( + v2 130 ) ) 3 ) ( + v2 131 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["and-x-1", "eqgt-to-not-lt", "not-gt-to-eqlt", "lt-min-term+cpos", "eqlt-to-not-gt", "min-sub-both", "add-comm", "and-eqlt-to-min", "lt-swap-in", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) 0 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) 3 ) ( + ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( <= ( + ( max ( - ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 1002 ) ) v1 ) ( + ( * v0 4 ) v1 ) ) -1002 ) 1009 ) 1024 )", "end": "1"}, "rules": ["not-gt-to-eqlt", "and-min-to-lt", "lt-swap-out", "eqlt-to-not-gt", "mul-one", "mul-assoc", "and-min-to-eqlt", "sub-to-add", "lt-swap", "min-sub-both", "mul-comm", "min-comm", "max-to-min", "add-comm"]}, {"expression": {"start": "( <= ( + ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) ( - ( max ( + ( * v0 3 ) v1 ) 1999 ) 1996 ) ) ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "mul-comm", "mul-assoc", "add-dist-mul", "lt-swap", "or-comm", "add-comm", "add-fact-mul", "lt-swap-out", "mul-zero", "max-consts-or"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= ( + v0 35 ) ( + v0 35 ) ) ) ( <= ( - ( + 0 ( / v1 8 ) ) 2 ) ( - ( / v1 8 ) 2 ) ) ) ( >= ( - ( + 3 ( + ( / v1 8 ) 20 ) ) 2 ) ( + ( / v1 8 ) ( / ( + ( % v1 8 ) 148 ) 8 ) ) ) ) ( <= ( * v2 55 ) ( * v2 55 ) ) ) ( >= ( + ( * v2 55 ) 54 ) ( + ( * v2 55 ) 54 ) ) )", "end": "1"}, "rules": ["mul-assoc", "mul-zero", "add-dist-mul", "add-fact-mul", "lt-swap-out", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add", "lt-const-mod-false", "mul-comm", "add-assoc", "lt-mul-div-cancel"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( - ( * v0 4 ) ( % ( + ( * v0 4 ) v1 ) 8 ) ) v1 ) ) ) 0 ) ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ) ) ( >= ( + ( + ( * 0 4 ) ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= v2 v2 ) ) ( >= ( + v2 8 ) ( + v2 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-min-term+cpos", "min-min-div-pos", "add-assoc", "add-comm", "mul-comm", "add-zero", "mul-assoc", "max-consts-or", "lt-mul-pos-cancel", "min-mul-out-neg", "add-denom-div", "add-dist-mul", "lt-swap", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( == ( min ( - ( / v0 4 ) 1 ) v1 ) ( min ( - ( / v0 4 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 16 ) ( * v2 168 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 16 ) ( * v2 168 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 500 ) ( - v1 500 ) ) ( min ( * v0 500 ) ( - v1 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 -4 ) ) ( + ( / v1 250 ) 3 ) ) ( min ( + ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 -4 ) ) ( + ( / v1 250 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( * ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( * ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 499 ) 0 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( + ( * ( / v0 5 ) 23 ) ( * ( / v1 250 ) 8 ) ) ( + ( * ( / v0 5 ) 23 ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 16 ) ( * v1 4 ) ) ( + ( / v0 16 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 252 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 252 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 63 ) ) ( - v0 ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 1 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( * ( + v0 v1 ) 2 ) 2 ) v2 ) 4 ) ( + ( * ( + v0 v1 ) 16 ) 12 ) ) ( min ( * ( + ( * ( * ( + v0 v1 ) 2 ) 2 ) v2 ) 4 ) ( + ( * ( + v0 v1 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( min ( * ( + v0 v1 ) 2 ) 251 ) 2 ) v2 ) 4 ) ( + ( * ( min ( + v0 v1 ) 125 ) 16 ) 12 ) ) ( min ( * ( + ( * ( min ( * ( + v0 v1 ) 2 ) 251 ) 2 ) v2 ) 4 ) ( + ( * ( min ( + v0 v1 ) 125 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 32 ) ) ( + v1 32 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 32 ) ) ( + v1 32 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( * v3 32 ) ) v1 ) -11 ) ( + ( + ( * v3 32 ) ( + ( * ( / ( + ( - ( - ( min ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v0 v1 ) ) ) ( * v3 32 ) ) v1 ) 14 ) 8 ) 8 ) ( * v2 126 ) ) ) v1 ) ) ( + ( min ( - ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ) ( * v3 32 ) ) v1 ) -11 ) ( + ( + ( * v3 32 ) ( + ( * ( / ( + ( - ( - ( min ( + ( + ( min ( * v3 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v0 v1 ) ) ) ( * v3 32 ) ) v1 ) 14 ) 8 ) 8 ) ( * v2 126 ) ) ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 64 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v3 32 ) ) ) 29 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( * v2 64 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v3 32 ) ) ) 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 1999 ) 0 ) ( * v1 64 ) ) ( - v2 64 ) ) ( min ( + ( max ( min v0 1999 ) 0 ) ( * v1 64 ) ) ( - v2 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( / ( - ( + ( min v0 977 ) v1 ) 977 ) 4 ) ( - v2 ( * v3 2 ) ) ) ( / ( - ( + ( min v0 977 ) v1 ) 985 ) 4 ) ) ( - ( min ( / ( - ( + ( min v0 977 ) v1 ) 977 ) 4 ) ( - v2 ( * v3 2 ) ) ) ( / ( - ( + ( min v0 977 ) v1 ) 985 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( + ( / v1 8 ) 63 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( + ( / v1 8 ) 63 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) 2 ) ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 3 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) 6 ) v1 ) ( min ( + ( * v0 2 ) 6 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 172 ) 16 ) 2 ) ) 5 ) ) ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v1 ) 8 ) 172 ) 16 ) 2 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( + ( / v1 4 ) v2 ) ) ( + ( * v0 125 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 983 ) 32 ) ( - ( + 0 32 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "max-consts-or", "lt-const-mod", "eqlt-to-not-gt", "and-min-to-lt", "lt-swap-out"]}, {"expression": {"start": "( == ( max ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 248 ) v3 ) ( max ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 248 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( + ( * v1 125 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 8 ) ) ) ) ( + ( * v0 63 ) ( + ( * v1 125 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 33 ) ) ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) v2 ) 3 ) 4 ) v3 ) ( max ( / ( + ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) v2 ) 3 ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( - ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v2 32 ) 19 ) v3 ) ) 113 ) 2 ) -23 ) ) ) ( + ( * v0 16 ) ( - ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v2 32 ) 19 ) v3 ) ) 113 ) 2 ) -23 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) ( + v2 3 ) ) ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) -4 ) ( + ( * v3 253 ) ( * ( / v1 4 ) 4 ) ) ) ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) -4 ) ( + ( * v3 253 ) ( * ( / v1 4 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min v0 v1 ) ( min v0 v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 4 ) -5 ) ( / ( + v1 v2 ) 16 ) ) ( + ( max ( * v0 4 ) -5 ) ( / ( + v1 v2 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 5 ) 4 ) ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 5 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 224 ) 136 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 224 ) 136 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 32 ) ) ( + ( / ( + v0 v1 ) 8 ) 31 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 32 ) ) ( + ( / ( + v0 v1 ) 8 ) 31 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 1029 ) 1012 ) ( / ( + v0 1029 ) 1012 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( max ( min ( * v0 8 ) 125 ) 1 ) ) v1 ) ( min ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( max ( min ( * v0 8 ) 125 ) 1 ) ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) ( - ( - ( / ( + v3 v4 ) 4 ) v5 ) 1 ) ) ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) ( - ( - ( / ( + v3 v4 ) 4 ) v5 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 v0 ) ( - 1999 v0 ) )", "end": "0"}, "rules": ["add-comm", "mul-zero", "add-assoc", "add-fact-mul", "mul-assoc", "lt-swap-in", "sub-to-add", "gt-to-lt", "mul-comm"]}, {"expression": {"start": "( == ( + ( * v0 -16 ) ( + ( * v1 -32 ) v2 ) ) ( + ( * v0 -16 ) ( + ( * v1 -32 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) v2 ) 29 ) -3 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-swap", "sub-to-add", "eq-comm", "Eq-a-b", "add-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 504 ) 494 ) v1 ) ( min ( + ( * v0 504 ) 494 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * v3 4 ) v4 ) 0 ) ( + ( + ( * v3 4 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 4 ) v4 ) 3 ) ( + ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( - v0 ( + ( * v1 4 ) v2 ) ) ( - v0 ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 17 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 18 ( * ( max v0 1 ) 9 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-comm", "sub-to-add", "mul-assoc", "mul-comm", "eq-swap", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( * v2 64 ) v3 ) 51 ) ) ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( * v2 64 ) v3 ) 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + ( * v0 64 ) v1 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( max ( * v3 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( + ( * v0 64 ) v1 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( max ( * v3 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( - v0 ( / v1 8 ) ) 3 ) ( min ( + ( / v1 8 ) ( * ( / ( - v0 ( / v1 8 ) ) 4 ) 4 ) ) v0 ) ) v0 ) ( min ( + ( min ( - v0 ( / v1 8 ) ) 3 ) ( min ( + ( / v1 8 ) ( * ( / ( - v0 ( / v1 8 ) ) 4 ) 4 ) ) v0 ) ) v0 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 168 ) 332 ) 4 ) 4 ) ( min ( * v0 168 ) 332 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "min-mul-in-pos", "min-div-in-pos", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( + ( * v0 8 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + v0 8 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-swap-out", "eqlt-to-not-gt", "add-assoc", "lt-x-x-sub-a", "add-comm", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * v0 9 ) 8 ) ( * ( + v0 1 ) 9 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-mul-div-cancel", "lt-x-x-sub-a", "lt-swap-in", "add-assoc", "lt-mul-pos-cancel", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 251 ) ( + ( + ( + ( * 0 4 ) 0 ) v1 ) v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 251 ) ( + ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) v0 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["add-zero", "lt-swap-out", "add-comm", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) v2 ) -1 ) -3 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "eq-swap", "mul-comm", "Eq-a-b", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + -33 v0 ) 31 ) ( + ( + 0 v0 ) ( max -33 -2 ) ) ) ) ( >= ( + ( + 3 v0 ) 31 ) ( + ( + ( - ( + 32 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v1 2 ) v2 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( * ( + ( * v3 2 ) v4 ) 16 ) ( * ( + ( * v3 2 ) v4 ) 16 ) ) ) ( >= ( + ( * ( + ( * v3 2 ) v4 ) 16 ) 15 ) ( + ( * ( + ( * v3 2 ) v4 ) 16 ) 15 ) ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )", "end": "0"}, "rules": ["eq-x-y-0", "Eq-min-c-pos", "min-add-both", "sub-to-add"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 146 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-dist-mul", "mul-assoc", "eq-comm", "eq-x-y-0", "add-assoc", "sub-to-add", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( + v2 10 ) ) ( min ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( + v2 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 5 ) ( - ( + ( - v0 5 ) 5 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "add-comm", "lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 7 ) ( - ( + ( + v0 1 ) v1 ) 10 ) )", "end": "0"}, "rules": ["mul-comm", "add-const", "lt-swap-out", "add-fact-mul", "sub-to-add", "add-comm", "mul-one", "add-assoc", "mul-zero"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 136 ( * ( % v0 2 ) 69 ) ) ( - ( + 0 69 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "lt-swap-out", "eqlt-to-not-gt", "min-sub-both", "max-consts-or", "mul-assoc", "mod-minus-in", "sub-to-add", "and-min-to-lt", "lt-mul-pos-cancel", "lt-swap"]}, {"expression": {"start": "( == ( - ( * v0 16 ) 36 ) ( - ( + ( - ( * v0 16 ) 36 ) ( + ( * ( min v1 -1 ) 16 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-comm", "mul-comm", "mul-assoc", "add-comm", "add-assoc", "Eq-a-b", "eq-swap", "add-fact-mul"]}, {"expression": {"start": "( == ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["eq-x-y-0", "add-fact-mul", "sub-to-add", "mul-assoc", "mul-comm", "add-comm", "add-assoc", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) 0 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( <= ( + ( min ( * v5 4 ) 133 ) 0 ) ( + ( min ( * v5 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 133 ) 3 ) ( + ( min ( * v5 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( < ( + ( * v0 3 ) v1 ) ( - ( + ( * v0 3 ) ( + v1 1 ) ) 2 ) )", "end": "0"}, "rules": ["add-const", "sub-to-add", "add-assoc", "lt-swap-in", "mul-zero", "add-comm", "mul-comm", "lt-swap-out", "add-fact-mul"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 63 ) 62 ) v1 ) 62 ) ( + ( * ( + v0 1 ) 63 ) v1 ) )", "end": "1"}, "rules": ["lt-min-term+cpos", "min-add-both", "add-dist-mul", "lt-swap-in", "add-comm", "sub-to-add", "add-assoc", "mul-comm"]}, {"expression": {"start": "( >= ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "lt-swap-out", "lt-swap-in", "add-assoc", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( >= ( / ( - -165 ( % ( + v0 v1 ) 8 ) ) 8 ) ( - ( + ( / ( - -165 ( % ( + v0 v1 ) 8 ) ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 180 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "mul-comm", "lt-swap-out", "eqgt-to-not-lt", "add-comm", "add-dist-mul", "lt-mul-div-cancel", "add-assoc", "mul-zero", "sub-to-add", "lt-const-mod", "add-fact-mul"]}, {"expression": {"start": "( < ( + ( + ( * v0 500 ) v1 ) 499 ) ( + ( * ( + v0 1 ) 500 ) v1 ) )", "end": "1"}, "rules": ["lt-swap", "add-dist-mul", "mul-comm", "sub-to-add", "add-assoc", "lt-swap-out", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / v1 125 ) ( / ( + 0 v1 ) 125 ) ) ) ( >= ( / ( + v1 124 ) 125 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 125 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 -36 ) 9 ) 9 ) ( * v0 -36 ) )", "end": "1"}, "rules": ["mod-multiple", "mul-cancel-div", "sub-to-add", "eq-x-x", "add-zero", "mul-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 131 ) 128 ) ( - ( + 0 ( / ( + ( % v0 4 ) 383 ) 128 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "and-min-to-lt", "max-consts-or", "lt-swap-out", "lt-mul-div-cancel", "add-comm", "lt-const-mod"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 7 ) ( - ( + ( - ( * v0 4 ) 7 ) ( + ( * ( max ( * v1 18 ) 17 ) -4 ) 140 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "add-const", "eq-swap", "Eq-a-b", "add-comm", "mul-comm", "add-fact-mul", "eq-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 2 ) -1 ) v1 ) ( - ( + ( * v0 2 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= ( - ( + 0 ( + ( min v2 0 ) v3 ) ) 1 ) ( - ( + ( min v2 0 ) v3 ) 1 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( max v2 0 ) 4 ) 4 ) ( + ( min v2 0 ) v3 ) ) 4 ) ) 1 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["sub-to-add", "add-dist-mul", "lt-swap", "max-consts-or", "lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 3 ) ( * ( min ( max ( - ( max ( min v1 499 ) 0 ) 1 ) ( + v0 1 ) ) ( - ( + v0 1 ) 1 ) ) 4 ) )", "end": "0"}, "rules": ["div-cancel-mul", "lt-to-zero", "add-zero", "lt-mul-pos-cancel", "add-assoc", "min-comm", "sub-to-add", "add-comm", "and-min-to-lt", "lt-swap-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( * ( + ( * v2 16 ) v3 ) 2 ) 2 ) ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 16 ) v3 ) ) 2 ) 0 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( * v2 16 ) v3 ) 2 ) 31 ) 2 ) ( - ( + ( * ( + ( * 0 2 ) ( + ( + ( * v2 16 ) v3 ) 14 ) ) 2 ) 3 ) 2 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )", "end": "1"}, "rules": ["add-dist-mul", "min-x-x", "add-assoc", "Eq-lt-min", "add-zero", "lt-to-zero", "add-comm", "eq-x-x", "eqgt-to-not-lt", "mul-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) )", "end": "1"}, "rules": ["add-zero", "mod-consts", "mul-comm", "min-comm", "min-div-in-pos", "mul-assoc", "mul-cancel-div", "min-div-mul", "sub-to-add", "eq-x-x", "div-consts-add", "min-mul-in-pos", "div-minus-out", "div-separate", "min-ass"]}, {"expression": {"start": "( == ( min ( + ( / ( + v0 v1 ) 4 ) ( * v2 2 ) ) ( + v3 1 ) ) ( min ( + ( / ( + v0 v1 ) 4 ) ( * v2 2 ) ) ( + v3 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) 251 ) v1 ) ( min ( + ( * v0 252 ) 251 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 125 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 125 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 3 ) ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) 49 ) v1 ) ( min ( + ( * v0 64 ) 49 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 125 ( * v0 32 ) ) ( + ( - v1 ( + ( * v0 32 ) ( * v2 126 ) ) ) 9 ) ) ( min ( - 125 ( * v0 32 ) ) ( + ( - v1 ( + ( * v0 32 ) ( * v2 126 ) ) ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( min ( * v3 12 ) 20 ) ( / v1 4 ) ) 11 ) ) ( * v3 12 ) ) ( / v1 4 ) ) ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( min ( * v3 12 ) 20 ) ( / v1 4 ) ) 11 ) ) ( * v3 12 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 125 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 125 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 253 ) 2 ) v2 ) 4 ) ( + ( * v3 16 ) 28 ) ) ( min ( * ( + ( * ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 253 ) 2 ) v2 ) 4 ) ( + ( * v3 16 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 16 ) 109 ) ( + v1 v2 ) ) 13 ) v3 ) ( min ( + ( + ( min ( * v0 16 ) 109 ) ( + v1 v2 ) ) 13 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 4 ) v2 ) 8 ) ) ( - v0 ( * ( + ( * v1 4 ) v2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) ) ( + ( / v0 4 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * ( / ( + v1 7 ) 4 ) 4 ) ) ( + ( max ( * v2 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * ( / ( + v1 7 ) 4 ) 4 ) ) ( + ( max ( * v2 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 686 ) 672 ) ( / ( + v0 686 ) 672 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - v2 4 ) ) ( min ( + ( * v0 4 ) v1 ) ( - v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 250 ) ( - ( + ( / ( + v0 v1 ) 250 ) ( * ( / ( + ( % ( + v0 v1 ) 250 ) 1999 ) 1000 ) 4 ) ) 1 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 250 ) ( - ( + ( / ( + v0 v1 ) 250 ) ( * ( / ( + ( % ( + v0 v1 ) 250 ) 1999 ) 1000 ) 4 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2001 ) 2 ) v3 ) 3 ) ) ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2001 ) 2 ) v3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( / v1 8 ) ) 11 ) 3 ) v4 ) ( min ( - ( min ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( / v1 8 ) ) 11 ) 3 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 33 ) ) ) ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 33 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 4 ) ( / ( + ( % ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 4 ) 11 ) 4 ) ) ( + ( / ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 4 ) ( / ( + ( % ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 4 ) 11 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 128 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 128 ) 129 ) ( + v2 v3 ) ) 137 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 128 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 128 ) 129 ) ( + v2 v3 ) ) 137 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1000 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) v3 ) ) ( + ( * v0 1000 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 125 ) ( - v1 125 ) ) ( min ( * v0 125 ) ( - v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( - v0 ( * v1 125 ) ) 125 ) ( + ( min v2 125 ) 2 ) ) ( min v2 125 ) ) ( min ( max ( min ( - v0 ( * v1 125 ) ) 125 ) ( + ( min v2 125 ) 2 ) ) ( min v2 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( min ( * v1 2 ) 251 ) ) ( - ( * v0 2 ) ( min ( * v1 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) 8 ) 8 ) ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * v0 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 126 ) ) 4 ) 498 ) ) ( * ( + ( * v2 126 ) ( + ( / v1 4 ) v3 ) ) 4 ) ) ( - ( min ( * v0 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 126 ) ) 4 ) 498 ) ) ( * ( + ( * v2 126 ) ( + ( / v1 4 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 16 ) 109 ) v1 ) v2 ) ( + ( + ( min ( * v0 16 ) 109 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 4 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 4 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( min v0 249 ) 128 ) v1 ) ( max ( + ( min v0 249 ) 128 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 15 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + v1 v2 ) ) ( + ( * v0 64 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + v0 v1 ) 1936 ) -63 ) 32 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1936 ) -63 ) 32 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * v1 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( max ( min ( * v0 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * v1 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 2 ) ( + ( * ( + ( * v1 3 ) v0 ) 2 ) 1 ) ) ( max ( * v0 2 ) ( + ( * ( + ( * v1 3 ) v0 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( / ( + ( min v0 500 ) v1 ) 4 ) ) 0 ) 125 ) ( - ( + 0 ( / ( + ( min v0 500 ) v1 ) 4 ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * ( / ( + v2 125 ) 4 ) 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * ( / ( + v2 125 ) 4 ) 4 ) ) ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 2 ) 0 ) ( + ( * v4 2 ) 0 ) ) ) ( >= ( + ( * v4 2 ) ( - ( + 2 0 ) 1 ) ) ( + ( * v4 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + v2 63 ) ) ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + v2 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( + ( * v1 251 ) ( + ( / v2 4 ) v3 ) ) ) ( + ( * v0 63 ) ( + ( * v1 251 ) ( + ( / v2 4 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 8 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 8 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 49 ) 32 ) ( / ( + v0 49 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 10 ( * ( max ( min v0 2 ) 1 ) 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-comm", "eq-comm", "sub-to-add", "Eq-a-b", "eq-swap", "mul-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 32 ( * ( max ( min v0 4 ) 3 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-a-b", "mul-comm", "mul-assoc", "add-comm", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( == ( + ( min ( * v0 8 ) 122 ) ( + v1 v2 ) ) ( + ( min ( * v0 8 ) 122 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 2 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 2 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 64 ) ( * v0 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) ) ( >= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) v2 ) ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 6 ) 672 ) ( / ( + ( % ( + v0 6 ) 672 ) 671 ) 672 ) ) ( + ( / ( + v0 6 ) 672 ) ( / ( + ( % ( + v0 6 ) 672 ) 671 ) 672 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 249 ) 4 ) ( + v2 15 ) ) ( min ( / ( + ( + v0 v1 ) 249 ) 4 ) ( + v2 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= v0 ( - v0 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 64 ) 101 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 64 ) 101 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * ( + ( * v1 3 ) v2 ) 4 ) ) ( + ( / v0 8 ) ( * ( + ( * v1 3 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( - 1 ( max v0 1 ) ) ( max v0 1 ) ) ( - 1 ( max v0 1 ) ) )", "end": "0"}, "rules": ["or-comm", "add-dist-mul", "lt-swap-out", "sub-to-add", "add-comm", "lt-swap", "lt-x-x-sub-a", "eqlt-to-not-gt", "max-consts-or"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 223 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 223 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( min ( * v1 8 ) 117 ) v2 ) ( + ( + ( min ( * v1 8 ) 117 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) 7 ) ( + ( + ( min ( * v1 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 4 ) ) ( / ( + v0 v1 ) 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 4 ) ) ( / ( + v0 v1 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 6 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 6 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "mul-assoc", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( + ( * v0 -504 ) v1 ) 494 ) 14 ) 256 ) 256 ) ( * v0 504 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -504 ) v1 ) 494 ) 14 ) 256 ) 256 ) ( * v0 504 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 64 ) 4 ) 4 ) ( * v0 64 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + v0 v1 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * ( + v0 v1 ) 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( + v0 v1 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * ( + v0 v1 ) 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 250 ) 999 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "lt-swap-in", "eqgt-to-not-lt", "Eq-lt-min", "not-gt-to-eqlt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( >= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 0 ) ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) ) ) ( >= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 3 ) ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) 3 ) v5 ) ) ) ( <= ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ) ) ( >= ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-zero", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( min ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) 0 ) ( * v1 4 ) ) ( + ( min ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) 0 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + ( + v0 v1 ) v2 ) 133 ) ( - ( + ( - ( + ( + v0 v1 ) v2 ) 133 ) 10 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "sub-to-add", "lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )", "end": "0"}, "rules": ["sub-to-add", "Eq-a-b", "mul-comm", "eq-swap"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + v0 63 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 1 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 1 ) ) ) ( >= ( - ( + ( + ( * 62 4 ) v0 ) 3 ) 1 ) ( - ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-comm", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 1 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * ( - ( + 12 0 ) 1 ) 4 ) 3 ) ( + ( * ( - ( + 12 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) ( - ( + ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) 9 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "eq-swap", "add-fact-mul", "add-dist-mul", "eq-x-y-0", "mul-comm", "sub-to-add", "mul-assoc", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( + -2 v0 ) ) ) ( >= ( + ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) v0 ) ( - ( - 4 2 ) 1 ) ) 3 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 255 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["sub-to-add", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( >= ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["min-consts-or", "add-comm", "max-to-min", "eqgt-to-not-lt", "mul-assoc", "mul-zero", "min-comm", "min-mul-in-pos", "min-add-both", "add-assoc", "add-fact-mul", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( - ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) ( - ( + ( - ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) ( + ( * v2 2 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eq-swap", "add-comm", "mul-assoc", "add-fact-mul", "Eq-a-b", "eq-comm", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( / v0 4 ) 4 ) 17 ) ( - ( + ( - ( * ( / v0 4 ) 4 ) 17 ) ( + ( * v1 4 ) 24 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "sub-to-add", "Eq-a-b", "mul-comm", "add-assoc", "mul-assoc", "eq-swap", "add-fact-mul"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 4 ) ) ( / v2 4 ) ) ( - ( - v0 ( * v1 4 ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 73 ) 64 ) ( / ( + v0 73 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 668 ) ( - v1 668 ) ) ( min ( * v0 668 ) ( - v1 668 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 8 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 8 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 78 ) 64 ) ( / ( + v0 78 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 146 ( max ( * v0 28 ) 110 ) ) 4 ) ( + ( / ( - 142 ( max ( * v0 28 ) 110 ) ) 4 ) 1 ) ) ( min ( / ( - 146 ( max ( * v0 28 ) 110 ) ) 4 ) ( + ( / ( - 142 ( max ( * v0 28 ) 110 ) ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 9 ) 4 ) ( * v1 126 ) ) ( - ( / ( + v0 9 ) 4 ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 8 ) ) ( + ( / v0 8 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 2 ) ( + ( * ( max ( min ( * ( + ( * v1 8 ) v2 ) 2 ) 499 ) 0 ) 2 ) 1 ) ) ( max ( * v0 2 ) ( + ( * ( max ( min ( * ( + ( * v1 8 ) v2 ) 2 ) 499 ) 0 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( min ( - ( - ( + ( * v1 -1000 ) ( + v2 v3 ) ) ( * v0 128 ) ) v3 ) 4 ) ( * ( / ( - ( min ( - v2 ( * v0 128 ) ) ( + ( * v1 1000 ) 128 ) ) 1 ) 4 ) 4 ) ) ) v3 ) v4 ) ( min ( + ( + ( * v0 128 ) ( + ( min ( - ( - ( + ( * v1 -1000 ) ( + v2 v3 ) ) ( * v0 128 ) ) v3 ) 4 ) ( * ( / ( - ( min ( - v2 ( * v0 128 ) ) ( + ( * v1 1000 ) 128 ) ) 1 ) 4 ) 4 ) ) ) v3 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 32 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 32 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - v0 ( + ( / v1 8 ) ( * v2 84 ) ) ) 5 ) ( + ( - v0 ( + ( / v1 8 ) ( * v2 84 ) ) ) 5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( / v1 4 ) ( * v2 2 ) ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( / v1 4 ) ( * v2 2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min v0 60 ) -64 ) ( + ( * v1 4 ) v2 ) ) ( - ( max ( min v0 60 ) -64 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 16 ) ( + ( * v1 4 ) v0 ) ) ( - ( + v0 16 ) ( + ( * v1 4 ) v0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - 14 ( max ( - ( * v0 126 ) v1 ) -116 ) ) ( + ( min ( - v1 ( * v0 126 ) ) 116 ) 11 ) ) ( + ( min v2 116 ) 14 ) ) ( min ( max ( - 14 ( max ( - ( * v0 126 ) v1 ) -116 ) ) ( + ( min ( - v1 ( * v0 126 ) ) 116 ) 11 ) ) ( + ( min v2 116 ) 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 17 ) 4 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 17 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) v3 ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 2 ) 16 ) ) ( - v0 ( * ( / v1 2 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( + ( * v0 -504 ) v1 ) 494 ) 14 ) 128 ) 128 ) ( * v0 504 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -504 ) v1 ) 494 ) 14 ) 128 ) 128 ) ( * v0 504 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 518 ) 504 ) ( / ( + v0 518 ) 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - v0 ( min ( / ( + ( + v1 v2 ) 507 ) 8 ) ( + ( + ( / ( + v1 v2 ) 8 ) ( * v3 12 ) ) 11 ) ) ) ( + ( / ( + v1 v2 ) 8 ) ( - ( * v3 12 ) ( / ( + ( + v1 v2 ) 507 ) 8 ) ) ) ) ( max ( - v0 ( min ( / ( + ( + v1 v2 ) 507 ) 8 ) ( + ( + ( / ( + v1 v2 ) 8 ) ( * v3 12 ) ) 11 ) ) ) ( + ( / ( + v1 v2 ) 8 ) ( - ( * v3 12 ) ( / ( + ( + v1 v2 ) 507 ) 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -144 ) 16 ) 16 ) ( * v0 -144 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 4 ) ( + ( max ( min ( / v2 16 ) 126 ) 2 ) ( * v3 64 ) ) ) ) ( + ( * v0 2 ) ( + ( * v1 4 ) ( + ( max ( min ( / v2 16 ) 126 ) 2 ) ( * v3 64 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( - ( + v2 v0 ) 1 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 251 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 252 ) ( + ( * v2 64 ) v3 ) ) ) ( + ( * v0 2 ) ( + ( * v1 252 ) ( + ( * v2 64 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( + ( * v0 128 ) ( + ( * v4 4 ) ( + ( * v1 500 ) v2 ) ) ) ) ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( + ( * v0 128 ) ( + ( * v4 4 ) ( + ( * v1 500 ) v2 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 64 ) v1 ) 63 ) v2 ) ( min ( + ( + ( * v0 64 ) v1 ) 63 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -256 ) ( - ( min ( * ( + ( / v1 250 ) ( * v0 4 ) ) 64 ) ( + ( - ( * ( min ( / ( - ( + v2 v1 ) 1 ) 250 ) ( + ( + ( / v1 250 ) ( * v0 4 ) ) 3 ) ) 64 ) ( * v3 24 ) ) 65 ) ) ( * ( / v1 250 ) 64 ) ) ) ( + ( * v0 -256 ) ( - ( min ( * ( + ( / v1 250 ) ( * v0 4 ) ) 64 ) ( + ( - ( * ( min ( / ( - ( + v2 v1 ) 1 ) 250 ) ( + ( + ( / v1 250 ) ( * v0 4 ) ) 3 ) ) 64 ) ( * v3 24 ) ) 65 ) ) ( * ( / v1 250 ) 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 67 ) 4 ) ( / ( + v0 67 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 146 ) 22 ) ( * ( / ( + v1 1 ) 2 ) 2 ) ) v2 ) ( min ( + ( max ( min v0 146 ) 22 ) ( * ( / ( + v1 1 ) 2 ) 2 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 64 ) 90 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "add-comm", "sub-to-add", "eq-swap", "Eq-a-b"]}, {"expression": {"start": "( == ( - ( min ( / ( + ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) 1007 ) 8 ) ( + ( * v3 4 ) 99 ) ) ( * ( + v3 v4 ) 4 ) ) ( - ( min ( / ( + ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) 1007 ) 8 ) ( + ( * v3 4 ) 99 ) ) ( * ( + v3 v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( max ( min v2 121 ) -3 ) 2 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( max ( min v2 121 ) -3 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 32 ) 968 ) ( + v1 v2 ) ) ( + ( min ( * v0 32 ) 968 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * ( / ( + ( min ( + ( * v0 -126 ) v1 ) 121 ) 18 ) 4 ) 4 ) ( * v0 126 ) ) ( + ( * v2 1000 ) v3 ) ) ( + v4 15 ) ) ( min ( + ( + ( * ( / ( + ( min ( + ( * v0 -126 ) v1 ) 121 ) 18 ) 4 ) 4 ) ( * v0 126 ) ) ( + ( * v2 1000 ) v3 ) ) ( + v4 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 8 ) 4 ) 4 ) ( * v0 8 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( max ( * v1 16 ) -5 ) v2 ) ) ( + ( * v0 8 ) ( + ( max ( * v1 16 ) -5 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) 55 ) v2 ) ( min ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) 55 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 32 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 32 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 256 ) ( + ( * v2 500 ) v3 ) ) ) ( + v4 14 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 256 ) ( + ( * v2 500 ) v3 ) ) ) ( + v4 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 495 ) 504 ) ( - ( + 0 2 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-mul-div-cancel", "eqlt-to-not-gt", "lt-const-mod", "max-consts-or", "and-min-to-lt"]}, {"expression": {"start": "( == ( + ( * v0 63 ) ( + ( / v1 4 ) ( * v2 126 ) ) ) ( + ( * v0 63 ) ( + ( / v1 4 ) ( * v2 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 128 ) 124 ) ( / v0 4 ) ) 127 ) ) ( * v4 -128 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( min ( * v4 128 ) 124 ) ( / v0 4 ) ) 127 ) ) ( * v4 -128 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 146 ) 22 ) ( * v1 2 ) ) ( + ( max ( min v0 146 ) 22 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 125 ) v2 ) v3 ) ( + ( + ( * v1 125 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 125 ) v2 ) v3 ) ( + ( + ( * v1 125 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 12 ) ( + v2 v3 ) ) ) ( + ( * v0 4 ) ( + ( * v1 12 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 685 ) 668 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 685 ) 668 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["mul-zero", "mul-comm", "add-fact-mul", "add-const", "sub-to-add", "eq-swap", "add-assoc", "add-comm"]}, {"expression": {"start": "( > ( - 0 ( * v0 4 ) ) ( - 1999 ( * v0 4 ) ) )", "end": "0"}, "rules": ["add-zero", "lt-swap-in", "add-comm", "sub-to-add", "mul-assoc", "mul-comm", "gt-to-lt", "add-fact-mul", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 125 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( - 251 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 16 ) v1 ) ) 4 ) ) 9 ) ) ( min ( - 251 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 16 ) v1 ) ) 4 ) ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 8 ) 117 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 8 ) 117 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( - ( / ( + ( min v2 1000 ) v3 ) 125 ) 8 ) ( / ( + 0 ( - ( + ( min v2 1000 ) v3 ) 1000 ) ) 125 ) ) ) ( >= ( / ( - ( + v2 v3 ) 1 ) 125 ) ( / ( + ( - ( + 1000 0 ) 1 ) ( - ( + v2 v3 ) 1000 ) ) 125 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "add-denom-mul", "add-assoc", "lt-to-zero", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-const", "mul-one", "lt-swap-in", "add-assoc", "mul-zero", "add-comm", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) v2 ) ) ( >= ( + ( + ( * 31 4 ) v2 ) 3 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 13 13 ) )", "end": "1"}, "rules": ["add-comm", "sub-to-add", "lt-swap-out", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( >= ( - ( * ( + v0 v1 ) 8 ) 67 ) ( - ( + ( - ( * ( + v0 v1 ) 8 ) 67 ) 9 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqgt-to-not-lt", "sub-to-add", "lt-x-x-sub-a", "add-comm", "add-assoc"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 125 ) ( - ( + v0 ( + v1 1 ) ) 5 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-fact-mul", "mul-comm", "add-comm", "add-assoc", "lt-swap-out", "add-const", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 171 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 177 ) )", "end": "0"}, "rules": ["lt-mul-div-cancel", "lt-x-x-sub-a", "add-assoc", "div-consts-add", "lt-mul-pos-cancel", "sub-to-add", "lt-swap-in", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( / v0 4 ) ( * ( min v1 10 ) 3 ) ) 2 ) ( + ( / v0 4 ) ( * ( + v1 1 ) 3 ) ) )", "end": "1"}, "rules": ["add-dist-mul", "lt-mul-div-cancel", "min-add-both", "add-denom-mul", "min-mul-in-pos", "lt-min-term+cpos", "add-comm", "add-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ) ( - v0 ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( / v5 125 ) ( / ( + 0 v5 ) 125 ) ) ) ( >= ( / ( + v5 999 ) 125 ) ( / ( + ( - ( + 1000 0 ) 1 ) v5 ) 125 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "add-const", "add-zero", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 v0 ) ( + -5 v0 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v0 ) ( + ( - ( - 6 5 ) 1 ) v0 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v1 4 ) 0 ) ( * v1 4 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( min ( * v1 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "and-min-to-lt", "min-add-both", "add-zero", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ) ) ( <= ( - ( * ( / v1 125 ) 8 ) 1 ) ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ) ) ( >= ( + ( * ( + ( / v1 125 ) v2 ) 8 ) 11 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ) ) ( <= ( * v3 16 ) ( + ( * v3 16 ) 0 ) ) ) ( >= ( + ( * v3 16 ) 15 ) ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-comm", "mul-one", "lt-swap-out", "eqlt-to-not-gt", "add-const", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 250 ) ( / ( + 0 v2 ) 250 ) ) ) ( >= ( / ( + v2 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 250 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["add-zero", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( >= ( - ( * ( min v0 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min v0 249 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "lt-x-x-sub-a", "add-comm", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) 1 ) ( - ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + v0 5 ) ( min ( - ( max ( * v1 8 ) ( + ( + v0 1 ) 10 ) ) 5 ) ( + v0 1 ) ) )", "end": "0"}, "rules": ["add-comm", "min-sub-both", "and-min-to-lt", "min-comm", "min-add-both", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( + ( + ( / ( - 0 ( max ( - ( * ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) 4 ) v1 ) ( + ( * v2 4 ) 52 ) ) ) 4 ) v2 ) 14 ) ) 1 ) )", "end": "1"}, "rules": ["div-minus-in", "lt-to-zero", "min-div-in-pos", "lt-swap-in", "div-cancel-mul", "lt-swap-out", "div-minus-down", "and-min-to-lt", "add-zero", "and-comm", "max-to-min", "div-separate", "add-comm", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( <= ( + ( max ( - ( + ( max ( + v0 4 ) v1 ) ( * ( / ( min ( - v0 v1 ) -4 ) 4 ) 4 ) ) v0 ) 0 ) 8 ) 1024 )", "end": "1"}, "rules": ["min-div-mul", "min-max-const", "add-dist-mul", "min-comm", "mul-assoc", "div-minus-in", "add-zero", "add-comm", "sub-to-add", "min-sub-both", "max-to-min"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 4 ) 9 ) ) ( - ( + 0 9 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-pos-cancel", "lt-const-mod", "eqlt-to-not-gt", "mod-minus-in", "sub-to-add", "and-min-to-lt", "add-comm", "mul-assoc", "lt-swap-out", "lt-swap", "max-consts-or"]}, {"expression": {"start": "( == ( - v0 1 ) ( - ( + ( - v0 1 ) ( - 13 ( max ( * ( - v1 v2 ) 8 ) 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-comm", "Eq-min-c-neg", "add-fact-mul", "mul-one", "max-to-min", "mul-zero", "eq-comm", "Eq-a-b", "eq-swap", "min-add-both", "add-assoc", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( > ( + ( * v0 -16 ) 62 ) ( + ( * v0 -16 ) 62 ) )", "end": "0"}, "rules": ["lt-to-zero", "gt-to-lt"]}, {"expression": {"start": "( == ( min ( - 1002 ( * v0 126 ) ) ( + ( - v1 ( + ( * v0 126 ) ( * v2 1003 ) ) ) 5 ) ) ( min ( - 1002 ( * v0 126 ) ) ( + ( - v1 ( + ( * v0 126 ) ( * v2 1003 ) ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -5 ( max v0 0 ) ) ( - ( min ( - ( / v1 8 ) v2 ) 0 ) 5 ) ) ( max ( - -5 ( max v0 0 ) ) ( - ( min ( - ( / v1 8 ) v2 ) 0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 8 ) ( * v0 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * ( + v2 v3 ) 4 ) -3 ) 4 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * ( + v2 v3 ) 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max v0 10 ) ( + ( + v1 v0 ) 18 ) ) ( + ( min ( + v1 v0 ) 1992 ) 18 ) ) ( max ( min ( max v0 10 ) ( + ( + v1 v0 ) 18 ) ) ( + ( min ( + v1 v0 ) 1992 ) 18 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 16 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 16 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 4 ) ) -1 ) ( + ( * v2 4 ) 51 ) ) ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 4 ) ) -1 ) ( + ( * v2 4 ) 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + v0 v1 ) 13 ) v2 ) ( min ( + ( + v0 v1 ) 13 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 4 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 15 ) 4 ) 4 ) ) ( + ( max ( * v0 4 ) -15 ) 12 ) ) ( min ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 15 ) 4 ) 4 ) ) ( + ( max ( * v0 4 ) -15 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 8 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 8 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * v0 2 ) 5 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ( min ( max ( * v0 2 ) 5 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 3 ) v2 ) ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 3 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min ( + v0 v1 ) 2002 ) 3 ) 3 ) v2 ) ( + ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) v3 ) 3 ) ) ( min ( max ( - ( max ( min ( + v0 v1 ) 2002 ) 3 ) 3 ) v2 ) ( + ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) v3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 136 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 136 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 129 ) 128 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 129 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 7 ) 6 ) ( * ( + ( * v1 63 ) v2 ) 4 ) ) ( + ( max ( * v0 7 ) 6 ) ( * ( + ( * v1 63 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) v1 ) ( - v2 3 ) ) ( min ( + ( * v0 8 ) v1 ) ( - v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 v1 ) ( + v0 v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 8 ) v1 ) ( + ( * v0 8 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( / v0 4 ) ( * v4 64 ) ) 63 ) ) ( * v4 -64 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( + ( / v0 4 ) ( * v4 64 ) ) 63 ) ) ( * v4 -64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - v0 11 ) v1 ) ( + ( + v2 v0 ) 7 ) ) ( min ( max ( - v0 11 ) v1 ) ( + ( + v2 v0 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 64 ) ( + v1 v2 ) ) ( + ( * v3 4 ) v4 ) ) ( + ( + ( * v0 64 ) ( + v1 v2 ) ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 22 ) v3 ) ( max ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) 16 ) 22 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 84 ) ) 1 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 84 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 8 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -16 ( max ( min ( - ( min v0 494 ) ( * v1 256 ) ) 241 ) -14 ) ) ( - ( max ( min v2 14 ) -241 ) 16 ) ) ( max ( - -16 ( max ( min ( - ( min v0 494 ) ( * v1 256 ) ) 241 ) -14 ) ) ( - ( max ( min v2 14 ) -241 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min v2 121 ) -3 ) 4 ) ) ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min v2 121 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 250 ) 1999 ) 0 )", "end": "1"}, "rules": ["min-mod-const-to-const", "eqgt-to-not-lt", "Eq-lt-min", "lt-swap-in", "not-gt-to-eqlt"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + v0 v1 ) 1000 ) -999 ) 992 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1000 ) -999 ) 992 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( / v0 4 ) 4 ) ( + ( + ( * ( + ( / v0 4 ) v1 ) 4 ) v2 ) 21 ) ) ( max ( * ( / v0 4 ) 4 ) ( + ( + ( * ( + ( / v0 4 ) v1 ) 4 ) v2 ) 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < v0 ( + v0 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) ( + ( * v3 64 ) v4 ) ) ( + ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) ( + ( * v3 64 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + 494 14 ) 128 ) 128 ) ( * v0 504 ) ) ( + ( * ( / ( + 494 14 ) 128 ) 128 ) ( * v0 504 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( + v2 15 ) ) ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( + v2 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( - ( / v1 4 ) v2 ) ) ( + ( * v0 128 ) ( - ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) 4 ) ( * v3 -2 ) ) ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) 4 ) ( * v3 -2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( - ( / ( + ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) 132 ) 8 ) ( * v3 4 ) ) 3 ) v4 ) v5 ) ( min ( + ( min ( - ( / ( + ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) 132 ) 8 ) ( * v3 4 ) ) 3 ) v4 ) v5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 64 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 64 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 2 ) v3 ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( + ( * v2 126 ) ( * ( / v1 4 ) 4 ) ) 114 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( + ( * v2 126 ) ( * ( / v1 4 ) 4 ) ) 114 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 63 ) v1 ) 55 ) v2 ) ( min ( + ( + ( * v0 63 ) v1 ) 55 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ( min ( + ( * v4 8 ) v5 ) ( + v6 7 ) ) ) ( + ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ( min ( + ( * v4 8 ) v5 ) ( + v6 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 6 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 2001 ) 2 ) ( * v1 4 ) ) ( + ( max ( min v0 2001 ) 2 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 3 ) ( * ( min ( + ( * v1 24 ) ( * v2 64 ) ) ( + ( * ( min ( / ( - ( + v3 v4 ) 1 ) 250 ) ( + v2 3 ) ) 64 ) 65 ) ) 4 ) ) ( + ( min ( * v0 4 ) 3 ) ( * ( min ( + ( * v1 24 ) ( * v2 64 ) ) ( + ( * ( min ( / ( - ( + v3 v4 ) 1 ) 250 ) ( + v2 3 ) ) 64 ) 65 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( + ( / v1 8 ) 7 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( + ( / v1 8 ) 7 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( min ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( / v1 4 ) ( * v3 12 ) ) 11 ) ) ( * v3 -12 ) ) ( / v1 4 ) ) ( - ( - ( / ( + v4 v5 ) 4 ) ( + ( * v3 12 ) v6 ) ) 1 ) ) v7 ) ( min ( min ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( / v1 4 ) ( * v3 12 ) ) 11 ) ) ( * v3 -12 ) ) ( / v1 4 ) ) ( - ( - ( / ( + v4 v5 ) 4 ) ( + ( * v3 12 ) v6 ) ) 1 ) ) v7 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 1000 ) v1 ) ( min ( + v0 1000 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 2 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 2 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 503 ) v1 ) 0 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 503 ) v1 ) 0 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 503 ) v1 ) ( - ( + 503 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 503 ) v1 ) ( - ( + 503 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - ( - ( + ( + ( * v2 503 ) v3 ) v4 ) 5 ) 3 ) ( - ( - ( + ( + ( * v2 503 ) v3 ) v4 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v2 503 ) v3 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v2 503 ) v3 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * v2 4 ) -15 ) 13 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( max ( * v2 4 ) -15 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 4 ) -127 ) 68 ) v1 ) ( min ( + ( max ( * v0 4 ) -127 ) 68 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 1000 ) 4 ) 4 ) ( * v0 1000 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-mul-x-y-0", "add-fact-mul", "eq-x-y-0", "sub-to-add", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-swap", "mul-assoc", "sub-to-add", "add-fact-mul", "mul-zero", "add-assoc", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 4 ) -127 ) 128 ) v1 ) ( min ( + ( max ( * v0 4 ) -127 ) 128 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -76 ) 4 ) 4 ) ( * v0 -76 ) )", "end": "1"}, "rules": ["add-zero", "mod-multiple", "mul-cancel-div", "eq-x-x", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( >= ( + ( max v0 500 ) 8 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "max-consts-and", "lt-swap-in", "and-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 20 ) v1 ) ( - v2 16 ) ) ( min ( + ( * v0 20 ) v1 ) ( - v2 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 0 ( - ( + 0 ( / ( + ( % v0 8 ) 263 ) 88 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-const-mod", "lt-swap-out", "sub-to-add", "and-min-to-lt", "lt-mul-div-cancel", "max-consts-or", "add-comm"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 8 ) 188 ) 16 ) ) 1 ) )", "end": "0"}, "rules": ["lt-const-mod", "lt-swap-out", "add-comm", "sub-to-add", "lt-mul-div-cancel", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( + v0 v1 ) ( + ( + v0 ( - v1 1 ) ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-to-zero", "sub-to-add", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) v0 ) ) ( >= ( + v0 3 ) ( + v0 3 ) ) ) ( <= ( / v1 8 ) ( / v1 8 ) ) ) ( >= ( / ( + v1 132 ) 8 ) ( / ( + v1 132 ) 8 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "not-gt-to-eqlt", "Eq-lt-min", "eq-x-x", "min-x-x"]}, {"expression": {"start": "( == ( / ( + v0 v1 ) 4 ) ( - ( + ( / ( + v0 v1 ) 4 ) 33 ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "add-comm", "eq-swap", "mul-comm", "mul-assoc", "sub-to-add", "add-fact-mul", "mul-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 500 ( max ( * ( min ( + ( * v0 4 ) v1 ) 250 ) 2 ) 497 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "add-comm", "eq-comm", "eq-swap", "Eq-min-c-neg", "sub-to-add", "mul-one", "mul-comm", "max-to-min", "mul-assoc", "min-add-both"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 5 ) )", "end": "0"}, "rules": ["mul-comm", "lt-swap-out", "add-assoc", "mul-zero", "mul-assoc", "sub-to-add", "lt-swap-in", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) ) 0 ) 10 ) ( - ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) 10 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) ) 3 ) 10 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 128 ) v2 ) ) 3 ) 10 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( + ( max ( * v0 16 ) 9 ) ( * v0 -16 ) ) ( - ( + ( min ( * v1 32 ) 93 ) ( + v2 ( min ( * v3 125 ) ( - v4 125 ) ) ) ) 25 ) ) 4 ) -4 ) 4 ) 4 ) ( * ( / ( + ( + ( max ( * v0 16 ) 9 ) ( * v0 -16 ) ) ( - ( + ( min ( * v1 32 ) 93 ) ( + v2 ( min ( * v3 125 ) ( - v4 125 ) ) ) ) 25 ) ) 4 ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 31 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 31 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 15 ) ( + ( * ( + 127 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 3 ) ) ) ( <= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( >= ( + ( * ( + v2 v3 ) 4 ) 3 ) ( + ( * ( + v2 v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["add-dist-mul", "add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 12 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) 2 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 12 ) 11 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( min ( * v4 69 ) 68 ) v5 ) ( + ( min ( * v4 69 ) 68 ) v5 ) ) ) ( >= ( + ( min ( * v4 69 ) 68 ) v5 ) ( + ( min ( * v4 69 ) 68 ) v5 ) ) )", "end": "1"}, "rules": ["mul-assoc", "add-zero", "lt-to-zero", "mul-comm", "eqlt-to-not-gt", "add-assoc", "add-dist-mul", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v3 ) ( + ( - ( + 125 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( + ( / ( - -40 ( % v0 4 ) ) 8 ) ( / ( + ( % v0 4 ) 63 ) 8 ) ) ( / ( - -40 ( % v0 4 ) ) 8 ) )", "end": "0"}, "rules": ["lt-swap-in", "sub-to-add", "add-const", "add-fact-mul", "lt-swap-out", "lt-const-mod", "eqlt-to-not-gt", "mul-zero", "lt-mul-div-cancel", "add-comm", "mul-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 483 ) 32 ) ( - ( + 0 ( / ( + ( % v0 8 ) 539 ) 32 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "sub-to-add", "lt-const-mod", "lt-swap-out", "max-consts-or", "add-comm", "eqlt-to-not-gt", "lt-mul-div-cancel"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 125 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 500 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 125 ) 124 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 500 ) 499 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "add-zero", "eqgt-to-not-lt", "add-dist-mul", "add-comm", "lt-to-zero", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 18 ( * ( % v0 4 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "min-sub-both", "lt-swap-out", "lt-swap", "lt-const-mod", "max-consts-or", "mul-assoc", "lt-mul-pos-cancel", "mod-minus-in", "sub-to-add", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( * ( + v0 v1 ) 4 ) 3 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 7 ) )", "end": "0"}, "rules": ["add-fact-mul", "add-dist-mul", "lt-swap-in", "mul-zero", "add-const", "sub-to-add", "mul-comm", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 68 ) v1 ) v2 ) ( + ( + ( * v0 68 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 68 ) v1 ) v2 ) ( + ( + ( * v0 68 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * 0 4 ) v3 ) 0 ) ( + ( + ( * 0 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v4 8 ) 25 ) ) 4 ) 4 ) v3 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 25 ( max ( * v4 8 ) 25 ) ) 11 ) 4 ) 0 ) 1 ) 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "div-separate", "eqgt-to-not-lt", "sub-to-add", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( / v2 4 ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 29 ) ) ( + ( / v2 4 ) 32 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-comm", "add-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 1 ) ( - ( * ( + v0 ( + v1 1 ) ) 4 ) 4 ) )", "end": "1"}, "rules": ["lt-swap-in", "lt-mul-div-cancel", "sub-to-add", "lt-mul-pos-cancel", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) v0 ) 3 ) ) ) ( <= ( / v1 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v1 ) 125 ) ) ) ( >= ( / ( + v1 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v1 ) 125 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * ( max ( * v0 12 ) 20 ) -1 ) ( - 20 ( * v1 4 ) ) ) -8 ) 4 ) 4 ) ( min ( + ( * ( max ( * v0 12 ) 20 ) -1 ) ( - 20 ( * v1 4 ) ) ) -8 ) )", "end": "1"}, "rules": ["add-dist-mul", "add-denom-div", "eq-x-x", "div-consts-add", "mul-assoc", "sub-to-add", "mod-consts", "min-div-in-pos", "min-add-both", "min-mul-in-pos", "mul-comm", "max-to-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 4 ) ( % ( + v0 v1 ) 4 ) ) ) ( >= ( % ( + v0 v1 ) 4 ) ( % ( + v0 v1 ) 4 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 7 ) ( + -2 ( - v2 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v2 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v2 1000 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["min-x-x", "not-gt-to-eqlt", "add-assoc", "lt-swap-in", "eq-x-x", "min-x-x-plus-a-neg", "add-comm", "Eq-lt-min", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == ( + ( max ( * v0 3 ) -5 ) ( * v1 21 ) ) ( + ( max ( * v0 3 ) -5 ) ( * v1 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( * v1 65 ) ) ( + ( * ( / v0 4 ) 4 ) ( * v1 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 132 ) 8 ) ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 132 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 247 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 247 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 504 ) ) ( + 494 127 ) ) ( min ( - v0 ( * v1 504 ) ) ( + 494 127 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min v0 -7 ) ( + ( / v1 4 ) ( + ( * ( / ( + ( min ( + ( * v2 -252 ) v3 ) 251 ) 10 ) 68 ) 68 ) ( * v2 252 ) ) ) ) ( + ( min v0 -7 ) ( + ( / v1 4 ) ( + ( * ( / ( + ( min ( + ( * v2 -252 ) v3 ) 251 ) 10 ) 68 ) 68 ) ( * v2 252 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( + ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( * v3 16 ) ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( + ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( * v3 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -8 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ) v3 ) ( min ( + ( / v0 8 ) ( + ( min ( + ( * v1 -8 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 8 ) 7 ) v2 ) 4 ) 4 ) ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + v0 v1 ) ( + ( * ( / v2 3 ) 125 ) v3 ) ) ( + ( - v4 ( * ( / v2 3 ) 125 ) ) 4 ) ) ( min ( - ( + v0 v1 ) ( + ( * ( / v2 3 ) 125 ) v3 ) ) ( + ( - v4 ( * ( / v2 3 ) 125 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( / v1 4 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 1008 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 1008 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 128 ) 124 ) ( / v1 4 ) ) 127 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 68 ) ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 128 ) 124 ) ( / v1 4 ) ) 127 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 68 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( - ( + v0 v1 ) ( + ( * v2 12 ) ( + ( * v3 336 ) ( + ( * v4 672 ) v1 ) ) ) ) 1 ) 4 ) ( + ( - ( / v0 4 ) ( * ( + ( * v4 56 ) ( + ( * v3 28 ) v2 ) ) 3 ) ) 1 ) ) ( max ( / ( + ( - ( + v0 v1 ) ( + ( * v2 12 ) ( + ( * v3 336 ) ( + ( * v4 672 ) v1 ) ) ) ) 1 ) 4 ) ( + ( - ( / v0 4 ) ( * ( + ( * v4 56 ) ( + ( * v3 28 ) v2 ) ) 3 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1002 ( * v0 502 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 502 ) v3 ) ) 5 ) ) ( min ( - 1002 ( * v0 502 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * v0 502 ) v3 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 126 ) ) ( + ( / v0 4 ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 126 ) ( * v3 4 ) ) ) ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 126 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( min ( + ( + ( + ( min ( + ( * v0 -336 ) ( + ( * v1 -672 ) v2 ) ) -11 ) ( * ( / ( + ( min ( + ( * ( + ( * v1 2 ) v0 ) 336 ) 331 ) v2 ) 14 ) 4 ) 4 ) ) v3 ) 4 ) v4 ) ( min ( + ( + ( + ( min ( + ( * v0 -336 ) ( + ( * v1 -672 ) v2 ) ) -11 ) ( * ( / ( + ( min ( + ( * ( + ( * v1 2 ) v0 ) 336 ) 331 ) v2 ) 14 ) 4 ) 4 ) ) v3 ) 4 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 0 ( + ( * ( + v0 v1 ) 4 ) v2 ) ) ( - ( + ( * ( + v0 v1 ) 4 ) v2 ) 1999 ) ) ( max ( - 0 ( + ( * ( + v0 v1 ) 4 ) v2 ) ) ( - ( + ( * ( + v0 v1 ) 4 ) v2 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 8 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 8 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-x-x-sub-a", "lt-swap-out"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) v2 ) ( min ( + ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( - ( / ( - v2 v1 ) 4 ) 9 ) ) ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( - ( / ( - v2 v1 ) 4 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 512 ) 504 ) ( / ( + v0 512 ) 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 8 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 8 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 124 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( / ( + ( + v3 v4 ) 47 ) 16 ) 124 ) 0 ) ( * v5 4 ) ) ( max ( min ( / v4 16 ) 126 ) 2 ) ) 1 ) v0 ) 16 ) 12 ) ) ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( / ( + ( + v3 v4 ) 47 ) 16 ) 124 ) 0 ) ( * v5 4 ) ) ( max ( min ( / v4 16 ) 126 ) 2 ) ) 1 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 27 ) 4 ) ( / v1 4 ) ) ( - ( / ( + v0 27 ) 4 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * v2 4 ) ) ) ( + ( * v0 128 ) ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 7 ) ( * ( + ( * v1 63 ) v2 ) 4 ) ) ( + ( * v0 7 ) ( * ( + ( * v1 63 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ) ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-zero", "lt-x-x-sub-a", "add-comm", "sub-to-add", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( == ( + ( * v0 504 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 504 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 999 ) 1000 ) ( / ( + v0 999 ) 1000 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + ( - ( max ( * v0 4 ) -3 ) v1 ) 3 ) 32 ) 32 ) v1 ) ( + ( max ( * v0 4 ) -3 ) 4 ) ) ( min ( + ( * ( / ( + ( - ( max ( * v0 4 ) -3 ) v1 ) 3 ) 32 ) 32 ) v1 ) ( + ( max ( * v0 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -28 ( % ( + ( min ( * v0 32 ) 93 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) ) 4 ) ( * v4 4 ) ) ( + ( / ( - -28 ( % ( + ( min ( * v0 32 ) 93 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) ) 4 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( max ( * v0 125 ) -1 ) v1 ) v2 ) ( + ( + ( max ( * v0 125 ) -1 ) v1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( * v1 63 ) ) ( + ( * v0 8 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) 22 ) v1 ) ( min ( + ( * v0 2 ) 22 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 16 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + v1 16 ) ) ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( + ( + ( * v0 33 ) v1 ) v2 ) v3 ) 5 ) ( - ( + ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) v3 ) 5 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "sub-to-add", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( == ( min ( - 1000 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 250 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) ( min ( - 1000 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 250 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( min ( * v0 12 ) 52 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 12 ) 52 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 2 ) 52 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "Eq-a-b", "eq-swap", "eq-comm", "sub-to-add"]}, {"expression": {"start": "( == ( min ( * v0 251 ) ( + v1 5 ) ) ( min ( * v0 251 ) ( + v1 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 128 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 128 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 502 ) ) ( - v0 ( * v1 502 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 128 ) 128 ) v1 ) ( min ( + ( * v0 128 ) 128 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 13 ) 8 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 13 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 20 ( * ( max ( min ( + ( * v0 5 ) v1 ) 10 ) 9 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "mul-comm", "Eq-a-b", "add-comm", "mul-assoc", "eq-comm", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 667 ) ( - v1 667 ) ) v2 ) 8 ) 650 ) 32 ) ( - ( + 0 22 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "max-consts-or", "and-min-to-lt", "lt-mul-div-cancel", "lt-const-mod"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-comm", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 1 ( - ( + 0 ( / ( + ( % v0 4 ) 1499 ) 500 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "add-comm", "lt-mul-div-cancel", "lt-swap-out", "lt-const-mod", "and-min-to-lt", "max-consts-or"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( * v1 4 ) 6 ) ) ( min ( * v0 4 ) ( + ( * v1 4 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( + ( / v1 128 ) 1 ) ) -128 ) 4 ) 4 ) ( * ( % v0 ( + ( / v1 128 ) 1 ) ) -128 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2001 ) 2 ) v3 ) 63 ) ) ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2001 ) 2 ) v3 ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 3 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-x-x-sub-a", "sub-to-add", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 8 ) 5 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 8 ) 5 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 515 ) 8 ) ) -8 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( + v0 1 ) 5 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-const", "sub-to-add", "mul-zero", "mul-comm", "add-fact-mul", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 32 ) ) 31 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 32 ) ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min v0 0 ) -1 ) 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "Eq-a-b", "eq-swap", "eq-comm", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( == ( + ( * v0 1000 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) ) ( + ( * v0 1000 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 11 ) ( - ( + ( + v0 1 ) v1 ) 14 ) )", "end": "0"}, "rules": ["add-const", "lt-swap-in", "mul-zero", "add-comm", "mul-one", "mul-comm", "add-assoc", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( < ( + ( + ( / v0 16 ) ( * v1 32 ) ) 34 ) ( - ( + ( / v0 16 ) ( * ( + v1 1 ) 32 ) ) 2 ) )", "end": "0"}, "rules": ["mul-assoc", "add-dist-mul", "sub-to-add", "mul-zero", "lt-swap-in", "add-comm", "lt-swap", "add-fact-mul", "add-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / v1 4 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ) ) ( <= ( + ( * v3 16 ) 0 ) ( + ( * v3 16 ) 0 ) ) ) ( >= ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 5 ) ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) )", "end": "0"}, "rules": ["add-const", "mul-zero", "lt-swap-in", "add-assoc", "sub-to-add", "mul-comm", "add-comm", "mul-one", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["add-comm", "add-fact-mul", "mul-comm", "sub-to-add", "add-const", "add-assoc", "eq-swap", "mul-zero"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )", "end": "0"}, "rules": ["lt-swap-out", "sub-to-add", "add-fact-mul", "add-comm", "mul-comm", "lt-swap-in", "mul-zero", "add-const", "add-assoc"]}, {"expression": {"start": "( < v0 ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 44 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["mul-one", "sub-to-add", "add-assoc", "max-to-min", "lt-swap-out", "min-comm", "add-dist-mul", "min-sub-both", "min-max-const", "min-mul-in-neg", "mul-comm", "mul-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) 3 ) v1 ) ( min ( + ( * v0 8 ) 3 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-one", "mul-zero", "lt-swap-in", "add-const", "add-assoc", "add-fact-mul", "mul-comm", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 64 ) 440 ) v1 ) 10 ) ) ( - ( + 0 ( + ( min ( * v0 64 ) 440 ) v1 ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 66 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 64 ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 0 ) ( - ( + v0 v1 ) 9 ) ) ) ( >= ( + ( + v0 v1 ) 3 ) ( + v0 v1 ) ) ) ( <= ( - ( + ( * v2 128 ) v3 ) 6 ) ( - ( + ( * v2 128 ) v3 ) 6 ) ) ) ( >= ( + ( + ( * v2 128 ) v3 ) 130 ) ( + ( + ( * v2 128 ) v3 ) 130 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( >= ( max ( / v0 251 ) 0 ) ( - ( + ( max ( / v0 251 ) 0 ) ( + ( min ( / v0 251 ) 0 ) 1 ) ) 1 ) )", "end": "1"}, "rules": ["add-comm", "min-add-both", "and-min-to-lt", "min-sub-both", "min-comm", "lt-max-mutual-term", "and-lt-to-min", "lt-min-max-cancel", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( + ( max ( * v0 8 ) -5 ) v1 ) ) 3 ) ( + ( + ( + -5 ( + ( * v0 8 ) v1 ) ) 0 ) 3 ) ) ) ( >= ( + ( + 3 ( + ( + ( max ( * v0 8 ) -5 ) v1 ) 4 ) ) 3 ) ( + ( + ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) 3 ) 3 ) ) ) ( <= ( - ( * v2 8 ) 1 ) ( + -2 ( + ( * v2 8 ) 1 ) ) ) ) ( >= ( + ( * v2 8 ) 11 ) ( + 3 ( + ( * v2 8 ) 8 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "0"}, "rules": ["max-to-min", "min-consts-div-neg", "mul-comm", "eqlt-to-not-gt", "lt-swap", "lt-min-term+cpos", "add-assoc", "min-add-both", "add-dist-mul", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 v0 ) ( + -5 v0 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v0 ) ( + ( - ( - 6 5 ) 1 ) v0 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x", "min-add-both", "and-min-to-lt", "Eq-lt-min", "add-zero", "lt-to-zero", "min-x-x", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= ( + ( * v2 104 ) 0 ) ( + ( * v2 104 ) 0 ) ) ) ( >= ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + v0 3 ) ( - ( min ( + ( max ( * v1 8 ) ( + ( + v0 1 ) 4 ) ) 1 ) ( + v0 1 ) ) 2 ) )", "end": "0"}, "rules": ["lt-swap-in", "min-sub-both", "lt-swap-out", "and-lt-to-min", "sub-to-add", "add-assoc", "and-min-to-lt", "add-comm", "min-comm", "max-to-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( + ( + ( * v0 4 ) v1 ) 6 ) ) ) ( <= ( - v2 2 ) ( - v2 2 ) ) ) ( >= ( + v2 127 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-in", "Eq-lt-min", "sub-to-add", "lt-min-term+cpos", "not-gt-to-eqlt", "eqlt-to-not-gt", "min-x-x-plus-a-pos", "lt-swap", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 8 ) v1 ) 8 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * v0 8 ) v1 ) 8 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 504 ) v1 ) -494 ) ( * v2 256 ) ) ( + ( max ( - ( * v0 504 ) v1 ) -494 ) ( * v2 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) ) 8 ) ( * v3 63 ) ) ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 8 ) ) 8 ) ( * v3 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 500 ) ( - ( + ( * v1 -4 ) v2 ) 4 ) ) ( * v1 4 ) ) ( + ( min ( * v0 500 ) ( - ( + ( * v1 -4 ) v2 ) 4 ) ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 4 ) v1 ) ( min ( / ( + ( % ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) 4 ) 1031 ) 4 ) ( + ( * v0 4 ) 1 ) ) ) ( - ( + ( * v0 4 ) v1 ) ( min ( / ( + ( % ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) 4 ) 1031 ) 4 ) ( + ( * v0 4 ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * ( / v1 4 ) 4 ) ) ( + ( / v0 8 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 3 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 2 ) 251 ) ) 26 ) ( + ( - ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 3 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 16 ) ) 2 ) 251 ) ) 26 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + v1 668 ) ) ( + ( * v3 4 ) ( + ( * v4 64 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + v1 668 ) ) ( + ( * v3 4 ) ( + ( * v4 64 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 504 ) 6 ) ( - ( * v0 504 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 33 ) ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( != ( + ( * v0 8 ) 9 ) 0 )", "end": "1"}, "rules": ["Eq-a-b", "ineq-to-eq", "mul-comm", "eq-swap"]}, {"expression": {"start": "( < ( + ( * ( min v0 1 ) 9 ) ( + ( min ( * v1 2 ) 7 ) v2 ) ) ( + ( * ( min v0 1 ) 9 ) ( + ( min ( * v1 2 ) 7 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( min ( + ( * ( / v0 3 ) 125 ) 125 ) v1 ) ( min ( + ( * ( / v0 3 ) 125 ) 125 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( min ( - 62 ( / v0 2 ) ) ( / ( + ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 1 ) 2 ) ) ( + ( / ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 2 ) 1 ) ) ( min ( min ( - 62 ( / v0 2 ) ) ( / ( + ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 1 ) 2 ) ) ( + ( / ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( max ( min v0 509 ) 10 ) 11 ) v1 ) ( max ( - ( max ( min v0 509 ) 10 ) 11 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( min ( * v2 12 ) 20 ) v3 ) 11 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( min ( * v2 12 ) 20 ) v3 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( - ( * v1 8 ) ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( - ( * v1 8 ) ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 503 ) ) ( * ( / v1 4 ) 4 ) ) ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 503 ) ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 64 ) 5 ) 0 )", "end": "1"}, "rules": ["and-comm", "lt-swap-in", "max-consts-and", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + ( * v2 2 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( max ( + ( + v0 v1 ) 3 ) v2 ) 4 ) ( + ( / v2 4 ) v3 ) ) ( min ( / ( max ( + ( + v0 v1 ) 3 ) v2 ) 4 ) ( + ( / v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 15 ) 4 ) 4 ) ) ( + ( max ( * v0 4 ) -15 ) 16 ) ) ( min ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 15 ) 4 ) 4 ) ) ( + ( max ( * v0 4 ) -15 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 32 ) ( + ( * v2 2 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 32 ) ( + ( * v2 2 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - v0 ( * v1 500 ) ) -2 ) ( + ( + ( * ( / ( + ( min ( + ( * v1 -500 ) v0 ) 500 ) 5 ) 256 ) 256 ) ( * v1 500 ) ) v2 ) ) ( + ( min ( - v0 ( * v1 500 ) ) -2 ) ( + ( + ( * ( / ( + ( min ( + ( * v1 -500 ) v0 ) 500 ) 5 ) 256 ) 256 ) ( * v1 500 ) ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 27 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 27 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * ( / v1 250 ) 2 ) v2 ) ) ( - ( * v0 2 ) ( + ( * ( / v1 250 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * v0 4 ) 12 ) v1 ) ( min ( - ( * v0 4 ) 12 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( / v1 4 ) v2 ) ) ( - v0 ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 5 ) 4 ) ( * v1 2 ) ) ( - ( / ( + v0 5 ) 4 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( / v1 4 ) ) 23 ) ( - ( - v0 ( / v1 4 ) ) 23 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "eqgt-to-not-lt", "lt-swap-out", "lt-to-zero", "sub-to-add", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( * v0 8 ) 1 ) ( - ( + ( - ( * v0 8 ) 1 ) 13 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "add-comm", "lt-swap-out", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( - ( min ( * v0 16 ) 45 ) ( * ( + ( * v0 4 ) v1 ) 4 ) ) ( - ( min ( * v0 16 ) 45 ) ( * ( + ( * v0 4 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( / ( min ( - ( min ( max ( min ( + v3 v1 ) 2000 ) 1 ) ( + v4 v0 ) ) ( max ( min v1 1999 ) 0 ) ) ( + v2 3 ) ) 4 ) ) ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( / ( min ( - ( min ( max ( min ( + v3 v1 ) 2000 ) 1 ) ( + v4 v0 ) ) ( max ( min v1 1999 ) 0 ) ) ( + v2 3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 4 ) -5 ) ( / v1 16 ) ) ( + ( max ( * v0 4 ) -5 ) ( / v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 4 ) ) ( min ( max ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( / v0 4 ) v3 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( + ( / ( + v0 v1 ) 8 ) ( / ( - -20 ( + v0 v1 ) ) 8 ) ) 0 ) ( - 60 ( min ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 8 ) ( + ( * ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 32 ) 4 ) 3 ) ) ) ) ( max ( min ( + ( / ( + v0 v1 ) 8 ) ( / ( - -20 ( + v0 v1 ) ) 8 ) ) 0 ) ( - 60 ( min ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 8 ) ( + ( * ( / ( + ( % ( + v0 v1 ) 8 ) 507 ) 32 ) 4 ) 3 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) ( + ( * v1 28 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 28 ) 115 ) ( + v2 v3 ) ) 15 ) ) ( min ( + ( * v0 16 ) ( + ( * v1 28 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 28 ) 115 ) ( + v2 v3 ) ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 3 ) v1 ) ( + ( * v0 3 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( + ( max ( * v0 12 ) 52 ) ( * v1 4 ) ) ( + ( max ( * v0 12 ) 52 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( * v0 8 ) ( + ( * v1 3 ) v2 ) ) 5 ) ( - ( + ( * v0 8 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) 5 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "sub-to-add", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( == ( + ( / ( + v0 15 ) 4 ) ( / ( + ( % ( + v0 3 ) 4 ) 3 ) 4 ) ) ( + ( / ( + v0 15 ) 4 ) ( / ( + ( % ( + v0 3 ) 4 ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min v0 2 ) 1 ) -16 ) 4 ) 4 ) ( * ( max ( min v0 2 ) 1 ) -16 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( * v0 2 ) v1 ) 32 ) 93 ) ( * ( + ( * v1 8 ) ( + ( * v0 16 ) v2 ) ) 4 ) ) ( - ( min ( * ( + ( * v0 2 ) v1 ) 32 ) 93 ) ( * ( + ( * v1 8 ) ( + ( * v0 16 ) v2 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 8 ) ) v1 ) ( + ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( * v3 8 ) v1 ) ) 8 ) 3 ) ) ( min ( - ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( * v3 8 ) ) v1 ) ( + ( min ( - ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( * v3 8 ) v1 ) ) 8 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 258 ) 256 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 258 ) 256 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 8 ) 0 ) ( + ( * v3 8 ) 0 ) ) ) ( >= ( + ( * v3 8 ) ( - ( + 8 0 ) 1 ) ) ( + ( * v3 8 ) ( - ( + 8 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 16 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 16 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 5 ) ( + ( - v0 1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out", "add-assoc", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) v1 ) ( + ( - ( + ( * v0 16 ) v1 ) 62 ) 62 ) ) ( min ( + ( * v0 16 ) v1 ) ( + ( - ( + ( * v0 16 ) v1 ) 62 ) 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 2123 ) ( * v1 4 ) ) ( + ( min ( * v0 4 ) 2123 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 1 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 4 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "mul-comm", "add-dist-mul", "add-comm", "add-zero", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) 3 ) ( - ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) 3 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) ) ( >= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + v0 v1 ) 2 ) 0 ) ( + ( * ( + v0 v1 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + 0 ( * ( + ( * v2 8 ) v3 ) 2 ) ) ( + ( * ( + ( * v2 8 ) v3 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v2 8 ) v3 ) 2 ) 13 ) ) ( + ( * ( + ( + ( * v2 8 ) v3 ) 7 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( min ( * v4 5 ) 13 ) v5 ) ( + ( min ( * v4 5 ) 13 ) v5 ) ) ) ( >= ( + ( min ( * v4 5 ) 13 ) v5 ) ( + ( min ( * v4 5 ) 13 ) v5 ) ) )", "end": "1"}, "rules": ["add-dist-mul", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "mul-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( + ( * v1 2 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 1 ) ( + ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) v2 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "lt-swap-out", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) ( - ( + ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) 9 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-fact-mul", "add-comm", "sub-to-add", "add-const", "eq-comm", "add-assoc", "mul-zero", "eq-swap"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 500 ) 0 ) v2 ) ( + ( + ( * v1 500 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 4 ) 997 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * v2 4 ) 997 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-out", "add-comm", "add-assoc", "lt-swap-in", "lt-x-x-sub-a", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 v0 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 7 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["max-consts-or", "sub-to-add", "eqlt-to-not-gt", "mod-minus-in", "and-min-to-lt", "add-comm", "mul-assoc", "lt-mul-pos-cancel", "lt-swap", "lt-const-mod", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 4 ) ( - ( + ( - ( * v0 4 ) 4 ) ( + ( * ( min ( - v1 ( * v2 33 ) ) -32 ) 4 ) 264 ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "sub-to-add", "eq-swap", "add-comm", "mul-comm", "add-assoc", "eq-comm", "add-fact-mul", "Eq-a-b"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 4 ) 18 ) ) ( - ( + 0 18 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "lt-swap", "eqlt-to-not-gt", "max-consts-or", "mod-minus-in", "mul-assoc", "lt-mul-pos-cancel", "add-comm", "and-min-to-lt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + -64 v0 ) 62 ) ( + ( + 0 v0 ) ( max -64 -2 ) ) ) ) ( >= ( + ( + 3 v0 ) 62 ) ( + ( + ( - ( + 63 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + ( + ( - ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-comm", "sub-to-add", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 8 ( * ( % v0 2 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "and-min-to-lt", "lt-swap-in", "mod-minus-in", "min-sub-both", "add-dist-mul", "lt-mul-pos-cancel", "mul-assoc", "sub-to-add", "lt-swap", "min-add-both", "max-consts-or", "lt-const-mod"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 ( - v0 3 ) ) ( + -5 ( - v0 3 ) ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) ( - ( + 26 ( - v0 3 ) ) 1 ) ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 26 ( - v0 3 ) ) 1 ) ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )", "end": "1"}, "rules": ["min-add-both", "eqgt-to-not-lt", "and-min-to-lt", "eqlt-to-not-gt", "lt-to-zero", "add-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( min ( * ( + ( / v0 4 ) v1 ) 4 ) 1999 ) ( + v2 4 ) ) 3 ) ( - v2 3 ) ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= ( + 0 ( - v3 5 ) ) ( - v3 5 ) ) ) ( >= ( + 3 ( + v3 998 ) ) ( + v3 1004 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["and-comm", "lt-swap-out", "lt-swap", "add-assoc", "add-dist-mul", "eqgt-to-not-lt", "sub-to-add", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( >= ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - ( + ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 10 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-assoc", "min-consts-or", "mul-zero", "lt-swap-in", "eqgt-to-not-lt", "lt-mul-pos-cancel", "add-fact-mul", "add-comm", "max-min-switch", "or-comm", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( >= ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - ( + ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - 8 ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-comm", "lt-min-term+cpos", "add-assoc", "min-add-both", "eqgt-to-not-lt", "lt-swap-out", "add-comm", "max-consts-or", "mul-assoc", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( - 0 ( min ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) 0 ) ) 4 ) ( - ( + 0 ( / ( + ( max v1 0 ) 7 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "min-mul-in-neg", "mul-comm", "max-to-min", "lt-swap-out", "lt-mul-div-cancel", "min-comm", "and-min-to-lt", "sub-to-add", "max-consts-or", "add-comm"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 33 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) 7 ) )", "end": "0"}, "rules": ["add-assoc", "mul-comm", "add-fact-mul", "mul-one", "add-comm", "add-const", "mul-zero", "sub-to-add", "lt-swap-in"]}, {"expression": {"start": "( >= ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - ( + ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - 9 ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "max-consts-and", "lt-swap-in", "mul-zero", "mul-comm", "or-comm", "add-fact-mul", "add-assoc", "max-to-min", "min-consts-or", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( + ( * ( % v0 3 ) 16 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 3 ) 16 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 15 ) 4 ) ) ( / ( min ( - ( min ( min ( + v3 v0 ) ( + ( max ( min v1 1988 ) -11 ) 12 ) ) ( + ( min ( + ( max ( min v1 1988 ) -11 ) 9 ) ( + v3 v0 ) ) 3 ) ) ( max ( min v1 1999 ) 0 ) ) ( + v2 15 ) ) 4 ) ) ( max ( min ( max ( / ( + ( - v0 ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) 0 ) ( / ( + v2 15 ) 4 ) ) ( / ( min ( - ( min ( min ( + v3 v0 ) ( + ( max ( min v1 1988 ) -11 ) 12 ) ) ( + ( min ( + ( max ( min v1 1988 ) -11 ) 9 ) ( + v3 v0 ) ) 3 ) ) ( max ( min v1 1999 ) 0 ) ) ( + v2 15 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 79 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 79 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 1008 ) v2 ) ) ( + ( + v2 v3 ) 14 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 1008 ) v2 ) ) ( + ( + v2 v3 ) 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 127 ) 64 ) 64 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * ( / ( + v1 127 ) 64 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * v2 4 ) 419 ) ) ( min ( * ( + ( * ( / v0 250 ) 64 ) v1 ) 4 ) ( + ( * v2 4 ) 419 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 252 ) ) ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( / v0 8 ) 2 ) ( + ( * ( + ( / v0 8 ) ( * v1 4 ) ) 2 ) 1 ) ) ( max ( * ( / v0 8 ) 2 ) ( + ( * ( + ( / v0 8 ) ( * v1 4 ) ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) 31 ) 1 ) ( + ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) 31 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 267 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 267 ) 4 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 4 ) 273 ) v1 ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( * v4 34 ) ) ( * ( / v3 250 ) 64 ) ) -55 ) v0 ) 4 ) 86 ) ) ( min ( max ( - ( * v0 4 ) 273 ) v1 ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( * v4 34 ) ) ( * ( / v3 250 ) 64 ) ) -55 ) v0 ) 4 ) 86 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) v2 ) 3 ) ( + ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) v2 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 128 ) 129 ) ( * v1 4 ) ) ( + ( max ( * v0 128 ) 129 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 8 ) 2 ) v1 ) 4 ) ( + ( * v2 8 ) 31 ) ) ( min ( * ( + ( * ( / v0 8 ) 2 ) v1 ) 4 ) ( + ( * v2 8 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 252 ) ) 248 ) ) ( min ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 252 ) ) 248 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 269 ) 252 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 269 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ( + ( * ( + ( min v3 15 ) ( + ( * v0 16 ) v1 ) ) 4 ) 4 ) ) ( min ( max ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ( + ( * ( + ( min v3 15 ) ( + ( * v0 16 ) v1 ) ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( * v1 253 ) ) ( + ( * ( / v0 4 ) 4 ) ( * v1 253 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 11 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 11 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 6 ) 1 ) v1 ) ( min ( + ( * v0 6 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 130 ) 125 ) ( / ( + ( * ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 130 ) 125 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ( - ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min v0 494 ) ( min v0 494 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 126 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 126 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 8 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) 5 ) 4 ) 11 ) ) ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 8 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) 5 ) 4 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 15 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) ( + ( * v0 15 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 32 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 32 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( + v0 v1 ) v2 ) 4 ) ( + v3 268 ) ) ( min ( * ( + ( + v0 v1 ) v2 ) 4 ) ( + v3 268 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 64 ) 93 ) ) ( min ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 64 ) 93 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 4 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 4 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 5 ) 4 ) ( * ( + ( * v1 16 ) v2 ) 2 ) ) ( - ( / ( + v0 5 ) 4 ) ( * ( + ( * v1 16 ) v2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 131 ) 126 ) ( / ( + v0 131 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 125 ) ( - v3 125 ) ) v0 ) 8 ) 132 ) 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + ( min ( * v2 125 ) ( - v3 125 ) ) v0 ) 8 ) 132 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) v1 ) ( + ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) ) ( min ( + ( * v0 64 ) v1 ) ( + ( max ( min ( * ( / ( + ( + v2 v3 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) 5 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ( - ( max ( * v0 2 ) 5 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 33 ) 23 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 33 ) 23 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) 1 ) ( + ( - ( / ( + ( + v0 v1 ) 249 ) 250 ) ( / v1 250 ) ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) 7 ) v1 ) ( min ( + ( * v0 12 ) 7 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 23 ( * ( max ( * v0 4 ) 7 ) 2 ) ) ( - 23 ( * ( max ( * v0 4 ) 7 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) ) 8 ) ( * v4 4 ) ) ( + ( / ( - -500 ( % ( + ( * v0 500 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) 8 ) ) 8 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 63 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 63 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 16 ) ( + ( + ( * v1 16 ) v2 ) 28 ) ) ( max ( * v0 16 ) ( + ( + ( * v1 16 ) v2 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 128 ) ( + ( * ( / ( min ( * v0 128 ) 129 ) 4 ) 4 ) 3 ) ) ( min ( * v0 128 ) ( + ( * ( / ( min ( * v0 128 ) 129 ) 4 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( min ( + ( * v0 6 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 2 ) ( + ( min ( * ( + ( * v0 6 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) ( - ( * ( min ( + ( * v0 6 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 2 ) ( + ( min ( * ( + ( * v0 6 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 4 ) ( + ( * v1 8 ) v2 ) ) -5 ) ( + v3 1 ) ) ( min ( max ( - ( / v0 4 ) ( + ( * v1 8 ) v2 ) ) -5 ) ( + v3 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 4 ) ( - v0 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) ( + ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( + ( / v1 4 ) ( * v3 64 ) ) ) 2 ) ) ( max ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) ( + ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( + ( / v1 4 ) ( * v3 64 ) ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 84 ) ( + ( / v1 8 ) ( * ( + ( / ( min ( + ( * v2 -12 ) ( + ( * v0 -84 ) ( - ( / ( + ( + v3 v1 ) 7 ) 8 ) ( / v1 8 ) ) ) ) 11 ) 4 ) ( * v2 3 ) ) 4 ) ) ) ( + ( * v0 84 ) ( + ( / v1 8 ) ( * ( + ( / ( min ( + ( * v2 -12 ) ( + ( * v0 -84 ) ( - ( / ( + ( + v3 v1 ) 7 ) 8 ) ( / v1 8 ) ) ) ) 11 ) 4 ) ( * v2 3 ) ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( * v1 16 ) v2 ) ) ( - ( * v0 16 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 2 ) ( + ( / ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 2 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 1007 ) 8 ) ( + ( + ( min ( * v2 36 ) 32 ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 63 ) ) ) 30 ) ) ( min ( / ( + ( + v0 v1 ) 1007 ) 8 ) ( + ( + ( min ( * v2 36 ) 32 ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 63 ) ) ) 30 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 9 ) ( + ( * v1 3 ) v2 ) ) ( + ( * v0 9 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / v0 4 ) ( + ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 999 ) 4 ) ) v1 ) 2 ) ) 3 ) ( - ( max ( / v0 4 ) ( + ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 999 ) 4 ) ) v1 ) 2 ) ) 3 ) ) ) ( >= ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 995 ) 4 ) ) v1 ) ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 995 ) 4 ) ) v1 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( + 0 ( / v2 4 ) ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 32 ) ) ( + 3 ( + ( / v2 4 ) 32 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + ( - v0 v1 ) 15 ) 4 ) 4 ) v1 ) ( + v0 12 ) ) ( min ( + ( * ( / ( + ( - v0 v1 ) 15 ) 4 ) 4 ) v1 ) ( + v0 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( max ( * v0 2 ) 5 ) 8 ) ( + ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 16 ) 4 ) ) ( min ( * ( max ( * v0 2 ) 5 ) 8 ) ( + ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 16 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 4 ) ( * ( * v1 16 ) 4 ) ) 122 ) 2 ) 2 ) ( min ( + ( * v0 4 ) ( * ( * v1 16 ) 4 ) ) 122 ) )", "end": "1"}, "rules": ["div-consts-mul", "min-mul-in-pos", "min-div-in-pos", "mul-comm", "eq-x-x", "add-fact-mul", "mul-assoc"]}, {"expression": {"start": "( == ( * ( / ( * v0 -6 ) 3 ) 3 ) ( * v0 -6 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-y-0", "eq-mul-x-y-0", "div-consts-mul", "sub-to-add", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 31 4 ) v2 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( * ( + v0 v1 ) 4 ) ( - ( + ( * ( + v0 v1 ) 4 ) 4 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-fact-mul", "mul-zero", "add-assoc", "eq-x-y-0", "mul-comm", "add-const"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - v0 ( min ( * v1 4 ) 1903 ) ) ( - v0 ( min ( * v1 4 ) 1903 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= v0 ( - ( + v0 ( + ( min ( - v1 ( * ( max ( + ( - ( * v2 16 ) ( / ( - ( + v3 v4 ) 1 ) 4 ) ) v5 ) -15 ) 4 ) ) 0 ) 1 ) ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "and-min-to-lt", "sub-to-add", "min-comm", "lt-to-zero", "eqgt-to-not-lt", "min-add-both", "add-comm"]}, {"expression": {"start": "( == ( min ( - 125 ( * v0 32 ) ) ( - v1 ( + ( * v0 32 ) ( * v2 125 ) ) ) ) ( min ( - 125 ( * v0 32 ) ) ( - v1 ( + ( * v0 32 ) ( * v2 125 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 44 ( max ( * v0 15 ) 29 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-mul-in-pos", "Eq-a-b", "max-to-min", "eq-comm", "min-add-both", "Eq-min-c-neg", "mul-comm", "add-comm", "sub-to-add", "mul-assoc", "eq-swap"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( >= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 2 ) v1 ) 4 ) 3 ) -8 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 2 ) v1 ) 4 ) 3 ) -8 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "mul-assoc", "div-consts-mul"]}, {"expression": {"start": "( == ( - ( * ( max v0 165 ) 4 ) 677 ) ( - ( + ( - ( * ( max v0 165 ) 4 ) 677 ) ( - 679 ( * ( max v0 165 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "sub-to-add", "add-const", "Eq-a-b", "add-fact-mul", "mul-comm", "mul-zero", "eq-swap"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 24 ) 18 ) ) 18 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 24 ) 18 ) ) 18 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( < ( + ( * v0 8 ) 7 ) ( * ( + v0 1 ) 8 ) )", "end": "1"}, "rules": ["lt-swap", "mul-comm", "add-dist-mul", "lt-swap-out", "add-assoc", "sub-to-add", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( * ( / ( * v0 -6 ) 2 ) 2 ) ( * v0 -6 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ) ) ( >= ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 6 ) ( - ( + v0 v1 ) 6 ) ) ) ( >= ( - ( + v0 v1 ) 6 ) ( - ( + v0 v1 ) 6 ) ) ) ( <= ( + ( + ( + ( * 0 4 ) ( + ( max ( * v2 8 ) -5 ) v3 ) ) 0 ) 3 ) ( + ( + 0 ( + ( max ( * v2 8 ) -5 ) v3 ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( + ( max ( * v2 8 ) -5 ) v3 ) 4 ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( + ( max ( * v2 8 ) -5 ) v3 ) 4 ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "add-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero"]}, {"expression": {"start": "( <= ( + ( * ( / v0 4 ) 4 ) 128 ) ( * ( / v0 4 ) 4 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "Eq-lt-min", "min-x-x-plus-a-pos", "lt-min-term+cpos"]}, {"expression": {"start": "( < ( + v0 3 ) ( - ( + v0 1 ) 2 ) )", "end": "0"}, "rules": ["mul-assoc", "lt-swap-in", "add-fact-mul", "add-assoc", "sub-to-add", "lt-swap-out", "mul-zero", "mul-comm", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 7 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( * v0 4 ) v1 ) 8 ) 53 ) ( * ( + ( * v1 2 ) ( + ( * v0 8 ) v2 ) ) 4 ) ) ( - ( min ( * ( + ( * v0 4 ) v1 ) 8 ) 53 ) ( * ( + ( * v1 2 ) ( + ( * v0 8 ) v2 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 32 ) ( + ( / v3 4 ) 32 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "add-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) 28 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * v2 32 ) 31 ) ) v3 ) ) ) ( <= ( + 0 v4 ) ( + 0 v4 ) ) ) ( >= ( + ( - ( + 32 0 ) 1 ) v4 ) ( + ( - ( + 32 0 ) 1 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( < ( + v0 8 ) ( - ( min ( max ( / v1 4 ) ( + ( + v0 1 ) 10 ) ) ( + v0 1 ) ) 2 ) )", "end": "0"}, "rules": ["add-assoc", "add-comm", "min-comm", "min-add-both", "and-min-to-lt", "min-sub-both", "lt-swap-in", "sub-to-add", "Eq-lt-min"]}, {"expression": {"start": "( == ( min ( + v0 9 ) ( + ( * ( / ( + ( min ( + ( * v1 -126 ) v2 ) 120 ) 8 ) 33 ) 33 ) ( * v1 126 ) ) ) ( min ( + v0 9 ) ( + ( * ( / ( + ( min ( + ( * v1 -126 ) v2 ) 120 ) 8 ) 33 ) 33 ) ( * v1 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 6 ) 5 ) ( / ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 6 ) 5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( max ( + v0 10 ) v1 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 11 ) ) ( min ( / ( max ( + v0 10 ) v1 ) 4 ) ( + ( + ( / v1 4 ) v2 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( + ( * ( / ( + ( min ( + ( * v0 -500 ) v1 ) 500 ) 5 ) 256 ) 256 ) ( * v0 500 ) ) v2 ) ( + ( min v3 -2 ) ( * ( min ( / ( + ( min v3 500 ) 5 ) 4 ) 63 ) 4 ) ) ) ( + ( + ( + ( * ( / ( + ( min ( + ( * v0 -500 ) v1 ) 500 ) 5 ) 256 ) 256 ) ( * v0 500 ) ) v2 ) ( + ( min v3 -2 ) ( * ( min ( / ( + ( min v3 500 ) 5 ) 4 ) 63 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 130 ) 128 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 130 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 250 ) ( * v2 4 ) ) ( + ( / ( + v0 v1 ) 250 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) ( + ( * v1 8 ) ( + ( * v2 16 ) ( + ( * v3 32 ) ( + ( min ( + ( min ( + ( * v2 -16 ) ( + ( * v3 -32 ) ( - ( / ( + ( + v4 v0 ) 3 ) 4 ) ( / v0 4 ) ) ) ) 15 ) ( * v1 -8 ) ) 3 ) ( * ( min ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v3 -32 ) v5 ) ) 15 ) 4 ) ( * v1 -2 ) ) 1 ) 4 ) ) ) ) ) ) v6 ) ( min ( + ( / v0 4 ) ( + ( * v1 8 ) ( + ( * v2 16 ) ( + ( * v3 32 ) ( + ( min ( + ( min ( + ( * v2 -16 ) ( + ( * v3 -32 ) ( - ( / ( + ( + v4 v0 ) 3 ) 4 ) ( / v0 4 ) ) ) ) 15 ) ( * v1 -8 ) ) 3 ) ( * ( min ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v3 -32 ) v5 ) ) 15 ) 4 ) ( * v1 -2 ) ) 1 ) 4 ) ) ) ) ) ) v6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 128 ) 872 ) ( + ( * v1 1000 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 128 ) 872 ) ( + ( * v1 1000 ) v2 ) ) 128 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( - ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( max ( min ( * ( / ( + ( + v2 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) ) ( + ( * v0 16 ) ( - ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( max ( min ( * ( / ( + ( + v2 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 4 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) 1 ) v0 ) 16 ) 12 ) ) ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 4 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) 1 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 7 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 7 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) 507 ) 8 ) ( * v3 4 ) ) ( - ( / ( + ( % ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) 507 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * ( - ( / ( + v0 v1 ) 250 ) v2 ) 8 ) 5 ) ( * v3 4 ) ) ( + ( max ( * ( - ( / ( + v0 v1 ) 250 ) v2 ) 8 ) 5 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 507 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 507 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 8 ) 5 ) v1 ) ( + ( * ( + ( min v2 15 ) v0 ) 8 ) 6 ) ) ( min ( max ( - ( * v0 8 ) 5 ) v1 ) ( + ( * ( + ( min v2 15 ) v0 ) 8 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 5 ) 4 ) ) ( / ( + ( min ( min ( min ( min ( min ( - ( / ( + v3 v0 ) 4 ) ( / v1 4 ) ) v2 ) ( + ( - ( / ( - ( + v3 v0 ) 17 ) 4 ) ( / v1 4 ) ) 4 ) ) ( + ( - ( / ( + v3 v0 ) 4 ) ( / v1 4 ) ) 3 ) ) ( + ( - ( / ( - ( + v3 v0 ) 5 ) 4 ) ( / v1 4 ) ) 4 ) ) ( + v2 3 ) ) 2 ) 4 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 5 ) 4 ) ) ( / ( + ( min ( min ( min ( min ( min ( - ( / ( + v3 v0 ) 4 ) ( / v1 4 ) ) v2 ) ( + ( - ( / ( - ( + v3 v0 ) 17 ) 4 ) ( / v1 4 ) ) 4 ) ) ( + ( - ( / ( + v3 v0 ) 4 ) ( / v1 4 ) ) 3 ) ) ( + ( - ( / ( - ( + v3 v0 ) 5 ) 4 ) ( / v1 4 ) ) 4 ) ) ( + v2 3 ) ) 2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 64 ) 936 ) ( * v1 36 ) ) ( + ( min ( * v0 64 ) 936 ) ( * v1 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min v0 125 ) 1 ) ( * v1 63 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) ( - ( - ( max ( min v0 125 ) 1 ) ( * v1 63 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( max ( / ( + ( - ( max v0 0 ) ( + ( * v1 504 ) v2 ) ) 13 ) 4 ) ( + ( / ( - 13 v2 ) 4 ) ( * v1 -126 ) ) ) 0 ) ( / ( + 241 21 ) 4 ) ) ( + ( min ( min ( / ( + ( - ( min ( min ( + v3 v0 ) ( + ( min ( + v2 v4 ) 1992 ) 8 ) ) ( + ( min ( + v3 v0 ) ( + ( min ( + v2 v4 ) 1995 ) 5 ) ) 3 ) ) ( + ( * v1 504 ) v2 ) ) 6 ) 4 ) ( - ( / ( + v4 14 ) 4 ) ( * v1 126 ) ) ) ( + ( / ( - 2006 v2 ) 4 ) ( * v1 -126 ) ) ) 1 ) ) ( max ( min ( max ( max ( / ( + ( - ( max v0 0 ) ( + ( * v1 504 ) v2 ) ) 13 ) 4 ) ( + ( / ( - 13 v2 ) 4 ) ( * v1 -126 ) ) ) 0 ) ( / ( + 241 21 ) 4 ) ) ( + ( min ( min ( / ( + ( - ( min ( min ( + v3 v0 ) ( + ( min ( + v2 v4 ) 1992 ) 8 ) ) ( + ( min ( + v3 v0 ) ( + ( min ( + v2 v4 ) 1995 ) 5 ) ) 3 ) ) ( + ( * v1 504 ) v2 ) ) 6 ) 4 ) ( - ( / ( + v4 14 ) 4 ) ( * v1 126 ) ) ) ( + ( / ( - 2006 v2 ) 4 ) ( * v1 -126 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( * v1 63 ) ) ( + ( * v0 125 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + ( + ( min ( + ( * v0 126 ) 111 ) v1 ) v2 ) v3 ) 16 ) ( + ( * v0 126 ) v2 ) ) ( max ( + ( + ( + ( min ( + ( * v0 126 ) 111 ) v1 ) v2 ) v3 ) 16 ) ( + ( * v0 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 500 ) v2 ) ) ( + ( * v0 32 ) ( + ( * v1 500 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 16 ) v3 ) 4 ) ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 16 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / v0 8 ) ( + v1 6 ) ) ( min ( / v0 8 ) ( + v1 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + v0 v1 ) ( + ( * v2 125 ) v3 ) ) ( + ( min v4 125 ) 73 ) ) ( min ( - ( + v0 v1 ) ( + ( * v2 125 ) v3 ) ) ( + ( min v4 125 ) 73 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 252 ) ( - v1 252 ) ) ( min ( * v0 252 ) ( - v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( + ( * v5 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) 31 ) ) ( * v5 -32 ) ) ) ) ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( + ( * v5 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) 31 ) ) ( * v5 -32 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) 16 ) 23 ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-comm", "lt-const-mod", "eqgt-to-not-lt", "mul-one", "mul-assoc", "add-comm", "lt-mul-pos-cancel", "lt-mul-div-cancel", "sub-to-add", "lt-swap"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 165 ) ( * v1 64 ) ) ( + ( min ( * v0 4 ) 165 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v2 32 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( / ( + v0 v1 ) 4 ) ) v4 ) ( min ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v2 32 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( / ( + v0 v1 ) 4 ) ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) 2 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) 2 ) 251 ) ) ( * v3 4 ) ) -8 ) 2 ) 24 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-comm", "Eq-a-b", "eq-swap", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( + ( * v0 -32 ) ( * ( max ( min ( + ( * v0 -2 ) ( max ( / ( - ( - ( / ( + ( + v1 v2 ) 7 ) 4 ) ( / v2 4 ) ) 1 ) 16 ) ( / ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( / v2 4 ) ) 16 ) ) ) 1 ) -1 ) -16 ) ) 8 ) 8 ) ( + ( * v0 -32 ) ( * ( max ( min ( + ( * v0 -2 ) ( max ( / ( - ( - ( / ( + ( + v1 v2 ) 7 ) 4 ) ( / v2 4 ) ) 1 ) 16 ) ( / ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( / v2 4 ) ) 16 ) ) ) 1 ) -1 ) -16 ) ) )", "end": "1"}, "rules": ["div-consts-add", "mul-assoc", "add-dist-mul", "div-consts-mul", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == ( + ( + ( * v0 32 ) v1 ) ( + ( * v2 8 ) v3 ) ) ( + ( + ( * v0 32 ) v1 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= v0 ( + ( + ( - v0 1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( == ( min ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 1 ) v2 ) ( min ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 16 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 16 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 126 ) ) ( - v0 ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 510 ( max ( * ( min v0 255 ) 2 ) 507 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "mul-comm", "Eq-a-b", "min-consts-div-neg", "sub-to-add", "min-add-both", "Eq-min-c-neg", "add-comm", "mul-assoc", "eq-comm", "max-to-min"]}, {"expression": {"start": "( >= ( + v0 v1 ) ( + ( + v0 v1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( == ( + ( + ( * v0 672 ) v1 ) ( + ( * v2 336 ) v3 ) ) ( + ( + ( * v0 672 ) v1 ) ( + ( * v2 336 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( min v0 128 ) 14 ) 4 ) ( - 2 ( / ( max ( - ( * v1 128 ) v2 ) -128 ) 4 ) ) ) ( min ( / ( + ( min v0 128 ) 14 ) 4 ) ( - 2 ( / ( max ( - ( * v1 128 ) v2 ) -128 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( * v3 8 ) ) ( * v4 4 ) ) ( / v1 4 ) ) ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( * v3 8 ) ) ( * v4 4 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) v0 ) 3 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 8 ) ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 8 ) ) ) ( >= ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 70 ) 8 ) ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 70 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 137 ) 125 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 137 ) 125 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 4 ) ( + ( * v3 64 ) ( + ( / v1 4 ) ( * v4 128 ) ) ) ) 3 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 4 ) ( + ( * v3 64 ) ( + ( / v1 4 ) ( * v4 128 ) ) ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 23 ) ( - ( + ( + v0 1 ) v1 ) 26 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-comm", "add-fact-mul", "add-assoc", "add-const", "mul-comm", "mul-zero", "mul-one", "sub-to-add"]}, {"expression": {"start": "( == ( - ( / ( + v0 5 ) 4 ) ( * ( + ( * v1 2 ) v2 ) 63 ) ) ( - ( / ( + v0 5 ) 4 ) ( * ( + ( * v1 2 ) v2 ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 111 ) 32 ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-const-mod", "lt-mul-div-cancel", "lt-swap-out", "max-consts-or", "and-min-to-lt"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 243 ) 4 ) ( + ( * v2 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 8 ) ) ) ) ( - ( / ( + ( + v0 v1 ) 243 ) 4 ) ( + ( * v2 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) 0 ) v1 ) ( + ( * v0 125 ) v1 ) ) ) ( >= ( + ( + ( * v0 125 ) ( - ( + 125 0 ) 1 ) ) v1 ) ( + ( + ( * v0 125 ) v1 ) 124 ) ) ) ( <= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 4 ) ( + ( * v4 16 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + v1 242 ) ) ( + ( * v3 4 ) ( + ( * v4 16 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-comm", "lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt", "lt-swap-in", "add-assoc"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 17 ) 1 ) )", "end": "0"}, "rules": ["add-dist-mul", "sub-to-add", "add-fact-mul", "mul-comm", "eq-x-y-0", "mul-assoc", "add-assoc", "mul-zero", "eq-comm"]}, {"expression": {"start": "( >= v0 ( - ( + v0 68 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "sub-to-add", "add-assoc", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) v3 ) ) 503 ) ( - ( + ( + 0 ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) ) v3 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) v3 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) ) v3 ) 503 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 129 ) 128 ) 0 ) ( / ( + v2 138 ) 128 ) ) ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 129 ) 128 ) 0 ) ( / ( + v2 138 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( >= ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * -11 4 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "eqgt-to-not-lt", "lt-x-x-sub-a", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( >= ( - v0 258 ) ( - ( + ( - v0 258 ) 265 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-out", "add-assoc", "lt-x-x-sub-a", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( - v0 20 ) ( - ( + ( - v0 20 ) ( - 24 ( * ( max ( - ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 2 ) v2 ) 2 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "mul-zero", "eq-comm", "add-fact-mul", "mul-comm", "Eq-a-b", "eq-swap", "sub-to-add", "add-assoc", "mul-assoc"]}, {"expression": {"start": "( == ( - -16 ( max ( min v0 116 ) -14 ) ) ( - ( + ( - -16 ( max ( min v0 116 ) -14 ) ) ( + ( max ( min v0 116 ) -14 ) 18 ) ) 1 ) )", "end": "0"}, "rules": ["mul-one", "Eq-min-c-pos", "add-fact-mul", "mul-assoc", "add-assoc", "sub-to-add", "max-to-min", "eq-x-y-0", "min-add-both", "mul-comm", "mul-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 2 ) ) ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ) ) ( >= ( + 3 ( + v0 5 ) ) ( - ( + ( + ( * 2 4 ) v0 ) 3 ) 2 ) ) ) ( <= ( + ( + ( max ( * v1 126 ) -3 ) v2 ) 1 ) ( - ( + ( * v1 126 ) v2 ) 2 ) ) ) ( >= ( + ( + ( * v1 126 ) v2 ) 126 ) ( + ( + ( * v1 126 ) v2 ) 126 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out", "add-assoc", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * ( + ( + ( * v0 8 ) v1 ) v2 ) 2 ) 2 ) ( * ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 2 ) )", "end": "1"}, "rules": ["mul-comm", "add-dist-mul", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 8 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 7 ) )", "end": "0"}, "rules": ["mul-zero", "mul-assoc", "lt-swap-out", "lt-swap-in", "add-assoc", "mul-comm", "sub-to-add", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 3 ) ( + ( + 0 v1 ) v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v1 ) v0 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["add-assoc", "add-comm", "lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( >= ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eqgt-to-not-lt", "min-max-switch", "sub-to-add", "or-comm", "lt-swap-in", "mul-assoc", "min-mul-in-neg", "max-to-min", "min-consts-or", "add-assoc", "mul-zero", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( <= ( + ( - 1999 ( max ( + ( * v0 8 ) v1 ) 1999 ) ) ( - ( max ( + ( * v0 8 ) v1 ) 1999 ) 1991 ) ) ( - 1999 ( max ( + ( * v0 8 ) v1 ) 1999 ) ) )", "end": "0"}, "rules": ["add-comm", "max-consts-or", "lt-swap-out", "lt-swap-in", "or-comm", "lt-x-x-sub-a", "eqlt-to-not-gt", "sub-to-add", "or-to-and"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( + ( / v1 4 ) v2 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )", "end": "0"}, "rules": ["lt-swap-in", "min-add-both", "min-sub-both", "add-assoc", "and-lt-to-min", "add-comm", "min-comm", "sub-to-add", "and-min-to-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "0"}, "rules": ["mul-comm", "min-x-x-plus-a-pos", "and-min-to-lt", "add-comm", "Eq-lt-min", "add-dist-mul", "eqlt-to-not-gt", "add-assoc", "not-gt-to-eqlt", "sub-to-add", "lt-to-zero", "eqgt-to-not-lt", "min-comm"]}, {"expression": {"start": "( <= ( + ( * ( max ( max ( + ( min ( * v0 -4 ) -165 ) 165 ) ( + ( * v1 8 ) ( + ( min ( * v0 4 ) 165 ) ( * ( + ( * v1 2 ) v0 ) -4 ) ) ) ) 0 ) 4 ) 22 ) 1024 )", "end": "1"}, "rules": ["min-max-max-x", "min-max-const", "add-const", "min-comm", "min-add-both", "max-to-min", "add-fact-mul", "mul-comm", "add-comm", "mul-zero", "min-mul-in-neg", "min-consts-div-neg", "add-assoc"]}, {"expression": {"start": "( < ( + ( * v0 8 ) 11 ) ( - ( min ( max ( * ( / v1 125 ) 8 ) ( + ( * ( + v0 1 ) 8 ) 5 ) ) ( * ( + v0 1 ) 8 ) ) 1 ) )", "end": "1"}, "rules": ["max-to-min", "add-fact-mul", "min-add-both", "mul-comm", "min-max-const", "min-consts-div-neg", "min-sub-both", "mul-assoc", "sub-to-add", "add-assoc", "mul-one", "lt-swap-in", "mul-zero", "add-comm"]}, {"expression": {"start": "( == ( min ( - ( * v0 504 ) 6 ) v1 ) ( min ( - ( * v0 504 ) 6 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 500 ) v1 ) -500 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 500 ) v1 ) -500 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 156 ) 68 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 156 ) 68 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 5 ) 4 ) ) ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 5 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) v2 ) ( min ( + v0 v1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 84 ) ( + ( * v3 3 ) v4 ) ) ) 4 ) ) ( - v0 ( * ( + ( * v1 168 ) ( + ( * v2 84 ) ( + ( * v3 3 ) v4 ) ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max v0 v1 ) ( max v0 v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) ( * v3 16 ) ) ( - ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) ( * v3 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 241 ) ( + v1 v2 ) ) ( min ( + v0 241 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - 112 ( max ( * v0 44 ) 84 ) ) ( * v1 16 ) ) ( - ( - 112 ( max ( * v0 44 ) 84 ) ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( + ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( * v3 16 ) ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ( + ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( * v3 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 126 ) 2 ) ( * v1 2 ) ) ( + ( max ( min v0 126 ) 2 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 30 ( max ( - ( * v0 125 ) v1 ) -125 ) ) ( - 30 ( max ( - ( * v0 125 ) v1 ) -125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( min ( + ( * v0 128 ) 128 ) v1 ) v2 ) 1997 ) -2 ) ( + ( max ( min ( + ( * v0 128 ) v2 ) 2001 ) 2 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( min ( + ( * v0 128 ) 128 ) v1 ) v2 ) 1997 ) -2 ) ( + ( max ( min ( + ( * v0 128 ) v2 ) 2001 ) 2 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 125 ) ) -124 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2124 ) 125 ) ) 0 ) ( * v3 3 ) ) ) ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 125 ) ) -124 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2124 ) 125 ) ) 0 ) ( * v3 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v0 ) ( + ( - ( + 16 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 8 ) v2 ) v3 ) ( + ( + ( * v1 8 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 8 ) v2 ) v3 ) ( + ( + ( * v1 8 ) v2 ) v3 ) ) ) ( <= ( + ( min ( * v4 4 ) 133 ) 0 ) ( + ( min ( * v4 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v4 4 ) 133 ) 3 ) ( + ( min ( * v4 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( * ( / ( * v0 0 ) 4 ) 4 ) ( * v0 0 ) )", "end": "1"}, "rules": ["mul-zero"]}, {"expression": {"start": "( == ( - ( max ( * v0 4 ) -3 ) ( + ( * v1 4 ) v2 ) ) ( - ( max ( * v0 4 ) -3 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) v2 ) ( min ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 33 ) ) ( - v0 ( * v1 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 32 ) 28 ) ( / v1 4 ) ) 223 ) ) ( * v3 32 ) ) ( / v1 4 ) ) ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 32 ) 28 ) ( / v1 4 ) ) 223 ) ) ( * v3 32 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 0 ) 128 ) 128 ) ( * v0 0 ) )", "end": "1"}, "rules": ["mul-zero"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 14 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( * ( + v0 v1 ) 16 ) v2 ) ) ( - ( * v0 16 ) ( + ( * ( + v0 v1 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 500 ) ( + v1 15 ) ) ( min ( * v0 500 ) ( + v1 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + v1 14 ) ) ( min ( * v0 4 ) ( + v1 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 16 ) ( + ( * ( / v1 3 ) 125 ) v2 ) ) 11 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 16 ) ( + ( * ( / v1 3 ) 125 ) v2 ) ) 11 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) -1 ) ( + ( * v3 2 ) 3 ) ) ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) -1 ) ( + ( * v3 2 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 10 ( + ( * v0 16 ) v1 ) ) ( - 2009 ( + ( * v0 16 ) v1 ) ) )", "end": "0"}, "rules": ["mul-comm", "add-fact-mul", "gt-to-lt", "add-comm", "mul-zero", "add-const", "lt-swap-out", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( min ( min ( + v0 8 ) v1 ) ( + ( + ( * v2 4 ) v3 ) 4 ) ) ( min ( min ( + v0 8 ) v1 ) ( + ( + ( * v2 4 ) v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -280 ) 4 ) 4 ) ( * v0 -280 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 124 ) 125 ) ( / v1 125 ) ) ( - ( / ( + ( + v0 v1 ) 124 ) 125 ) ( / v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( - ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) v3 ) 113 ) 2 ) -23 ) ) ) ( + ( * v0 16 ) ( - ( min ( * ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) v3 ) 113 ) 2 ) -23 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 2 ) ) ( min ( + v0 v1 ) ( + v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 1 ) v1 ) ( min ( - v0 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 44 ) 32 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 44 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / v1 4 ) 4 ) ) ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 32 ) ) ( / ( + v0 v1 ) 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 32 ) ) ( / ( + v0 v1 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 32 ) v1 ) 29 ) v2 ) ( min ( + ( + ( * v0 32 ) v1 ) 29 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 14 ) 4 ) ) ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 14 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 48 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 48 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 137 ( * ( + ( * v0 7 ) ( + ( * v1 4 ) v2 ) ) 4 ) ) ( - 27 ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) ( min ( - 137 ( * ( + ( * v0 7 ) ( + ( * v1 4 ) v2 ) ) 4 ) ) ( - 27 ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 125 ) ) ( - v0 ( * v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 26 ( * ( max ( min v0 13 ) 11 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-swap", "sub-to-add", "eq-comm", "Eq-a-b", "mul-assoc", "add-comm"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 8 ) ( + ( * v1 20 ) ( + ( * v2 32 ) ( * v3 3 ) ) ) ) 17 ) ( + ( min ( min ( / ( + v0 507 ) 8 ) ( + v4 31 ) ) ( + ( + ( / v0 8 ) ( * ( + ( / ( min ( + ( / ( + ( % ( + ( * v5 500 ) ( + ( min ( * v6 1000 ) ( - v7 1000 ) ) v8 ) ) 8 ) 507 ) 8 ) ( * v2 -32 ) ) 31 ) 4 ) ( * v2 8 ) ) 4 ) ) 3 ) ) ( * v3 3 ) ) ) ( min ( + ( + ( / v0 8 ) ( + ( * v1 20 ) ( + ( * v2 32 ) ( * v3 3 ) ) ) ) 17 ) ( + ( min ( min ( / ( + v0 507 ) 8 ) ( + v4 31 ) ) ( + ( + ( / v0 8 ) ( * ( + ( / ( min ( + ( / ( + ( % ( + ( * v5 500 ) ( + ( min ( * v6 1000 ) ( - v7 1000 ) ) v8 ) ) 8 ) 507 ) 8 ) ( * v2 -32 ) ) 31 ) 4 ) ( * v2 8 ) ) 4 ) ) 3 ) ) ( * v3 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 32 ( * ( max ( min ( + ( * v0 2 ) v1 ) 4 ) 3 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "mul-comm", "add-comm", "eq-comm", "Eq-a-b", "sub-to-add", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( min ( + v0 20 ) v1 ) ( min ( + v0 20 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) 112 ) ( - ( + ( + ( + v0 v1 ) 112 ) 20 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqgt-to-not-lt", "sub-to-add", "add-assoc", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 9 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 0 ( - ( + 0 ( / ( + ( % v0 4 ) 203 ) 68 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "lt-mul-div-cancel", "add-comm", "and-min-to-lt", "max-consts-or", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 8 ) 25 ) ( / ( + v1 v2 ) 4 ) ) 4 ) v3 ) ( min ( + ( + ( min ( * v0 8 ) 25 ) ( / ( + v1 v2 ) 4 ) ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - v0 10 ) ( - ( + ( - v0 10 ) 8 ) 1 ) )", "end": "0"}, "rules": ["add-dist-mul", "mul-assoc", "add-fact-mul", "mul-comm", "eq-comm", "eq-x-y-0", "add-assoc", "sub-to-add", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) 0 ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) ) ) ( >= ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) 3 ) ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) 3 ) v5 ) ) ) ( <= ( + ( min ( * v6 5 ) 13 ) v7 ) ( + ( min ( * v6 5 ) 13 ) v7 ) ) ) ( >= ( + ( min ( * v6 5 ) 13 ) v7 ) ( + ( min ( * v6 5 ) 13 ) v7 ) ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "add-zero", "add-assoc", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( - ( + ( * v0 8 ) ( + ( * v1 2 ) v2 ) ) 4 ) ( - ( + ( * v0 8 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) 4 ) )", "end": "1"}, "rules": ["add-assoc", "lt-x-x-sub-a", "sub-to-add", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 250 ) 249 ) 1000 ) ( - ( + 0 ( / ( + ( % v0 250 ) 1999 ) 1000 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "and-min-to-lt", "add-comm", "max-consts-or", "lt-mul-div-cancel", "sub-to-add", "lt-const-mod", "lt-swap-out"]}, {"expression": {"start": "( == ( * ( / ( * v0 -1008 ) 48 ) 48 ) ( * v0 -1008 ) )", "end": "1"}, "rules": ["sub-to-add", "eq-comm", "div-consts-mul", "eq-swap", "add-const", "mul-assoc", "eq-x-y-0", "eq-x-x", "eq-mul-x-y-0"]}, {"expression": {"start": "( == ( + ( max v0 0 ) ( * v1 4 ) ) ( + ( max v0 0 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 2 ) ( - ( + v0 1 ) 10 ) )", "end": "0"}, "rules": ["mul-assoc", "lt-swap-in", "mul-zero", "lt-swap-out", "add-fact-mul", "sub-to-add", "add-comm", "add-assoc", "mul-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * ( / ( + v3 11 ) 4 ) 4 ) ) ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1992 ) -7 ) 8 ) ) ( min ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * ( / ( + v3 11 ) 4 ) 4 ) ) ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1992 ) -7 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 27 ) ) 1 ) )", "end": "0"}, "rules": ["lt-const-mod", "mul-assoc", "add-comm", "mul-one", "lt-mul-pos-cancel", "mul-comm", "sub-to-add", "lt-swap-out", "lt-swap", "lt-mul-div-cancel", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( - ( + ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( + ( * ( max ( min v0 12 ) -3 ) -4 ) 56 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "mul-comm", "eq-swap", "add-fact-mul", "mul-zero", "Eq-a-b", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 64 ) 188 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 64 ) 188 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 188 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 64 ) 188 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + ( * v0 16 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + ( + ( * v0 16 ) v1 ) 15 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + ( + v3 v2 ) 7 ) 8 ) ( / ( + ( + v3 v2 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( - 29 ( max ( min ( * v0 8 ) 29 ) 25 ) ) 4 ) ( - ( + 0 ( / ( - 36 ( max ( min ( * v0 8 ) 29 ) 25 ) ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "min-mul-in-pos", "lt-swap-out", "max-to-min", "lt-swap", "min-consts-or", "lt-mul-div-cancel", "div-minus-in", "mul-comm", "add-dist-mul", "and-min-to-lt", "mul-assoc", "add-comm", "or-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( + ( * v1 63 ) v2 ) v3 ) ( + ( + ( * v1 63 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 63 ) v2 ) v3 ) ( + ( + ( * v1 63 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 8 ) ( - ( + ( - ( * v0 4 ) 8 ) ( + ( * ( min v1 245 ) 4 ) 40 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "eq-swap", "mul-comm", "add-fact-mul", "add-comm", "mul-assoc", "Eq-a-b", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-sub-both", "min-add-both", "mul-assoc", "mul-comm", "add-comm", "sub-to-add", "eq-x-y-0", "add-fact-mul", "Eq-min-c-pos", "mul-zero", "mul-one", "max-min-switch", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( * v1 4 ) ) ( * ( + 0 v1 ) 4 ) ) ) ( >= ( + 3 ( + ( * v1 4 ) 9 ) ) ( * ( + ( - ( + 4 0 ) 1 ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "mul-comm", "add-dist-mul", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( * ( / v0 4 ) 4 ) 19 ) ( - ( + ( - ( * ( / v0 4 ) 4 ) 19 ) ( + ( * v1 4 ) 24 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-assoc", "Eq-a-b", "eq-swap", "add-assoc", "add-comm", "add-fact-mul", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 16 ) ( - ( * ( / ( - ( + ( min v1 128 ) v2 ) 128 ) 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 8 ) 13 ) ) 8 ) 8 ) ( min ( + ( * v0 16 ) ( - ( * ( / ( - ( + ( min v1 128 ) v2 ) 128 ) 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 8 ) 13 ) ) )", "end": "0"}, "rules": ["mul-cancel-div", "mul-zero", "mul-assoc", "min-mul-in-pos", "min-sub-both", "add-fact-mul", "add-assoc", "add-comm", "min-div-in-pos", "mod-consts", "eq-swap", "mul-comm", "add-zero", "sub-to-add"]}, {"expression": {"start": "( == ( + ( + ( * v0 16 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 16 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -59 ( % ( + v0 v1 ) 4 ) ) 4 ) ( * v2 4 ) ) ( + ( / ( - -59 ( % ( + v0 v1 ) 4 ) ) 4 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 127 ) v2 ) ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 127 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 48 ) ( + ( * v1 3 ) v2 ) ) ( + ( * v0 48 ) ( + ( * v1 3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -59 ( % ( + ( + v0 v1 ) 2 ) 4 ) ) 4 ) ( * v2 4 ) ) ( + ( / ( - -59 ( % ( + ( + v0 v1 ) 2 ) 4 ) ) 4 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 3 ) v1 ) 2 ) v2 ) ( min ( + ( + ( * v0 3 ) v1 ) 2 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 47 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 127 ) 128 ) ( + ( max ( / v3 128 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 47 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 127 ) 128 ) ( + ( max ( / v3 128 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + v2 7 ) ) ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( min ( - 260 ( max ( * v0 4 ) 257 ) ) ( - 2 ( max ( - ( * v0 4 ) ( / ( + ( % ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) 4 ) 1031 ) 4 ) ) -1 ) ) ) v4 ) ( max ( - ( * v0 4 ) ( / ( + ( % ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) 4 ) 1031 ) 4 ) ) 2 ) ) v5 ) ( min ( - ( + ( min ( - 260 ( max ( * v0 4 ) 257 ) ) ( - 2 ( max ( - ( * v0 4 ) ( / ( + ( % ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) 4 ) 1031 ) 4 ) ) -1 ) ) ) v4 ) ( max ( - ( * v0 4 ) ( / ( + ( % ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) 4 ) 1031 ) 4 ) ) 2 ) ) v5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 513 ) 14 ) v1 ) ( + ( max ( min ( * v0 2 ) 497 ) -2 ) 17 ) ) ( min ( + ( max ( min ( * v0 2 ) 513 ) 14 ) v1 ) ( + ( max ( min ( * v0 2 ) 497 ) -2 ) 17 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 29 ) ( * v1 8 ) ) ( + ( * v0 29 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 32 ) v2 ) 31 ) ) ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 32 ) v2 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 12 ) ( + v1 v2 ) ) ( + ( * v0 12 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 256 ) ) ( / v2 4 ) ) ( - ( - v0 ( * v1 256 ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 128 ) 126 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 128 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + v0 11 ) 4 ) ( + ( max v1 -1 ) 1 ) ) ( max ( / ( + v0 11 ) 4 ) ( + ( max v1 -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 8 ) ) ( + ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) ( * v3 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 64 ) ) ( + ( / v0 4 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 267 ) 250 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) 267 ) 250 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 1007 ) 1003 ) ( / ( + v0 1007 ) 1003 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 3 ) 4 ) ) ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 12 ) v3 ) 11 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 12 ) v3 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 8 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 8 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 16 ) 58 ) ( * v1 4 ) ) ( + ( max ( * v0 16 ) 58 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( - v4 4 ) ) ( min ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( - v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 8 ) v1 ) -8 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 8 ) v1 ) -8 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 34 ) ( + ( max ( * v1 64 ) -4 ) v2 ) ) ( + ( + ( * v1 64 ) v2 ) 30 ) ) ( min ( + ( * v0 34 ) ( + ( max ( * v1 64 ) -4 ) v2 ) ) ( + ( + ( * v1 64 ) v2 ) 30 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 504 ) 241 ) v1 ) ( min ( + ( * v0 504 ) 241 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 64 ) ) ( + ( * v0 500 ) 436 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ( + ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 64 ) ) ( + ( * v0 500 ) 436 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * v2 8 ) 23 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 39 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * v2 8 ) 23 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 125 ) ) ) 39 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 8 ) ( + v1 v2 ) ) ( min ( + v0 8 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) v2 ) ( min ( - ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 35 ( max ( * ( % v0 4 ) 9 ) 26 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "add-comm", "min-add-both", "Eq-min-c-neg", "Eq-a-b", "mul-one", "mul-comm", "mul-assoc", "eq-comm", "max-to-min", "sub-to-add"]}, {"expression": {"start": "( == ( min ( * v0 16 ) ( - v1 16 ) ) ( min ( * v0 16 ) ( - v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -6 ( max ( min ( - ( - ( max ( * v0 4 ) -3 ) ( * v1 64 ) ) ( min v2 1999 ) ) 60 ) -3 ) ) ( - ( max ( min v3 3 ) -60 ) 6 ) ) ( max ( - -6 ( max ( min ( - ( - ( max ( * v0 4 ) -3 ) ( * v1 64 ) ) ( min v2 1999 ) ) 60 ) -3 ) ) ( - ( max ( min v3 3 ) -60 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 32 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 32 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( - v0 v1 ) 16 ) 23 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "sub-to-add", "eq-swap", "mul-comm", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / ( min ( - ( max ( min ( * ( min ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( + ( / v2 8 ) ( * v3 16 ) ) 15 ) ) 2 ) 497 ) -2 ) ( max ( min ( * ( + ( / v2 8 ) ( * v3 16 ) ) 2 ) 509 ) 10 ) ) v4 ) 4 ) 4 ) ) ( + ( max ( min ( * v0 2 ) 509 ) 10 ) ( * ( / ( min ( - ( max ( min ( * ( min ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( + ( / v2 8 ) ( * v3 16 ) ) 15 ) ) 2 ) 497 ) -2 ) ( max ( min ( * ( + ( / v2 8 ) ( * v3 16 ) ) 2 ) 509 ) 10 ) ) v4 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 32 ) v1 ) ( + v2 3 ) ) ( min ( + ( * v0 32 ) v1 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( + ( * v0 9 ) v1 ) 8 ) v2 ) 4 ) -3 ) ( + ( min ( * ( + ( * v0 9 ) v1 ) 4 ) 1999 ) ( * v3 4 ) ) ) ( - ( max ( * ( min ( + ( + ( * v0 9 ) v1 ) 8 ) v2 ) 4 ) -3 ) ( + ( min ( * ( + ( * v0 9 ) v1 ) 4 ) 1999 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( / ( + v0 v1 ) 8 ) ) 11 ) 3 ) ( + ( min ( - ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( / ( + v0 v1 ) 8 ) ) 11 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - 104 v0 ) 4 ) ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 16 ) ) ( + ( / ( - 104 v0 ) 4 ) ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 6 ) 252 ) ( / ( + ( % ( + v0 6 ) 252 ) 251 ) 252 ) ) ( + ( / ( + v0 6 ) 252 ) ( / ( + ( % ( + v0 6 ) 252 ) 251 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( max ( + v0 15 ) v1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 5 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 3 ) ) 2 ) ) ( max ( min ( / ( max ( + v0 15 ) v1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 5 ) ) ( + ( min ( / ( - ( + v3 v0 ) 1 ) 8 ) ( + ( + ( / v1 8 ) v2 ) 3 ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) ( + ( * ( / ( - v3 v2 ) 4 ) 8 ) 7 ) ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) ( + ( * ( / ( - v3 v2 ) 4 ) 8 ) 7 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( / ( + ( % v0 8 ) 7 ) 8 ) ) ( + ( / v0 8 ) ( / ( + ( % v0 8 ) 7 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( / v1 4 ) v2 ) ) ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( + ( * v2 4 ) v3 ) 4 ) ) ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( + ( * v2 4 ) v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 3 ) ( * ( + v0 1 ) 4 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-x-x-sub-a", "add-assoc", "lt-swap-in", "lt-mul-div-cancel", "add-comm", "lt-mul-pos-cancel"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( max ( min ( * v0 8 ) 125 ) 1 ) v1 ) 2 ) v2 ) 2 ) ( - ( + ( * ( + ( max ( min ( * v0 8 ) 125 ) 1 ) v1 ) 2 ) ( + v2 1 ) ) 2 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 16 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 16 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["mul-assoc", "eq-x-y-0", "add-fact-mul", "mul-comm", "sub-to-add", "add-comm", "add-assoc", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( max ( max ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) ) ( min ( max ( max ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) 0 ) v2 ) ( + 0 v2 ) ) ) ( >= ( + ( + ( * 7 4 ) 3 ) ( + v2 32 ) ) ( + ( - ( + 64 0 ) 1 ) v2 ) ) ) ( <= ( + ( min ( * v3 4 ) 14 ) 0 ) ( + ( min ( * v3 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 14 ) 3 ) ( + ( min ( * v3 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "Eq-lt-min", "lt-to-zero", "add-assoc", "add-comm", "eq-x-x", "min-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + 3 v1 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - v2 10 ) ( - ( + 0 v2 ) 10 ) ) ) ( >= ( + v2 4 ) ( - ( + ( - ( + 15 0 ) 1 ) v2 ) 10 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * 4 4 ) 3 ) ( + ( * 4 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["min-x-x", "eq-x-x", "not-gt-to-eqlt", "add-assoc", "eqgt-to-not-lt", "add-comm", "Eq-lt-min", "sub-to-add"]}, {"expression": {"start": "( >= ( - v0 4 ) ( - ( + ( - v0 4 ) 6 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eqgt-to-not-lt", "add-dist-mul", "add-comm", "lt-x-x-sub-a", "lt-swap", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 64 ) v1 ) ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 64 ) v1 ) 60 ) ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) 0 ) v3 ) ( + ( + ( min ( * v2 63 ) 62 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v3 ) ( + ( + ( min ( * v2 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 4 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "mul-one", "add-const", "lt-swap-in", "add-fact-mul", "mul-zero", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) ) ( >= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eq-x-x", "min-x-x", "eqgt-to-not-lt", "Eq-lt-min", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 ( + 0 v0 ) ) ) ( >= ( + v0 1 ) ( + ( - ( + 2 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 -64 ) ( - 0 ( * v1 4 ) ) ) -248 ) 4 ) 4 ) ( min ( + ( * v0 -64 ) ( - 0 ( * v1 4 ) ) ) -248 ) )", "end": "1"}, "rules": ["mul-comm", "add-zero", "mod-consts", "min-div-in-pos", "mul-cancel-div", "sub-to-add", "mod-multiple", "min-mul-in-pos", "mod-minus-out", "add-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( - v0 3 ) ( - ( + ( - v0 3 ) ( + -4 5 ) ) 1 ) )", "end": "1"}, "rules": ["add-assoc", "sub-to-add", "eq-x-x", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( * v2 8 ) ( * v2 8 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( - ( + 8 ( * v2 8 ) ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( * ( + ( * v4 16 ) v5 ) 2 ) ( + ( * ( + ( * v4 16 ) v5 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 16 ) v5 ) 2 ) 1 ) ( + ( * ( + ( * v4 16 ) v5 ) 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( * ( + ( * v4 2 ) v5 ) 4 ) ( * ( + ( * v4 2 ) v5 ) 4 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "add-assoc", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 125 ) ( - ( + 0 ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 8 ) ( + ( - ( + 9 0 ) 1 ) v3 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "lt-to-zero", "lt-swap-out", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) 3 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 3 ) ) ) ( <= ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ) ) ( <= ( + ( * v6 32 ) v7 ) ( + ( * v6 32 ) v7 ) ) ) ( >= ( + ( * v6 32 ) v7 ) ( + ( * v6 32 ) v7 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "min-x-x", "min-x-x-plus-a-neg", "Eq-lt-min", "sub-to-add", "add-assoc", "add-comm", "eq-x-x", "eq-swap", "not-gt-to-eqlt"]}, {"expression": {"start": "( >= ( - ( min v0 5 ) 10 ) ( - ( + ( - ( min v0 5 ) 10 ) ( - 11 ( min v0 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["or-to-and", "min-x-x-plus-a-neg", "Eq-lt-min", "not-gt-to-eqlt", "add-comm", "eq-swap", "lt-swap-out", "add-zero", "min-comm", "lt-x-x-sub-a", "min-consts-or", "eqgt-to-not-lt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( - ( * ( / v0 4 ) 4 ) 7 ) ( - ( + ( - ( * ( / v0 4 ) 4 ) 7 ) ( + ( * v1 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "add-fact-mul", "mul-comm", "Eq-a-b", "add-comm", "add-assoc", "eq-comm", "eq-swap", "sub-to-add", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 4 ) v1 ) 4 ) ( + 0 ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ) ( >= ( - ( + v0 v1 ) 1 ) ( + ( - ( + 4 0 ) 1 ) ( - ( + v0 v1 ) 4 ) ) ) ) ( <= ( + 0 ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) 4 ) ) ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "lt-to-zero", "sub-to-add", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 64 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 64 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 64 ) v1 ) 132 ) ) 5 ) ( + ( + ( * v0 64 ) v1 ) 68 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["min-comm", "and-comm", "min-sub-both", "Eq-lt-min", "and-assoc", "and-eqlt-to-min", "add-comm", "min-consts-or", "lt-swap", "eqlt-to-not-gt", "sub-to-add", "max-consts-or", "not-gt-to-eqlt", "min-ass", "mul-comm", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v2 ) 113 ) 2 ) -23 ) ) ( - ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v2 ) 113 ) 2 ) -23 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 32 ) 95 ) ( + ( min ( + ( + ( min ( * v1 253 ) 252 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + v4 v3 ) ) ( min ( * v5 127 ) 126 ) ) ) ( + ( min ( * v0 32 ) 95 ) ( + ( min ( + ( + ( min ( * v1 253 ) 252 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + v4 v3 ) ) ( min ( * v5 127 ) 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 126 ) ( + v0 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 5 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( / v1 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * v2 2 ) ) 5 ) ) ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * v2 2 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + ( min ( + ( * v1 252 ) 252 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + ( min ( + ( * v1 252 ) 252 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * v2 4 ) v3 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 36 ) ) ( min ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( * v3 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 12 ) 20 ) ( * v1 4 ) ) ( + ( max ( * v0 12 ) 20 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -5 ( max ( * ( / v0 4 ) 4 ) -3 ) ) ( - ( min ( - ( / v1 16 ) v2 ) 3 ) 5 ) ) ( max ( - -5 ( max ( * ( / v0 4 ) 4 ) -3 ) ) ( - ( min ( - ( / v1 16 ) v2 ) 3 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( - v0 14 ) 14 ) v0 ) ( min ( + ( - v0 14 ) 14 ) v0 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( max ( - ( * v1 504 ) v2 ) -494 ) ( + ( * v3 4 ) ( + ( * v4 256 ) v0 ) ) ) ) ( - v0 ( + ( max ( - ( * v1 504 ) v2 ) -494 ) ( + ( * v3 4 ) ( + ( * v4 256 ) v0 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 8 ) 0 ) 5 ) ( - ( + ( * v0 8 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( >= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 204 ) ) ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 204 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 13 ) ( + ( min ( * v1 16 ) 109 ) ( + v2 v3 ) ) ) ( + ( * v0 13 ) ( + ( min ( * v1 16 ) 109 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + v0 v1 ) 4 ) ( + ( * v2 4 ) 223 ) ) ( min ( * ( + v0 v1 ) 4 ) ( + ( * v2 4 ) 223 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 10 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 10 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( min ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + v2 31 ) ) 4 ) ( + ( - ( * ( + ( / ( + v0 v1 ) 4 ) ( + ( min ( min ( * ( max ( + ( / ( - -252 ( % ( + v0 v1 ) 4 ) ) 4 ) ( * v3 32 ) ) -31 ) -1 ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 255 ) 4 ) ( * v3 -32 ) ) ) 15 ) ( * v3 32 ) ) ) 4 ) ( max ( * ( max ( + ( / ( + v0 v1 ) 4 ) ( - ( * v3 32 ) ( / ( + ( + v0 v1 ) 255 ) 4 ) ) ) -31 ) 4 ) 2 ) ) 68 ) ) ( min ( * ( min ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + v2 31 ) ) 4 ) ( + ( - ( * ( + ( / ( + v0 v1 ) 4 ) ( + ( min ( min ( * ( max ( + ( / ( - -252 ( % ( + v0 v1 ) 4 ) ) 4 ) ( * v3 32 ) ) -31 ) -1 ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 255 ) 4 ) ( * v3 -32 ) ) ) 15 ) ( * v3 32 ) ) ) 4 ) ( max ( * ( max ( + ( / ( + v0 v1 ) 4 ) ( - ( * v3 32 ) ( / ( + ( + v0 v1 ) 255 ) 4 ) ) ) -31 ) 4 ) 2 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 8 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 4 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 503 ) 4 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( / v0 4 ) ( * ( + ( * v1 56 ) ( + ( * v2 28 ) v3 ) ) 3 ) ) 1 ) ( + ( - ( / v0 4 ) ( * ( + ( * v1 56 ) ( + ( * v2 28 ) v3 ) ) 3 ) ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + v1 125 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + v1 125 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 4 ( * ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( * v1 2 ) ( min ( * ( + ( * v2 2 ) v3 ) 2 ) 253 ) ) 4 ) ) 1 ) 8 ) ) ( + ( * ( max v4 1 ) -8 ) 4 ) ) ( max ( - 4 ( * ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( * v1 2 ) ( min ( * ( + ( * v2 2 ) v3 ) 2 ) 253 ) ) 4 ) ) 1 ) 8 ) ) ( + ( * ( max v4 1 ) -8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 252 ) v1 ) 241 ) v2 ) ( min ( + ( + ( * v0 252 ) v1 ) 241 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 8 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + v1 v2 ) 4 ) ) ( - v0 ( / ( + v1 v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 16 ) ( * ( / v1 4 ) 4 ) ) ( + ( / v0 16 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( min v0 1999 ) 5 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v0 1999 ) v3 ) 2 ) ) ( min ( max ( max ( - ( min v0 1999 ) 5 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v0 1999 ) v3 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 32 ) ) ( + ( / v0 4 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 35 ) ( * v1 8 ) ) ( + ( * v0 35 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 4 ) -3 ) ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 500 ) ) ) ( - ( max ( * v0 4 ) -3 ) ( + ( min ( * ( / v1 4 ) 4 ) 1999 ) ( * v2 500 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * v3 64 ) 165 ) ) ( min ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * v3 64 ) 165 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 10 ( + ( * v0 253 ) v1 ) ) ( - 2009 ( + ( * v0 253 ) v1 ) ) )", "end": "0"}, "rules": ["mul-zero", "lt-swap-out", "add-assoc", "add-fact-mul", "add-const", "gt-to-lt", "add-comm", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 132 ) v1 ) ( + v2 11 ) ) ( min ( + ( * v0 132 ) v1 ) ( + v2 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 82 ( max ( * v0 36 ) 33 ) ) 4 ) ( + ( max ( / ( - 78 ( max ( * v0 36 ) 33 ) ) 4 ) ( - 18 ( / ( max ( * v0 36 ) 33 ) 4 ) ) ) 1 ) ) ( min ( / ( - 82 ( max ( * v0 36 ) 33 ) ) 4 ) ( + ( max ( / ( - 78 ( max ( * v0 36 ) 33 ) ) 4 ) ( - 18 ( / ( max ( * v0 36 ) 33 ) 4 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 101 ) ) ( min ( * ( + ( * ( / ( + v0 v1 ) 250 ) 16 ) v2 ) 4 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 101 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * ( min ( + ( * v0 128 ) ( + ( * v1 128 ) 123 ) ) v2 ) 2 ) ( * ( + ( / v3 8 ) ( * v4 8 ) ) 2 ) ) 755 ) 256 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * ( min ( + ( * v0 128 ) ( + ( * v1 128 ) 123 ) ) v2 ) 2 ) ( * ( + ( / v3 8 ) ( * v4 8 ) ) 2 ) ) 755 ) 256 ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( / v0 4 ) 4 ) ( + v1 17 ) ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 12 ) ) ( min ( max ( * ( / v0 4 ) 4 ) ( + v1 17 ) ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1991 ) -8 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1991 ) -8 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 68 ) v1 ) 57 ) v2 ) ( min ( + ( + ( * v0 68 ) v1 ) 57 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( min ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( min ( * v1 16 ) 234 ) ) 3 ) ) ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( - ( * v1 16 ) ( min ( max ( min ( * ( / ( + ( + v2 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( min ( * v1 16 ) 234 ) ) 3 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 128 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 128 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ) ) ( >= ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "add-assoc", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 125 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 125 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + v1 16 ) ) ( + ( min ( / ( - ( + v2 v0 ) 1 ) 4 ) ( + v1 15 ) ) 1 ) ) ( max ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + v1 16 ) ) ( + ( min ( / ( - ( + v2 v0 ) 1 ) 4 ) ( + v1 15 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 1 ) ( - ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 11 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( - ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) ( * v2 1004 ) ) ( * ( / v1 4 ) 4 ) ) ( - ( - ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v1 4 ) ( * v2 251 ) ) 4 ) 998 ) ) ( * v2 1004 ) ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * ( + ( * v1 125 ) v2 ) 2 ) ) ( - ( / ( - v0 1 ) 4 ) ( * ( + ( * v1 125 ) v2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) ( + v3 1 ) ) 4 ) )", "end": "1"}, "rules": ["sub-to-add", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 32 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 15 ) ) ( + ( + ( * v3 8 ) v2 ) 2 ) ) ( min ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 15 ) ) ( + ( + ( * v3 8 ) v2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 500 ) v1 ) ( + ( * v2 125 ) v3 ) ) ( + ( + ( * v0 500 ) v1 ) ( + ( * v2 125 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= v0 ( - ( - ( - v0 1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-x-x-sub-a", "add-comm", "lt-swap-out", "eqlt-to-not-gt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 5 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 8 ) )", "end": "1"}, "rules": ["add-dist-mul", "lt-swap-in", "lt-swap-out", "lt-x-x-sub-a", "mul-comm", "sub-to-add", "add-comm", "add-assoc"]}, {"expression": {"start": "( <= ( + ( * v0 3 ) 3 ) ( * v0 3 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( >= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 0 ) ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) ) ( >= ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( * v0 8 ) 11 ) ( - ( - ( * ( - v0 1 ) 8 ) 1 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-out", "eqlt-to-not-gt", "lt-swap", "lt-x-x-sub-a", "add-assoc", "add-comm", "add-dist-mul", "mul-comm"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 61 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + v2 61 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( min v0 4 ) v1 ) ) 0 ) 4 ) ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( min v0 125 ) ( min v0 125 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 6 ) v3 ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * v2 6 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 5 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-assoc", "lt-x-x-sub-a", "eqgt-to-not-lt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) 4 ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) )", "end": "1"}, "rules": ["add-dist-mul", "min-ass", "div-consts-mul", "eq-x-x", "min-comm", "sub-to-add", "min-x-x-plus-a-pos", "mul-comm", "min-mul-in-pos", "mul-assoc", "add-comm", "mul-one", "min-sub-both"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "sub-to-add", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( - ( + ( * 0 4 ) v1 ) 2 ) 0 ) 5 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 33 0 ) 1 ) 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 125 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["min-x-x", "lt-swap", "add-dist-mul", "eqgt-to-not-lt", "eq-x-x", "add-assoc", "Eq-lt-min", "sub-to-add", "not-gt-to-eqlt", "min-x-x-plus-a-neg", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ) ) ( >= ( - ( + ( + ( * 5 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * 3 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ) ) ( <= ( - ( * v1 8 ) 1 ) ( + ( - ( + ( * v1 8 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( * v1 8 ) 67 ) ( + ( + ( + ( * v1 8 ) ( - ( + 64 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["min-x-x-plus-a-neg", "lt-swap-out", "eq-x-x", "not-gt-to-eqlt", "sub-to-add", "min-x-x", "Eq-lt-min", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 748 ) v1 ) ) ( + ( min ( * v0 252 ) 748 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 748 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 748 ) 251 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "add-comm", "add-zero", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < v0 ( min ( max ( - v1 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["or-over-and", "add-comm", "and-min-to-lt", "and-over-or", "add-assoc", "and-comm", "and-lt-gt-to-0", "or-comm", "lt-swap-out", "max-consts-or", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( min ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) 1999 ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( <= ( + ( * ( + ( * 0 4 ) v3 ) 4 ) 0 ) ( + ( * ( + 0 v3 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( - 7 ( max v4 7 ) ) 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( max v4 7 ) -4 ) 31 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "add-assoc", "min-mul-in-neg", "eqgt-to-not-lt", "lt-swap", "sub-to-add", "mul-assoc", "max-consts-and", "mul-comm", "max-consts-or", "add-dist-mul", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 8 ) ( - ( + ( - ( * v0 4 ) 8 ) ( + ( * ( min v1 61 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "eq-swap", "eq-comm", "add-comm", "mul-assoc", "Eq-a-b", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( >= ( + ( max ( * v0 16 ) -22 ) 22 ) ( - ( + ( + ( max ( * v0 16 ) -22 ) 22 ) ( + ( max ( min ( * v0 16 ) -22 ) -23 ) 23 ) ) 1 ) )", "end": "1"}, "rules": ["min-min-div-pos", "min-sub-both", "max-min-switch", "and-lt-to-min", "mul-assoc", "mul-comm", "and-min-to-lt", "and-comm", "lt-swap-out", "add-dist-mul", "lt-swap", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( <= ( + ( - ( * ( max ( min v0 25 ) 22 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 22 ) 8 ) ) ) ( - ( * ( max ( min v0 25 ) 22 ) 8 ) 204 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "mul-comm", "add-fact-mul", "sub-to-add", "add-const", "or-comm", "max-consts-and", "div-consts-add", "lt-swap-in", "add-comm", "mul-zero", "lt-mul-pos-cancel", "lt-swap-out", "min-consts-or"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) 6 ) ( - ( + ( * ( + v0 1 ) 4 ) v1 ) 2 ) )", "end": "0"}, "rules": ["add-const", "mul-one", "lt-swap-in", "mul-assoc", "add-fact-mul", "mul-comm", "mul-zero", "add-assoc", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( * 0 500 ) v5 ) 0 ) ( + 0 v5 ) ) ) ( >= ( + ( + ( * 1 500 ) v5 ) 499 ) ( + ( - ( + 1000 0 ) 1 ) v5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-const", "lt-swap-in", "eqlt-to-not-gt", "lt-to-zero", "sub-to-add", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) 0 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) ) ( >= ( + ( + ( * ( - 1 ( max v1 1 ) ) 4 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) 3 ) ( + ( min ( - ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ( * ( max v1 1 ) 4 ) ) ( + ( * v2 8 ) v3 ) ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-swap-in", "add-comm", "lt-swap-out", "eqlt-to-not-gt", "mul-comm", "add-assoc", "eqgt-to-not-lt", "lt-to-zero", "and-min-to-lt", "mul-assoc", "add-dist-mul", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + v0 11 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 0 ) 3 ) ( - ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 3 ) 3 ) ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - v2 8 ) ( + -5 ( - v2 3 ) ) ) ) ( >= ( + v2 131 ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v2 3 ) ) 1 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "add-dist-mul", "and-eqlt-eqgt-to-0", "eqgt-to-not-lt", "lt-swap-out", "and-x-1", "not-gt-to-eqlt", "lt-swap", "add-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * v2 16 ) ) 22 ) ( - ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( + v2 1 ) 16 ) ) 3 ) )", "end": "0"}, "rules": ["mul-zero", "add-const", "lt-swap", "add-comm", "add-assoc", "lt-swap-in", "add-fact-mul", "min-x-x-plus-a-neg", "sub-to-add", "Eq-lt-min", "add-dist-mul", "mul-comm", "eq-x-y-0"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 4 ) ) ) ( - ( max ( min ( * v0 8 ) 113 ) -11 ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 3 ) v1 ) 4 ) ( / ( + v2 v3 ) 4 ) ) ( + ( * ( + ( * v0 3 ) v1 ) 4 ) ( / ( + v2 v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 65 ) 192 ) v1 ) 50 ) ) ( * v3 65 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 65 ) 192 ) v1 ) 50 ) ) ( * v3 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 180 ) 168 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 180 ) 168 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 28 ) 16 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 28 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 8 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( - v0 3 ) ) ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( - v0 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( / ( + ( + v0 v1 ) 499 ) 4 ) ) ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( / ( + ( + v0 v1 ) 499 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) ( + ( * v0 64 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 252 ) 247 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( min ( + ( * v0 252 ) 247 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( max ( min ( + v0 v1 ) 2002 ) 3 ) 3 ) v2 ) ( + v3 v2 ) ) ( + ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) v4 ) 3 ) ) ( min ( max ( max ( - ( max ( min ( + v0 v1 ) 2002 ) 3 ) 3 ) v2 ) ( + v3 v2 ) ) ( + ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) v4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( / v1 4 ) v2 ) ) ( + ( * v0 16 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 515 ) 4 ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 515 ) 4 ) ( / ( + v0 v1 ) 4 ) ) ) ( min ( / ( + ( + v0 v1 ) 515 ) 4 ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 515 ) 4 ) ( / ( + v0 v1 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1003 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 1003 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 127 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - ( / ( + ( + v2 v0 ) 3 ) 4 ) ( * v3 252 ) ) ( + ( / v0 4 ) 127 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 8 ) v1 ) v2 ) ( + v3 5 ) ) ( min ( + ( + ( * v0 8 ) v1 ) v2 ) ( + v3 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 8 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 16 ) ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 252 ) ( - v2 252 ) ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( * v1 252 ) ( - v2 252 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v2 32 ) ) ( / ( + v0 v1 ) 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v2 32 ) ) ( / ( + v0 v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 2 ) 72 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 2 ) 72 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 31 ) 32 ) 0 ) ( / ( - v1 ( max ( min ( / v2 16 ) 126 ) 2 ) ) 32 ) ) ( max ( min ( / ( + v0 31 ) 32 ) 0 ) ( / ( - v1 ( max ( min ( / v2 16 ) 126 ) 2 ) ) 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 9 ) 4 ) ( + ( max ( / ( - 0 ( / v1 8 ) ) 4 ) -2 ) 2 ) ) ( + ( / ( min ( - 250 ( / v1 8 ) ) ( + v0 5 ) ) 4 ) 1 ) ) ( max ( min ( / ( + v0 9 ) 4 ) ( + ( max ( / ( - 0 ( / v1 8 ) ) 4 ) -2 ) 2 ) ) ( + ( / ( min ( - 250 ( / v1 8 ) ) ( + v0 5 ) ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + v0 v1 ) 9 ) ( + ( * v2 8 ) v3 ) ) ( max ( + ( + v0 v1 ) 9 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( - ( + v1 v2 ) 1 ) 250 ) ) ( - v0 ( / ( - ( + v1 v2 ) 1 ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( max v0 252 ) 1 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "max-consts-and", "and-comm", "sub-to-add"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 126 ) v2 ) ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 126 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 693 ) 676 ) ( / ( + v0 693 ) 676 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( - ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( * v3 63 ) ) v1 ) -1 ) ( + ( + ( * v3 63 ) ( + ( * ( / ( - ( - ( min ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ( + ( * v2 -125 ) ( + v0 v1 ) ) ) ( * v3 63 ) ) v1 ) 4 ) 4 ) ( * v2 125 ) ) ) v1 ) ) 4 ) v4 ) ( min ( + ( + ( min ( - ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( * v3 63 ) ) v1 ) -1 ) ( + ( + ( * v3 63 ) ( + ( * ( / ( - ( - ( min ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ( + ( * v2 -125 ) ( + v0 v1 ) ) ) ( * v3 63 ) ) v1 ) 4 ) 4 ) ( * v2 125 ) ) ) v1 ) ) 4 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( + ( max ( min v0 1991 ) -8 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 1991 ) -8 ) v3 ) 66 ) ) ( min ( max ( max ( + ( max ( min v0 1991 ) -8 ) 8 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 1991 ) -8 ) v3 ) 66 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 128 ) ) ( + ( / v0 4 ) 127 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( - v2 ( * v3 128 ) ) ( + ( / v0 4 ) 127 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 44 ) 32 ) ) -32 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 44 ) 32 ) ) -32 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2124 ) 125 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 64 ) ( + v1 v2 ) ) 2124 ) 125 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 12 ) v1 ) 1 ) v2 ) ( min ( - ( + ( * v0 12 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 5 ) 4 ) ( * v1 63 ) ) ( - ( / ( + v0 5 ) 4 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 2 ) 60 ) v1 ) ( min ( + ( * v0 2 ) 60 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 135 ) 8 ) ) ( + ( / ( + v0 v1 ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 135 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) ( + v1 v2 ) ) ( + ( * v0 500 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 3 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( max v0 4 ) 1 ) 0 )", "end": "1"}, "rules": ["max-consts-and", "and-comm", "sub-to-add", "eqgt-to-not-lt", "lt-swap-in"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max v0 -2 ) 2 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-comm", "eq-swap", "eq-comm", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( * ( / ( * v0 4 ) 2 ) 2 ) ( * v0 4 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( == ( max ( + ( + ( + v0 v1 ) v2 ) 16 ) ( + ( * v3 504 ) v0 ) ) ( max ( + ( + ( + v0 v1 ) v2 ) 16 ) ( + ( * v3 504 ) v0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 2 ) v3 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * ( / ( + ( min ( + ( * v0 -126 ) v1 ) 120 ) 8 ) 33 ) 33 ) ( * v0 126 ) ) 24 ) v2 ) ( min ( + ( + ( * ( / ( + ( min ( + ( * v0 -126 ) v1 ) 120 ) 8 ) 33 ) 33 ) ( * v0 126 ) ) 24 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) v1 ) 3 ) 4 ) 0 ) ( + ( / ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) 31 ) 4 ) 1 ) ) ( + ( / ( min ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) ( - ( min ( / ( - ( + v5 v0 ) 13 ) 4 ) ( - v6 3 ) ) v1 ) ) 31 ) 4 ) 1 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) v1 ) 3 ) 4 ) 0 ) ( + ( / ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) 31 ) 4 ) 1 ) ) ( + ( / ( min ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) ( - ( min ( / ( - ( + v5 v0 ) 13 ) 4 ) ( - v6 3 ) ) v1 ) ) 31 ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( - v0 ( min ( * ( / v1 4 ) 4 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["sub-to-add", "add-fact-mul", "add-const", "lt-swap-out", "gt-to-lt", "mul-zero", "mul-comm", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * v3 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * v3 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 504 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 504 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 8 ) v3 ) 4 ) ) ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 8 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -64 ) 32 ) 32 ) ( * v0 -64 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( + ( min ( + v0 v1 ) 1878 ) 1 ) v2 ) ( min ( + ( min ( + v0 v1 ) 1878 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( + ( * v1 128 ) ( - ( * ( min ( + ( + ( * v2 8 ) ( + ( / v3 4 ) ( * v4 16 ) ) ) 7 ) ( + ( / ( + ( + v5 v3 ) 3 ) 4 ) ( * v1 -32 ) ) ) 4 ) ( max ( * ( max ( + ( * v2 8 ) ( + ( * v4 16 ) ( + ( * v1 32 ) ( - ( / v3 4 ) ( / ( + ( + v5 v3 ) 3 ) 4 ) ) ) ) ) -7 ) 4 ) 2 ) ) ) 4 ) ) ( min ( * v0 4 ) ( + ( + ( * v1 128 ) ( - ( * ( min ( + ( + ( * v2 8 ) ( + ( / v3 4 ) ( * v4 16 ) ) ) 7 ) ( + ( / ( + ( + v5 v3 ) 3 ) 4 ) ( * v1 -32 ) ) ) 4 ) ( max ( * ( max ( + ( * v2 8 ) ( + ( * v4 16 ) ( + ( * v1 32 ) ( - ( / v3 4 ) ( / ( + ( + v5 v3 ) 3 ) 4 ) ) ) ) ) -7 ) 4 ) 2 ) ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 36 ) ) ( min ( + v0 v1 ) ( + v2 36 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["add-const", "add-assoc", "sub-to-add", "add-fact-mul", "mul-zero", "gt-to-lt", "add-comm", "mul-comm", "lt-swap-in"]}, {"expression": {"start": "( < ( - ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * v0 2 ) ( + v1 1 ) ) 4 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( * v0 -34 ) 17 ) 17 ) ( * v0 -34 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) 1 ) v3 ) ( max ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( max ( * v0 4 ) 7 ) ( * v1 8 ) ) 2 ) ( + ( * v1 16 ) v2 ) ) ( + ( * ( - ( max ( * v0 4 ) 7 ) ( * v1 8 ) ) 2 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + 1 ( + v2 123 ) ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ) ( + 0 ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ) ) ) ( >= ( + 3 ( + ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ( * ( / v2 4 ) 4 ) ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ( * ( / v2 4 ) 4 ) ) ) ) ) ( <= ( - ( + ( * v3 33 ) v4 ) 1 ) ( - ( + ( + ( * v3 33 ) v4 ) 0 ) 1 ) ) ) ( >= ( + ( + ( * v3 33 ) v4 ) 31 ) ( - ( + ( + ( * v3 33 ) v4 ) ( - ( + 33 0 ) 1 ) ) 1 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 141 ) 129 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 141 ) 129 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 126 ) 2 ) ( * v1 4 ) ) ( + ( max ( min v0 126 ) 2 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 v1 ) ( + v0 ( + v1 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 16 ) 16 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 2 ) 16 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( + ( + ( * v0 128 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( + ( * v0 128 ) ( + ( * v4 4 ) ( + ( * v1 500 ) v2 ) ) ) ) ( - ( min ( + ( + ( * v0 128 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( + ( * v0 128 ) ( + ( * v4 4 ) ( + ( * v1 500 ) v2 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 16 ) ( - ( + ( - ( + v0 v1 ) 16 ) 143 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eq-comm", "add-const", "mul-comm", "eq-swap", "add-comm", "mul-zero", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( >= v0 ( + ( + ( - v0 1 ) 4 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( min ( min ( * ( max ( - ( * v0 125 ) v1 ) -125 ) -1 ) ( + ( * v0 -125 ) v1 ) ) 125 ) 14 ) 16 ) 16 ) ( * v0 125 ) ) ( + ( * ( / ( + ( min ( min ( * ( max ( - ( * v0 125 ) v1 ) -125 ) -1 ) ( + ( * v0 -125 ) v1 ) ) 125 ) 14 ) 16 ) 16 ) ( * v0 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 69 ) v1 ) ( + ( * v0 69 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( min ( * ( / v0 4 ) 4 ) 1999 ) 3 ) ( - ( max ( - ( min ( * ( / v0 4 ) 4 ) 1999 ) 4 ) ( min ( * ( / v0 4 ) 4 ) 1999 ) ) 3 ) ) ) ( >= ( + ( max ( * ( / ( + v0 127 ) 4 ) 4 ) -3 ) 4 ) ( + ( + ( max ( * ( / ( + v0 127 ) 4 ) 4 ) -3 ) 3 ) 1 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 3 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-in", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "and-comm", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 510 ( max ( * ( min ( + ( * v0 4 ) v1 ) 255 ) 2 ) 507 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-one", "eq-swap", "add-comm", "Eq-a-b", "eq-comm", "mul-comm", "mul-assoc", "max-to-min", "Eq-min-c-neg", "sub-to-add", "min-add-both"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 64 ) 936 ) 4 ) 4 ) ( min ( * v0 64 ) 936 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "min-div-in-pos", "eq-x-x", "min-mul-in-pos"]}, {"expression": {"start": "( < v0 ( min ( max ( - ( / v1 8 ) 5 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["min-sub-both", "lt-swap-out", "sub-to-add", "mul-one", "and-min-to-lt", "lt-swap-in", "mul-assoc", "mul-comm", "min-comm", "max-consts-or", "add-comm"]}, {"expression": {"start": "( >= ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( + ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( max ( * ( % v0 7 ) 5 ) 29 ) 29 ) ) 1 ) )", "end": "1"}, "rules": ["Eq-lt-min", "mul-zero", "min-consts-div-pos", "sub-to-add", "lt-swap-in", "not-gt-to-eqlt", "lt-mul-pos-cancel", "add-assoc", "add-fact-mul", "and-min-to-eqlt", "min-mod-const-to-const", "mul-assoc", "add-comm", "max-to-min", "eqgt-to-not-lt", "mul-comm", "mod-minus-in"]}, {"expression": {"start": "( == ( * ( / ( min ( min ( * v1 252 ) ( + ( * ( / ( max ( * v1 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) 4 ) 4 ) ( min ( min ( * v1 252 ) ( + ( * ( / ( max ( * v1 -252 ) -248 ) 4 ) -4 ) 3 ) ) 248 ) )", "end": "1"}, "rules": ["mod-minus-in", "min-sub-both", "sub-to-add", "mul-cancel-div", "min-max", "add-assoc", "add-zero", "mul-comm", "mul-assoc", "min-mul-in-neg", "add-dist-mul", "div-consts-add", "eq-x-y-0", "min-div-in-pos", "min-comm", "min-ass"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 105 ) 17 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 105 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + v2 20 ) ) ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + v2 20 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) v3 ) 4 ) ( + ( * v4 4 ) 15 ) ) ( min ( * ( + ( * ( + ( * ( / ( - ( + ( min v0 251 ) v1 ) 1 ) 250 ) 16 ) v2 ) 4 ) v3 ) 4 ) ( + ( * v4 4 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ( min ( + ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) 89 ) ( + v1 v4 ) ) ) ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) ) ( max ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ( min ( + ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) 89 ) ( + v1 v4 ) ) ) ( + ( * v0 8 ) ( + ( * v3 126 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 2500 ) 501 ) ( * v1 4 ) ) ( + ( max ( min v0 2500 ) 501 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 334 ( * v0 112 ) ) ( + ( - v1 ( + ( * v0 112 ) ( * v2 335 ) ) ) 9 ) ) ( min ( - 334 ( * v0 112 ) ) ( + ( - v1 ( + ( * v0 112 ) ( * v2 335 ) ) ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 132 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 132 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) v2 ) 113 ) 2 ) -23 ) ( * ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) 2 ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) v2 ) 113 ) 2 ) -23 ) ( * ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - 7 ( * ( + ( * ( / v0 250 ) 8 ) ( - ( * v1 4 ) ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) ) ) 2 ) ) ( - 7 ( * ( + ( * ( / v0 250 ) 8 ) ( - ( * v1 4 ) ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 2 ) 7 ) ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 2 ) 7 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( - v0 ( * v1 252 ) ) ( + ( + ( min ( * v2 68 ) 194 ) ( / v3 4 ) ) 57 ) ) ( * v2 68 ) ) ( / v3 4 ) ) ( - ( - ( min ( - v0 ( * v1 252 ) ) ( + ( + ( min ( * v2 68 ) 194 ) ( / v3 4 ) ) 57 ) ) ( * v2 68 ) ) ( / v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 1003 ) ) ( * ( / v1 4 ) 4 ) ) ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 1003 ) ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 64 ) 61 ) ( + v2 v3 ) ) 65 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) ( + ( + ( min ( * v1 64 ) 61 ) ( + v2 v3 ) ) 65 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 128 ) 130 ) v1 ) 122 ) ) ( * v3 128 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 128 ) 130 ) v1 ) 122 ) ) ( * v3 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 252 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) ( min ( - 252 ( * ( + ( * v0 32 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 63 ) ( + ( * v0 32 ) v1 ) ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 1004 ) 6 ) ( - ( * v0 1004 ) 6 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 37 ) 32 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 37 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( min ( * ( / ( + v1 v2 ) 4 ) 4 ) 1999 ) ) ( - v0 ( min ( * ( / ( + v1 v2 ) 4 ) 4 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( + ( / v1 8 ) 11 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( + ( / v1 8 ) 11 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( + ( * v1 504 ) v2 ) ) ( + ( * v0 128 ) ( + ( * v1 504 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 21 ) 8 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 21 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( - ( - v0 ( + ( * v1 12 ) v2 ) ) 3 ) 4 ) ( + ( / ( - v0 v2 ) 4 ) ( * v1 -3 ) ) ) ( max ( / ( - ( - v0 ( + ( * v1 12 ) v2 ) ) 3 ) 4 ) ( + ( / ( - v0 v2 ) 4 ) ( * v1 -3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 66 ) 63 ) ( / ( + v0 66 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( + v3 1 ) ) ( max ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( + v3 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 146 ) 22 ) ( * v1 4 ) ) ( + ( max ( min v0 146 ) 22 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( min ( min ( - ( + ( * v1 -126 ) ( + v2 v3 ) ) ( * v0 32 ) ) ( + v3 22 ) ) ( - ( + ( * v4 8 ) v3 ) 11 ) ) ( * v1 126 ) ) ) ( + ( * v0 32 ) ( + ( min ( min ( - ( + ( * v1 -126 ) ( + v2 v3 ) ) ( * v0 32 ) ) ( + v3 22 ) ) ( - ( + ( * v4 8 ) v3 ) 11 ) ) ( * v1 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 128 ) 123 ) v1 ) ( min ( + ( * v0 128 ) 123 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 111 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * v3 126 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 111 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) ) ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 111 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * v3 126 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 111 ) ( + ( * v3 126 ) v4 ) ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 64 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 64 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 518 ( max ( * v0 256 ) 254 ) ) 4 ) ( + ( max ( / ( - 514 ( max ( * v0 256 ) 254 ) ) 4 ) ( - 127 ( / ( max ( * v0 256 ) 254 ) 4 ) ) ) 1 ) ) ( min ( / ( - 518 ( max ( * v0 256 ) 254 ) ) 4 ) ( + ( max ( / ( - 514 ( max ( * v0 256 ) 254 ) ) 4 ) ( - 127 ( / ( max ( * v0 256 ) 254 ) 4 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 -32 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( / v2 8 ) ) ) ( + ( * v3 64 ) 31 ) ) ( min ( + ( * v0 -32 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( / v2 8 ) ) ) ( + ( * v3 64 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 4 ) v1 ) 4 ) ( * ( + ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 4 ) v1 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 3 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 256 ) 254 ) ( * v1 4 ) ) ( + ( max ( * v0 256 ) 254 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 4 ) ( - ( + ( + v0 1 ) v1 ) 4 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "add-assoc", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( / ( + v0 525 ) 508 ) ( / ( + v0 525 ) 508 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 6 ) 4 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) 6 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 252 ) ( + ( * v1 1000 ) v2 ) ) ( + ( * v0 252 ) ( + ( * v1 1000 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 4 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 132 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( * v3 4 ) ( + ( / v1 4 ) ( * v4 132 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "add-fact-mul", "eq-x-y-0", "add-const", "mul-comm", "mul-zero"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 13 ) ) ( min ( + v0 v1 ) ( + v2 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 18 ( * ( max ( min v0 2 ) 1 ) 9 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-assoc", "Eq-a-b", "sub-to-add", "add-comm", "eq-swap", "mul-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) -1 ) ( + ( * v3 2 ) 7 ) ) ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) -1 ) ( + ( * v3 2 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( * v3 32 ) v1 ) 22 ) ) ( + ( * v3 32 ) ( + ( * v4 4 ) ( + ( * v5 8 ) v1 ) ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( * v3 32 ) v1 ) 22 ) ) ( + ( * v3 32 ) ( + ( * v4 4 ) ( + ( * v5 8 ) v1 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( min v0 16 ) 3 ) 4 ) ( / ( + ( min v0 16 ) 3 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 135 ) 8 ) ( * v3 4 ) ) ( - ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 135 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + v0 v1 ) v2 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 23 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-comm", "mul-comm", "eq-swap", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( / ( + v0 24 ) 16 ) ( / ( + v0 24 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( max ( * ( + v1 v2 ) 4 ) -3 ) ( min ( * ( + v1 v2 ) 4 ) 1999 ) ) 4 ) ) 1 ) v3 ) ( min ( max ( min ( * ( / ( + v0 7 ) 4 ) 4 ) ( + ( - ( max ( * ( + v1 v2 ) 4 ) -3 ) ( min ( * ( + v1 v2 ) 4 ) 1999 ) ) 4 ) ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) ) ( >= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 63 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )", "end": "0"}, "rules": ["or-comm", "lt-swap-in", "min-consts-or", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( + ( max ( min v0 2001 ) 2 ) v2 ) 63 ) ) ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( + ( max ( min v0 2001 ) 2 ) v2 ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) ( + ( * v1 1000 ) v2 ) ) ( + ( * v0 504 ) ( + ( * v1 1000 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 20 ) ( - ( + ( - v0 20 ) ( - 24 ( * 2 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 5 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 124 ( * v0 63 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 63 ) v3 ) ) 12 ) ) ( min ( - 124 ( * v0 63 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 63 ) v3 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1996 ) -3 ) ( * v1 4 ) ) ( + ( max ( min v0 1996 ) -3 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * v0 4 ) 16 ) ( * v0 4 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( min ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v1 -252 ) v2 ) 251 ) 4 ) 11 ) 253 ) 253 ) ( * v1 1008 ) ) ) ( + ( * v3 4 ) 12 ) ) ( min ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v1 -252 ) v2 ) 251 ) 4 ) 11 ) 253 ) 253 ) ( * v1 1008 ) ) ) ( + ( * v3 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - v2 3 ) ) ( min ( + ( * v0 4 ) v1 ) ( - v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - 82 ( max ( * v0 16 ) 58 ) ) 4 ) ( + ( max ( / ( - 78 ( max ( * v0 16 ) 58 ) ) 4 ) ( - 18 ( / ( max ( * v0 16 ) 58 ) 4 ) ) ) 1 ) ) ( min ( / ( - 82 ( max ( * v0 16 ) 58 ) ) 4 ) ( + ( max ( / ( - 78 ( max ( * v0 16 ) 58 ) ) 4 ) ( - 18 ( / ( max ( * v0 16 ) 58 ) 4 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 2 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["gt-to-lt", "sub-to-add", "mul-comm", "lt-swap-in", "add-const", "add-assoc", "mul-zero", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ( - ( min ( / ( - ( + v3 v1 ) 1 ) 4 ) ( + v4 7 ) ) 3 ) ) ( min ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ( - ( min ( / ( - ( + v3 v1 ) 1 ) 4 ) ( + v4 7 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 7 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 8 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 16 ) ) ) ) ( + ( * v0 4 ) ( + ( * v1 8 ) ( + ( / ( + v2 v3 ) 4 ) ( * v4 16 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( * ( / v0 8 ) 256 ) 17 ) ( - ( * ( - ( * ( / v0 8 ) 64 ) 3 ) 4 ) 5 ) ) ) ( >= ( + ( * ( + ( * ( / v0 8 ) 8 ) v1 ) 32 ) 501 ) ( + ( * ( - ( + ( + ( * v1 8 ) 129 ) ( - ( * ( / v0 8 ) 64 ) 3 ) ) 1 ) 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= ( + 0 ( - ( * v2 32 ) 17 ) ) ( + ( + ( * 0 4 ) ( - ( * v2 32 ) 20 ) ) 0 ) ) ) ( >= ( + 3 ( + ( * v2 32 ) 658 ) ) ( + ( + ( * 168 4 ) ( + ( * v2 32 ) 661 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "lt-x-x-sub-a", "lt-swap-out", "and-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 34 ) 32 ) ) 32 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 34 ) 32 ) ) 32 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - v0 4 ) ( - ( + ( - v0 4 ) 6 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-comm", "eq-comm", "mul-zero", "add-assoc", "eq-swap", "sub-to-add", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( * ( max v0 7 ) -4 ) 4 ) 4 ) ( * ( max v0 7 ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( * ( - v2 ( + ( * v0 2 ) v1 ) ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-const", "sub-to-add", "eq-swap", "add-assoc", "eq-mul-x-y-0", "eq-x-y-0", "Eq-a-b"]}, {"expression": {"start": "( <= ( + ( - ( / v0 250 ) 1 ) ( / ( + ( % v0 250 ) 624 ) 250 ) ) ( - ( / v0 250 ) 1 ) )", "end": "0"}, "rules": ["lt-mul-div-cancel", "add-comm", "lt-const-mod", "lt-swap-out", "add-dist-mul", "mul-zero", "sub-to-add", "mul-assoc", "add-fact-mul", "mul-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( min ( * v0 64 ) 184 ) ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( - ( min ( * v0 64 ) 184 ) ( * ( + ( * v0 16 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( / ( + v0 15 ) 1008 ) ( - ( + ( / ( + v0 15 ) 1008 ) ( / ( + ( % ( + v0 15 ) 1008 ) 1007 ) 1008 ) ) 1 ) )", "end": "1"}, "rules": ["add-const", "sub-to-add", "mul-zero", "lt-mul-div-cancel", "eqgt-to-not-lt", "add-comm", "mul-comm", "mul-one", "add-assoc", "lt-swap-out", "add-fact-mul", "lt-const-mod-false"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 9 ( * ( % v0 3 ) 4 ) ) ( - ( + 0 4 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["sub-to-add", "mod-minus-in", "eqlt-to-not-gt", "lt-swap", "mul-assoc", "and-min-to-lt", "min-sub-both", "lt-mul-pos-cancel", "lt-const-mod", "lt-swap-out", "max-consts-or"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "lt-to-zero", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( * ( min ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) 10 ) 8 ) ( + ( * ( min ( - ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( * ( / v0 250 ) 8 ) ) 10 ) 8 ) 30 ) ) ( min ( * ( min ( + ( * ( / v0 250 ) -8 ) ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ) 10 ) 8 ) ( + ( * ( min ( - ( - ( * ( / ( - ( + v1 v0 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( * ( / v0 250 ) 8 ) ) 10 ) 8 ) 30 ) ) )", "end": "1"}, "rules": ["and-min-to-lt", "min-add-both", "min-mul-in-pos", "min-ass", "Eq-min-lt", "eqlt-to-not-gt", "min-comm"]}, {"expression": {"start": "( < ( + ( / v0 8 ) 1 ) ( / ( + v0 1 ) 8 ) )", "end": "0"}, "rules": ["mul-cancel-div", "mod-minus-out", "add-assoc", "mul-zero", "div-minus-in", "lt-mul-div-cancel", "lt-swap-in", "add-const", "lt-const-mod-false", "mul-comm", "add-denom-mul", "add-fact-mul", "add-comm", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( == ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) 78 ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "mul-comm", "add-dist-mul", "sub-to-add", "eq-swap", "mul-zero", "add-fact-mul", "eq-x-y-0", "add-assoc"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 273 ) ( - ( + ( - ( * v0 4 ) 273 ) ( + ( * ( min ( - ( - ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 64 ) ( * v3 34 ) ) ( * ( / v2 250 ) 64 ) ) -55 ) 4 ) 359 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "eq-x-y-0", "add-comm", "eq-mul-x-y-0", "mul-comm", "add-assoc", "sub-to-add", "eq-swap", "Eq-a-b"]}, {"expression": {"start": "( >= ( - ( * v0 4 ) 4 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-x-x-sub-a", "add-dist-mul", "mul-comm", "add-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 8 ) v1 ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) 7 ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) v2 ) ) ( >= ( + ( + ( * ( / ( - v3 1 ) 4 ) 4 ) v2 ) 3 ) ( - ( + v3 v2 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["lt-swap-in", "mod-minus-out", "mul-zero", "add-comm", "eqlt-to-not-gt", "add-fact-mul", "lt-swap-out", "lt-to-zero", "mul-comm", "min-mod-const-to-const", "mul-cancel-div", "eqgt-to-not-lt", "sub-to-add", "mul-assoc", "mul-one", "add-assoc", "not-gt-to-eqlt", "Eq-lt-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * ( + 0 v2 ) 4 ) ) ) ( >= ( + ( * v2 4 ) 4 ) ( * ( + ( - ( + 2 0 ) 1 ) v2 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "add-comm", "lt-swap-out", "lt-to-zero", "add-dist-mul", "mul-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 8 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 5 ) ) 8 ) 8 ) ( min ( + ( * v0 8 ) ( - ( * ( / v1 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 5 ) ) )", "end": "0"}, "rules": ["mul-comm", "sub-to-add", "add-denom-div", "add-zero", "div-minus-down", "min-mul-out-pos", "mul-zero", "add-fact-mul", "add-const", "eq-swap", "eq-comm", "mul-assoc", "min-max-max-x", "add-assoc", "min-sub-both", "add-comm"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 4 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 2 ) ( + ( + ( min ( * v1 2 ) 253 ) ( * v2 64 ) ) 10 ) ) ( min ( * v0 2 ) ( + ( + ( min ( * v1 2 ) 253 ) ( * v2 64 ) ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 3 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 3 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -45 ) ( + v2 61 ) ) ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -45 ) ( + v2 61 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ) ( min ( max ( max ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) v2 ) ( + v3 v2 ) ) ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 6 ) ) ( + ( max ( min ( * ( / ( - ( + v2 v0 ) 1 ) 125 ) 8 ) 113 ) -11 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 1 ) v1 ) 1 ) ) ( min ( max ( / ( + v0 3 ) 4 ) v1 ) ( + ( + ( min v2 1 ) v1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -125 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) ) 8 ) ( * v3 2 ) ) ( + ( / ( - -125 ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) ) 8 ) ( * v3 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) ( * v2 125 ) ) ( * ( / v1 4 ) 4 ) ) ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) ( * v2 125 ) ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( min ( + ( * v2 2 ) v3 ) 251 ) 8 ) 4 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( min ( + ( * v2 2 ) v3 ) 251 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 12 ) ) ( min ( + v0 v1 ) ( + v2 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( + ( / v0 250 ) v1 ) 2 ) ( + ( * ( / v0 250 ) 2 ) v2 ) ) ( - ( * ( + ( / v0 250 ) v1 ) 2 ) ( + ( * ( / v0 250 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 15 ) 16 ) 0 ) ( + ( / v2 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * ( / v1 4 ) 4 ) ) 1 ) 16 ) ( / ( - ( - ( / ( + ( + v4 v1 ) 3 ) 4 ) ( / v1 4 ) ) 3 ) 4 ) ) ( / v2 4 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 15 ) 16 ) 0 ) ( + ( / v2 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * ( / v1 4 ) 4 ) ) 1 ) 16 ) ( / ( - ( - ( / ( + ( + v4 v1 ) 3 ) 4 ) ( / v1 4 ) ) 3 ) 4 ) ) ( / v2 4 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 32 ) ) ( + ( / v1 4 ) 31 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 8 ) ) 5 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 8 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 124 ) 0 ) ( * v1 32 ) ) ( + ( max ( min v0 124 ) 0 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 16 ) ( + ( * ( + ( * v1 8 ) v2 ) 2 ) v3 ) ) ( - ( * v0 16 ) ( + ( * ( + ( * v1 8 ) v2 ) 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 2 ) 5 ) ( max ( * v0 2 ) 5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( * v0 8 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 89 ) ) ( + ( min ( / ( - ( + v3 v1 ) 2 ) 4 ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 21 ) ) 68 ) ) ( max ( min ( max ( * v0 8 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 89 ) ) ( + ( min ( / ( - ( + v3 v1 ) 2 ) 4 ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 21 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 32 ) v3 ) ) ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 253 ) 250 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 253 ) 250 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 253 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 253 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 24 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 24 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) 132 ) 8 ) ( * v3 4 ) ) ( - ( / ( + ( % ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 8 ) 132 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - v0 v1 ) 4 ) ( - 0 ( min ( / v1 4 ) 0 ) ) ) ( min ( / ( - v0 v1 ) 4 ) ( - 0 ( min ( / v1 4 ) 0 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 2 ) 2 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "add-comm", "mul-comm", "eq-swap", "Eq-a-b", "sub-to-add"]}, {"expression": {"start": "( == ( max ( min ( / ( - 507 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) v3 ) ( max ( min ( / ( - 507 ( + ( * v0 2 ) v1 ) ) 8 ) ( / ( + ( - v2 v0 ) 7 ) 4 ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( + ( * v0 -4 ) ( + ( * v1 -128 ) v2 ) ) 4 ) ( * ( / ( - ( min ( + ( * ( + ( * v1 32 ) v0 ) 4 ) 4 ) v2 ) 1 ) 4 ) 4 ) ) v3 ) v4 ) ( min ( + ( + ( min ( + ( * v0 -4 ) ( + ( * v1 -128 ) v2 ) ) 4 ) ( * ( / ( - ( min ( + ( * ( + ( * v1 32 ) v0 ) 4 ) 4 ) v2 ) 1 ) 4 ) 4 ) ) v3 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 16 ( * ( max ( min v0 4 ) 3 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-assoc", "sub-to-add", "eq-swap", "add-comm", "mul-comm", "Eq-a-b"]}, {"expression": {"start": "( == ( + ( min ( * v0 12 ) 52 ) ( + v1 v2 ) ) ( + ( min ( * v0 12 ) 52 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 2 ) 491 ) -8 ) ( + ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * ( / v1 4 ) 4 ) ) 3 ) ) ( min ( max ( min ( * v0 2 ) 491 ) -8 ) ( + ( + ( max ( min ( * v0 2 ) 499 ) 0 ) ( * ( / v1 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 224 ) ( + ( * v1 672 ) v2 ) ) 218 ) ( + ( + ( * v0 224 ) ( + ( * v1 672 ) v2 ) ) 218 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 16 ) v1 ) -16 ) ( * v2 4 ) ) ( + ( max ( - ( * v0 16 ) v1 ) -16 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( + ( * ( / v1 4 ) 4 ) ( * v2 63 ) ) ) ( + ( * v0 125 ) ( + ( * ( / v1 4 ) 4 ) ( * v2 63 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 2 ) v2 ) 8 ) ) ( - v0 ( * ( + ( * v1 2 ) v2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 84 ) ( + ( / v1 8 ) ( * v2 4 ) ) ) ( + ( * v0 84 ) ( + ( / v1 8 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 4 ) 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) ( + v2 99 ) ) ( min ( * ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) ( + v2 99 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 32 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) ) ( + 0 ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) 28 ) ) ( + 3 ( + ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) 28 ) ) ) ) ( <= ( / v3 4 ) ( / ( + 0 v3 ) 4 ) ) ) ( >= ( / ( + v3 31 ) 4 ) ( / ( + ( - ( + 32 0 ) 1 ) v3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( == ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v3 32 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v4 16 ) ) 15 ) ) ( * v4 -16 ) ) ) ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( * v3 32 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v4 16 ) ) 15 ) ) ( * v4 -16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 18 ( * ( max v0 5 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-comm", "eq-swap", "Eq-a-b", "mul-assoc", "mul-comm", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 250 4 ) v0 ) 3 ) ( + ( + ( * 250 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( + ( * v0 8 ) v1 ) 25 ) ( + ( + ( * v0 8 ) v1 ) 25 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == v0 ( - ( + v0 3 ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "mul-assoc", "mul-zero", "mul-comm", "add-assoc", "add-dist-mul", "eq-comm", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( - ( * v0 -8 ) ( max ( * v1 36 ) 33 ) ) ( - ( * v0 -8 ) ( max ( * v1 36 ) 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-zero", "add-comm", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( == ( + ( max ( * v0 36 ) 33 ) ( * v1 4 ) ) ( + ( max ( * v0 36 ) 33 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 32 ) v3 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 32 ) v3 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( + ( / ( + v0 v1 ) 8 ) 11 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 507 ) 8 ) ( * v2 12 ) ) ( + ( / ( + v0 v1 ) 8 ) 11 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v1 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + v0 5 ) ( + v0 5 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 252 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 255 ) v2 ) ( min ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 255 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 681 ) 672 ) ) -672 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 681 ) 672 ) ) -672 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 118 ) 63 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 118 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 5 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "sub-to-add", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( * ( + v2 v3 ) 8 ) 5 ) ( - ( + ( * ( + v2 v3 ) 8 ) 0 ) 5 ) ) ) ( >= ( + ( * ( + v2 v3 ) 8 ) 2 ) ( - ( + ( * ( + v2 v3 ) 8 ) ( - ( + 8 0 ) 1 ) ) 5 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + ( min v1 116 ) v2 ) -16 ) 17 ) ) 1 ) )", "end": "1"}, "rules": ["and-min-to-lt", "lt-to-zero", "eqgt-to-not-lt", "min-add-both", "and-comm", "add-comm", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( == ( - ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( min ( + ( * v3 32 ) ( + ( / v1 4 ) ( * v4 64 ) ) ) ( + ( + ( min ( * v4 64 ) 188 ) ( / v1 4 ) ) 32 ) ) 31 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) ( - ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( min ( + ( * v3 32 ) ( + ( / v1 4 ) ( * v4 64 ) ) ) ( + ( + ( min ( * v4 64 ) 188 ) ( / v1 4 ) ) 32 ) ) 31 ) ) ( * v3 32 ) ) ( * v4 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 8 ) 2 ) ( - ( * ( + v0 1 ) 8 ) 5 ) )", "end": "1"}, "rules": ["lt-mul-div-cancel", "lt-mul-pos-cancel", "lt-x-x-sub-a", "add-assoc", "lt-swap-in", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * ( + ( * v1 8 ) v2 ) 4 ) v3 ) 0 ) ( + ( * ( + ( * v1 8 ) v2 ) 4 ) v3 ) ) ) ( >= ( + ( + ( * ( + ( * v1 8 ) v2 ) 4 ) v3 ) 3 ) ( + ( + ( * ( + ( * v1 8 ) v2 ) 4 ) 3 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["Eq-lt-min", "eq-x-x", "lt-to-zero", "eqgt-to-not-lt", "min-x-x", "add-comm", "add-assoc", "add-zero"]}, {"expression": {"start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 8 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap-in", "lt-x-x-sub-a", "add-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( < v0 ( - ( + v0 1 ) 5 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-assoc", "add-assoc", "sub-to-add", "mul-comm", "add-comm", "lt-swap-out", "mul-zero", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 -4 ) 0 ) -28 ) 4 ) 4 ) ( min ( + ( * v0 -4 ) 0 ) -28 ) )", "end": "1"}, "rules": ["min-div-in-pos", "add-zero", "sub-to-add", "mul-cancel-div", "min-mul-in-pos", "mod-consts", "eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * v0 9 ) ) ( - 17 ( * v0 9 ) ) )", "end": "0"}, "rules": ["add-zero", "add-fact-mul", "lt-swap-in", "mul-zero", "mul-comm", "add-comm", "mul-assoc", "gt-to-lt", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -4 ) ) 2 ) v2 ) 16 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -4 ) ) 2 ) v2 ) 16 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) 4 ) ( - ( + ( - ( * v0 2 ) 4 ) ( + ( * ( min v1 61 ) 2 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "add-comm", "eq-mul-x-y-0", "Eq-a-b", "mul-comm", "eq-comm", "sub-to-add", "eq-swap", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( * v0 4 ) 5 ) ( - ( * v0 4 ) 5 ) ) ) ( >= ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= ( + 0 ( - ( * v1 32 ) 17 ) ) ( - ( * ( - ( * v1 8 ) 3 ) 4 ) 5 ) ) ) ( >= ( + 3 ( + ( * v1 32 ) 274 ) ) ( + ( * ( + ( * v1 8 ) 69 ) 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "lt-to-zero", "mul-comm", "add-comm", "mul-assoc", "sub-to-add", "eqgt-to-not-lt", "add-dist-mul"]}, {"expression": {"start": "( >= ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["lt-swap-in", "lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt", "sub-to-add", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - ( * v0 16 ) 36 ) ( - ( + ( - ( * v0 16 ) 36 ) ( + ( * ( min v1 5 ) 16 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-swap", "add-comm", "sub-to-add", "add-fact-mul", "Eq-a-b", "eq-comm", "mul-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( + ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "0"}, "rules": ["min-x-x-plus-a-pos", "Eq-lt-min", "eqgt-to-not-lt", "add-comm", "lt-min-term+cpos", "add-assoc", "eqlt-to-not-gt", "lt-swap-in", "sub-to-add"]}, {"expression": {"start": "( == ( min ( min ( * v0 4 ) ( + ( min ( * ( min v0 500 ) 4 ) 1999 ) 2 ) ) ( + ( min ( * v0 4 ) 1999 ) 1 ) ) ( min ( min ( * v0 4 ) ( + ( min ( * ( min v0 500 ) 4 ) 1999 ) 2 ) ) ( + ( min ( * v0 4 ) 1999 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 1 ) ) ) ( >= ( - ( + v0 263 ) 3 ) ( - ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= ( - ( + ( + ( + ( * ( max v2 10 ) -3 ) 30 ) 3 ) v1 ) 1 ) ( - ( + ( + ( + ( * ( max v2 10 ) -3 ) 30 ) 3 ) v1 ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "min-add-both", "eqgt-to-not-lt", "eqlt-to-not-gt", "and-min-to-lt", "not-gt-to-eqlt", "add-comm", "Eq-lt-min", "min-x-x-plus-a-neg", "sub-to-add", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + ( / v0 16 ) 66 ) ( + ( + 3 ( + ( / v0 16 ) 60 ) ) 3 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + -2 ( + ( * v1 8 ) 1 ) ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + 3 ( + ( * v1 8 ) 8 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["lt-swap", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-fact-mul", "sub-to-add", "lt-swap-in", "mul-comm", "mul-zero", "mul-assoc", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( / v1 4 ) 0 ) 4 ) 0 ) 7 ) ( - ( * ( / v1 4 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + ( / v1 4 ) ( - ( + 35 0 ) 1 ) ) 4 ) 3 ) 7 ) ( + ( * ( / v1 4 ) 4 ) 132 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "0"}, "rules": ["lt-to-zero", "add-assoc", "add-comm", "add-dist-mul", "sub-to-add", "mul-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * v0 668 ) 448 ) v1 ) ( min ( + ( * v0 668 ) 448 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 29 ) v2 ) ( * v3 2 ) ) ( + ( min ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 29 ) v2 ) ( * v3 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 1000 ) ( * v0 1000 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 2 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( - ( / v1 4 ) ( / ( + ( + v2 v1 ) 3 ) 4 ) ) ) ( + ( * v0 32 ) ( - ( / v1 4 ) ( / ( + ( + v2 v1 ) 3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * ( + ( * v0 4 ) v1 ) 8 ) 55 ) ( + ( * v2 63 ) v3 ) ) 7 ) v4 ) ( min ( + ( + ( min ( * ( + ( * v0 4 ) v1 ) 8 ) 55 ) ( + ( * v2 63 ) v3 ) ) 7 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + v1 63 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + v1 63 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( + ( * v0 -8 ) ( + ( * v1 -1000 ) v2 ) ) 4 ) ( * ( / ( - ( min ( + ( * ( + ( * v1 125 ) v0 ) 8 ) 8 ) v2 ) 1 ) 4 ) 4 ) ) v3 ) v4 ) ( min ( + ( + ( min ( + ( * v0 -8 ) ( + ( * v1 -1000 ) v2 ) ) 4 ) ( * ( / ( - ( min ( + ( * ( + ( * v1 125 ) v0 ) 8 ) 8 ) v2 ) 1 ) 4 ) 4 ) ) v3 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 6 ) 4 ) ( / ( + ( % ( + v0 2 ) 4 ) 3 ) 4 ) ) ( + ( / ( + v0 6 ) 4 ) ( / ( + ( % ( + v0 2 ) 4 ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( + ( + v0 v1 ) 503 ) 4 ) 2 ) ( + ( * ( / ( + v0 v1 ) 4 ) 2 ) v2 ) ) ( - ( * ( / ( + ( + v0 v1 ) 503 ) 4 ) 2 ) ( + ( * ( / ( + v0 v1 ) 4 ) 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( * v4 4 ) ) ( / v1 8 ) ) ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 84 ) ) ( * v3 12 ) ) ( * v4 4 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( * v2 32 ) 220 ) v3 ) 31 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( * v2 32 ) 220 ) v3 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 137 ) 126 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 137 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) 16 ) ( + ( + v0 v1 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - v0 ( * v1 126 ) ) 85 ) ( + ( + ( * ( / ( - ( min ( + ( * v1 -126 ) v0 ) 116 ) 82 ) 8 ) 8 ) ( * v1 126 ) ) v2 ) ) ( + ( min ( - v0 ( * v1 126 ) ) 85 ) ( + ( + ( * ( / ( - ( min ( + ( * v1 -126 ) v0 ) 116 ) 82 ) 8 ) 8 ) ( * v1 126 ) ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 8 ) ) ) ( + ( * v0 16 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 500 ) ( / ( + ( % v0 500 ) 499 ) 500 ) ) ( + ( / v0 500 ) ( / ( + ( % v0 500 ) 499 ) 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 64 ) ( + ( * v1 4 ) v2 ) ) ( - ( * v0 64 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - v0 60 ) v1 ) ( * v2 4 ) ) ( + ( min ( - v0 60 ) v1 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( max ( * v0 4 ) -5 ) ( * v1 64 ) ) ( + ( * v2 128 ) v3 ) ) ( + ( + ( max ( * v0 4 ) -5 ) ( * v1 64 ) ) ( + ( * v2 128 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 13 ) v1 ) ( min ( + ( max ( min ( * v0 8 ) 105 ) -19 ) 13 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 5 ) 672 ) ) ( - v0 ( * ( / v1 5 ) 672 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 120 ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) ) ( + ( min ( - v2 ( * v1 32 ) ) 19 ) 12 ) ) ( min ( - 120 ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) ) ( + ( min ( - v2 ( * v1 32 ) ) 19 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / v1 4 ) ) ( - v0 ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) v2 ) ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 672 ) ) ( + ( * v3 336 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 672 ) ) ( + ( * v3 336 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * ( / v0 4 ) 4 ) ( * v1 502 ) ) ( min ( - ( * ( / ( + ( + v2 v0 ) 3 ) 4 ) 4 ) ( * v3 1003 ) ) ( + ( + ( min ( * v1 502 ) 501 ) ( * ( / v0 4 ) 4 ) ) 496 ) ) ) ( - ( + ( * ( / v0 4 ) 4 ) ( * v1 502 ) ) ( min ( - ( * ( / ( + ( + v2 v0 ) 3 ) 4 ) 4 ) ( * v3 1003 ) ) ( + ( + ( min ( * v1 502 ) 501 ) ( * ( / v0 4 ) 4 ) ) 496 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( / ( - ( + ( min v1 5 ) v2 ) 5 ) 4 ) v3 ) ) ( - v0 ( + ( / ( - ( + ( min v1 5 ) v2 ) 5 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) 494 ) ( + ( * v0 504 ) 494 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 16 ) ) ( + ( / v0 4 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 4 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * v0 4 ) 128 ) ( * v0 4 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( max ( - ( - v0 ( * v1 4 ) ) ( * v2 32 ) ) v3 ) ( max ( - ( - v0 ( * v1 4 ) ) ( * v2 32 ) ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 4 ) 273 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) ( * v5 34 ) ) ( * ( / v4 250 ) 64 ) ) -55 ) v0 ) 4 ) 86 ) ) ( min ( max ( max ( - ( * v0 4 ) 273 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) ( * v5 34 ) ) ( * ( / v4 250 ) 64 ) ) -55 ) v0 ) 4 ) 86 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 247 ) 256 ) ( - ( + 0 2 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "and-min-to-lt", "lt-swap-out", "lt-mul-div-cancel", "eqlt-to-not-gt", "max-consts-or"]}, {"expression": {"start": "( == ( + ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) 31 ) ( + ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) v2 ) 31 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + v0 v1 ) 10 ) v2 ) ( min ( + ( + v0 v1 ) 10 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + v0 15 ) 4 ) 4 ) v1 ) ( + ( max ( * ( min ( + ( / v2 4 ) ( * ( / ( min ( + ( * v3 8 ) 7 ) v4 ) 4 ) 4 ) ) ( - v5 3 ) ) 4 ) -15 ) 12 ) ) ( min ( + ( * ( / ( + v0 15 ) 4 ) 4 ) v1 ) ( + ( max ( * ( min ( + ( / v2 4 ) ( * ( / ( min ( + ( * v3 8 ) 7 ) v4 ) 4 ) 4 ) ) ( - v5 3 ) ) 4 ) -15 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) ( - ( max ( min ( + v0 v1 ) 1992 ) -7 ) ( max ( min v1 2009 ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 507 ) 502 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 507 ) 502 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) v2 ) ( + v3 v2 ) ) ( - ( * ( + ( min v4 0 ) ( + ( / v0 4 ) v1 ) ) 4 ) 3 ) ) ( min ( max ( max ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) v2 ) ( + v3 v2 ) ) ( - ( * ( + ( min v4 0 ) ( + ( / v0 4 ) v1 ) ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 34 ) 32 ) ) 32 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 34 ) 32 ) ) 32 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( max ( - -6 ( max ( min ( - ( - ( max ( * v0 4 ) -3 ) ( * v1 500 ) ) ( min ( * ( / v2 4 ) 4 ) 1999 ) ) 496 ) -3 ) ) ( - ( max ( min v3 3 ) -496 ) 6 ) ) ( max ( - -6 ( max ( min ( - ( - ( max ( * v0 4 ) -3 ) ( * v1 500 ) ) ( min ( * ( / v2 4 ) 4 ) 1999 ) ) 496 ) -3 ) ) ( - ( max ( min v3 3 ) -496 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 657 ) ( + ( * ( / v3 5 ) 672 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * ( / v3 5 ) 672 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 657 ) ( + ( * ( / v3 5 ) 672 ) v4 ) ) 8 ) ) ) ( max ( min ( min ( + v0 v1 ) ( + ( + ( min v2 657 ) ( + ( * ( / v3 5 ) 672 ) v4 ) ) 8 ) ) 2000 ) ( min ( max ( max ( - ( + ( * ( / v3 5 ) 672 ) v4 ) 10 ) v1 ) 0 ) ( + ( + ( min v2 657 ) ( + ( * ( / v3 5 ) 672 ) v4 ) ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 9 ( * ( max ( min v0 3 ) 2 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "eq-swap", "eq-comm", "mul-comm", "sub-to-add", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( <= ( + ( * ( + ( * v0 2 ) v1 ) 16 ) 16 ) ( * ( + ( * v0 2 ) v1 ) 16 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 16 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 16 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( - v0 v1 ) 2 ) 52 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "Eq-a-b", "sub-to-add", "mul-comm", "eq-swap"]}, {"expression": {"start": "( == ( * ( / ( * v0 -36 ) 4 ) 4 ) ( * v0 -36 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 264 ) 252 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 264 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) ( - ( - ( min ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 26 ) 4 ) 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) 23 ) ) ( max v2 -22 ) ) 23 ) ) ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) ( - ( - ( min ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 26 ) 4 ) 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) 23 ) ) ( max v2 -22 ) ) 23 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -252 ) 4 ) 4 ) ( * v0 -252 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 8 ) ) ( + ( min v2 8 ) 3 ) ) ( min ( - v0 ( * v1 8 ) ) ( + ( min v2 8 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 127 ) ( - ( + ( - v0 127 ) 128 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "add-comm", "lt-swap-out", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + ( / v1 8 ) ( * v2 16 ) ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + ( / v1 8 ) ( * v2 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / v0 ( / ( + v1 76 ) 64 ) ) 16 ) 2 ) 2 ) ( * ( / v0 ( / ( + v1 76 ) 64 ) ) 16 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * v2 4 ) ) ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 55 ) ( / ( + v0 v1 ) 4 ) ) 257 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 55 ) ( / ( + v0 v1 ) 4 ) ) 257 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) 4 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap-out", "eqgt-to-not-lt", "lt-x-x-sub-a", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( + ( * ( % v0 8 ) 9 ) ( + ( * v1 5 ) v2 ) ) ( + ( * ( % v0 8 ) 9 ) ( + ( * v1 5 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 128 ) ( - v1 128 ) ) v2 ) 8 ) 47 ) 32 ) ( - ( + 0 3 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-const-mod", "lt-mul-div-cancel", "lt-swap-out", "and-min-to-lt", "max-consts-or"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 136 ( - ( + 137 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 47 ) 35 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 47 ) 35 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 250 ) v1 ) v2 ) ( + ( + ( * v0 250 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 3 ) v1 ) 3 ) v2 ) ( + ( * ( + ( * v0 3 ) v1 ) 3 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 1 ) )", "end": "1"}, "rules": ["add-zero", "sub-to-add", "lt-x-x-sub-a", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )", "end": "0"}, "rules": ["sub-to-add", "eq-x-y-0", "Eq-min-c-pos", "min-add-both"]}, {"expression": {"start": "( == ( max ( + ( / ( min ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) v2 ) 4 ) 2 ) v3 ) ( max ( + ( / ( min ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) v2 ) 4 ) 2 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * ( / v0 4 ) 4 ) v1 ) 131 ) ( - ( + ( * ( / v0 4 ) 4 ) ( + v1 1 ) ) 2 ) )", "end": "0"}, "rules": ["add-assoc", "mul-assoc", "mul-comm", "add-fact-mul", "add-comm", "lt-swap-in", "lt-swap-out", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 131 ) ( - ( + v0 ( + v1 1 ) ) 8 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-assoc", "sub-to-add", "mul-comm", "add-const", "mul-one", "mul-zero", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-comm", "add-fact-mul", "eq-x-y-0", "add-const", "mul-zero", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) 0 ) ( / v0 4 ) ) 2 ) ( - ( + 0 ( / v0 4 ) ) 2 ) ) ) ( >= ( - ( + ( + ( * 32 4 ) 3 ) ( + ( / v0 4 ) 132 ) ) 2 ) ( - ( + 3 ( + ( / v0 4 ) 260 ) ) 2 ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 2 ( + ( / v1 4 ) 30 ) ) ( - ( + 33 ( / v1 4 ) ) 1 ) ) ) ( <= ( * v2 16 ) ( + ( * v2 16 ) 0 ) ) ) ( >= ( + ( * v2 16 ) 15 ) ( + ( * v2 16 ) ( - ( + 16 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + v0 999 ) ) ) ( <= ( / v1 8 ) ( / v1 8 ) ) ) ( >= ( / ( + v1 132 ) 8 ) ( / ( + v1 132 ) 8 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( >= ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 4 ) 1 ) )", "end": "0"}, "rules": ["Eq-lt-min", "not-gt-to-eqlt", "add-comm", "lt-min-term+cpos", "min-x-x-plus-a-pos", "eqgt-to-not-lt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( >= ( + ( * v0 4 ) ( + v1 v2 ) ) ( + ( + ( * ( - v0 1 ) 4 ) ( + v1 v2 ) ) 1 ) )", "end": "1"}, "rules": ["mul-comm", "not-gt-to-eqlt", "eq-x-x", "sub-to-add", "Eq-lt-min", "min-x-x-plus-a-neg", "add-dist-mul", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 0 ) ( * ( + ( * v0 2 ) v1 ) 2 ) ) ) ( >= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( min v0 5 ) 10 ) ( - ( + ( - ( min v0 5 ) 10 ) ( - 11 ( min v0 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-fact-mul", "sub-to-add", "eq-x-y-0", "mul-comm", "mul-one", "add-comm", "add-dist-mul", "add-assoc", "min-add-both", "Eq-min-c-pos"]}, {"expression": {"start": "( <= ( + ( * ( max ( - ( + ( max v0 v1 ) ( min ( - v1 v0 ) 0 ) ) v1 ) 0 ) 4 ) 4 ) 1024 )", "end": "1"}, "rules": ["max-to-min", "mul-comm", "add-const", "add-fact-mul", "add-comm", "min-sub-both", "mul-one", "add-assoc", "add-zero", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) 59 ) v1 ) ( min ( + ( * v0 64 ) 59 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 499 ) 500 ) ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 499 ) 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 3 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( max ( max ( max ( - 0 ( / v0 3 ) ) ( + ( / ( - ( max v1 0 ) v0 ) 3 ) 1 ) ) ( / ( + ( - ( max v1 0 ) v0 ) 4 ) 3 ) ) ( / ( - 4 v0 ) 3 ) ) ( / ( + ( - v1 v0 ) 2 ) 3 ) ) 0 ) ( / ( + v2 7 ) 3 ) ) ( min ( max ( max ( max ( max ( max ( - 0 ( / v0 3 ) ) ( + ( / ( - ( max v1 0 ) v0 ) 3 ) 1 ) ) ( / ( + ( - ( max v1 0 ) v0 ) 4 ) 3 ) ) ( / ( - 4 v0 ) 3 ) ) ( / ( + ( - v1 v0 ) 2 ) 3 ) ) 0 ) ( / ( + v2 7 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 32 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 32 ) v3 ) 4 ) ) ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 32 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 32 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 1 ) ( + ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( max ( + ( * v0 2 ) ( - ( max ( min ( / v1 16 ) 126 ) 2 ) ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) ) ) 1 ) 16 ) 40 ) ( * v3 16 ) ) ( + ( min ( * ( max ( + ( * v0 2 ) ( - ( max ( min ( / v1 16 ) 126 ) 2 ) ( max ( min ( / ( + ( + v2 v1 ) 47 ) 16 ) 124 ) 0 ) ) ) 1 ) 16 ) 40 ) ( * v3 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) ( + ( * v3 12 ) 11 ) ) 4 ) ( * v3 -3 ) ) ( + ( / ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) ( + ( * v3 12 ) 11 ) ) 4 ) ( * v3 -3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 167 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 167 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 254 ) 251 ) ( / ( + v0 254 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 29 ) 17 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 29 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v3 120 ) v0 ) 5 ) ) ( min ( max ( max ( - v0 7 ) v1 ) ( + v2 v1 ) ) ( + ( + ( min v3 120 ) v0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2251 ) 252 ) ) ( min ( + ( * v0 252 ) v1 ) ( - ( min ( + v2 v1 ) 2251 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) 7 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) v2 ) 7 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * v1 2 ) v2 ) ) ( - ( * v0 2 ) ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 4 ) ( * v1 128 ) ) 127 ) v2 ) ( min ( + ( + ( / v0 4 ) ( * v1 128 ) ) 127 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( + v1 v2 ) v3 ) ) ( + ( * v0 4 ) ( + ( + v1 v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) ( / v1 4 ) ) 257 ) 256 ) 0 ) ( / ( + v2 266 ) 256 ) ) ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) ( / v1 4 ) ) 257 ) 256 ) 0 ) ( / ( + v2 266 ) 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 250 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 250 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) 45 ) ( * ( max ( min v1 146 ) 22 ) 2 ) ) ( - ( max ( * v0 2 ) 45 ) ( * ( max ( min v1 146 ) 22 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 67 ) ( + ( * v1 125 ) v2 ) ) 58 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 67 ) ( + ( * v1 125 ) v2 ) ) 58 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( min ( + ( * v5 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) ( + ( + ( min ( * v0 64 ) 188 ) ( / v1 4 ) ) 32 ) ) 31 ) ) ( * v5 -32 ) ) ) ) ( + ( * v0 64 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 252 ) ) ( + ( min ( + ( * v5 32 ) ( + ( / v1 4 ) ( * v0 64 ) ) ) ( + ( + ( min ( * v0 64 ) 188 ) ( / v1 4 ) ) 32 ) ) 31 ) ) ( * v5 -32 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -52 ( * ( max ( - v0 ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) ( max ( - -52 ( * ( max ( - v0 ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 250 ) ( * v1 4 ) ) ( + ( / v0 250 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * ( + ( * v0 32 ) v1 ) 4 ) 7 ) v2 ) ( min ( - ( * ( + ( * v0 32 ) v1 ) 4 ) 7 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 3 ) v2 ) ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 3 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 5 ) 16 ) ( / ( + ( % ( + v0 5 ) 16 ) 15 ) 16 ) ) ( + ( / ( + v0 5 ) 16 ) ( / ( + ( % ( + v0 5 ) 16 ) 15 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 128 ) 872 ) v1 ) 128 ) ) ( + ( * v3 128 ) ( + ( * v4 4 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 3 ) ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 256 ) ) ( + ( min ( * v0 4 ) 3 ) ( * ( / ( - ( + v1 v2 ) 1 ) 250 ) 256 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min v1 146 ) 22 ) ) ( - v0 ( max ( min v1 146 ) 22 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) v2 ) ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) ( + v3 11 ) ) 2 ) -1 ) ( min ( * ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) 2 ) 251 ) ) ( - ( max ( * ( min ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) ( + v3 11 ) ) 2 ) -1 ) ( min ( * ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * v2 2 ) ) 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 506 ) 502 ) ( / ( + v0 506 ) 502 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 2001 ) 2 ) ( * v1 128 ) ) ( + ( max ( min v0 2001 ) 2 ) ( * v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 8 ) v1 ) 1 ) v2 ) ( min ( - ( + ( * v0 8 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( min ( / ( + ( min ( - ( + v0 v1 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 16 ) ) ( + ( * v3 16 ) 185 ) ) 19 ) 4 ) ( + ( min ( - ( / ( + v0 v1 ) 4 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 4 ) ) ( + ( * v3 4 ) 47 ) ) 4 ) ) ( - ( / ( + v1 19 ) 4 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 4 ) ) ) -1 ) ( + ( * v3 4 ) 51 ) ) ( min ( max ( max ( min ( / ( + ( min ( - ( + v0 v1 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 16 ) ) ( + ( * v3 16 ) 185 ) ) 19 ) 4 ) ( + ( min ( - ( / ( + v0 v1 ) 4 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 4 ) ) ( + ( * v3 4 ) 47 ) ) 4 ) ) ( - ( / ( + v1 19 ) 4 ) ( * ( max ( min ( * ( / v2 125 ) 8 ) 125 ) 1 ) 4 ) ) ) -1 ) ( + ( * v3 4 ) 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 13 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 4 ) ( + v0 v1 ) ) 4 ) ( + v2 1 ) ) 4 ) ) ( + ( * v3 8 ) v4 ) ) ( + v5 5 ) ) ( + ( min ( max ( - ( / v1 4 ) ( + ( * v3 8 ) v4 ) ) -5 ) ( + v5 1 ) ) 4 ) ) ( max ( min ( - ( min ( / ( + ( + v0 v1 ) 13 ) 4 ) ( + ( min ( / ( min ( + ( * v2 4 ) 4 ) ( + v0 v1 ) ) 4 ) ( + v2 1 ) ) 4 ) ) ( + ( * v3 8 ) v4 ) ) ( + v5 5 ) ) ( + ( min ( max ( - ( / v1 4 ) ( + ( * v3 8 ) v4 ) ) -5 ) ( + v5 1 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( * ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) ( - ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 493 ) -6 ) ( + ( max ( min ( * ( + ( min ( * v0 3 ) 125 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 181 ) 126 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 4 ) 181 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 3 ) v1 ) ( min ( + v0 3 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( max ( * v0 500 ) -18 ) ( * v1 58 ) ) ( + ( * v0 500 ) 442 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) ( + ( min ( + ( max ( * v0 500 ) -18 ) ( * v1 58 ) ) ( + ( * v0 500 ) 442 ) ) ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 10 ( * v0 4 ) ) ( - 5 ( + ( / ( - -128 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 8 ) ) 8 ) ( + ( * v0 4 ) ( * v4 11 ) ) ) ) ) ( min ( - 10 ( * v0 4 ) ) ( - 5 ( + ( / ( - -128 ( % ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) 8 ) ) 8 ) ( + ( * v0 4 ) ( * v4 11 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min ( / ( min ( + v0 v1 ) ( + ( * ( max ( min ( * v2 2 ) 497 ) -2 ) 4 ) 12 ) ) 4 ) ( + ( max ( min ( * v2 2 ) 497 ) -2 ) 3 ) ) ( / ( + v1 3 ) 4 ) ) ( max ( min ( * v2 2 ) 513 ) 14 ) ) -15 ) ( + v3 3 ) ) ( min ( max ( - ( max ( min ( / ( min ( + v0 v1 ) ( + ( * ( max ( min ( * v2 2 ) 497 ) -2 ) 4 ) 12 ) ) 4 ) ( + ( max ( min ( * v2 2 ) 497 ) -2 ) 3 ) ) ( / ( + v1 3 ) 4 ) ) ( max ( min ( * v2 2 ) 513 ) 14 ) ) -15 ) ( + v3 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( min ( - ( / ( + ( + v0 v1 ) 173 ) 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) ( + ( * ( - v4 ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 4 ) ) 8 ) 32 ) ) ( - ( / ( + ( min ( * v4 32 ) ( + ( + v0 v1 ) 45 ) ) 131 ) 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) ) ( + ( * v5 8 ) 33 ) ) ( + ( min ( * v5 8 ) ( + ( max ( - ( / v1 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) -45 ) 11 ) ) 33 ) ) ( max ( min ( min ( min ( - ( / ( + ( + v0 v1 ) 173 ) 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) ( + ( * ( - v4 ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 4 ) ) 8 ) 32 ) ) ( - ( / ( + ( min ( * v4 32 ) ( + ( + v0 v1 ) 45 ) ) 131 ) 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) ) ( + ( * v5 8 ) 33 ) ) ( + ( min ( * v5 8 ) ( + ( max ( - ( / v1 4 ) ( * ( + ( * ( / v2 250 ) 2 ) v3 ) 32 ) ) -45 ) 11 ) ) 33 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) ( + ( * v2 2 ) v3 ) ) ( - ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( / ( + v0 v1 ) 4 ) ( * ( / ( max ( * v2 -12 ) -20 ) 4 ) -4 ) ) 4 ) v3 ) ( min ( - ( + ( / ( + v0 v1 ) 4 ) ( * ( / ( max ( * v2 -12 ) -20 ) 4 ) -4 ) ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 12 ( * ( max ( min v0 3 ) 2 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "eq-swap", "mul-comm", "mul-assoc", "sub-to-add", "Eq-a-b"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 125 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -16 ) 4 ) 4 ) ( * v0 -16 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( * v2 35 ) ) ( * ( / v1 250 ) 64 ) ) ( + ( * v2 -35 ) ( * v3 64 ) ) ) ( min ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( * v2 35 ) ) ( * ( / v1 250 ) 64 ) ) ( + ( * v2 -35 ) ( * v3 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 53 ) ( + v1 v2 ) ) ( min ( + v0 53 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * v0 2 ) ) ( - 999 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-assoc", "mul-assoc", "lt-swap-out", "sub-to-add", "add-fact-mul", "mul-comm", "gt-to-lt", "add-comm", "mul-zero"]}, {"expression": {"start": "( == ( min ( - ( / v0 4 ) ( * v1 16 ) ) v2 ) ( min ( - ( / v0 4 ) ( * v1 16 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / ( + v0 v1 ) 4 ) 21 ) v2 ) ( min ( + ( / ( + v0 v1 ) 4 ) 21 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )", "end": "0"}, "rules": ["lt-swap-in", "eqgt-to-not-lt", "or-comm", "min-consts-or", "lt-mul-pos-cancel", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + 0 ( + ( * v0 16 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( + ( * v2 2 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 2 ) v3 ) 1 ) ( + ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) v3 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ) ) ( >= ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ) ) ( <= v8 v8 ) ) ( >= v8 v8 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ) ) ( <= ( + ( * ( % v3 16 ) 4 ) 0 ) ( + ( * ( % v3 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v3 16 ) 4 ) 3 ) ( + ( * ( % v3 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( * ( min ( + ( max ( min v0 124 ) 0 ) ( * v1 32 ) ) ( + ( max ( min v0 60 ) -64 ) 33 ) ) 2 ) ( min ( * ( + ( max ( min v0 124 ) 0 ) ( * v1 32 ) ) 2 ) 249 ) ) ( * v2 4 ) ) -60 ) 2 ) 128 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-comm", "Eq-a-b", "add-comm", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 33 ( max ( * v0 20 ) 13 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "max-to-min", "mul-one", "eq-comm", "mul-comm", "add-comm", "sub-to-add", "Eq-min-c-neg", "min-add-both", "Eq-a-b", "eq-swap"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 16 ) 15 ) ( * ( + ( * v0 2 ) ( + v1 1 ) ) 16 ) )", "end": "1"}, "rules": ["add-comm", "lt-mul-pos-cancel", "lt-mul-div-cancel", "lt-x-x-sub-a", "sub-to-add", "lt-swap-in", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 495 ) 12 ) ( - ( + 0 ( / ( + ( % v0 4 ) 515 ) 12 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["add-comm", "and-min-to-lt", "eqlt-to-not-gt", "lt-swap-out", "lt-mul-div-cancel", "sub-to-add", "lt-const-mod", "max-consts-or"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["or-comm", "max-consts-or", "eqgt-to-not-lt", "lt-swap-out", "lt-mul-div-cancel", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 8 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )", "end": "0"}, "rules": ["mul-one", "sub-to-add", "add-const", "add-comm", "mul-comm", "lt-swap-in", "mul-zero", "add-assoc", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( min ( / ( + v1 18 ) 16 ) 2 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( min ( / ( + v1 18 ) 16 ) 2 ) 16 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( + v0 1 ) 3 ) )", "end": "0"}, "rules": ["mul-zero", "add-dist-mul", "add-const", "add-comm", "mul-comm", "lt-swap-in", "add-fact-mul", "sub-to-add", "lt-swap"]}, {"expression": {"start": "( <= ( + ( * v0 2 ) 2 ) ( * v0 2 ) )", "end": "1"}, "rules": ["lt-min-term+cpos", "eqlt-to-not-gt", "Eq-lt-min", "min-x-x-plus-a-pos"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 4 ) )", "end": "0"}, "rules": ["mul-one", "sub-to-add", "mul-zero", "add-const", "add-comm", "add-fact-mul", "lt-swap-out", "add-assoc", "mul-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 4 ) 503 ) 4 ) ( - ( + 0 ( / ( + ( % v3 4 ) 511 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "sub-to-add", "lt-swap-out", "eqlt-to-not-gt", "max-consts-or", "and-min-to-lt", "lt-const-mod", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 500 ) v0 ) 0 ) ( + 0 v0 ) ) ) ( >= ( + ( + ( * 1 500 ) v0 ) 499 ) ( + 3 ( + v0 996 ) ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 6 4 ) 3 ) 24 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 243 ) 12 ) ( - ( + 0 ( / ( + ( % v0 4 ) 263 ) 12 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "and-min-to-lt", "max-consts-or", "add-comm", "lt-mul-div-cancel", "sub-to-add", "eqlt-to-not-gt", "lt-const-mod"]}, {"expression": {"start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "sub-to-add", "add-comm", "lt-swap-in", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( >= ( / ( + v0 10 ) 4 ) ( - ( + ( / ( + v0 10 ) 4 ) ( / ( + ( % ( + v0 2 ) 4 ) 3 ) 4 ) ) 1 ) )", "end": "1"}, "rules": ["lt-mul-div-cancel", "add-assoc", "eqgt-to-not-lt", "sub-to-add", "add-fact-mul", "mul-zero", "add-comm", "add-const", "lt-const-mod-false", "mul-one", "lt-swap-out", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( - v1 3 ) ) ( - v1 2 ) ) ) ( >= ( + 3 ( + v1 33 ) ) ( + v1 36 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["min-x-x", "min-sub-both", "eq-x-x", "min-x-x-plus-a-neg", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "sub-to-add", "Eq-lt-min", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 128 ) 130 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 128 ) 130 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( + ( / ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 4 ) 2 ) ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "add-comm", "or-comm", "and-min-to-lt", "sub-to-add", "lt-mul-div-cancel", "lt-swap", "add-zero", "max-consts-or"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 64 ) v1 ) ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 64 ) v1 ) 60 ) ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-zero", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( * ( + ( * v0 64 ) v1 ) 2 ) 3 ) ) ( + ( * ( + ( * v0 64 ) v1 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v0 64 ) v1 ) 2 ) 125 ) ) ( + ( * ( + ( + ( * v0 64 ) v1 ) 63 ) 2 ) 2 ) ) ) ( <= ( + 0 ( * v2 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v2 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 2 ( + ( * v2 2 ) 14 ) ) ( + ( * ( + ( + ( * 1 4 ) v2 ) 3 ) 2 ) 2 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["and-min-to-lt", "Eq-lt-min", "lt-to-zero", "mul-comm", "add-dist-mul", "sub-to-add", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "min-x-x-plus-a-neg"]}, {"expression": {"start": "( >= ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( + ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( max ( * ( % v0 5 ) 7 ) 27 ) 27 ) ) 1 ) )", "end": "1"}, "rules": ["mul-zero", "sub-to-add", "min-mod-const-to-mod", "add-zero", "lt-swap-out", "max-consts-and", "min-mul-in-neg", "min-consts-div-pos", "mul-comm", "min-comm", "not-gt-to-eqlt", "add-comm", "eqgt-to-not-lt", "add-assoc", "min-max-switch", "add-fact-mul", "Eq-lt-min", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( * v2 8 ) ( * v2 8 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( - ( + 8 ( * v2 8 ) ) 1 ) ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-assoc", "add-comm", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( >= ( - ( max ( min v0 5 ) -58 ) 7 ) ( - ( + ( - ( max ( min v0 5 ) -58 ) 7 ) ( - 9 ( max ( min v0 5 ) -58 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "min-consts-or", "mul-zero", "add-fact-mul", "eqgt-to-not-lt", "min-comm", "max-to-min", "mul-comm", "sub-to-add", "add-comm", "max-min-switch", "min-add-both", "add-assoc"]}, {"expression": {"start": "( >= ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - ( + ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - -78 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-consts-or", "lt-swap-out", "mul-comm", "min-comm", "lt-swap-in", "add-const", "max-min-switch", "eqgt-to-not-lt", "add-fact-mul", "sub-to-add", "add-assoc", "mul-zero", "add-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) 252 ) v1 ) ( min ( + ( * v0 252 ) 252 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 16 ) 484 ) ( + v1 v2 ) ) 15 ) v3 ) ( min ( + ( + ( min ( * v0 16 ) 484 ) ( + v1 v2 ) ) 15 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( + ( * v0 2 ) v1 ) 4 ) -7 ) 4 ) v2 ) ( min ( + ( max ( * ( + ( * v0 2 ) v1 ) 4 ) -7 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 4 ) -3 ) 4 ) v1 ) ( min ( + ( max ( * v0 4 ) -3 ) 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 12 ) ) ) ( + ( * v0 4 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 12 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 11 ) ) ( + ( min ( min ( * ( - v5 v1 ) 4 ) ( - ( / ( min ( * v5 16 ) ( + ( + v6 v0 ) 4 ) ) 4 ) ( * v1 4 ) ) ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 4 ) ) 7 ) ) ( max ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 11 ) ) ( + ( min ( min ( * ( - v5 v1 ) 4 ) ( - ( / ( min ( * v5 16 ) ( + ( + v6 v0 ) 4 ) ) 4 ) ( * v1 4 ) ) ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 4 ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * v0 2 ) v1 ) 4 ) ( * ( + ( * v0 2 ) v1 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( + ( * v0 126 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 116 ) ( + ( * v0 126 ) v1 ) ) 8 ) ) ( min ( max ( max ( - ( + ( * v0 126 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 116 ) ( + ( * v0 126 ) v1 ) ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 4 ) -5 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) ( + ( max ( * v0 4 ) -5 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( / ( min ( - ( min ( min ( min ( / ( + ( + v3 v0 ) 19 ) 4 ) v4 ) ( + ( / ( + v3 v0 ) 4 ) 2 ) ) ( / ( + ( + v3 v0 ) 7 ) 4 ) ) ( / v1 4 ) ) ( + v2 3 ) ) 4 ) ) ( max ( min ( max ( / ( + ( - ( / ( + v0 2 ) 4 ) ( / v1 4 ) ) 5 ) 4 ) 0 ) ( / ( + v2 3 ) 4 ) ) ( / ( min ( - ( min ( min ( min ( / ( + ( + v3 v0 ) 19 ) 4 ) v4 ) ( + ( / ( + v3 v0 ) 4 ) 2 ) ) ( / ( + ( + v3 v0 ) 7 ) 4 ) ) ( / v1 4 ) ) ( + v2 3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 35 ) ( + ( min ( * v1 21 ) 104 ) ( + v2 v3 ) ) ) ( + ( min ( * v0 4 ) 35 ) ( + ( min ( * v1 21 ) 104 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( + v0 v1 ) v2 ) 16 ) ( + ( + ( + v0 v1 ) v2 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 11 ) ) ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v2 v3 ) 47 ) 16 ) 124 ) 0 ) ( * v4 2 ) ) ( max ( min ( / v3 16 ) 126 ) 2 ) ) -1 ) 4 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 86 ) ) ( + ( / v0 8 ) ( * v1 86 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 176 ) 72 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 176 ) 72 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 494 ) 72 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 256 ) 494 ) 72 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 16 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 1000 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 1000 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( max ( min v0 -82 ) -89 ) v1 ) v2 ) ( max ( + ( max ( min v0 -82 ) -89 ) v1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 126 ) 24 ) v1 ) ( min ( + ( * v0 126 ) 24 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 8 ) ( + ( - ( * v1 32 ) ( min ( + ( + ( min ( * v1 32 ) 94 ) v2 ) 22 ) ( + ( * v3 -126 ) ( + v4 v2 ) ) ) ) v2 ) ) 14 ) 7 ) ( min ( + ( min ( + v5 22 ) ( + v4 v2 ) ) 7 ) v6 ) ) ( + ( max ( min ( + ( * v0 8 ) ( + ( - ( * v1 32 ) ( min ( + ( + ( min ( * v1 32 ) 94 ) v2 ) 22 ) ( + ( * v3 -126 ) ( + v4 v2 ) ) ) ) v2 ) ) 14 ) 7 ) ( min ( + ( min ( + v5 22 ) ( + v4 v2 ) ) 7 ) v6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( min ( + v0 116 ) ( + ( * v1 -126 ) ( + v2 v0 ) ) ) ( + ( + ( * v3 8 ) v0 ) 85 ) ) ( * v1 126 ) ) ( + ( min ( min ( + v0 116 ) ( + ( * v1 -126 ) ( + v2 v0 ) ) ) ( + ( + ( * v3 8 ) v0 ) 85 ) ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) 4 ) 1903 ) ( * ( / ( + v3 19 ) 4 ) 4 ) ) ( + ( max ( * v4 4 ) -111 ) 16 ) ) ( min ( + ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 4 ) ) 4 ) 1903 ) ( * ( / ( + v3 19 ) 4 ) 4 ) ) ( + ( max ( * v4 4 ) -111 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 62 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + v2 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 4 ) v1 ) 2 ) v2 ) ( min ( + ( + ( * v0 4 ) v1 ) 2 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 24 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 72 ) ) ( + ( + ( * v5 8 ) ( + ( / v1 4 ) ( * v0 24 ) ) ) 7 ) ) ( * v5 -8 ) ) ) ) ( + ( * v0 24 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 72 ) ) ( + ( + ( * v5 8 ) ( + ( / v1 4 ) ( * v0 24 ) ) ) 7 ) ) ( * v5 -8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 4 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 4 ) v1 ) 2 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) 8 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * v0 16 ) 16 ) 16 ) ( * v0 16 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 7 ) ( + v1 v2 ) ) ( + ( min ( * v0 4 ) 7 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 113 ) ( + v0 113 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 16 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 16 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 40 ) ( + v2 v3 ) ) ) ( + ( * v0 8 ) ( + ( * v1 40 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 32 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) v3 ) 4 ) ( + v4 12 ) ) ( min ( * ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) v3 ) 4 ) ( + v4 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( - ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) -125 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( - ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) -125 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == v0 ( - ( + v0 16 ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "mul-zero", "eq-comm", "add-fact-mul", "sub-to-add", "mul-assoc", "add-dist-mul", "mul-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ) ) ( <= ( * ( / v3 4 ) 4 ) ( * ( / v3 4 ) 4 ) ) ) ( >= ( - ( * ( + ( / v3 4 ) v4 ) 4 ) 4 ) ( * ( - ( + ( / v3 4 ) v4 ) 1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["add-dist-mul", "sub-to-add", "lt-to-zero", "mul-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / ( + v0 681 ) 672 ) ( / ( + v0 681 ) 672 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) 89 ) v2 ) ( min ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) 89 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 10 ) ( + ( * v1 5 ) v2 ) ) ( + ( * v0 10 ) ( + ( * v1 5 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 63 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( * v1 3 ) ) ( + ( * ( / v0 4 ) 4 ) ( * v1 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 187 ) 4 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 187 ) 4 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 8 ) v1 ) 5 ) ( - ( + ( * v0 8 ) v1 ) 5 ) ) ) ( >= ( - ( + ( * v0 8 ) v1 ) 5 ) ( - ( + ( * v0 8 ) v1 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 4 ) 0 ) ( + ( * v2 4 ) 0 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 33 ) ( + ( * v1 126 ) v2 ) ) 24 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 33 ) ( + ( * v1 126 ) v2 ) ) 24 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + v2 63 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + v2 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 255 ) 251 ) ( / ( + v0 255 ) 251 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) ( + v2 6 ) ) ( min ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) ( + v2 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min v0 -11 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "sub-to-add", "eq-comm", "eq-swap", "add-comm", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) ( + ( max ( * ( min ( max ( min ( / ( + ( + v2 v3 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v2 v3 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v2 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v2 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v5 12 ) 9 ) ) 2 ) 2 ) ( + ( * v5 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) 2 ) ) ( min ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) ( + ( max ( * ( min ( max ( min ( / ( + ( + v2 v3 ) 299 ) 16 ) 124 ) 0 ) ( + ( + ( max ( min ( / ( + v2 v3 ) 16 ) 126 ) 2 ) ( min ( * ( / ( min ( - ( max ( min ( / ( + ( + v2 v4 ) 299 ) 16 ) 124 ) 0 ) ( max ( min ( / ( + v2 v4 ) 16 ) 126 ) 2 ) ) ( + ( * v5 12 ) 9 ) ) 2 ) 2 ) ( + ( * v5 12 ) 8 ) ) ) 1 ) ) 2 ) -1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 4 ) 8 ) v1 ) ( + ( * ( + ( min v2 0 ) v0 ) 4 ) 4 ) ) ( min ( max ( - ( * v0 4 ) 8 ) v1 ) ( + ( * ( + ( min v2 0 ) v0 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * v0 3 ) 2 ) v1 ) ( min ( - ( * v0 3 ) 2 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2124 ) 125 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2124 ) 125 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 85 ( * v0 8 ) ) ( + ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( * v0 8 ) v3 ) ) 5 ) ) ( min ( - 85 ( * v0 8 ) ) ( + ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( + ( * v0 8 ) v3 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1991 ) -8 ) ( * v1 4 ) ) ( + ( max ( min v0 1991 ) -8 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) v1 ) v2 ) ( - ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) v1 ) v2 ) ) ) ( <= ( + 0 ( - ( + ( min v3 0 ) v4 ) 1 ) ) ( - ( + 0 ( + ( min v3 0 ) v4 ) ) 1 ) ) ) ( >= ( + 3 ( min ( + ( + ( * ( / ( max v3 0 ) 4 ) 4 ) ( + ( min v3 0 ) v4 ) ) 3 ) ( + v3 v4 ) ) ) ( - ( + 3 ( + ( + ( * ( / ( max v3 0 ) 4 ) 4 ) ( + ( min v3 0 ) v4 ) ) 4 ) ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( - ( + ( + ( * v0 8 ) ( + v1 1 ) ) v2 ) 1 ) )", "end": "0"}, "rules": ["lt-to-zero", "add-zero", "sub-to-add", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) ( + ( * v4 4 ) v5 ) ) 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) ( + ( * v4 4 ) v5 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * v0 2 ) ( + v1 1 ) ) 2 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 503 ) 4 ) ( - ( + 0 ( / ( + ( % v0 4 ) 511 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["add-comm", "sub-to-add", "lt-const-mod", "eqlt-to-not-gt", "lt-swap-out", "max-consts-or", "and-min-to-lt", "lt-mul-div-cancel"]}, {"expression": {"start": "( < ( + ( + ( * v0 256 ) v1 ) 244 ) ( - ( + ( * v0 256 ) ( + v1 1 ) ) 172 ) )", "end": "0"}, "rules": ["add-assoc", "add-const", "sub-to-add", "lt-swap-out", "add-fact-mul", "mul-zero", "add-comm", "mul-comm", "lt-swap-in"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 34 ) 32 ) ) -32 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 34 ) 32 ) ) -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( < ( + ( * v0 8 ) 3 ) ( - ( * ( + v0 1 ) 8 ) 4 ) )", "end": "1"}, "rules": ["add-comm", "lt-mul-pos-cancel", "lt-mul-div-cancel", "add-assoc", "sub-to-add", "lt-x-x-sub-a", "lt-swap-in"]}, {"expression": {"start": "( == ( - v0 3 ) ( - ( + ( - v0 3 ) 2 ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-comm", "add-comm", "mul-zero", "mul-assoc", "add-fact-mul", "add-assoc", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) ) ) ( >= ( + ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) 3 ) ( + ( + ( * ( + ( * v5 2 ) v6 ) 4 ) 3 ) v7 ) ) ) ( <= ( * v8 3 ) ( + ( * v8 3 ) 0 ) ) ) ( >= ( + ( * v8 3 ) 2 ) ( + ( * v8 3 ) ( - ( + 3 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["add-assoc", "add-zero", "eq-x-x", "not-gt-to-eqlt", "min-x-x", "add-const", "Eq-lt-min", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 32 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * v0 32 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == v0 ( - ( + v0 2 ) 1 ) )", "end": "0"}, "rules": ["add-dist-mul", "add-fact-mul", "sub-to-add", "eq-x-y-0", "add-assoc", "mul-assoc", "eq-comm", "mul-comm", "mul-zero"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( / ( + ( max v0 0 ) 138 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["min-consts-div-neg", "div-minus-down", "min-sub-both", "eq-comm", "eq-x-y-0", "mul-comm", "sub-to-add", "min-add-both", "div-minus-in", "max-to-min", "Eq-max-c-pos", "min-div-in-pos", "add-comm", "add-dist-mul"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 6 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )", "end": "0"}, "rules": ["add-const", "mul-zero", "lt-swap-in", "add-comm", "mul-one", "sub-to-add", "add-assoc", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "add-zero", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 136 ( * ( % v0 3 ) 46 ) ) ( - ( + 0 46 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-pos-cancel", "eqlt-to-not-gt", "max-consts-or", "min-sub-both", "and-min-to-lt", "mul-assoc", "lt-swap-out", "sub-to-add", "mod-minus-in", "lt-swap", "lt-const-mod"]}, {"expression": {"start": "( <= ( + v0 3 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-in", "sub-to-add", "lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + v1 v2 ) -16 ) 17 ) ) 1 ) )", "end": "1"}, "rules": ["min-comm", "add-comm", "eqgt-to-not-lt", "and-min-to-lt", "lt-to-zero", "add-dist-mul", "lt-swap-out", "lt-swap", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 0 ) 3 ) ( + ( + 0 ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-comm", "eq-x-x", "min-x-x", "Eq-lt-min", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 16 ) v0 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) 12 ) ) ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( <= ( + ( max ( - ( + ( min ( * v0 4 ) 3 ) ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 128 ) ) ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 32 ) v0 ) 4 ) ) ( - ( + ( min ( * v0 4 ) 3 ) ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 8 ) v3 ) 16 ) ) ( * ( + ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 8 ) v3 ) 4 ) v0 ) 4 ) ) ) 19 ) 1024 )", "end": "1"}, "rules": ["mul-comm", "lt-swap-out", "mul-zero", "max-consts-or", "sub-to-add", "and-min-to-lt", "add-fact-mul", "add-comm", "eqlt-to-not-gt", "min-add-both", "add-const"]}, {"expression": {"start": "( >= ( - ( + ( + v0 v1 ) v2 ) 5 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-x-x-sub-a", "sub-to-add", "eqgt-to-not-lt", "lt-swap-out", "lt-swap-in", "add-assoc"]}, {"expression": {"start": "( <= ( + ( max ( - ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 506 ) ) v1 ) ( + ( * v0 4 ) v1 ) ) -506 ) 515 ) 1024 )", "end": "1"}, "rules": ["eq-x-x", "sub-to-add", "max-min-switch", "Eq-lt-min", "max-to-min", "min-comm", "mul-assoc", "min-sub-both", "add-comm", "min-ass", "mul-comm", "mul-one"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ) ) ( <= ( - ( + ( * ( + v4 v5 ) 4 ) 0 ) 7 ) ( - ( * ( + v4 v5 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v4 v5 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v4 v5 ) 4 ) 3 ) 7 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( * v2 8 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) 1 ) 4 ) 3 ) 5 ) ( - ( + 8 ( - ( * v2 8 ) 5 ) ) 1 ) ) ) ( <= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) ) ( >= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "and-comm", "lt-mul-pos-cancel", "add-comm", "eqlt-to-not-gt", "lt-swap", "div-consts-add", "mul-comm", "lt-swap-out", "add-dist-mul", "mul-assoc", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == v0 ( - ( + v0 ( - 33 ( max ( * v1 12 ) 21 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "mul-assoc", "eq-comm", "Eq-min-c-neg", "mul-comm", "add-fact-mul", "sub-to-add", "mul-zero", "add-comm", "eq-swap", "max-to-min", "mul-one", "add-assoc", "min-add-both"]}, {"expression": {"start": "( >= ( - ( + ( min v0 494 ) v1 ) 505 ) ( - ( + ( - ( + ( min v0 494 ) v1 ) 505 ) ( + ( max v0 494 ) 18 ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap", "max-consts-or", "add-comm", "add-fact-mul", "lt-swap-out", "mul-assoc", "add-dist-mul", "sub-to-add", "or-comm", "eqgt-to-not-lt", "mul-comm", "add-assoc", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / v0 16 ) ( + v1 5 ) ) 2 ) ( + -2 v1 ) ) ) ( >= ( + v1 3 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v2 ) 0 ) 60 ) ( - ( - ( + ( + ( * ( max -2 0 ) 4 ) 0 ) v2 ) 2 ) 63 ) ) ) ( >= ( - ( + ( + ( max ( * 2 4 ) -5 ) v2 ) 3 ) 60 ) ( - ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ( - ( - 6 2 ) 1 ) ) 63 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["lt-swap-in", "add-const", "min-mul-in-neg", "add-assoc", "max-to-min", "min-sub-both", "lt-swap-out", "max-consts-or", "min-comm", "mul-comm", "add-dist-mul", "sub-to-add", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( * v0 250 ) ( + ( / v1 4 ) v2 ) ) ( + ( * v0 250 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) v1 ) 2 ) v2 ) 4 ) ( - v0 1 ) ) ( min ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) v1 ) 2 ) v2 ) 4 ) ( - v0 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( * v1 2 ) 499 ) 0 ) ) ( - v0 ( max ( min ( * v1 2 ) 499 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min v0 1999 ) ( * v1 1000 ) ) 1000 ) v2 ) ( min ( + ( + ( min v0 1999 ) ( * v1 1000 ) ) 1000 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 2 ) v2 ) 126 ) ) ( - v0 ( * ( + ( * v1 2 ) v2 ) 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( * v3 128 ) ) ) ( / v2 4 ) ) ( - ( + ( * v0 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( * v3 128 ) ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( - ( * v0 125 ) v1 ) -125 ) ( * v2 16 ) ) ( + ( max ( - ( * v0 125 ) v1 ) -125 ) ( * v2 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 126 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( + ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 15 ) ) ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 16 ) 989 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) ( + ( * v3 4 ) v4 ) ) ) ( + ( min ( * v0 16 ) 989 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) ( + ( * v3 4 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1008 ) 993 ) ( + ( * v0 1008 ) 993 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 12 ) 121 ) ( + v1 v2 ) ) ( + ( min ( * v0 12 ) 121 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( - ( + ( min ( * v2 4 ) 7 ) v3 ) 2 ) ) 2 ) v4 ) ( - ( * ( + ( * v2 4 ) v3 ) 2 ) 10 ) ) ( max ( + ( * ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( - ( + ( min ( * v2 4 ) 7 ) v3 ) 2 ) ) 2 ) v4 ) ( - ( * ( + ( * v2 4 ) v3 ) 2 ) 10 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 262 ) 250 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 262 ) 250 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( / ( + v1 20 ) 8 ) 8 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * ( / ( + v1 20 ) 8 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1744 ) -255 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1744 ) -255 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -63 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 2 ) 4 ) ) 4 ) ( * v3 4 ) ) ( + ( / ( - -63 ( % ( + ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 2 ) 4 ) ) 4 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v2 3 ) v3 ) 2 ) v4 ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v2 3 ) v3 ) 2 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( != ( + ( * v0 8 ) 12 ) 0 )", "end": "1"}, "rules": ["ineq-to-eq", "eq-swap", "Eq-a-b", "mul-comm"]}, {"expression": {"start": "( == ( max ( + ( + ( + v0 v1 ) ( + ( * v2 2 ) v3 ) ) 14 ) ( + ( * v2 2 ) v1 ) ) ( max ( + ( + ( + v0 v1 ) ( + ( * v2 2 ) v3 ) ) 14 ) ( + ( * v2 2 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 63 ) -5 ) ( / v1 16 ) ) ( + ( max ( * v0 63 ) -5 ) ( / v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( + ( / v1 4 ) 64 ) v2 ) ( * v3 128 ) ) 63 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( min ( + ( / v1 4 ) 64 ) v2 ) ( * v3 128 ) ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - 45 ( * v2 16 ) ) ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - 45 ( * v2 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 1031 ) 4 ) ( + v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 1031 ) 4 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * ( min ( + ( * v2 16 ) v3 ) 62 ) 4 ) ( + ( / v1 4 ) ( * v4 252 ) ) ) 3 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * ( min ( + ( * v2 16 ) v3 ) 62 ) 4 ) ( + ( / v1 4 ) ( * v4 252 ) ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 344 ) 335 ) ( / ( + v0 344 ) 335 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + ( * ( - v2 v1 ) 2 ) 52 ) ) ( + ( min ( min ( - ( / ( + ( min ( + ( * v2 8 ) 185 ) ( + v3 v0 ) ) 19 ) 4 ) ( * v1 2 ) ) ( + ( min ( - ( / ( + v3 v0 ) 4 ) ( * v1 2 ) ) ( + ( * ( - v2 v1 ) 2 ) 47 ) ) 4 ) ) ( + ( * ( - v2 v1 ) 2 ) 51 ) ) 1 ) ) ( max ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + ( * ( - v2 v1 ) 2 ) 52 ) ) ( + ( min ( min ( - ( / ( + ( min ( + ( * v2 8 ) 185 ) ( + v3 v0 ) ) 19 ) 4 ) ( * v1 2 ) ) ( + ( min ( - ( / ( + v3 v0 ) 4 ) ( * v1 2 ) ) ( + ( * ( - v2 v1 ) 2 ) 47 ) ) 4 ) ) ( + ( * ( - v2 v1 ) 2 ) 51 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 v1 ) ( - v0 v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 14 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 14 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 32 ) v1 ) ( min ( + v0 32 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1995 ) -4 ) ( * v1 4 ) ) ( + ( max ( min v0 1995 ) -4 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( max ( * v0 16 ) -5 ) ( * v1 8 ) ) ( + ( * v0 16 ) 8 ) ) ( + ( * v2 32 ) ( + ( * v3 64 ) ( + ( min ( * v4 128 ) ( - v5 128 ) ) v6 ) ) ) ) ( + ( min ( + ( max ( * v0 16 ) -5 ) ( * v1 8 ) ) ( + ( * v0 16 ) 8 ) ) ( + ( * v2 32 ) ( + ( * v3 64 ) ( + ( min ( * v4 128 ) ( - v5 128 ) ) v6 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 v1 ) 250 ) 64 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 105 ) ) ( min ( * ( / ( + v0 v1 ) 250 ) 64 ) ( + ( * ( / ( + ( + v0 v1 ) 124 ) 250 ) 64 ) 105 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * v0 2 ) 499 ) 0 ) ( + ( max ( min ( * v0 2 ) 491 ) -8 ) 9 ) ) ( min ( max ( min ( * v0 2 ) 499 ) 0 ) ( + ( max ( min ( * v0 2 ) 491 ) -8 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ) ( * v3 16 ) ) ( - ( - ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) 113 ) 2 ) -23 ) ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 2 ) 251 ) ) ( * v3 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 121 ) -3 ) 4 ) v1 ) ( min ( + ( max ( min v0 121 ) -3 ) 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( >= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( * v0 64 ) ( + ( max ( * v1 500 ) -5 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 436 ) ) ( min ( + ( * v0 64 ) ( + ( max ( * v1 500 ) -5 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 436 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * v0 8 ) 53 ) ( * ( + ( * v0 2 ) v1 ) 4 ) ) ( - ( min ( * v0 8 ) 53 ) ( * ( + ( * v0 2 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * v2 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) ) ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * v2 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v3 64 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( / v1 4 ) ( * v2 8 ) ) ) ( + ( * v0 32 ) ( + ( / v1 4 ) ( * v2 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 252 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 252 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 252 ) ( + v2 v3 ) ) ) ( + ( * v0 4 ) ( + ( * v1 252 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( min ( - v0 3 ) v1 ) 4 ) -7 ) 8 ) v2 ) ( min ( + ( max ( * ( min ( - v0 3 ) v1 ) 4 ) -7 ) 8 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) ( + ( / v1 4 ) ( * v5 64 ) ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( + ( / v1 4 ) 127 ) ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) ( + ( / v1 4 ) ( * v5 64 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 63 ) ) 1 ) ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 63 ) ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * -11 4 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["add-fact-mul", "add-assoc", "mul-zero", "eq-x-y-0", "add-const", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ) ) ( >= ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ) ) ( <= ( - ( + ( + ( * v3 4 ) v4 ) 0 ) 10 ) ( - ( + ( + ( * v3 4 ) v4 ) 0 ) 10 ) ) ) ( >= ( - ( + ( + ( * v3 4 ) v4 ) 3 ) 10 ) ( - ( + ( + ( * v3 4 ) v4 ) ( - ( + 4 0 ) 1 ) ) 10 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + v2 v3 ) ) ( min ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 3 ) v1 ) v2 ) ( + ( + ( * v0 3 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( - v0 ( * v1 1005 ) ) ( - v0 ( * v1 1005 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 64 ) 176 ) 72 ) ) 72 ) 4 ) 4 ) ( * ( % v0 ( / ( + ( * v1 64 ) 176 ) 72 ) ) 72 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( >= ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) 78 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) v2 ) ( - ( * ( + ( min v3 0 ) ( + ( / v0 4 ) v1 ) ) 4 ) 3 ) ) ( min ( max ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) v2 ) ( - ( * ( + ( min v3 0 ) ( + ( / v0 4 ) v1 ) ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 1 ( - ( + 0 ( / ( + ( % ( + ( * v0 500 ) v1 ) 8 ) 763 ) 256 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "eqlt-to-not-gt", "max-consts-or", "lt-swap-out", "sub-to-add", "add-comm", "lt-mul-div-cancel", "lt-const-mod"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + v0 v1 ) ( - v2 1 ) ) 1 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "lt-swap-out", "lt-to-zero", "sub-to-add"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 128 ) ) ( + ( + ( / v0 4 ) ( * v4 64 ) ) 63 ) ) ( * v4 -64 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 128 ) ) ( + ( + ( / v0 4 ) ( * v4 64 ) ) 63 ) ) ( * v4 -64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 128 ) v1 ) ) 3 ) ( - ( + ( * v0 128 ) v1 ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 128 ) v1 ) 124 ) ) 3 ) ( - ( + ( + ( * v0 128 ) 127 ) v1 ) 3 ) ) ) ( <= ( + ( + ( * v2 2 ) v3 ) v4 ) ( + ( + ( * v2 2 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 2 ) v3 ) v4 ) ( + ( + ( * v2 2 ) v3 ) v4 ) ) ) ( <= ( * ( + ( * v5 3 ) v6 ) 8 ) ( + ( * v5 24 ) ( * v6 8 ) ) ) ) ( >= ( + ( * ( + ( * v5 3 ) v6 ) 8 ) 7 ) ( + ( * v5 24 ) ( + ( * v6 8 ) 7 ) ) ) )", "end": "1"}, "rules": ["add-comm", "add-const", "sub-to-add", "eqgt-to-not-lt", "add-assoc", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 2 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 2 ) v1 ) ( + v2 1 ) ) 1 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-comm", "sub-to-add", "add-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 16 ) v1 ) 24 ) ( + -5 ( - ( + ( min v0 16 ) v1 ) 19 ) ) ) ) ( >= ( - ( + ( max v0 16 ) ( + ( min v0 16 ) v1 ) ) 10 ) ( + ( - ( - 6 5 ) 1 ) ( - ( + ( + ( max v0 16 ) 10 ) ( - ( + ( min v0 16 ) v1 ) 19 ) ) 1 ) ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 12 ) ( - ( + ( + ( + ( * 0 4 ) 0 ) v3 ) v2 ) 3 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 12 ) ( - ( + ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 8 ( - ( + 9 0 ) 1 ) ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "lt-swap-out", "and-comm", "lt-x-x-sub-a", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( * v0 2 ) 2 ) ( * ( + v0 1 ) 2 ) )", "end": "1"}, "rules": ["add-dist-mul", "mul-comm", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 139 ) ( + v1 v2 ) ) ( + ( min ( * v0 4 ) 139 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 1 ( - ( + 0 ( / ( + ( % v0 4 ) 47 ) 16 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "lt-swap-out", "add-comm", "eqlt-to-not-gt", "max-consts-or", "sub-to-add", "lt-const-mod", "and-min-to-lt"]}, {"expression": {"start": "( == ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( * ( / v1 250 ) 8 ) ) ( - ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + v0 4 ) ( min ( max ( / v1 8 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) )", "end": "0"}, "rules": ["mul-assoc", "and-min-to-lt", "min-comm", "add-comm", "lt-swap-in", "min-sub-both", "lt-swap-out", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + -5 v0 ) 0 ) 3 ) ( + ( + 0 v0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + 3 v0 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "min-x-x", "lt-swap", "add-dist-mul", "eq-x-x", "not-gt-to-eqlt", "min-x-x-plus-a-neg", "add-comm", "add-assoc", "Eq-lt-min"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 65 ) v1 ) v2 ) 11 ) ( - ( + ( + ( * v0 65 ) v1 ) ( + v2 1 ) ) 14 ) )", "end": "0"}, "rules": ["mul-assoc", "mul-zero", "lt-swap-in", "lt-swap-out", "mul-comm", "add-comm", "sub-to-add", "add-fact-mul", "add-assoc"]}, {"expression": {"start": "( >= ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( + ( * 0 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["not-gt-to-eqlt", "lt-min-term+cpos", "Eq-lt-min", "sub-to-add", "add-assoc", "min-x-x-plus-a-pos", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 3 ) ( min ( max ( * ( + v0 1 ) 4 ) ( - ( * ( / v1 4 ) 4 ) 7 ) ) ( - ( * ( + v0 1 ) 4 ) 7 ) ) )", "end": "0"}, "rules": ["add-assoc", "add-dist-mul", "min-sub-both", "min-comm", "and-min-to-lt", "lt-swap-in", "mul-one", "mul-comm", "min-min-div-neg", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( + ( min ( * v0 21 ) 104 ) v1 ) v2 ) 21 ) ( - ( + ( + ( min ( * v0 21 ) 104 ) v1 ) ( + v2 1 ) ) 5 ) )", "end": "0"}, "rules": ["add-fact-mul", "lt-swap", "mul-assoc", "mul-zero", "mul-one", "add-comm", "lt-swap-in", "sub-to-add", "mul-comm", "add-assoc", "and-eqlt-to-min"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( - v1 3 ) ) ( - v1 2 ) ) ) ( >= ( + 3 ( + v1 33 ) ) ( + v1 36 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["and-min-to-lt", "lt-to-zero", "min-x-x-plus-a-neg", "lt-swap-in", "add-comm", "eqgt-to-not-lt", "min-sub-both", "sub-to-add", "Eq-lt-min", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( <= ( + ( max ( - ( * ( max ( + ( max ( / v0 250 ) v1 ) ( min ( - v1 ( / v0 250 ) ) 0 ) ) v1 ) 8 ) ( min ( max ( * v1 8 ) ( - ( * ( / v0 250 ) 8 ) 5 ) ) ( - ( * v1 8 ) 5 ) ) ) 5 ) 8 ) 1024 )", "end": "1"}, "rules": ["min-min-div-pos", "add-zero", "min-sub-both", "add-fact-mul", "min-ass", "sub-to-add", "max-to-min", "mul-assoc", "min-comm", "min-mul-in-neg", "mul-zero", "min-max", "add-comm", "mul-comm"]}, {"expression": {"start": "( < ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 4 ) ( - ( + ( min ( * ( + ( * v0 2 ) ( + v1 1 ) ) 4 ) ( + ( + ( max ( * ( + v1 1 ) 4 ) -6 ) ( * v0 8 ) ) 6 ) ) v2 ) 5 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "mul-assoc", "add-fact-mul", "lt-swap", "sub-to-add", "add-dist-mul", "mul-zero", "mul-comm", "lt-swap-out", "and-min-to-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) 4 ) ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 15 ) 4 ) ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) 4 ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "mul-comm", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "add-assoc", "add-dist-mul"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 2 ) v3 ) 8 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * ( + ( * v2 2 ) v3 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 1007 ) 8 ) ( + v2 62 ) ) ( min ( / ( + ( + v0 v1 ) 1007 ) 8 ) ( + v2 62 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) 0 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ) ( - ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) -999 ) ( + ( max ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2999 ) 1000 ) ) 0 ) ( * ( + ( * v3 2 ) v4 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + v1 1000 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + v1 1000 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 64 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 64 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) ( + ( min ( * v0 2 ) 253 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( + v2 3 ) ) ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + v2 31 ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + v2 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2008 ) 9 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2008 ) 9 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( - ( * v0 126 ) v1 ) 14 ) -111 ) 16 ) ( - ( max ( min ( - ( * v0 126 ) v1 ) 14 ) -111 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( + ( * v1 4 ) v2 ) ) ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 4 ) ) ) ( + ( * v0 2 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 28 ) v2 ) ) ( + ( + ( min ( * v1 28 ) 109 ) v2 ) 24 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 28 ) v2 ) ) ( + ( + ( min ( * v1 28 ) 109 ) v2 ) 24 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) v2 ) ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( / v0 4 ) ( + ( * ( / ( + ( min ( + ( * v1 -252 ) v2 ) 251 ) 10 ) 68 ) 68 ) ( * v1 252 ) ) ) ( + ( min v3 -7 ) ( * ( min ( / ( + ( min v3 251 ) 10 ) 4 ) 16 ) 4 ) ) ) ( + ( + ( / v0 4 ) ( + ( * ( / ( + ( min ( + ( * v1 -252 ) v2 ) 251 ) 10 ) 68 ) 68 ) ( * v1 252 ) ) ) ( + ( min v3 -7 ) ( * ( min ( / ( + ( min v3 251 ) 10 ) 4 ) 16 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 32 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 4 v0 ) ( - 253 v0 ) )", "end": "0"}, "rules": ["mul-comm", "lt-swap-in", "gt-to-lt", "mul-zero", "mul-assoc", "add-fact-mul", "add-assoc", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min v2 5 ) v0 ) 16 ) 12 ) ) ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min v2 5 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( * ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 63 ) ) 4 ) -3 ) ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 4 ) 1999 ) ) ( * v3 126 ) ) ( - ( - ( max ( * ( min ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 63 ) ) 4 ) -3 ) ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) 4 ) 1999 ) ) ( * v3 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * v0 8 ) ( + ( * v1 8 ) 5 ) ) ( max ( * v0 8 ) ( + ( * v1 8 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 140 ) 126 ) ( / ( + v0 140 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 500 ) 500 ) v1 ) ( min ( + ( * v0 500 ) 500 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 -32 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 64 ) ) ) ( / v2 8 ) ) ( - ( + ( * v0 -32 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 64 ) ) ) ( / v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 68 ) 63 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 68 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 251 ) ) ( - v0 ( * v1 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max v0 0 ) ( * v1 32 ) ) ( + ( max v0 0 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( * v3 4 ) ) ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1971 ) -28 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1971 ) -28 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( * v0 4 ) ( max ( * ( + ( * v1 3 ) v0 ) 4 ) 29 ) ) ( - 0 ( * v1 12 ) ) ) ( * v0 4 ) ) ( - ( min ( - ( * v0 4 ) ( max ( * ( + ( * v1 3 ) v0 ) 4 ) 29 ) ) ( - 0 ( * v1 12 ) ) ) ( * v0 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 13 ) ( + ( * v1 16 ) ( + v2 v3 ) ) ) ( + ( * v0 13 ) ( + ( * v1 16 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( + ( / ( + v0 v1 ) 8 ) ( * v2 12 ) ) 11 ) ) ( min ( / ( + ( + v0 v1 ) 507 ) 8 ) ( + ( + ( / ( + v0 v1 ) 8 ) ( * v2 12 ) ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( max ( min ( * v0 2 ) 509 ) 10 ) 4 ) ( + ( + ( * v1 4 ) v2 ) 52 ) ) ( max ( * ( max ( min ( * v0 2 ) 509 ) 10 ) 4 ) ( + ( + ( * v1 4 ) v2 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( + ( * ( / v1 250 ) 8 ) 10 ) ) -8 ) ( + ( * ( / v1 250 ) 64 ) ( * v3 31 ) ) ) ( + ( * ( min ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 8 ) ( * ( / v2 5 ) 23 ) ) ( + ( * ( / v1 250 ) 8 ) 10 ) ) -8 ) ( + ( * ( / v1 250 ) 64 ) ( * v3 31 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( max ( min v0 1 ) 0 ) 9 ) ( * v1 4 ) ) ( + ( * ( max ( min v0 1 ) 0 ) 9 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 3 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 3 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * v2 17 ) v3 ) ) ( - ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 64 ) ( + ( * v2 17 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 2 ) 499 ) 0 ) v1 ) ( + ( max ( min ( * v0 2 ) 499 ) 0 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( + ( min ( * v0 2 ) 123 ) v1 ) v2 ) 1 ) ( + ( + ( min ( * v0 2 ) 123 ) v1 ) ( + v2 1 ) ) )", "end": "0"}, "rules": ["lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 7 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 180 ) 167 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 180 ) 167 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 8 ) 8 ) 8 ) ( * v0 8 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -8 ) 2 ) 2 ) ( * v0 -8 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( * v0 3 ) ( - ( + ( * v0 3 ) 3 ) 1 ) )", "end": "0"}, "rules": ["add-const", "sub-to-add", "mul-comm", "add-fact-mul", "mul-zero", "add-assoc", "eq-x-y-0"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 8 ) ( + ( * v1 64 ) v2 ) ) 7 ) v3 ) ( min ( + ( + ( * v0 8 ) ( + ( * v1 64 ) v2 ) ) 7 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 12 ) 4 ) 4 ) ( * v0 12 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( == ( min ( + v0 251 ) v1 ) ( min ( + v0 251 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + v0 v1 ) 5 ) v2 ) ( min ( + ( + v0 v1 ) 5 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 32 ) ( * v2 125 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 32 ) ( * v2 125 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 4 ) ) 3 ) ) ( max ( + ( * v2 4 ) ( - ( / v1 4 ) ( / ( + ( + v0 v1 ) 3 ) 4 ) ) ) 0 ) ) ( - ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 4 ) ) 3 ) ) ( max ( + ( * v2 4 ) ( - ( / v1 4 ) ( / ( + ( + v0 v1 ) 3 ) 4 ) ) ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * ( min ( + ( * v0 64 ) ( - ( + ( * v1 64 ) ( / v2 8 ) ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 2 ) ( * ( * v4 32 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * ( min ( + ( * v0 64 ) ( - ( + ( * v1 64 ) ( / v2 8 ) ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 2 ) ( * ( * v4 32 ) 2 ) ) 499 ) 0 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-cancel-mul"]}, {"expression": {"start": "( == ( min ( + v0 3 ) ( + ( * v1 32 ) v2 ) ) ( min ( + v0 3 ) ( + ( * v1 32 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( + ( + v1 1 ) ( * ( / v2 250 ) 2 ) ) 4 ) ) ( + ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 4 ) ) -32 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( + ( + v1 1 ) ( * ( / v2 250 ) 2 ) ) 4 ) ) ( + ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 4 ) ) -32 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( > ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )", "end": "0"}, "rules": ["and-comm", "min-add-both", "gt-to-lt", "sub-to-add", "and-min-to-lt"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( - ( max ( * v0 4 ) 3 ) 2 ) ) ( min ( * v0 4 ) ( - ( max ( * v0 4 ) 3 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( * ( + ( * v1 63 ) v2 ) 4 ) 246 ) ) ( min ( * v0 4 ) ( + ( * ( + ( * v1 63 ) v2 ) 4 ) 246 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 4 ) 507 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["lt-const-mod", "lt-swap-out", "add-comm", "eqgt-to-not-lt", "sub-to-add", "lt-mul-div-cancel"]}, {"expression": {"start": "( == ( min ( max ( * v0 8 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 89 ) ) ( min ( max ( * v0 8 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( min v2 -2 ) v0 ) 8 ) 89 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 45 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 45 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 19 ( max ( * v0 4 ) 15 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "mul-comm", "eq-comm", "max-to-min", "sub-to-add", "mul-one", "min-add-both", "add-comm", "Eq-min-c-neg", "mul-assoc", "Eq-a-b"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * ( max ( min ( * v2 2 ) 495 ) -4 ) 4 ) 16 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * ( max ( min ( * v2 2 ) 495 ) -4 ) 4 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )", "end": "0"}, "rules": ["min-comm", "gt-to-lt", "min-add-both", "and-min-to-lt", "sub-to-add"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) -11 ) -13 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-a-b", "mul-comm", "sub-to-add", "eq-swap", "add-comm"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 168 ) ) ( * v3 12 ) ) ( + ( / v1 4 ) 11 ) ) ( + ( / v1 4 ) ( * v4 4 ) ) ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 168 ) ) ( * v3 12 ) ) ( + ( / v1 4 ) 11 ) ) ( + ( / v1 4 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( > ( - 1 ( max v0 1 ) ) 2 )", "end": "0"}, "rules": ["mul-comm", "min-consts-div-neg", "and-comm", "and-min-to-lt", "max-to-min", "add-comm", "min-add-both", "sub-to-add", "gt-to-lt"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( * v3 1000 ) v0 ) 121 ) ) ( + ( * v4 4 ) ( + ( * v3 1000 ) v0 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( + ( * v3 1000 ) v0 ) 121 ) ) ( + ( * v4 4 ) ( + ( * v3 1000 ) v0 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 18 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 18 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 64 ) ( - v1 64 ) ) v2 ) 4 ) 55 ) 16 ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "and-min-to-lt", "lt-swap-out", "max-consts-or", "lt-const-mod", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 32 ) 93 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) 19 ) 16 ) ( - ( + 0 ( / ( + ( % ( + ( min ( * v0 32 ) 93 ) v4 ) 4 ) 47 ) 16 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "max-consts-or", "sub-to-add", "add-comm", "lt-swap-out", "eqlt-to-not-gt", "lt-const-mod", "lt-mul-div-cancel"]}, {"expression": {"start": "( == ( + ( max ( min v0 125 ) 1 ) ( * v1 2 ) ) ( + ( max ( min v0 125 ) 1 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -504 ) 4 ) 4 ) ( * v0 -504 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "mul-comm", "div-consts-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 32 ) 0 ) ( + ( * v4 32 ) 0 ) ) ) ( >= ( + ( * v4 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v4 32 ) ( - ( + 32 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-assoc", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) 0 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) v1 ) 31 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - v0 68 ) 0 ) 63 ) ( + ( max -68 -5 ) v0 ) ) ) ( >= ( + ( + ( + v0 1 ) 3 ) 63 ) ( + 1 ( + v0 63 ) ) ) ) ( <= ( + ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) 1 ) ( + v3 ( + ( min ( * v1 2 ) 123 ) v2 ) ) ) ) ( >= ( + ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) 1 ) ( + v3 ( - ( + 2 ( + ( min ( * v1 2 ) 123 ) v2 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "and-comm", "lt-swap-out", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + ( + ( min ( * 0 8 ) 14 ) 0 ) v0 ) 8 ) ) ) ( >= ( / ( + v0 21 ) 8 ) ( / ( + ( + ( min ( * ( - ( + 3 0 ) 1 ) 8 ) 14 ) ( - ( + 8 0 ) 1 ) ) v0 ) 8 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( + ( * v1 2 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 1 ) ( + ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) v2 ) ) ) ( <= 0 ( + ( min ( * 0 4 ) 133 ) 0 ) ) ) ( >= 139 ( + ( min ( * ( - ( + 35 0 ) 1 ) 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 4 ) v1 ) 4 ) ( + 0 ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ) ( >= ( - ( + v0 v1 ) 1 ) ( + ( - ( + 4 0 ) 1 ) ( - ( + v0 v1 ) 4 ) ) ) ) ( <= ( + 0 ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) 4 ) ) ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "add-zero", "sub-to-add", "eqlt-to-not-gt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 127 ( max ( * v0 8 ) 119 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "Eq-min-c-neg", "sub-to-add", "eq-comm", "mul-assoc", "min-mul-in-pos", "eq-swap", "add-comm", "mul-comm", "max-to-min", "min-add-both"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 17 ) ( - ( + ( - ( * v0 4 ) 17 ) ( + ( * ( min v1 31 ) 4 ) 24 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "add-assoc", "Eq-a-b", "sub-to-add", "add-comm", "eq-comm", "eq-swap", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * v2 2 ) v3 ) ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * v2 2 ) ( + v3 1 ) ) ) 5 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc", "add-comm", "sub-to-add"]}, {"expression": {"start": "( >= ( * ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-assoc", "add-comm", "add-assoc", "mul-comm", "eqgt-to-not-lt", "add-fact-mul", "mul-zero", "sub-to-add"]}, {"expression": {"start": "( >= ( * ( + v0 v1 ) 2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 2 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-comm", "add-comm", "add-dist-mul", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( - ( / v0 8 ) 5 ) ( / ( + ( % v0 8 ) 180 ) 8 ) ) ( - ( / v0 8 ) 5 ) )", "end": "0"}, "rules": ["mul-zero", "lt-mul-div-cancel", "mul-comm", "add-comm", "mul-assoc", "lt-swap-out", "sub-to-add", "lt-swap-in", "lt-const-mod", "add-fact-mul", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 3 ) ( - ( + v0 v1 ) 3 ) ) ) ( >= ( - ( + v0 v1 ) 3 ) ( - ( + v0 v1 ) 3 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v2 12 ) v3 ) ) 0 ) 1 ) ( - ( + ( * v2 12 ) v3 ) 1 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( + ( * v2 12 ) v3 ) 8 ) ) 3 ) 1 ) ( - ( + ( + ( * v2 12 ) v3 ) 11 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( * v0 4 ) ( - ( + ( * v0 4 ) 12 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "lt-x-x-sub-a", "sub-to-add", "add-assoc", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 63 ) v1 ) v2 ) 2 ) ( - ( + ( + ( * v0 63 ) v1 ) v2 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 63 ) v1 ) v2 ) ( - ( - 11 2 ) 1 ) ) ( + ( + ( + ( * v0 63 ) v1 ) v2 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v3 12 ) v4 ) ) 0 ) ( + 0 ( + ( * v3 12 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v5 4 ) ( + ( * v3 12 ) v4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v5 4 ) ( + ( * v3 12 ) v4 ) ) ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) 15 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "mul-assoc", "add-assoc", "add-dist-mul", "mul-comm", "add-zero", "add-comm"]}, {"expression": {"start": "( == ( / ( + v0 67 ) 64 ) ( / ( + v0 67 ) 64 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( * v1 44 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 44 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 1 ) ) v3 ) ( + ( min ( - ( - ( / ( + ( + v4 v5 ) 31 ) 4 ) ( * v6 32 ) ) ( / v5 4 ) ) 29 ) 4 ) ) ( min ( - ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 1 ) ) v3 ) ( + ( min ( - ( - ( / ( + ( + v4 v5 ) 31 ) 4 ) ( * v6 32 ) ) ( / v5 4 ) ) 29 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 128 ) ) ( * v3 4 ) ) ( - ( - ( + v0 v1 ) ( * v2 128 ) ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) 4 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( max ( min ( + v2 v3 ) 2000 ) 1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( - ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) ( max ( min ( * ( / ( + ( + v1 v2 ) 124 ) 125 ) 8 ) 113 ) -11 ) ) ) ( + ( * v0 4 ) ( - ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) ( max ( min ( * ( / ( + ( + v1 v2 ) 124 ) 125 ) 8 ) 113 ) -11 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 499 ) 500 ) ( / ( + v0 499 ) 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( * v1 2 ) v2 ) ) ( - v0 ( + ( * v1 2 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2127 ) 128 ) ) ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2127 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 126 ) v2 ) 4 ) ) ( - v0 ( * ( + ( * v1 126 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) ( + ( * ( / v0 4 ) 63 ) ( * ( max ( min ( / v1 16 ) 126 ) 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( min ( + v0 v1 ) 1999 ) v2 ) 0 ) ( + ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) v3 ) 3 ) ) ( min ( max ( max ( min ( + v0 v1 ) 1999 ) v2 ) 0 ) ( + ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) v3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( * v0 2 ) 253 ) v3 ) 8 ) 12 ) ) ( min ( max ( max ( - ( * ( min ( * v0 2 ) 253 ) 8 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( * v0 2 ) 253 ) v3 ) 8 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 35 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 35 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( min ( - v0 ( * v1 128 ) ) v2 ) 128 ) 18 ) 4 ) ( + ( max v3 -1 ) 1 ) ) ( max ( / ( + ( min ( min ( - v0 ( * v1 128 ) ) v2 ) 128 ) 18 ) 4 ) ( + ( max v3 -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 47 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 47 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 64 ) ) ) ) ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 64 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 125 ) 1499 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "mod-minus-in", "lt-const-mod-false", "lt-swap", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( / v0 250 ) ( * ( / v1 8 ) 4 ) ) ( + ( / v0 250 ) ( * ( / v1 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 16 ) ) ( + ( * v3 4 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 16 ) ) ( + ( * v3 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( / v1 4 ) ( * v2 24 ) ) ) ( - v0 ( + ( / v1 4 ) ( * v2 24 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 133 ) 128 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 133 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 126 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 126 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 254 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / v2 250 ) ) 16 ) 4 ) ) 17 ) ) ( + ( * v4 16 ) 22 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -18 ) ( + ( * v4 16 ) 5 ) ) 17 ) ) ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 254 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / v2 250 ) ) 16 ) 4 ) ) 17 ) ) ( + ( * v4 16 ) 22 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -18 ) ( + ( * v4 16 ) 5 ) ) 17 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( * v3 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( * v3 32 ) ) ( + ( / v1 8 ) 31 ) ) ( + ( / v1 8 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v0 ) ( + ( - ( + 16 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( min ( * v3 4 ) 133 ) 0 ) ( + ( min ( * v3 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 133 ) 3 ) ( + ( min ( * v3 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 2 ) v1 ) 4 ) ) ( - v0 ( * ( + ( * ( + ( / ( - v0 19 ) 8 ) ( / ( + ( % ( + v0 5 ) 8 ) 22 ) 8 ) ) 2 ) v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 32 ) ( + ( * v1 500 ) v2 ) ) 32 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 32 ) ( + ( * v1 500 ) v2 ) ) 32 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( / v0 4 ) ) ( - 499 ( / v0 4 ) ) )", "end": "0"}, "rules": ["mul-zero", "lt-swap-in", "gt-to-lt", "add-const", "add-zero", "add-comm", "mul-comm", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( / v1 250 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( / v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 35 ( * ( max ( min v0 5 ) 4 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "sub-to-add", "eq-swap", "Eq-a-b", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( max ( - -1 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - ( * ( + ( * v0 2 ) v1 ) 2 ) 1999 ) ) ( max ( - -1 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - ( * ( + ( * v0 2 ) v1 ) 2 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) ( + ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v3 125 ) 8 ) 125 ) 1 ) ( * v4 16 ) ) 3 ) ) 2 ) 22 ) ) ( min ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) ( + ( * ( min ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v3 125 ) 8 ) 125 ) 1 ) ( * v4 16 ) ) 3 ) ) 2 ) 22 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 32 ) 95 ) ( + ( min ( + ( + ( * v1 253 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + ( min ( + ( * v2 500 ) 500 ) v4 ) v3 ) ) ( min ( * v5 127 ) 126 ) ) ) ( + ( min ( * v0 32 ) 95 ) ( + ( min ( + ( + ( * v1 253 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + ( min ( + ( * v2 500 ) 500 ) v4 ) v3 ) ) ( min ( * v5 127 ) 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2012 ) 13 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2012 ) 13 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 29 ) 22 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 29 ) 22 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( * v1 252 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 252 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 252 ) ( + ( * ( / ( + ( min ( min ( + ( * v0 -252 ) v1 ) ( + ( * v2 16 ) 1 ) ) 242 ) 21 ) 4 ) 4 ) v3 ) ) ( + ( * v0 252 ) ( + ( * ( / ( + ( min ( min ( + ( * v0 -252 ) v1 ) ( + ( * v2 16 ) 1 ) ) 242 ) 21 ) 4 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * v2 4 ) ) ) ( >= ( * v2 4 ) ( * v2 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ( + v2 25 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ( + v2 25 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * v0 4 ) v1 ) 4 ) ( * ( + ( * v0 4 ) v1 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 64 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 124 ( * v0 63 ) ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( + ( * v0 63 ) v3 ) ) ) ( min ( - 124 ( * v0 63 ) ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( + ( * v0 63 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) ( + ( min ( * v0 2 ) 251 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / v0 16 ) 2 ) ( + ( + ( / v0 16 ) v1 ) 9 ) ) ( min ( max ( / v0 16 ) 2 ) ( + ( + ( / v0 16 ) v1 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( > ( - 2 v0 ) ( - 126 v0 ) )", "end": "0"}, "rules": ["mul-comm", "add-const", "add-comm", "lt-swap-out", "mul-zero", "add-assoc", "gt-to-lt", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) -23 ) ( * ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) 2 ) ) ( - ( max ( * v0 2 ) -23 ) ( * ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 8 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 19 ) 17 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 19 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 131 ) 126 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 131 ) 126 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 4 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 223 ) 444 ) v1 ) v2 ) ( + ( + ( min ( * v0 223 ) 444 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( + ( * v0 8 ) 16 ) ( + ( * v0 8 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v3 ) ( + ( - ( + 16 0 ) 1 ) v3 ) ) ) ( <= ( + ( + ( * v4 8 ) v5 ) v6 ) ( + ( + ( * v4 8 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 8 ) v5 ) v6 ) ( + ( + ( * v4 8 ) v5 ) v6 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) 0 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) ) ( >= ( + ( + ( * 1 4 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) 3 ) ( + ( min ( * v1 24 ) 113 ) ( + ( * v2 8 ) 7 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( max ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) v2 ) 1 ) -1 ) 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "Eq-a-b", "eq-swap", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 250 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) 250 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 250 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( - v0 ( max ( min v1 1999 ) 0 ) ) ( - v0 ( max ( min v1 1999 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 419 ) 96 ) ( - ( + 0 6 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "max-consts-or", "and-min-to-lt", "lt-const-mod", "lt-mul-div-cancel"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 250 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 32 ) 468 ) 4 ) 4 ) ( min ( * v0 32 ) 468 ) )", "end": "1"}, "rules": ["min-mul-in-pos", "mul-comm", "eq-x-x", "div-consts-mul", "mul-assoc", "min-div-in-pos"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 13 13 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ) ) ( >= ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ) ) ( <= ( + v4 0 ) ( + 0 v4 ) ) ) ( >= ( + v4 3 ) ( + ( - ( + 4 0 ) 1 ) v4 ) ) ) ( <= ( + ( min ( * v5 35 ) 102 ) v6 ) ( + ( min ( * v5 35 ) 102 ) v6 ) ) ) ( >= ( + ( min ( * v5 35 ) 102 ) v6 ) ( + ( min ( * v5 35 ) 102 ) v6 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 2 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "lt-swap-out", "add-assoc", "add-comm", "lt-x-x-sub-a"]}, {"expression": {"start": "( >= ( - v0 17 ) ( - ( + ( - v0 17 ) ( + ( min ( + ( * ( + ( / v1 4 ) v2 ) 4 ) ( - v3 ( * ( / v1 4 ) 4 ) ) ) -21 ) 22 ) ) 1 ) )", "end": "1"}, "rules": ["min-comm", "lt-swap-out", "sub-to-add", "lt-swap-in", "eqgt-to-not-lt", "and-min-to-lt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 1000 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 1000 ) v1 ) ( + v2 1 ) ) 2 ) )", "end": "0"}, "rules": ["add-assoc", "add-fact-mul", "mul-comm", "sub-to-add", "lt-swap-in", "lt-swap-out", "add-comm", "mul-assoc", "mul-zero"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( * v0 4 ) v1 ) 16 ) 109 ) ( * ( + ( * v1 4 ) ( + ( * v0 16 ) v2 ) ) 4 ) ) ( - ( min ( * ( + ( * v0 4 ) v1 ) 16 ) 109 ) ( * ( + ( * v1 4 ) ( + ( * v0 16 ) v2 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "add-comm", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( * v0 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * v0 2 ) 13 ) ) ( + ( * ( + ( + ( * 1 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) 0 ) ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( * ( + ( * v4 3 ) v5 ) 3 ) ( + ( * ( + ( * v4 3 ) v5 ) 3 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 3 ) v5 ) 3 ) 2 ) ( + ( * ( + ( * v4 3 ) v5 ) 3 ) ( - ( + 3 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-zero", "add-dist-mul", "mul-comm", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + v0 1 ) 2 ) v1 ) 2 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-zero", "add-const", "mul-one", "add-assoc", "add-dist-mul", "mul-comm", "sub-to-add", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( >= ( - v0 3 ) ( - ( + ( - v0 3 ) 2 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "sub-to-add", "add-assoc", "add-comm", "eqgt-to-not-lt", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 224 ) 444 ) v1 ) ) ( + ( min ( * v0 224 ) 444 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 224 ) 444 ) v1 ) 220 ) ) ( + ( + ( min ( * v0 224 ) 444 ) 223 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) 3 ) ) ) ( <= ( / v4 4 ) ( / v4 4 ) ) ) ( >= ( / ( + ( + v5 v4 ) 3 ) 4 ) ( / ( + ( + v5 v4 ) 3 ) 4 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["eq-x-x", "lt-to-zero", "add-comm", "Eq-lt-min", "add-zero", "min-x-x", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "add-assoc", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 3 ) 24 ) ) ( - ( + 0 24 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "lt-const-mod", "sub-to-add", "and-min-to-lt", "min-sub-both", "mul-assoc", "lt-swap", "lt-mul-pos-cancel", "mod-minus-in", "eqlt-to-not-gt", "max-consts-or"]}, {"expression": {"start": "( >= ( max ( min v0 0 ) -11 ) ( - ( + ( max ( min v0 0 ) -11 ) ( - 5 ( max ( min v0 0 ) -11 ) ) ) 1 ) )", "end": "0"}, "rules": ["lt-min-term+cpos", "lt-swap-out", "min-add-both", "min-comm", "max-min-switch", "add-comm", "add-assoc", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) ) 0 ) 7 ) ( + ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) 7 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) ) 3 ) 7 ) ( + ( + ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) 3 ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "add-zero"]}, {"expression": {"start": "( >= ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - ( + ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - -439 ( max ( min v0 -443 ) -506 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-one", "add-fact-mul", "add-const", "mul-zero", "or-comm", "max-min-switch", "lt-swap-in", "add-comm", "min-consts-or", "add-assoc", "mul-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( + ( * v0 3 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) 83 ) ( - ( + ( + ( + ( * v0 3 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) 83 ) ( - 50 ( max ( * v0 3 ) 47 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "min-consts-div-pos", "mul-assoc", "sub-to-add", "add-assoc", "Eq-min-c-neg", "mul-zero", "min-add-both", "Eq-a-b", "add-comm", "eq-swap", "max-to-min", "add-fact-mul", "mul-comm"]}, {"expression": {"start": "( == ( min ( * v0 128 ) ( - v1 128 ) ) ( min ( * v0 128 ) ( - v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 4 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 32 ) ) ) ( min ( max ( min ( / ( + ( + v3 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ) ( - ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 32 ) ) ) ( min ( max ( min ( / ( + ( + v3 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( - ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) v2 ) 1 ) 16 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 16 ) ( * v3 -2 ) ) ) ( max ( / ( - ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) v2 ) 1 ) 16 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 16 ) ( * v3 -2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( + ( / v1 250 ) 3 ) ) -64 ) ( + ( * ( / v1 250 ) 64 ) ( * v3 24 ) ) ) ( + ( * ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * v2 4 ) ) ( + ( / v1 250 ) 3 ) ) -64 ) ( + ( * ( / v1 250 ) 64 ) ( * v3 24 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 510 ( max ( * v0 2 ) 507 ) ) ( - 4 ( max ( * ( min v0 2 ) 2 ) 1 ) ) ) ( max ( - 510 ( max ( * v0 2 ) 507 ) ) ( - 4 ( max ( * ( min v0 2 ) 2 ) 1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + ( + ( * v3 224 ) v1 ) 224 ) ) ( + ( * v3 224 ) ( + ( * v4 4 ) ( + ( * v5 64 ) v1 ) ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 668 ) ) ( + ( + ( * v3 224 ) v1 ) 224 ) ) ( + ( * v3 224 ) ( + ( * v4 4 ) ( + ( * v5 64 ) v1 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) v1 ) ( - v2 15 ) ) ( min ( + ( * v0 16 ) v1 ) ( - v2 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( % ( + v0 v1 ) 4 ) 131 ) 4 ) ( / ( + v0 v1 ) 4 ) ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 131 ) 4 ) ( / ( + v0 v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 507 ) 8 ) ( + ( * v3 32 ) 31 ) ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) ( - ( min ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 507 ) 8 ) ( + ( * v3 32 ) 31 ) ) ( * ( + ( * v3 8 ) v4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 127 ) 128 ) ( / ( + v0 127 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) ( - 251 ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 498 ) ) ( * v2 3 ) ) ( + ( min ( * ( / ( + ( + v0 v1 ) 1003 ) 4 ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 498 ) ) ( * v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 125 ( * v0 63 ) ) ( - v1 ( + ( * v0 63 ) ( * v2 125 ) ) ) ) ( min ( - 125 ( * v0 63 ) ) ( - v1 ( + ( * v0 63 ) ( * v2 125 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( + ( * v2 2 ) v3 ) 8 ) 4 ) ) ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( + ( * v2 2 ) v3 ) 8 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 3 ) 4 ) ( + ( max ( / v3 4 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 1003 ) 1007 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "mod-minus-in", "lt-swap", "lt-const-mod-false"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + v1 v2 ) ) ( + ( * v0 4 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % ( + v0 664 ) 668 ) 671 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "mod-minus-in", "lt-const-mod-false", "lt-swap", "lt-swap-in"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) v2 ) ( min ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( max ( min v1 2001 ) 2 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 251 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 251 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 84 ) ) ( / v2 8 ) ) ( - ( - v0 ( * v1 84 ) ) ( / v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 64 ) ) ) ( + ( * v0 8 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 16 ) 8 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "max-consts-and", "and-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 1000 ) v0 ) ) ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 1000 ) v0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -3 ) ( + v2 v3 ) ) ) ( + ( * v0 4 ) ( + ( max ( * v1 16 ) -3 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( * v3 125 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 500 ) ) ( + ( * v3 125 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 250 ) ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) ) ( + ( / ( + v0 v1 ) 250 ) ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 112 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 112 ) ( + v2 v3 ) ) 108 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 112 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 112 ) ( + v2 v3 ) ) 108 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 36 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 36 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 4 ) -5 ) ( * v1 500 ) ) ( + ( max ( * v0 4 ) -5 ) ( * v1 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) ( + ( max ( * v1 16 ) -5 ) v2 ) ) ( + ( + ( * v1 16 ) v2 ) 8 ) ) ( min ( + ( * v0 8 ) ( + ( max ( * v1 16 ) -5 ) v2 ) ) ( + ( + ( * v1 16 ) v2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 4 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 4 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( * v0 4 ) v1 ) 2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 7 ) ( * v1 2 ) ) ( + ( * v2 2 ) 9 ) ) ( min ( + ( * v0 7 ) ( * v1 2 ) ) ( + ( * v2 2 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 500 ) ) ( - v0 ( * v1 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 104 ) v1 ) ( + ( * v0 104 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) ( - ( / ( + ( + v0 v1 ) 43 ) 4 ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( + ( * v2 4 ) v3 ) ) ( - ( max ( min ( + v0 v1 ) 1997 ) -2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 251 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 251 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + v0 11 ) ( + v0 11 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( / ( min ( + ( + v0 v1 ) 7 ) ( + v2 v3 ) ) 4 ) ( / v1 4 ) ) ( + v4 1 ) ) ( + ( min ( max ( - ( / ( - v3 1 ) 4 ) ( / v1 4 ) ) -1 ) v4 ) 1 ) ) ( max ( min ( - ( / ( min ( + ( + v0 v1 ) 7 ) ( + v2 v3 ) ) 4 ) ( / v1 4 ) ) ( + v4 1 ) ) ( + ( min ( max ( - ( / ( - v3 1 ) 4 ) ( / v1 4 ) ) -1 ) v4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 128 ) ( + ( * v2 252 ) v3 ) ) ) ( + v4 14 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 128 ) ( + ( * v2 252 ) v3 ) ) ) ( + v4 14 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 32 ) v3 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 32 ) v3 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( * ( + v0 v1 ) 2 ) 4 ) ( - ( + ( - ( * ( + v0 v1 ) 2 ) 4 ) 2 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "lt-x-x-sub-a", "lt-swap-out", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 124 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 124 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 255 ) 252 ) ( / ( + v0 255 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( - v0 ( / v1 4 ) ) 3 ) ( + ( - v0 ( / v1 4 ) ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -168 ) 4 ) 4 ) ( * v0 -168 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 951 ) 64 ) ( - ( + 0 16 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-const-mod", "and-min-to-lt", "lt-swap-out", "max-consts-or", "lt-mul-div-cancel"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 64 ) 105 ) ) ( min ( * ( + ( * ( / v0 250 ) 4 ) v1 ) 16 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 64 ) 105 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) 20 ) v1 ) ( + ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v2 ) 16 ) 188 ) ) ( min ( max ( - ( * ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) 16 ) 20 ) v1 ) ( + ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v2 ) 16 ) 188 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( min ( + ( * v0 -12 ) 0 ) -20 ) 4 ) 4 ) ( min ( + ( * v0 -12 ) 0 ) -20 ) )", "end": "1"}, "rules": ["min-mul-in-pos", "div-consts-add", "min-div-in-pos", "eq-x-x", "add-dist-mul", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-comm", "mul-assoc", "sub-to-add", "eq-x-y-0", "add-fact-mul", "mul-comm", "mul-zero", "add-assoc"]}, {"expression": {"start": "( == ( - ( * ( min v0 12 ) 4 ) 52 ) ( - ( + ( - ( * ( min v0 12 ) 4 ) 52 ) ( + ( * ( min v0 12 ) -4 ) 56 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "mul-comm", "add-comm", "mul-zero", "eq-swap", "Eq-a-b", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 64 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * ( - ( + ( * v1 2 ) v2 ) v0 ) 4 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["eq-mul-x-y-0", "Eq-a-b", "add-assoc", "add-const", "sub-to-add", "eq-swap", "mul-comm", "eq-x-y-0"]}, {"expression": {"start": "( == ( - ( * ( max v0 10 ) 8 ) 204 ) ( - ( + ( - ( * ( max v0 10 ) 8 ) 204 ) ( - 208 ( * ( max v0 10 ) 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-const", "mul-zero", "Eq-a-b", "mul-comm", "eq-swap", "add-fact-mul", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 4 ) v1 ) 7 ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 4 ) v1 ) 7 ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v2 4 ) 133 ) 0 ) ( + ( min ( * v2 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 133 ) 3 ) ( + ( min ( * v2 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 125 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 63 ) 62 ) v2 ) ( + ( + ( min ( * v1 63 ) 62 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) 62 ) ( + ( + ( min ( * v1 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero"]}, {"expression": {"start": "( == ( - v0 20 ) ( - ( + ( - v0 20 ) ( - 24 ( * 2 8 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "mul-comm", "add-dist-mul", "mul-zero", "eq-comm", "add-fact-mul", "add-const", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 504 ) ( + v1 v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 504 ) ( + v1 ( + v0 504 ) ) ) ) ( <= ( + ( * v2 18 ) v3 ) ( + ( * v2 18 ) v3 ) ) ) ( >= ( + ( + ( * v2 18 ) v3 ) 17 ) ( + ( min ( - ( + ( * v2 18 ) v3 ) ( * ( max v2 1 ) 18 ) ) v3 ) 35 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 3 ) ( - ( * ( + v0 1 ) 4 ) 4 ) )", "end": "0"}, "rules": ["lt-mul-pos-cancel", "div-cancel-mul", "div-separate", "lt-to-zero", "lt-mul-div-cancel", "sub-to-add", "lt-swap-in", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( - ( min ( - v0 ( * v1 252 ) ) 242 ) ( * v2 16 ) ) ( - ( min ( - v0 ( * v1 252 ) ) 242 ) ( * v2 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min v0 1 ) 16 ) 4 ) 4 ) ( * ( min v0 1 ) 16 ) )", "end": "1"}, "rules": ["sub-to-add", "add-zero", "mul-cancel-div", "mul-comm", "mod-multiple", "eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 143 ) 1 ) )", "end": "0"}, "rules": ["mul-zero", "add-dist-mul", "eq-x-y-0", "sub-to-add", "mul-assoc", "eq-comm", "add-fact-mul", "add-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "add-comm", "lt-to-zero", "add-assoc", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + 0 ( + ( * v1 4 ) v2 ) ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v1 4 ) v2 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + 0 v0 ) 8 ) ) ) ( >= ( / ( + v0 3 ) 8 ) ( / ( + ( - ( + 4 0 ) 1 ) v0 ) 8 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) 0 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) 3 ) ( + ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero"]}, {"expression": {"start": "( < ( - ( * ( + ( * v0 3 ) v1 ) 2 ) 4 ) ( - ( min ( max ( * v1 2 ) ( + ( * ( + ( * ( + v0 1 ) 3 ) v1 ) 2 ) 1 ) ) ( * ( + ( * ( + v0 1 ) 3 ) v1 ) 2 ) ) 10 ) )", "end": "0"}, "rules": ["lt-swap-out", "and-min-to-lt", "add-dist-mul", "lt-to-zero", "and-comm", "add-comm", "mul-comm", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 1000 0 ) 1 ) v1 ) ( + ( - ( + 1000 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( / ( + ( min v1 250 ) v2 ) 125 ) 2 ) ( - ( / ( + ( min v1 250 ) v2 ) 125 ) 2 ) ) ) ( >= ( - ( + ( / ( + ( min v1 250 ) v2 ) 125 ) v3 ) 1 ) ( - ( + ( + v3 2 ) ( - ( / ( + ( min v1 250 ) v2 ) 125 ) 2 ) ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 8 ) ( - ( + ( - ( * v0 4 ) 8 ) ( + ( * ( min v1 0 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "mul-assoc", "sub-to-add", "add-const", "eq-comm", "add-comm", "eq-swap", "Eq-a-b", "mul-comm"]}, {"expression": {"start": "( == ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) ( - ( + ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) ( + ( * v1 8 ) 208 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "add-assoc", "Eq-a-b", "eq-comm", "add-fact-mul", "add-comm", "eq-swap", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 503 ) v1 ) ( + v2 1 ) ) 8 ) )", "end": "0"}, "rules": ["add-const", "mul-comm", "sub-to-add", "add-fact-mul", "mul-one", "add-comm", "add-assoc", "mul-zero", "lt-swap-in"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min v1 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )", "end": "0"}, "rules": ["max-consts-and", "min-comm", "mul-one", "min-mul-in-neg", "lt-swap", "min-sub-both", "add-comm", "add-assoc", "mul-assoc", "lt-swap-in", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["and-min-to-lt", "min-consts-div-neg", "min-comm", "eqgt-to-not-lt", "min-ass", "mul-comm", "eqlt-to-not-gt", "min-add-both", "sub-to-add", "add-comm", "max-to-min", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( / ( + v0 20 ) 16 ) ( / ( + v0 20 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 6 ) 4 ) v1 ) -1 ) ( + ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 252 ) ) ( / v3 4 ) ) 249 ) 2 ) ) ( min ( max ( - ( / ( + v0 6 ) 4 ) v1 ) -1 ) ( + ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 252 ) ) ( / v3 4 ) ) 249 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) ( + v3 3 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) ( + v3 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 58 ) ( + ( max ( * v1 500 ) -18 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 442 ) ) ( min ( + ( * v0 58 ) ( + ( max ( * v1 500 ) -18 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 442 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( min ( * v0 128 ) 872 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 128 ) 872 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( * v0 1003 ) 6 ) v1 ) ( min ( - ( * v0 1003 ) 6 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( * v4 32 ) ) ( max ( min ( * ( / v3 125 ) 8 ) 125 ) 1 ) ) 19 ) 4 ) 51 ) ) ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * v1 4 ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( * v4 32 ) ) ( max ( min ( * ( / v3 125 ) 8 ) 125 ) 1 ) ) 19 ) 4 ) 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 224 ) ( + ( * v1 672 ) v2 ) ) 218 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 224 ) ( + ( * v1 672 ) v2 ) ) 218 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 31 ( * ( + ( * v0 3 ) v1 ) 4 ) ) ( + ( * ( - ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v0 3 ) v1 ) 2 ) v4 ) ) 2 ) 25 ) ) ( min ( - 31 ( * ( + ( * v0 3 ) v1 ) 4 ) ) ( + ( * ( - ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( * ( + ( * v0 3 ) v1 ) 2 ) v4 ) ) 2 ) 25 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 5 ) 4 ) 4 ) ) ( + ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 253 ) ( * ( / ( + v2 5 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 250 ) ( + v1 v2 ) ) ( + ( * v0 250 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 499 ) 0 ) v1 ) ( + ( max ( min v0 496 ) -3 ) 4 ) ) ( min ( + ( max ( min v0 499 ) 0 ) v1 ) ( + ( max ( min v0 496 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( - ( + ( / v1 4 ) ( * v2 252 ) ) 1 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( - ( + ( / v1 4 ) ( * v2 252 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + ( + v1 v2 ) 7 ) 8 ) ) ( - v0 ( / ( + ( + v1 v2 ) 7 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( + ( / v1 8 ) 127 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 128 ) ) ( + ( / v1 8 ) 127 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 67 ) ( + ( * v1 126 ) v2 ) ) ( + ( * v0 67 ) ( + ( * v1 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( min v0 500 ) v1 ) v2 ) ) 503 ) ( - ( + ( + 0 ( + ( min v0 500 ) v1 ) ) v2 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) v2 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) ) v2 ) 503 ) ) ) ( <= ( + -5 v3 ) ( + -5 v3 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v3 ) ( + ( - ( - 6 5 ) 1 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 128 ) 123 ) v1 ) ( / v2 8 ) ) ( + ( min ( + ( * v0 128 ) 123 ) v1 ) ( / v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 63 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 63 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( + ( min ( * v0 128 ) 881 ) v1 ) v2 ) 134 ) ( + ( + ( + ( min ( * v0 128 ) 881 ) v1 ) v2 ) 134 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 250 ) 8 ) ) ( - v0 ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * v1 126 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * v1 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( * v3 64 ) ) ( * v4 4 ) ) ( / v1 4 ) ) ( - ( - ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 128 ) ) ( * v3 64 ) ) ( * v4 4 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + 3 v1 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 9 ) v3 ) ( + ( * v2 9 ) v3 ) ) ) ( >= ( + ( * v2 9 ) v3 ) ( + ( * v2 9 ) v3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 64 ) ) -63 ) ( + ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) 0 ) ( * v3 32 ) ) ) ( - ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 64 ) ) -63 ) ( + ( max ( min ( + ( * v0 64 ) v1 ) ( - ( min ( + v2 v1 ) 2063 ) 64 ) ) 0 ) ( * v3 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 3 ) v1 ) ( min ( - v0 3 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( max ( min ( * ( / ( + ( + v1 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) ( - ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( max ( min ( * ( / ( + ( + v1 v0 ) 7 ) 8 ) 2 ) 497 ) -2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 4 ) 44 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v3 v4 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * ( / v5 5 ) 167 ) ) ( max ( min ( * ( / v4 8 ) 2 ) 509 ) 10 ) ) 154 ) v0 ) 4 ) 12 ) ) ( min ( max ( max ( - ( * v0 4 ) 44 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min ( - ( - ( max ( min ( * ( / ( + ( + v3 v4 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( * ( / v5 5 ) 167 ) ) ( max ( min ( * ( / v4 8 ) 2 ) 509 ) 10 ) ) 154 ) v0 ) 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 245 ) v1 ) ( min ( + v0 245 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) ( + ( * v0 32 ) ( + ( * v1 64 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 269 ) 257 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 269 ) 257 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( / v1 4 ) ( * v3 64 ) ) 63 ) ) ( + ( * v3 64 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 32 ) ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( / v1 4 ) ( * v3 64 ) ) 63 ) ) ( + ( * v3 64 ) ( + ( * v4 4 ) ( + ( / v1 4 ) ( * v5 32 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 34 ) ( * ( / v1 250 ) 64 ) ) ( + ( * v0 34 ) ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 666 ) 667 ) ( / ( + v0 666 ) 667 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( * v2 4 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 46 ) ) ( / v1 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 46 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( + ( * v3 63 ) ( + ( * v4 4 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 125 ) ) ( + ( + ( min ( * v3 63 ) 62 ) v1 ) 63 ) ) ( + ( * v3 63 ) ( + ( * v4 4 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 4 ) 36 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 4 ) 36 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 16 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 128 ( * ( max v0 1 ) 64 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "Eq-a-b", "eq-comm", "eq-swap", "mul-assoc", "sub-to-add"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 125 ) ) -124 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2124 ) 125 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 125 ) ) -124 ) ( + ( max ( min ( + ( * v0 125 ) v1 ) ( - ( min ( + v2 v1 ) 2124 ) 125 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) v2 ) ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( / v1 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( + ( * v2 4 ) v3 ) 49 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( + ( * v2 4 ) v3 ) 49 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) ( + v2 v3 ) ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) ( + v2 v3 ) ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 515 ) 8 ) ) -8 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 21 ) ( + ( * v2 3 ) v3 ) ) ) v4 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 21 ) ( + ( * v2 3 ) ( + v3 1 ) ) ) ) v4 ) )", "end": "1"}, "rules": ["add-assoc", "lt-x-x-sub-a", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( == ( * ( + v0 v1 ) 2 ) ( * ( + v0 v1 ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( / ( + v1 v2 ) 4 ) ( + ( * v3 8 ) v4 ) ) ) ( + ( * v0 64 ) ( + ( / ( + v1 v2 ) 4 ) ( + ( * v3 8 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 2 ) 2 ) ) 1 ) v3 ) ( min ( + ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 2 ) 2 ) ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( * ( min ( - v0 v1 ) 2 ) 2 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-comm", "eq-comm", "Eq-a-b", "eq-swap", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( / v0 4 ) ( * v1 3 ) ) 2 ) ( + ( / v0 4 ) ( * ( + v1 1 ) 3 ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-comm", "add-dist-mul", "sub-to-add", "lt-swap-out", "lt-swap-in", "add-assoc", "mul-comm"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) ( min ( - ( / ( + ( + v0 v1 ) 7 ) 4 ) ( / v1 4 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 500 ) 499 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "eqgt-to-not-lt", "Eq-lt-min", "min-mod-const-to-const", "not-gt-to-eqlt"]}, {"expression": {"start": "( == ( + ( * v0 20 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 20 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( * v0 3 ) ( - ( + ( * v0 3 ) 3 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 250 ) 0 ) v3 ) ( + ( + ( * v2 250 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + v0 v1 ) 16 ) v2 ) 4 ) ( + ( * v0 64 ) 213 ) ) ( min ( * ( + ( * ( + v0 v1 ) 16 ) v2 ) 4 ) ( + ( * v0 64 ) 213 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 28 ) 16 ) ) -16 ) 2 ) 2 ) ( * ( % v0 ( / ( + v1 28 ) 16 ) ) -16 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) 110 ) ( - ( + ( + ( + v0 v1 ) 110 ) 23 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "add-assoc", "lt-x-x-sub-a", "lt-swap-out", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 125 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 125 ) ( + v1 1 ) ) v2 ) 1 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-swap-in", "add-comm", "add-assoc", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( + ( * 0 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "eq-swap", "mul-comm", "mul-assoc", "mul-zero", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 23 ) 16 ) 0 ) ( / ( + v2 6 ) 4 ) ) ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 23 ) 16 ) 0 ) ( / ( + v2 6 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) v1 ) 3 ) 4 ) 0 ) ( + ( / ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) 31 ) 4 ) 1 ) ) ( min ( max ( / ( + ( - ( / ( + v0 3 ) 4 ) v1 ) 3 ) 4 ) 0 ) ( + ( / ( min ( - ( - ( / ( + ( + v2 v3 ) 3 ) 4 ) ( * v4 32 ) ) ( / v3 4 ) ) 31 ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - v0 7 ) ( - ( + ( - v0 7 ) 4 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap", "lt-swap-in", "sub-to-add", "add-dist-mul", "eqgt-to-not-lt", "lt-x-x-sub-a", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( * v0 500 ) v1 ) 8 ) 259 ) 256 ) ( - ( + 0 ( / ( + ( % v2 8 ) 763 ) 256 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "eqlt-to-not-gt", "lt-const-mod", "lt-mul-div-cancel", "max-consts-or", "sub-to-add", "and-min-to-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-to-zero", "sub-to-add", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 125 ) ) ( / v1 4 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 125 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 7 ) ( - ( + ( - v0 7 ) 4 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "eq-comm", "mul-assoc", "mul-zero", "add-fact-mul", "eq-swap", "add-comm", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 7 ) ( + ( - ( + 8 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( / ( + v0 v1 ) 8 ) v2 ) ( + ( / ( + v0 v1 ) 8 ) v2 ) ) ) ( >= ( + ( / ( + v0 v1 ) 8 ) v2 ) ( + ( / ( + v0 v1 ) 8 ) v2 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( + ( * v3 2 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 2 ) v4 ) 1 ) ( + ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) v4 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) 0 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) 3 ) ( + ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) 3 ) ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - ( * ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( + ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) ( - ( * ( min ( + ( * v0 2 ) v1 ) ( + ( max ( min ( * ( / ( - ( + v2 v3 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) ) 2 ) ( + ( min ( * ( + ( * v0 2 ) v1 ) 2 ) 251 ) ( * v4 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 504 ) v1 ) ) 8 ) ( - ( + -5 ( + ( * v0 504 ) v1 ) ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 504 ) v1 ) 508 ) ) 8 ) ( - ( + ( - ( - 6 5 ) 1 ) ( + ( + ( * v0 504 ) v1 ) 503 ) ) 3 ) ) ) ( <= ( - ( + ( * v2 252 ) v3 ) 8 ) ( - ( - ( + ( + ( * v2 252 ) v3 ) 0 ) 5 ) 3 ) ) ) ( >= ( + ( + ( * v2 252 ) v3 ) 248 ) ( - ( + ( + ( + ( * v2 252 ) v3 ) ( - ( + 252 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v4 5 ) v5 ) ( + ( * v4 5 ) v5 ) ) ) ( >= ( + ( * v4 5 ) v5 ) ( + ( * v4 5 ) v5 ) ) )", "end": "1"}, "rules": ["add-comm", "not-gt-to-eqlt", "Eq-lt-min", "sub-to-add", "min-x-x-plus-a-neg", "eq-x-x", "eqgt-to-not-lt", "min-x-x", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 0 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 3 ) ( + ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( >= ( + ( * v0 8 ) v1 ) ( + ( + ( * ( - v0 1 ) 8 ) v1 ) 1 ) )", "end": "1"}, "rules": ["lt-swap-in", "mul-assoc", "add-comm", "add-fact-mul", "lt-swap-out", "eqgt-to-not-lt", "mul-zero", "add-dist-mul", "sub-to-add", "add-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 12 ) 52 ) ( * v2 64 ) ) v3 ) ) ( + ( + ( * v2 64 ) ( min ( * v1 12 ) 52 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 12 ) 52 ) ( * v2 64 ) ) v3 ) 8 ) ) ( + ( + ( * v2 64 ) ( + ( min ( * v1 12 ) 52 ) 11 ) ) v3 ) ) ) ( <= ( + v4 v5 ) ( + v4 v5 ) ) ) ( >= ( + v4 v5 ) ( + v4 v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( + ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 89 ) ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) ) 4 ) 4 ) ( + ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 89 ) ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) ) )", "end": "1"}, "rules": ["min-mul-in-pos", "add-fact-mul", "min-x-x-plus-a-pos", "div-consts-mul", "mul-assoc", "add-assoc", "min-comm", "eq-x-x", "min-ass", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( + ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) 0 ) 4 ) ( - ( + ( * ( + ( + ( * v2 4 ) v3 ) 0 ) 2 ) v4 ) 10 ) ) ) ( >= ( - ( + ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) 3 ) 4 ) ( - ( + ( * ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) 2 ) v4 ) 10 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "and-comm", "sub-to-add", "lt-swap-in", "add-dist-mul", "mul-comm", "lt-x-x-sub-a", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 250 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * 0 63 ) v1 ) 0 ) ( + 0 v1 ) ) ) ( >= ( + ( + ( * 1 63 ) v1 ) 62 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "0"}, "rules": ["add-dist-mul", "lt-swap-out", "lt-swap", "add-comm", "lt-mul-pos-cancel", "div-minus-down", "add-assoc", "add-fact-mul", "div-consts-mul", "mul-assoc", "eqlt-to-not-gt", "sub-to-add", "mul-zero", "mul-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( * v0 1008 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 1008 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) 26 ) v2 ) ( min ( + ( * ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 2 ) 26 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 32 ) ( + v2 v3 ) ) 28 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 32 ) ( + v2 v3 ) ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( + ( / v0 4 ) ( * v1 32 ) ) v2 ) ( min ( - ( / ( + ( + v3 v0 ) 3 ) 4 ) ( * v4 126 ) ) ( + ( / v0 4 ) 125 ) ) ) ( - ( + ( + ( / v0 4 ) ( * v1 32 ) ) v2 ) ( min ( - ( / ( + ( + v3 v0 ) 3 ) 4 ) ( * v4 126 ) ) ( + ( / v0 4 ) 125 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + v0 v1 ) ( + ( + ( * v2 8 ) ( + ( * v3 126 ) v4 ) ) 80 ) ) ( max ( + v0 v1 ) ( + ( + ( * v2 8 ) ( + ( * v3 126 ) v4 ) ) 80 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 2 ) ) ( - v0 ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 32 ) 20 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 32 ) 20 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( * v0 8 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 512 ) 503 ) ( / ( + v0 512 ) 503 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 120 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 120 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 39 ) ( + ( * v1 64 ) v2 ) ) ( + ( * v0 39 ) ( + ( * v1 64 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * v1 16 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 32 ) v1 ) ) ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) v1 ) 22 ) 7 ) ) ( min ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( + ( * v3 32 ) v1 ) ) ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) v1 ) 22 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * 2 4 ) v1 ) 3 ) ( + ( + ( * 2 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( + v0 v1 ) 8 ) 2 ) 509 ) 10 ) ( * v2 12 ) ) ( + ( max ( min ( * ( / ( + v0 v1 ) 8 ) 2 ) 509 ) 10 ) ( * v2 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 252 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 252 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * v0 2 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "eq-comm", "sub-to-add", "Eq-a-b", "eq-swap"]}, {"expression": {"start": "( == ( min ( * v0 32 ) ( - v1 32 ) ) ( min ( * v0 32 ) ( - v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 8 ) ( + v2 v3 ) ) 4 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -9 ) ( + v2 v3 ) ) ) ( + ( + ( * v1 8 ) ( + v2 v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 908 ( * ( max ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 237 ) 228 ) 4 ) ) ( + ( * ( max ( min v2 -228 ) -237 ) 4 ) 908 ) ) ( max ( - 908 ( * ( max ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 237 ) 228 ) 4 ) ) ( + ( * ( max ( min v2 -228 ) -237 ) 4 ) 908 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( max ( * v0 4 ) -5 ) 4 ) ) ( - v0 ( / ( max ( * v0 4 ) -5 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 0 ) 2 ) ( - ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 3 ) 2 ) ( - ( + ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 3 ) 2 ) ) ) ( <= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) ) ( >= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 8 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 8 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 64 ) ) ) ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 255 ) ) ( - v0 ( * v1 255 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) v2 ) ( min ( / ( + ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) 3 ) 4 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( % v0 1005 ) 1004 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "not-gt-to-eqlt", "lt-swap-in", "min-mod-const-to-const", "Eq-lt-min"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( - v0 v1 ) 2 ) 2 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "eq-swap", "sub-to-add", "mul-comm", "Eq-a-b", "add-comm"]}, {"expression": {"start": "( == ( + ( * v0 56 ) ( * v1 64 ) ) ( + ( * v0 56 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) 241 ) ( + ( min ( + ( * v1 504 ) 494 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 256 ) ( + ( * v1 504 ) v2 ) ) 241 ) ( + ( min ( + ( * v1 504 ) 494 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 80 ) 64 ) 0 ) ( / ( + v2 74 ) 64 ) ) ( / ( + ( min ( - ( min ( + v3 v0 ) ( + ( min ( + ( + v3 v0 ) 69 ) v4 ) 7 ) ) ( * ( / v1 4 ) 4 ) ) ( + v2 70 ) ) 4 ) 64 ) ) ( max ( min ( max ( / ( + ( - v0 ( * ( / v1 4 ) 4 ) ) 80 ) 64 ) 0 ) ( / ( + v2 74 ) 64 ) ) ( / ( + ( min ( - ( min ( + v3 v0 ) ( + ( min ( + ( + v3 v0 ) 69 ) v4 ) 7 ) ) ( * ( / v1 4 ) 4 ) ) ( + v2 70 ) ) 4 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 19 ) 4 ) ( + v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 19 ) 4 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) ) ( + ( * v0 16 ) ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( max ( * ( min ( + v1 8 ) v0 ) 4 ) -15 ) 12 ) ) ( min ( * v0 4 ) ( + ( max ( * ( min ( + v1 8 ) v0 ) 4 ) -15 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 0 ( * ( max ( min ( * ( / ( + v0 26 ) 4 ) 4 ) ( + ( - ( max ( min ( * ( + ( min ( * v1 11 ) 53 ) v2 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v1 11 ) 53 ) v2 ) 2 ) 499 ) 0 ) ) 23 ) ) 1 ) 4 ) ) ( - ( * ( max v0 -22 ) -4 ) 92 ) ) ( max ( - 0 ( * ( max ( min ( * ( / ( + v0 26 ) 4 ) 4 ) ( + ( - ( max ( min ( * ( + ( min ( * v1 11 ) 53 ) v2 ) 2 ) 477 ) -22 ) ( max ( min ( * ( + ( min ( * v1 11 ) 53 ) v2 ) 2 ) 499 ) 0 ) ) 23 ) ) 1 ) 4 ) ) ( - ( * ( max v0 -22 ) -4 ) 92 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 32 ) ) ( - ( / v0 4 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 125 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 125 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 527 ) 16 ) ( - ( + 0 34 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-swap-out", "and-min-to-lt", "lt-const-mod", "max-consts-or", "lt-mul-div-cancel", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( * ( / ( * v0 -336 ) 4 ) 4 ) ( * v0 -336 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v2 19 ) ) ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + v2 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - v0 7 ) v1 ) ( + ( + ( min v2 120 ) v0 ) 5 ) ) ( min ( max ( - v0 7 ) v1 ) ( + ( + ( min v2 120 ) v0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 3 ) ) ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v2 128 ) 124 ) ( min ( * v1 252 ) 248 ) ) v3 ) ) ( + ( + ( min ( * v1 252 ) 248 ) ( min ( * v2 128 ) 124 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 128 ) 124 ) ( min ( * v1 252 ) 248 ) ) v3 ) 124 ) ) ( + ( + ( min ( * v1 252 ) 248 ) ( + ( min ( * v2 128 ) 124 ) 127 ) ) v3 ) ) ) ( <= ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ) ) ( >= ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ) ) ( <= v7 v7 ) ) ( >= ( - ( + v8 v7 ) 1 ) ( - ( + v8 v7 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 248 ) ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( + ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) v2 ) 3 ) ( + ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) v2 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 27 ) 4 ) ( + ( max ( / ( - v3 v4 ) 4 ) -5 ) 5 ) ) ( / ( + ( min ( - ( min ( + v5 v3 ) ( + v6 7 ) ) v4 ) ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 10 ) ) 17 ) 4 ) ) ( max ( min ( / ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 27 ) 4 ) ( + ( max ( / ( - v3 v4 ) 4 ) -5 ) 5 ) ) ( / ( + ( min ( - ( min ( + v5 v3 ) ( + v6 7 ) ) v4 ) ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 10 ) ) 17 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( * v0 8 ) ( + v1 v2 ) ) ( + ( + ( * v0 8 ) ( + ( - v1 1 ) v2 ) ) 1 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-to-zero", "lt-swap-out", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 4 ) ) -32 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v1 ) 1 ) 250 ) 8 ) 4 ) ) -32 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 2 ) 1 ) ( * ( + v0 1 ) 2 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-x-x-sub-a", "add-dist-mul", "add-comm", "add-assoc", "mul-comm", "lt-swap-in"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 134 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "add-comm", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 499 ) ( + ( - ( + 500 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "add-zero", "lt-to-zero", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( == ( min ( * ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) 4 ) ( + ( * v3 4 ) 2 ) ) ( min ( * ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) 4 ) ( + ( * v3 4 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) ) ( min ( max ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( >= ( + ( max v0 4 ) 9 ) 0 )", "end": "1"}, "rules": ["not-gt-to-eqlt", "min-max-const", "lt-swap-in", "Eq-lt-min", "eqgt-to-not-lt"]}, {"expression": {"start": "( > ( - 0 v0 ) ( - 124 v0 ) )", "end": "0"}, "rules": ["add-assoc", "lt-swap-in", "mul-comm", "add-const", "add-fact-mul", "sub-to-add", "mul-zero", "gt-to-lt", "add-comm"]}, {"expression": {"start": "( == ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["eq-x-y-0", "add-fact-mul", "add-const", "mul-zero", "add-assoc", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( == ( + ( max ( min v0 126 ) 2 ) ( * v1 32 ) ) ( + ( max ( min v0 126 ) 2 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 126 ) ) ( / v1 8 ) ) ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 126 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 4 ) 4 ) ) ( - v0 ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( min ( * v1 4 ) 1999 ) 5 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) ) ( >= ( - ( + ( + v2 71 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) 1 ) ( - ( + ( + v2 71 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["Eq-lt-min", "not-gt-to-eqlt", "min-x-x", "eq-x-x", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( * v1 500 ) v2 ) ( + ( + ( * v1 500 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 500 ) v2 ) 499 ) ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "eqlt-to-not-gt", "add-zero", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * v0 8 ) 1 ) ( - ( + ( - ( * v0 8 ) 1 ) 13 ) 1 ) )", "end": "0"}, "rules": ["eq-mul-x-y-0", "mul-comm", "eq-swap", "add-assoc", "add-const", "eq-x-y-0", "Eq-a-b", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "add-assoc", "lt-to-zero"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-const", "mul-zero", "mul-one", "add-assoc", "lt-swap-out", "sub-to-add", "add-fact-mul", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( <= ( * v5 69 ) ( + ( * v5 69 ) 0 ) ) ) ( >= ( + ( * v5 69 ) 68 ) ( + ( * v5 69 ) ( - ( + 69 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( + ( * v1 32 ) v2 ) ) ( + ( * v1 32 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * v1 32 ) v2 ) 28 ) ) ( + ( + ( * v1 32 ) 31 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-comm", "add-zero", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 69 ) v3 ) ( + ( * v2 69 ) v3 ) ) ) ( >= ( + ( * v2 69 ) v3 ) ( + ( * v2 69 ) v3 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 3 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "add-assoc", "lt-x-x-sub-a", "lt-swap-in", "add-comm", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( - 490 ( % ( + ( + ( min ( + ( * v0 500 ) 500 ) v1 ) v2 ) 7 ) 8 ) ) 32 ) ( - ( + 0 ( / ( + ( % v3 8 ) 539 ) 32 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "max-consts-or", "lt-mul-div-cancel", "lt-swap-out", "add-comm", "and-min-to-lt", "mod-minus-in", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( == ( * ( + ( * v0 4 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * ( / ( min v2 3 ) 4 ) 16 ) 16 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-x-y-0", "eq-mul-x-y-0", "mul-comm", "sub-to-add", "add-const", "add-assoc", "add-fact-mul", "eq-swap"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -2 ) ( - ( / ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 4 ) 2 ) ) ( / ( + ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 35 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -2 ) ( - ( / ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 4 ) 2 ) ) ( / ( + ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 35 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-mul-x-y-0", "div-consts-mul", "eq-x-y-0", "mul-comm", "add-fact-mul", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 4 ) 0 ) ( * v3 4 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * ( min v3 11 ) 4 ) 3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "min-mul-in-pos", "lt-to-zero", "and-min-to-lt", "min-add-both", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * v0 35 ) v1 ) 35 ) ( + ( * ( + v0 1 ) 35 ) v1 ) )", "end": "0"}, "rules": ["add-dist-mul", "lt-to-zero", "add-comm", "add-assoc", "mul-comm"]}, {"expression": {"start": "( < ( + v0 5 ) ( - ( min ( + ( max ( + ( + v0 1 ) 8 ) ( + v1 v2 ) ) 1 ) ( + v0 1 ) ) 4 ) )", "end": "0"}, "rules": ["mul-comm", "min-add-both", "min-sub-both", "add-assoc", "sub-to-add", "min-comm", "and-min-to-lt", "mul-one", "lt-swap-in", "add-comm", "mul-assoc"]}, {"expression": {"start": "( == ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) ( - ( + ( - ( * ( min ( * v0 2 ) 251 ) 8 ) 20 ) ( + ( * v1 8 ) 128 ) ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "eq-swap", "eq-comm", "sub-to-add", "mul-comm", "add-fact-mul", "add-const", "add-comm", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v3 ) 0 ) 5 ) ( - v3 5 ) ) ) ( >= ( - ( + ( + ( * 126 4 ) v3 ) 3 ) 5 ) ( + v3 501 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "min-x-x-plus-a-pos", "min-x-x", "lt-swap-out", "not-gt-to-eqlt", "Eq-lt-min", "eq-x-x", "sub-to-add", "min-comm", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - v0 5 ) ) 3 ) ( - v0 2 ) ) ) ( >= ( + ( + 3 ( + v0 996 ) ) 3 ) ( + v0 1002 ) ) ) ( <= ( + ( + v1 v2 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "0"}, "rules": ["mul-comm", "mul-zero", "lt-swap-out", "add-fact-mul", "add-assoc", "add-comm", "add-const", "eqgt-to-not-lt", "lt-swap-in", "sub-to-add", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + ( max ( - ( + ( max ( + v0 9 ) v1 ) ( * ( / ( + ( min ( - v0 v1 ) -9 ) 9 ) 4 ) 4 ) ) v0 ) 9 ) 4 ) 1024 )", "end": "1"}, "rules": ["mul-zero", "min-div-mul", "min-sub-both", "add-assoc", "add-comm", "min-comm", "max-to-min", "add-fact-mul", "min-min-div-neg", "add-const", "mul-comm", "mul-one", "add-dist-mul", "sub-to-add"]}, {"expression": {"start": "( >= ( - ( + ( max ( + ( + ( + ( * v0 2 ) v1 ) v2 ) 1 ) ( + ( + v3 v2 ) ( + ( * v4 2 ) v1 ) ) ) v5 ) 2 ) ( + ( - ( + ( + ( + v3 v2 ) ( + ( * ( - v4 1 ) 2 ) v1 ) ) v5 ) 1 ) 1 ) )", "end": "1"}, "rules": ["mul-assoc", "lt-swap-in", "lt-to-zero", "lt-swap", "add-dist-mul", "and-comm", "add-comm", "mul-comm", "max-consts-and", "add-assoc", "eqgt-to-not-lt", "min-add-both", "sub-to-add"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 32 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) v2 ) ( min ( + ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) 11 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 158 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / v2 250 ) ) 16 ) 14 ) ) 11 ) ) ( + ( * v4 16 ) 26 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -12 ) ( + ( * v4 16 ) 15 ) ) 11 ) ) ( max ( min ( min ( - ( / ( + ( + v0 v1 ) 158 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( min ( - ( / ( + v0 v1 ) 16 ) ( * ( / v2 250 ) 16 ) ) ( + ( * ( - ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / v2 250 ) ) 16 ) 14 ) ) 11 ) ) ( + ( * v4 16 ) 26 ) ) ( + ( min ( max ( - ( / v1 16 ) ( * ( / v2 250 ) 16 ) ) -12 ) ( + ( * v4 16 ) 15 ) ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 68 ) v1 ) ( - v2 60 ) ) ( min ( + ( * v0 68 ) v1 ) ( - v2 60 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 16 ) v3 ) 11 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 16 ) v3 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) ( + v3 3 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * v2 4 ) ) ( + v3 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 48 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 48 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * ( / ( + v1 v2 ) 8 ) 2 ) 509 ) 10 ) ) 1 ) v3 ) ( min ( + ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * ( / ( + v1 v2 ) 8 ) 2 ) 509 ) 10 ) ) 1 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 32 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( - ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( * v0 128 ) ) ( + ( * v1 500 ) v2 ) ) 1 ) 4 ) ( * v0 32 ) ) ( + ( / ( - ( - ( - ( min ( + ( + ( min ( * v0 128 ) 372 ) ( + ( * v1 500 ) v2 ) ) 128 ) ( + v3 v2 ) ) ( * v0 128 ) ) ( + ( * v1 500 ) v2 ) ) 1 ) 4 ) ( * v0 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 64 ) ( + ( * v1 1005 ) v2 ) ) 46 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 64 ) ( + ( * v1 1005 ) v2 ) ) 46 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 491 ) -8 ) 1 ) v1 ) ( min ( + ( max ( min ( * v0 2 ) 491 ) -8 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 249 ( * v0 16 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 16 ) v3 ) ) 12 ) ) ( min ( - 249 ( * v0 16 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 16 ) v3 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 12 ) 121 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) ( + ( min ( * v0 12 ) 121 ) ( + ( min ( * v1 128 ) ( - v2 128 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 41 ) 33 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 41 ) 33 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) ( + ( min ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) ( * v0 -256 ) ) -2 ) ( * ( min ( + ( / ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) 5 ) 4 ) ( * v0 -64 ) ) 63 ) 4 ) ) ) ) v3 ) ( + v4 250 ) ) ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) ( + ( min ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) ( * v0 -256 ) ) -2 ) ( * ( min ( + ( / ( + ( min ( + ( * v1 -500 ) v2 ) 500 ) 5 ) 4 ) ( * v0 -64 ) ) 63 ) 4 ) ) ) ) v3 ) ( + v4 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( - ( * v1 32 ) ( min ( + ( + ( min ( * v1 32 ) 94 ) v2 ) 22 ) ( + ( * v3 -126 ) ( + v4 v2 ) ) ) ) v2 ) ) ( + ( * v0 8 ) ( + ( - ( * v1 32 ) ( min ( + ( + ( min ( * v1 32 ) 94 ) v2 ) 22 ) ( + ( * v3 -126 ) ( + v4 v2 ) ) ) ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 64 ) ) ( + ( * v0 500 ) 436 ) ) ( min ( + ( max ( * v0 500 ) -5 ) ( * v1 64 ) ) ( + ( * v0 500 ) 436 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 252 ) ) ( + ( + ( min ( * v4 68 ) 194 ) ( / v0 4 ) ) 57 ) ) ( * v4 -68 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( min ( - v2 ( * v3 252 ) ) ( + ( + ( min ( * v4 68 ) 194 ) ( / v0 4 ) ) 57 ) ) ( * v4 -68 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 12 ) v2 ) ) ( + ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) ( + ( min ( / ( - ( + v4 v0 ) 1 ) 4 ) ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) ) 1 ) ) ( max ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 12 ) v2 ) ) ( + ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) ( + ( min ( / ( - ( + v4 v0 ) 1 ) 4 ) ( + ( min v3 11 ) ( + ( * v1 12 ) v2 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 -32 ) ) ( + ( / v1 4 ) 31 ) ) ( min ( + ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 -32 ) ) ( + ( / v1 4 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 8 ) 117 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( min ( * v0 8 ) 117 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 503 ) 500 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 503 ) 500 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 124 ) v2 ) ( min ( + ( max ( * ( / ( + v0 v1 ) 4 ) 4 ) -127 ) 124 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 12 ) ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 12 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 32 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 32 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) v1 ) ( min ( * v0 4 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1999 ) 0 ) ( * v1 252 ) ) ( + ( max ( min v0 1999 ) 0 ) ( * v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 3 ) 4 ) ( / ( + v0 3 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 39 ) ( + v0 39 ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 2 ) 2 ) ) ( + ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( * ( / v2 2 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 0 ) 2 ) 2 ) ( * v0 0 ) )", "end": "1"}, "rules": ["mul-zero"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( - ( * v1 502 ) ( min ( - ( * ( / ( + ( + v2 v0 ) 3 ) 4 ) 4 ) ( * v3 1003 ) ) ( + ( + ( min ( * v1 502 ) 501 ) ( * ( / v0 4 ) 4 ) ) 496 ) ) ) ) ( + ( * ( / v0 4 ) 4 ) ( - ( * v1 502 ) ( min ( - ( * ( / ( + ( + v2 v0 ) 3 ) 4 ) 4 ) ( * v3 1003 ) ) ( + ( + ( min ( * v1 502 ) 501 ) ( * ( / v0 4 ) 4 ) ) 496 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 5 ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) -4 ) ( + ( * v3 17 ) ( + ( * v4 33 ) ( * ( / v1 4 ) 4 ) ) ) ) ) ( - 32 ( * v3 17 ) ) ) ( min ( - 5 ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) -4 ) ( + ( * v3 17 ) ( + ( * v4 33 ) ( * ( / v1 4 ) 4 ) ) ) ) ) ( - 32 ( * v3 17 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min v0 497 ) -2 ) ( + ( * v1 4 ) v2 ) ) ( - ( max ( min v0 497 ) -2 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + v2 1 ) ) ( min ( max ( - ( / ( + v0 23 ) 4 ) ( * v1 2 ) ) 0 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 24 ) ( * v1 64 ) ) ( + ( * v0 24 ) ( * v1 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 371 ) -128 ) 93 ) v1 ) ( min ( + ( max ( min ( * v0 2 ) 371 ) -128 ) 93 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 73 ) 63 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 73 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( + ( max v0 500 ) 9 ) 0 )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "and-comm", "max-consts-and"]}, {"expression": {"start": "( == ( max ( + ( * ( - v0 ( * ( / v1 250 ) 8 ) ) 2 ) 26 ) v2 ) ( max ( + ( * ( - v0 ( * ( / v1 250 ) 8 ) ) 2 ) 26 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min ( / ( + ( min ( + v0 v1 ) ( + ( * v2 4 ) 5 ) ) 3 ) 4 ) ( + v2 2 ) ) ( / ( + v1 6 ) 4 ) ) v3 ) -1 ) ( + ( min ( - ( - ( / ( + ( + v4 v5 ) 3 ) 4 ) ( * v6 252 ) ) ( / v5 4 ) ) 249 ) 2 ) ) ( min ( max ( - ( max ( min ( / ( + ( min ( + v0 v1 ) ( + ( * v2 4 ) 5 ) ) 3 ) 4 ) ( + v2 2 ) ) ( / ( + v1 6 ) 4 ) ) v3 ) -1 ) ( + ( min ( - ( - ( / ( + ( + v4 v5 ) 3 ) 4 ) ( * v6 252 ) ) ( / v5 4 ) ) 249 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -69 ) ( + ( * v2 64 ) 21 ) ) ( min ( max ( - ( / v0 4 ) ( * ( / v1 250 ) 64 ) ) -69 ) ( + ( * v2 64 ) 21 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( min ( - 246 v0 ) ( + ( min ( - ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 16 ) ) ( / v2 8 ) ) 15 ) 5 ) ) 8 ) ( + ( / ( - 246 ( / v2 8 ) ) 8 ) ( * v3 -2 ) ) ) ( min ( / ( min ( - 246 v0 ) ( + ( min ( - ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) ( * v3 16 ) ) ( / v2 8 ) ) 15 ) 5 ) ) 8 ) ( + ( / ( - 246 ( / v2 8 ) ) 8 ) ( * v3 -2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 251 ) 246 ) v1 ) ( min ( + ( * v0 251 ) 246 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 65 ) ( * v1 4 ) ) ( + ( * v0 65 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 16 ) v3 ) ) ( - 62 ( * v2 16 ) ) ) ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * v2 16 ) v3 ) ) ( - 62 ( * v2 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 6 ( * ( max v0 1 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "Eq-a-b", "eq-swap", "eq-comm", "mul-comm", "sub-to-add", "add-comm"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 128 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 128 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 16 ) v1 ) 4 ) ( + ( * ( / ( + ( + v2 v3 ) 3 ) 4 ) 4 ) 6 ) ) ( min ( * ( + ( * v0 16 ) v1 ) 4 ) ( + ( * ( / ( + ( + v2 v3 ) 3 ) 4 ) 4 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( + ( max ( * v0 4 ) -7 ) ( + ( + ( + v1 v2 ) ( min ( * v3 8 ) 117 ) ) 7 ) ) 4 ) -4 ) 4 ) 4 ) ( * ( / ( + ( max ( * v0 4 ) -7 ) ( + ( + ( + v1 v2 ) ( min ( * v3 8 ) 117 ) ) 7 ) ) 4 ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "div-consts-mul", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 5 ) v0 ) 16 ) 12 ) ) ( min ( max ( max ( - ( * v0 16 ) 36 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 5 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 4 ) 177 ) v1 ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( * v4 35 ) ) ( * ( / v3 250 ) 64 ) ) -70 ) v0 ) 4 ) 246 ) ) ( min ( max ( - ( * v0 4 ) 177 ) v1 ) ( + ( * ( + ( min ( - ( - ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) ( * v4 35 ) ) ( * ( / v3 250 ) 64 ) ) -70 ) v0 ) 4 ) 246 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= v0 ( + ( - v0 1 ) 1 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( + ( / ( + v0 v1 ) 4 ) 17 ) v2 ) ( min ( + ( / ( + v0 v1 ) 4 ) 17 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( + ( / v1 64 ) 1 ) ) -64 ) 4 ) 4 ) ( * ( % v0 ( + ( / v1 64 ) 1 ) ) -64 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 2 ) 251 ) ) ( - v0 ( * ( / v1 2 ) 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) 12 ) 1 ) )", "end": "0"}, "rules": ["add-const", "mul-comm", "add-assoc", "eq-x-y-0", "mul-zero", "sub-to-add", "add-fact-mul"]}, {"expression": {"start": "( == ( - ( * ( min v0 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min v0 249 ) 8 ) 4 ) 8 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-assoc", "mul-comm", "add-const", "add-comm", "eq-swap", "mul-zero", "add-fact-mul"]}, {"expression": {"start": "( == ( + ( min ( * v0 8 ) 135 ) ( + v1 v2 ) ) ( + ( min ( * v0 8 ) 135 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 2 ) 249 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 249 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( > ( - 1 ( * v0 2 ) ) ( - 125 ( * v0 2 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "add-const", "mul-zero", "add-comm", "mul-comm", "lt-swap-in", "gt-to-lt", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * v0 55 ) 54 ) ( * ( + v0 1 ) 55 ) )", "end": "1"}, "rules": ["lt-mul-div-cancel", "lt-mul-pos-cancel", "sub-to-add", "lt-swap-in", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( + ( min v0 1903 ) ( * v1 4 ) ) ( + ( min v0 1903 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= v0 ( - ( + v0 2 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "add-assoc", "sub-to-add", "lt-swap-out", "add-comm"]}, {"expression": {"start": "( < ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 5 ) )", "end": "1"}, "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( >= v0 ( - ( + v0 250 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 24 24 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 v2 ) 4 ) 252 ) ) ( / ( - ( + v1 v2 ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 v2 ) 4 ) 252 ) ) ( / ( - ( + v1 v2 ) 965 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-assoc", "eq-x-x", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( + ( / v2 4 ) 32 ) ( + ( / v2 4 ) 32 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 64 ) 936 ) 8 ) 8 ) ( min ( * v0 64 ) 936 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "div-consts-mul", "min-mul-in-pos", "eq-x-x", "min-div-in-pos"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v0 4 ) ( + v1 1 ) ) )", "end": "0"}, "rules": ["mul-assoc", "add-assoc", "sub-to-add", "add-fact-mul", "lt-swap-in", "add-comm", "mul-comm", "lt-swap-out", "mul-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * ( / v0 2 ) 251 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * ( / v0 2 ) 251 ) v1 ) ( + v2 1 ) ) 7 ) )", "end": "0"}, "rules": ["add-const", "lt-swap-in", "add-comm", "add-fact-mul", "mul-one", "add-assoc", "mul-comm", "sub-to-add", "mul-zero"]}, {"expression": {"start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * v1 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )", "end": "0"}, "rules": ["add-comm", "and-lt-to-min", "add-assoc", "lt-swap-out", "lt-swap-in", "sub-to-add", "min-sub-both", "and-min-to-lt", "min-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( >= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )", "end": "1"}, "rules": ["add-zero", "add-assoc", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - v0 3 ) ) ) ( >= ( + v0 250 ) ( - ( + 254 ( - v0 3 ) ) 1 ) ) ) ( <= ( + 0 v1 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + 3 ( + v1 60 ) ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "lt-to-zero", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - ( + ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - 8 ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-min-c-pos", "mul-comm", "add-assoc", "mul-zero", "eq-swap", "mul-assoc", "sub-to-add", "mul-one", "min-add-both", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( < ( + v0 5 ) ( - ( min ( max ( + ( + v0 1 ) 20 ) ( + ( min v1 4 ) v2 ) ) ( + ( + v0 1 ) 11 ) ) 15 ) )", "end": "0"}, "rules": ["sub-to-add", "min-comm", "and-min-to-lt", "mul-assoc", "min-sub-both", "add-comm", "max-to-min", "add-dist-mul", "lt-swap-in", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["mul-comm", "add-const", "eq-x-x", "min-x-x", "add-fact-mul", "add-dist-mul", "lt-swap-out", "eqlt-to-not-gt", "lt-swap", "mul-zero", "add-assoc", "add-comm", "Eq-lt-min", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ) ) ( <= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) ) ( >= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) )", "end": "1"}, "rules": ["not-gt-to-eqlt", "min-x-x", "eq-x-x", "lt-swap-out", "Eq-lt-min", "add-assoc", "min-x-x-plus-a-neg", "add-comm", "sub-to-add", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 32 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 32 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 63 ) ) ( / v1 4 ) ) ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 63 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / ( + v0 v1 ) 8 ) 2 ) 509 ) 10 ) ( * v2 4 ) ) ( + ( max ( min ( * ( / ( + v0 v1 ) 8 ) 2 ) 509 ) 10 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( min v0 22 ) 4 ) ( + ( min ( + ( * v1 8 ) ( - ( * v2 4 ) ( min ( * ( + ( * v1 2 ) v2 ) 4 ) ( + ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) 85 ) ) ) ) 3 ) 85 ) ) ( max ( * ( min v0 22 ) 4 ) ( + ( min ( + ( * v1 8 ) ( - ( * v2 4 ) ( min ( * ( + ( * v1 2 ) v2 ) 4 ) ( + ( * ( / ( - ( + v3 v4 ) 1 ) 250 ) 64 ) 85 ) ) ) ) 3 ) 85 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - 62 ( * v0 32 ) ) ( * v1 16 ) ) ( - ( - 62 ( * v0 32 ) ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 255 ) 4 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 32 ) v2 ) 4 ) ( + ( * v3 32 ) 131 ) ) ( min ( * ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 32 ) v2 ) 4 ) ( + ( * v3 32 ) 131 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 32 ) 114 ) ) ( min ( + ( * v0 4 ) v1 ) ( + ( * v2 32 ) 114 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 124 ) 0 ) ( * v1 4 ) ) ( + ( max ( min v0 124 ) 0 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ( - ( min ( / ( - ( + v3 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v0 8 ) ) 7 ) ) 3 ) ) ( min ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ( - ( min ( / ( - ( + v3 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v0 8 ) ) 7 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) 1 ) v2 ) ( min ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 435 ) -64 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( max ( * ( min v1 v0 ) 4 ) -15 ) 19 ) ) ( min ( * v0 4 ) ( + ( max ( * ( min v1 v0 ) 4 ) -15 ) 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 48 ) ( + ( * ( min ( * v0 12 ) 21 ) 4 ) 52 ) ) ( min ( * v0 48 ) ( + ( * ( min ( * v0 12 ) 21 ) 4 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 84 ) ) ( + ( / v0 8 ) ( * v1 84 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 256 ) ( + ( * v1 500 ) v2 ) ) 250 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( * ( + ( * v1 32 ) v2 ) 4 ) 122 ) ) ( min ( * v0 4 ) ( + ( * ( + ( * v1 32 ) v2 ) 4 ) 122 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( - ( * ( + ( * v1 32 ) v2 ) 4 ) 7 ) ) ( min ( * v0 4 ) ( - ( * ( + ( * v1 32 ) v2 ) 4 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -84 ) 12 ) 12 ) ( * v0 -84 ) )", "end": "1"}, "rules": ["mul-comm", "eq-x-x", "div-consts-mul", "mul-assoc"]}, {"expression": {"start": "( == ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 4 ) ) ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( * ( + ( * v1 3 ) v2 ) 4 ) v3 ) ) ( - v0 ( + ( * ( + ( * v1 3 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) 4 ) 502 ) v3 ) ( max ( + ( * ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) 4 ) 502 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 3 ) ) ( - ( / v0 4 ) ( * v1 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( + ( * v0 4 ) 2 ) v1 ) ( / v2 4 ) ) ( + ( min ( + ( * v0 4 ) 2 ) v1 ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 63 ) v1 ) 1 ) v2 ) ( min ( - ( + ( * v0 63 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( + v0 v1 ) 62 ) 8 ) ( * v2 5 ) ) ( + ( / ( + ( + v0 v1 ) 62 ) 8 ) ( * v2 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 32 ) ( * v2 250 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 32 ) ( * v2 250 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 2 ) 252 ) ) ( - v0 ( * ( / v1 2 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( - v2 5 ) ) ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( - v2 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 4 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( / v1 16 ) ) 4 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * v0 4 ) v1 ) ( + ( * ( + ( min ( - v2 ( max ( min v3 509 ) 10 ) ) -11 ) v0 ) 4 ) 48 ) ) ( min ( max ( * v0 4 ) v1 ) ( + ( * ( + ( min ( - v2 ( max ( min v3 509 ) 10 ) ) -11 ) v0 ) 4 ) 48 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) ( + v2 2 ) ) ( min ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( / v1 4 ) ) ( + v2 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 249 ) ) ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + v2 249 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( + ( * v0 128 ) 128 ) v1 ) ( * ( + ( * v0 32 ) v2 ) 4 ) ) ( - ( min ( + ( * v0 128 ) 128 ) v1 ) ( * ( + ( * v0 32 ) v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 8 ) 25 ) ( / ( + v1 v2 ) 4 ) ) ( + ( min ( * v0 8 ) 25 ) ( / ( + v1 v2 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 3 ) ( * ( max ( min ( * ( / ( + v1 v2 ) 8 ) 2 ) 509 ) 10 ) 4 ) ) ( + ( * v0 3 ) ( * ( max ( min ( * ( / ( + v1 v2 ) 8 ) 2 ) 509 ) 10 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 3 ) 4 ) v1 ) ( / v0 4 ) ) ( max ( min ( / ( + v0 3 ) 4 ) v1 ) ( / v0 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max v0 1 ) 252 ) v1 ) ( min ( - ( max v0 1 ) 252 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 8 ) ) ( + ( / ( - -1000 ( % ( + ( min ( * v0 1000 ) ( - v1 1000 ) ) v2 ) 4 ) ) 4 ) ( * v3 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) ( + ( max ( * v0 4 ) -127 ) 128 ) ) ( min ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) ( + ( max ( * v0 4 ) -127 ) 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) ( + v2 1 ) ) 10 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "sub-to-add", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( min ( - 62 ( * ( + ( * v0 4 ) v1 ) 8 ) ) ( - ( min ( / ( + ( % ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) 4 ) 999 ) 4 ) ( + ( * v5 125 ) 124 ) ) ( + ( * ( + ( * v0 4 ) v1 ) 8 ) ( + ( * v5 125 ) ( * v6 63 ) ) ) ) ) ( min ( - 62 ( * ( + ( * v0 4 ) v1 ) 8 ) ) ( - ( min ( / ( + ( % ( + ( min ( * v2 1000 ) ( - v3 1000 ) ) v4 ) 4 ) 999 ) 4 ) ( + ( * v5 125 ) 124 ) ) ( + ( * ( + ( * v0 4 ) v1 ) 8 ) ( + ( * v5 125 ) ( * v6 63 ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 64 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 64 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 63 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 5 ) 4 ) ( / ( - 6 ( % v0 4 ) ) 4 ) ) ( + ( / ( + v0 5 ) 4 ) ( / ( - 6 ( % v0 4 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) ( * v2 6 ) ) ( + ( / ( - ( + ( min v0 201 ) v1 ) 241 ) 8 ) ( * v2 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( + v2 13 ) ) ( min ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) ( + v2 13 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( + v0 v1 ) ( * v2 8 ) ) ( + ( * v3 32 ) v1 ) ) ( - ( - ( + v0 v1 ) ( * v2 8 ) ) ( + ( * v3 32 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 5 ) 2 ) 2 ) ) ( + ( max ( min v2 121 ) -3 ) 6 ) ) ( min ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * ( / ( + v1 5 ) 2 ) 2 ) ) ( + ( max ( min v2 121 ) -3 ) 6 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( - v2 5 ) ) 2 ) ( * ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( - v2 5 ) ) 2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + ( / ( + v2 v3 ) 4 ) 34 ) ) ( min ( + v0 v1 ) ( + ( / ( + v2 v3 ) 4 ) 34 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( > ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["mul-zero", "mul-assoc", "mul-comm", "add-comm", "gt-to-lt", "add-assoc", "sub-to-add", "lt-swap-out", "add-fact-mul"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 v3 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( + ( min v0 751 ) v1 ) 751 ) 250 ) ( * v2 4 ) ) ( + ( / ( - ( + ( min v0 751 ) v1 ) 751 ) 250 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( / v0 4 ) 4 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 4 ) ) ( min ( max ( * ( / v0 4 ) 4 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 8 ) v3 ) ) ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 3 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 3 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - 11 ( max ( * ( % v0 3 ) 4 ) 7 ) ) ( - 10 ( max ( * ( % v0 3 ) 4 ) 6 ) ) ) ( max ( - 11 ( max ( * ( % v0 3 ) 4 ) 7 ) ) ( - 10 ( max ( * ( % v0 3 ) 4 ) 6 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "add-comm", "lt-swap-out", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( min ( + v0 116 ) ( + ( * v1 -126 ) ( + v2 v0 ) ) ) ( min ( + v0 116 ) ( + ( * v1 -126 ) ( + v2 v0 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) 66 ) 4 ) ( - ( + 0 ( / ( + ( % ( + ( min ( * v0 63 ) 62 ) v4 ) 4 ) 70 ) 4 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "and-min-to-lt", "sub-to-add", "lt-const-mod", "lt-mul-div-cancel", "max-consts-or", "add-comm"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * ( min v1 31 ) 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-mul-x-y-0", "Eq-a-b", "eq-swap", "add-assoc", "mul-comm", "add-const", "eq-x-y-0"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( - ( * v0 4 ) ( % ( + ( * v0 4 ) v1 ) 8 ) ) v1 ) ) ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ) ) ( <= ( + ( min ( * v5 4 ) 133 ) 0 ) ( min ( * v5 4 ) 133 ) ) ) ( >= ( + ( min ( * v5 4 ) 133 ) 3 ) ( + ( min ( * v5 4 ) 133 ) 3 ) ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "and-comm", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( + ( * v2 8 ) v3 ) ) ( + ( * v2 8 ) v3 ) ) ) ( >= ( + 3 ( + ( + ( * v2 8 ) v3 ) 4 ) ) ( + ( + ( * v2 8 ) 7 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-assoc", "add-zero", "lt-to-zero", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( == ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-zero", "add-assoc", "eq-x-y-0", "add-dist-mul", "sub-to-add", "mul-assoc", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( <= ( + v0 v1 ) ( - ( + v0 v1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 2 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + 3 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["not-gt-to-eqlt", "add-assoc", "min-x-x", "eq-x-x", "Eq-lt-min", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 5 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqgt-to-not-lt", "sub-to-add", "lt-swap-out", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 3 ) 997 ) v2 ) ( + ( + ( min ( * v1 3 ) 997 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 3 ) 997 ) v2 ) 2 ) ( + ( + ( min ( * v1 3 ) 997 ) ( - ( + 3 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( max ( min v0 0 ) -11 ) ( - ( + ( max ( min v0 0 ) -11 ) ( - 5 ( max ( min v0 0 ) -11 ) ) ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eq-comm", "Eq-min-c-pos", "add-const", "sub-to-add", "min-add-both", "mul-zero", "max-min-switch", "eq-swap", "add-assoc", "mul-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( / ( - 30 ( max ( * v0 4 ) 27 ) ) 4 ) ( - ( / v1 4 ) v0 ) ) ( min ( / ( - 30 ( max ( * v0 4 ) 27 ) ) 4 ) ( - ( / v1 4 ) v0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( + ( * ( max ( min ( max ( min ( max ( min ( / ( + ( * v1 -252 ) ( + v2 9 ) ) 32 ) 7 ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 9 ) 32 ) ) ( / ( max ( min ( + ( * v1 -63 ) ( / ( + v2 9 ) 4 ) ) 62 ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 9 ) 4 ) ) 8 ) ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 14 ) 32 ) ) 7 ) -1 ) 32 ) ( * v1 252 ) ) -1 ) 4 ) 4 ) ( * ( + ( * ( max ( min ( max ( min ( max ( min ( / ( + ( * v1 -252 ) ( + v2 9 ) ) 32 ) 7 ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 9 ) 32 ) ) ( / ( max ( min ( + ( * v1 -63 ) ( / ( + v2 9 ) 4 ) ) 62 ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 9 ) 4 ) ) 8 ) ) ( / ( + ( min ( + ( * v1 -252 ) v2 ) 242 ) 14 ) 32 ) ) 7 ) -1 ) 32 ) ( * v1 252 ) ) -1 ) )", "end": "1"}, "rules": ["mul-cancel-div", "sub-to-add", "add-zero", "mod-multiple", "mod-consts", "mod-minus-out", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "mul-one", "mul-comm", "lt-swap-out", "sub-to-add", "add-fact-mul", "mul-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( >= ( - -16 ( max ( min v0 116 ) -14 ) ) ( - ( + ( - -16 ( max ( min v0 116 ) -14 ) ) ( + ( max ( min v0 116 ) -14 ) 18 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "sub-to-add", "mul-zero", "and-comm", "add-fact-mul", "add-assoc", "add-comm", "max-consts-or", "lt-swap-out", "mul-comm", "or-to-and", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * ( / v0 4 ) 4 ) ( * ( min v1 1 ) 70 ) ) 62 ) ( - ( + ( * ( + v1 1 ) 70 ) ( * ( / v0 4 ) 4 ) ) 7 ) )", "end": "1"}, "rules": ["min-mul-in-pos", "add-assoc", "min-add-both", "lt-min-term+cpos", "sub-to-add", "add-dist-mul", "mul-comm", "lt-swap-in", "add-comm"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 16 ( * ( max ( min ( + ( * v0 4 ) v1 ) 8 ) 7 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "sub-to-add", "add-comm", "mul-comm", "eq-comm", "eq-swap", "Eq-a-b"]}, {"expression": {"start": "( <= ( + ( / v0 125 ) ( / ( + ( % v0 125 ) 249 ) 125 ) ) ( / v0 125 ) )", "end": "0"}, "rules": ["add-denom-mul", "lt-const-mod", "div-minus-in", "add-fact-mul", "add-comm", "mul-comm", "div-consts-add", "lt-mul-div-cancel", "lt-swap-out", "sub-to-add", "eqlt-to-not-gt", "mul-zero"]}, {"expression": {"start": "( == ( - ( * ( / v0 4 ) 4 ) 8 ) ( - ( + ( - ( * ( / v0 4 ) 4 ) 8 ) ( + ( * v1 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-comm", "mul-assoc", "Eq-a-b", "sub-to-add", "eq-comm", "eq-swap", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 508 ) ( + v0 508 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["add-comm", "lt-swap", "lt-swap-out", "eqlt-to-not-gt", "add-dist-mul", "and-comm", "lt-x-x-sub-a", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 127 0 ) 1 ) v0 ) ( + ( - ( + 127 0 ) 1 ) v0 ) ) ) ( <= ( + 0 ( + ( * v1 8 ) v2 ) ) ( + ( * v1 8 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * v1 8 ) v2 ) 4 ) ) ( + ( + ( * v1 8 ) 7 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / ( + v0 690 ) 673 ) ( / ( + v0 690 ) 673 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) ( + ( * v0 504 ) ( + ( * v1 128 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + v1 116 ) ) ( + ( * v3 4 ) ( + ( * v4 8 ) v1 ) ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 126 ) ) ( + v1 116 ) ) ( + ( * v3 4 ) ( + ( * v4 8 ) v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 140 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 64 ) 140 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( + ( * v1 8 ) ( + v2 v3 ) ) 1999 ) 0 ) ) ( - v0 ( max ( min ( + ( * v1 8 ) ( + v2 v3 ) ) 1999 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / v1 16 ) ) ( - v0 ( / v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 1 ) ) ( min ( / ( + ( + v0 v1 ) 132 ) 8 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 2 ) 9 ) ( * ( / v1 250 ) 8 ) ) ( + ( * ( / v0 2 ) 9 ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 1008 ) ) ( - v0 ( * v1 1008 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( * v0 2 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( + ( + ( max ( * v0 32 ) -9 ) v1 ) 5 ) v2 ) ( + ( + ( min ( * v0 32 ) -9 ) ( + ( max ( * v0 32 ) -9 ) v1 ) ) 46 ) ) ( min ( max ( + ( + ( max ( * v0 32 ) -9 ) v1 ) 5 ) v2 ) ( + ( + ( min ( * v0 32 ) -9 ) ( + ( max ( * v0 32 ) -9 ) v1 ) ) 46 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) ( * v2 3 ) ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) ( * v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( min ( - v0 v1 ) 128 ) 3 ) 4 ) ( / ( + ( min ( - v0 v1 ) 128 ) 3 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 2495 ) ( * v1 4 ) ) ( + ( min ( * v0 4 ) 2495 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 3 ) ) ( + ( / v0 4 ) ( * v1 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 19 ) ) ( min ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( + ( + ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ( * v2 32 ) ) 19 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 8 ) 997 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) ( + ( min ( * v0 8 ) 997 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( - ( / ( - v2 v1 ) 4 ) 9 ) ) ( - ( / ( - ( min ( + ( + v3 v0 ) 36 ) v2 ) v1 ) 4 ) 9 ) ) ( max ( min ( max ( / ( + ( - v0 v1 ) 3 ) 4 ) 0 ) ( - ( / ( - v2 v1 ) 4 ) 9 ) ) ( - ( / ( - ( min ( + ( + v3 v0 ) 36 ) v2 ) v1 ) 4 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( + ( * v2 8 ) v3 ) 4 ) ) ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( + ( * v2 8 ) v3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( / v1 4 ) ( * v2 128 ) ) ) ( + ( * v0 64 ) ( + ( / v1 4 ) ( * v2 128 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( + v2 3 ) ) ( min ( - ( max ( * v0 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) ( + ( min ( * v3 12 ) 20 ) 11 ) ) 4 ) ( * v3 -3 ) ) ( + ( / ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( / v1 4 ) ) ( + ( min ( * v3 12 ) 20 ) 11 ) ) 4 ) ( * v3 -3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min v0 1999 ) 0 ) ( * v1 16 ) ) ( + ( max ( min v0 1999 ) 0 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( * v1 11 ) ) ( + ( * v0 4 ) ( * v1 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / ( + ( min v0 1000 ) v1 ) 8 ) v2 ) ( + ( * v3 4 ) v4 ) ) ( - ( + ( / ( + ( min v0 1000 ) v1 ) 8 ) v2 ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( - v2 ( * v3 4 ) ) 7 ) ) ) ( - ( + ( / v0 4 ) v1 ) ( min ( / v0 4 ) ( + ( - v2 ( * v3 4 ) ) 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 16 ) ) ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 3 ) ) ( min ( + v0 v1 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * v0 504 ) ( * v0 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( - 0 ( max ( / ( - -500 ( % ( + v0 v1 ) 4 ) ) 4 ) ( - -3 ( * v2 4 ) ) ) ) ( / ( + v0 v1 ) 4 ) ) 0 ) v3 ) ( min ( - ( + ( - 0 ( max ( / ( - -500 ( % ( + v0 v1 ) 4 ) ) 4 ) ( - -3 ( * v2 4 ) ) ) ) ( / ( + v0 v1 ) 4 ) ) 0 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) ) ( - v4 4 ) ) ( min ( + ( * v0 4 ) ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) ) ( - v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 28 ) 110 ) ( * v1 4 ) ) ( + ( max ( * v0 28 ) 110 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( / ( + ( + v1 v2 ) 3 ) 4 ) ) ( - v0 ( / ( + ( + v1 v2 ) 3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) 11 ) v1 ) ( min ( + ( * v0 16 ) 11 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 253 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 253 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 504 ) ( + ( * v1 1000 ) v2 ) ) 499 ) ( + v3 v2 ) ) ( min ( + ( + ( * v0 504 ) ( + ( * v1 1000 ) v2 ) ) 499 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( * v1 9 ) ) ( + ( * v0 2 ) ( * v1 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 63 ) 62 ) v1 ) v2 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 8 ) ) ( + 8 3 ) ) ( min ( - v0 ( * v1 8 ) ) ( + 8 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( + ( + v0 v1 ) v2 ) 8 ) ( - ( + ( + ( + v0 1 ) v1 ) v2 ) 8 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( min ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ) ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( min ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) ( min ( + ( * v0 1000 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 3 ) 122 ) ( * v1 4 ) ) ( + ( max ( * v0 3 ) 122 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) ( * v3 64 ) ) ) 63 ) 31 ) v4 ) ( min ( - ( min ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) ( * v3 64 ) ) ) 63 ) 31 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 12 ) ( + ( + v1 v2 ) v3 ) ) ( + ( * v0 12 ) ( + ( + v1 v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + v1 v2 ) 4 ) 0 ) 7 ) ( - ( + ( * ( + v1 v2 ) 4 ) 0 ) 7 ) ) ) ( >= ( - ( + ( * ( + v1 v2 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v1 v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 8 ) v1 ) 8 ) ( + ( * v2 64 ) 81 ) ) ( min ( * ( + ( * v0 8 ) v1 ) 8 ) ( + ( * v2 64 ) 81 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 1 ) ) ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( + ( * v2 16 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 16 ) v3 ) 15 ) ( + ( + ( * v2 16 ) v3 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( + ( * v0 12 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 12 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 16 ) ) ) ( + ( * v0 8 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 16 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 66 ) 63 ) ( / ( + ( - ( max ( * ( / ( - ( + v0 v1 ) 1 ) 4 ) 4 ) -3 ) ( min ( * ( / v1 4 ) 4 ) 1999 ) ) 66 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -1000 ) 4 ) 4 ) ( * v0 -1000 ) )", "end": "1"}, "rules": ["mul-comm", "div-consts-mul", "mul-assoc", "eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + v0 67 ) 4 ) ( + ( max v1 -1 ) 1 ) ) ( max ( / ( + v0 67 ) 4 ) ( + ( max v1 -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 3 ( - ( + 0 ( / ( + ( % v0 8 ) 635 ) 128 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-const-mod", "lt-swap-out", "add-comm", "max-consts-or", "lt-mul-div-cancel", "sub-to-add", "and-min-to-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 8 ) 48 ) 36 ) ) 36 ) 4 ) 4 ) ( * ( % v0 ( / ( + ( * v1 8 ) 48 ) 36 ) ) 36 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-comm", "mul-assoc", "div-consts-mul"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( / ( min ( + ( * ( max ( + ( * v0 4 ) ( - ( / v1 250 ) ( / ( - ( + v2 v1 ) 1 ) 250 ) ) ) -3 ) -64 ) 65 ) ( + ( * ( min ( + ( * v0 -4 ) ( - ( / ( - ( + v2 v1 ) 1 ) 250 ) ( / v1 250 ) ) ) 3 ) 64 ) 88 ) ) 24 ) -1 ) 24 ) 4 ) 4 ) ( * ( max ( / ( min ( + ( * ( max ( + ( * v0 4 ) ( - ( / v1 250 ) ( / ( - ( + v2 v1 ) 1 ) 250 ) ) ) -3 ) -64 ) 65 ) ( + ( * ( min ( + ( * v0 -4 ) ( - ( / ( - ( + v2 v1 ) 1 ) 250 ) ( / v1 250 ) ) ) 3 ) 64 ) 88 ) ) 24 ) -1 ) 24 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "eq-x-x", "mul-comm"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 16 ) v3 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 16 ) v3 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 7 ) ( * ( + ( * v0 2 ) ( + v1 1 ) ) 8 ) )", "end": "1"}, "rules": ["mul-zero", "add-assoc", "add-const", "sub-to-add", "add-dist-mul", "mul-comm", "add-comm", "add-fact-mul", "lt-swap-in"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 8 ) 46 ) 32 ) ( - ( + 0 3 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "and-min-to-lt", "max-consts-or", "lt-const-mod", "lt-swap-out", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 128 ) v1 ) ) ( + ( * v0 128 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 128 ) v1 ) 124 ) ) ( + ( + ( * v0 128 ) 127 ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 501 ) ( + ( - ( + 502 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 7 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 1007 ) 8 ) ( / ( + v3 1007 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-zero", "add-assoc", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( >= ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-swap-out", "add-zero", "lt-x-x-sub-a", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( < ( - ( * ( + v0 v1 ) 4 ) 267 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 273 ) )", "end": "1"}, "rules": ["mul-zero", "add-const", "add-assoc", "add-fact-mul", "add-dist-mul", "lt-swap-in", "sub-to-add", "add-comm", "mul-comm"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )", "end": "0"}, "rules": ["add-const", "add-fact-mul", "sub-to-add", "mul-comm", "eq-comm", "add-assoc", "add-dist-mul", "mul-zero", "eq-x-y-0"]}, {"expression": {"start": "( >= ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "add-assoc", "lt-swap-out", "sub-to-add", "lt-swap-in", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "lt-to-zero", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( + v0 5 ) ( - ( - v0 1 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-swap-in", "sub-to-add", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= ( + ( * ( + ( * v3 3 ) 0 ) 8 ) 0 ) ( * v3 24 ) ) ) ( >= ( + ( * ( + ( * v3 3 ) 2 ) 8 ) 7 ) ( + ( * v3 24 ) 23 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-dist-mul", "add-assoc", "add-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 2 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )", "end": "0"}, "rules": ["add-comm", "add-fact-mul", "lt-swap-in", "lt-swap-out", "add-const", "sub-to-add", "mul-zero", "add-assoc", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 0 ) 1 ) ( - ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 1 ) ) ) ( >= ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 3 ) 1 ) ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) 3 ) v2 ) 1 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 32 ) ( - ( + 33 ( / v3 4 ) ) 1 ) ) ) ( <= ( * v4 16 ) ( + ( * v4 16 ) 0 ) ) ) ( >= ( + ( * v4 16 ) 15 ) ( + ( * v4 16 ) ( - ( + 16 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-zero", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( / v1 250 ) ( / ( + 0 v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "add-zero", "eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 63 ) 62 ) v1 ) 4 ) 50 ) 16 ) ( - ( + 0 ( / ( + ( % ( + ( min ( * v0 63 ) 62 ) v1 ) 4 ) 78 ) 16 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-swap-out", "add-comm", "sub-to-add", "lt-mul-div-cancel", "and-min-to-lt", "lt-const-mod", "max-consts-or"]}, {"expression": {"start": "( > ( - 0 ( * v0 5 ) ) ( - 17 ( * v0 5 ) ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "lt-swap-in", "mul-zero", "add-fact-mul", "add-comm", "gt-to-lt", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 129 ) 128 ) ( - ( + 0 ( / ( + ( % v0 4 ) 381 ) 128 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["sub-to-add", "and-min-to-lt", "lt-swap-out", "max-consts-or", "add-comm", "lt-const-mod", "lt-mul-div-cancel", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - ( + ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - -78 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "add-comm", "add-dist-mul", "max-min-switch", "add-fact-mul", "Eq-min-c-pos", "mul-zero", "eq-x-y-0", "add-const", "add-assoc", "min-add-both", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 4 ) ( + ( * v0 4 ) 0 ) ) ) ( >= ( + ( * v0 4 ) 3 ) ( + ( * v0 4 ) 3 ) ) ) ( <= ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) ) ) ( >= ( + ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) 1 ) ( + ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) 1 ) ) ) ( <= ( + ( + ( * 0 16 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 1 16 ) 20 ) 15 ) 19 ) )", "end": "1"}, "rules": ["eq-x-x", "add-zero", "eqgt-to-not-lt", "Eq-lt-min", "not-gt-to-eqlt", "min-x-x"]}, {"expression": {"start": "( < ( / ( + ( + ( * v0 3 ) v1 ) 6 ) 4 ) ( / ( + ( * ( + v0 1 ) 3 ) v1 ) 4 ) )", "end": "0"}, "rules": ["add-comm", "lt-mul-div-cancel", "lt-swap-in", "mul-one", "lt-swap", "mul-zero", "mul-assoc", "add-dist-mul", "mul-comm", "mul-cancel-div", "sub-to-add", "add-fact-mul", "add-assoc", "lt-const-mod-false"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( max ( - ( + ( / v0 125 ) ( * v1 8 ) ) 1 ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ( + ( + ( * 0 4 ) 0 ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ) ) ( >= ( + ( + ( / v0 125 ) ( * v1 8 ) ) 7 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ) ) ( <= ( + ( * 0 32 ) 0 ) 0 ) ) ( >= ( + ( * 1 32 ) 35 ) ( - ( + 64 0 ) 1 ) ) )", "end": "1"}, "rules": ["mul-one", "lt-swap-in", "add-comm", "add-fact-mul", "add-const", "add-assoc", "sub-to-add", "max-consts-or", "eqlt-to-not-gt", "mul-zero", "mul-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / ( + ( min ( * v1 16 ) 109 ) v2 ) 4 ) ( / ( + ( + ( min ( * v1 16 ) 109 ) 0 ) v2 ) 4 ) ) ) ( >= ( / ( + ( + ( min ( * v1 16 ) 109 ) v2 ) 15 ) 4 ) ( / ( + ( + ( min ( * v1 16 ) 109 ) ( - ( + 16 0 ) 1 ) ) v2 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( <= ( + 0 ( * v5 69 ) ) ( * v5 69 ) ) ) ( >= ( + 3 ( + ( * v5 69 ) 68 ) ) ( + ( * v5 69 ) 68 ) ) )", "end": "0"}, "rules": ["add-const", "add-zero", "add-denom-div", "add-fact-mul", "add-dist-mul", "mul-one", "mul-zero", "add-assoc", "sub-to-add", "mul-cancel-div", "lt-mul-div-cancel", "add-comm", "lt-swap-in", "lt-mul-pos-cancel", "mod-consts", "mul-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( - ( * v1 4 ) 7 ) ) ( min ( * v0 4 ) ( - ( * v1 4 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 126 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 126 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 7 ) ( + ( * ( / v1 4 ) 4 ) ( * v2 3 ) ) ) ( + ( * v0 7 ) ( + ( * ( / v1 4 ) 4 ) ( * v2 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 1000 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 1000 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 250 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 32 ( + ( * v0 3 ) ( * v1 11 ) ) ) ( - 10 ( * v0 3 ) ) ) ( min ( - 32 ( + ( * v0 3 ) ( * v1 11 ) ) ) ( - 10 ( * v0 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( + v2 5 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( min ( - ( / ( + ( min ( + ( * v0 16 ) 9 ) ( + v1 v2 ) ) 35 ) 4 ) ( * v3 4 ) ) ( + ( min ( - ( / ( + v1 v2 ) 4 ) ( * v3 4 ) ) ( + ( * ( - v0 v3 ) 4 ) 3 ) ) 8 ) ) ( - ( / ( + v2 35 ) 4 ) ( * v3 4 ) ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v4 v5 ) 47 ) 16 ) 124 ) 0 ) ( * v6 8 ) ) ( max ( min ( / v5 16 ) 126 ) 2 ) ) 5 ) 4 ) 11 ) ) ( min ( max ( max ( min ( - ( / ( + ( min ( + ( * v0 16 ) 9 ) ( + v1 v2 ) ) 35 ) 4 ) ( * v3 4 ) ) ( + ( min ( - ( / ( + v1 v2 ) 4 ) ( * v3 4 ) ) ( + ( * ( - v0 v3 ) 4 ) 3 ) ) 8 ) ) ( - ( / ( + v2 35 ) 4 ) ( * v3 4 ) ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v4 v5 ) 47 ) 16 ) 124 ) 0 ) ( * v6 8 ) ) ( max ( min ( / v5 16 ) 126 ) 2 ) ) 5 ) 4 ) 11 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 32 ) v3 ) 31 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 32 ) v3 ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - v0 7 ) v1 ) ( + ( + ( min v2 491 ) v0 ) 5 ) ) ( min ( max ( - v0 7 ) v1 ) ( + ( + ( min v2 491 ) v0 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -52 ( * ( max ( min ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) ( + ( * ( / v2 4 ) 4 ) 3 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) ( max ( - -52 ( * ( max ( min ( - ( max ( min ( * v0 2 ) 497 ) -2 ) ( max ( min ( * v1 2 ) 509 ) 10 ) ) ( + ( * ( / v2 4 ) 4 ) 3 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) 8 ) ( + ( * v0 8 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( * ( / v1 4 ) 4 ) ) ( + ( * v0 125 ) ( * ( / v1 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( min ( + ( * v1 8 ) 3 ) v2 ) v3 ) ) ( + ( * v0 4 ) ( + ( min ( + ( * v1 8 ) 3 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 251 ) 252 ) ( / ( + v0 251 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( * v0 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 31 ) v0 ) 4 ) 4 ) ) ( min ( max ( max ( * v0 4 ) v1 ) ( + v2 v1 ) ) ( + ( * ( + ( min v3 31 ) v0 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 64 ) 188 ) ( / v1 4 ) ) 63 ) ) ( * v3 64 ) ) ( / v1 4 ) ) ( - ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 252 ) ) ( + ( + ( min ( * v3 64 ) 188 ) ( / v1 4 ) ) 63 ) ) ( * v3 64 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 8 ) ( * v2 32 ) ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 2 ) ) ( - ( / v0 4 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( - ( / v0 4 ) ( / v1 4 ) ) -5 ) 5 ) v2 ) ( min ( + ( max ( - ( / v0 4 ) ( / v1 4 ) ) -5 ) 5 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 250 ) 64 ) ) ( - v0 ( * ( / v1 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 12 ) ) ( + ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) ( * v1 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( % v0 3 ) 96 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 3 ) 96 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min v0 2009 ) 10 ) 10 ) v1 ) ( + ( + ( max ( min v0 2009 ) 10 ) v2 ) 8 ) ) ( min ( max ( - ( max ( min v0 2009 ) 10 ) 10 ) v1 ) ( + ( + ( max ( min v0 2009 ) 10 ) v2 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 504 ) ) 500 ) v2 ) ( min ( + ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 504 ) ) 500 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 1000 ) ( + ( * v1 128 ) v2 ) ) ( + ( * v0 1000 ) ( + ( * v1 128 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - v0 ( * v1 500 ) ) ( + 500 3 ) ) ( min ( - v0 ( * v1 500 ) ) ( + 500 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 16 ) 484 ) ( + v1 v2 ) ) 19 ) v3 ) ( min ( + ( + ( min ( * v0 16 ) 484 ) ( + v1 v2 ) ) 19 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 22 ) ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) ) ( + ( min ( * v0 4 ) 22 ) ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) 15 ) v2 ) ( min ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) 15 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v1 -252 ) v2 ) 251 ) 4 ) 11 ) 253 ) 253 ) ( * v1 1008 ) ) ) ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( min ( + ( * v1 -252 ) v2 ) 251 ) 4 ) 11 ) 253 ) 253 ) ( * v1 1008 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( + ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 64 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v4 4 ) ) 1 ) ) ( * v4 -4 ) ) ) ( - ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 2 ) ) ( + ( min ( - ( max ( min ( / ( + ( + v2 v0 ) 47 ) 16 ) 124 ) 0 ) ( * v3 64 ) ) ( + ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v4 4 ) ) 1 ) ) ( * v4 -4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 0 ) 9 ) 9 ) ( * v0 0 ) )", "end": "1"}, "rules": ["mul-zero"]}, {"expression": {"start": "( == ( min ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ( + ( + ( * v2 8 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v3 32 ) ) ) 5 ) ) ( min ( min ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ( + ( + ( * v2 8 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v3 32 ) ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( / ( - 104 v2 ) 4 ) ( * v3 -2 ) ) ) ( + ( * ( / ( - ( + v0 v1 ) 1 ) 250 ) 16 ) ( + ( / ( - 104 v2 ) 4 ) ( * v3 -2 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) 7 ) v4 ) ( min ( + ( min ( + ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) 7 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( + ( * v0 126 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 111 ) ( + ( * v0 126 ) v1 ) ) 8 ) ) ( min ( max ( max ( - ( + ( * v0 126 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 111 ) ( + ( * v0 126 ) v1 ) ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 54 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 125 ) ) ) 70 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + ( + ( min ( * ( + ( * v2 4 ) v3 ) 8 ) 54 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 125 ) ) ) 70 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 252 ) v1 ) ( + ( * v2 126 ) v3 ) ) ( + ( + ( * v0 252 ) v1 ) ( + ( * v2 126 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -20 ) 4 ) 4 ) ( * v0 -20 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 46 ) ) ( + ( / v1 4 ) 45 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 46 ) ) ( + ( / v1 4 ) 45 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 16 ) 57 ) ( + v1 v2 ) ) ( + ( min ( * v0 16 ) 57 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( * ( + v0 v1 ) 8 ) ( + ( / v2 4 ) 69 ) ) ( + ( * ( + v0 v1 ) 8 ) 9 ) ) ( + ( min ( / ( - ( + v3 v2 ) 2 ) 4 ) ( - ( * ( + v0 v1 ) 8 ) 59 ) ) 68 ) ) ( max ( min ( max ( * ( + v0 v1 ) 8 ) ( + ( / v2 4 ) 69 ) ) ( + ( * ( + v0 v1 ) 8 ) 9 ) ) ( + ( min ( / ( - ( + v3 v2 ) 2 ) 4 ) ( - ( * ( + v0 v1 ) 8 ) 59 ) ) 68 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 250 ) v3 ) 124 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( * v2 250 ) v3 ) 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -32 ) 4 ) 4 ) ( * v0 -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( == ( + ( * ( % v0 5 ) 28 ) ( + ( * v1 4 ) v2 ) ) ( + ( * ( % v0 5 ) 28 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * v0 2 ) 497 ) -2 ) 1 ) v1 ) ( min ( + ( max ( min ( * v0 2 ) 497 ) -2 ) 1 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( * v0 2 ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "eq-comm", "Eq-a-b", "sub-to-add", "mul-comm", "add-comm"]}, {"expression": {"start": "( == ( min ( - 1000 ( * ( + ( * v0 63 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 250 ) ( + ( * v0 63 ) v1 ) ) 4 ) ) ) ( min ( - 1000 ( * ( + ( * v0 63 ) v1 ) 4 ) ) ( - v2 ( * ( + ( * v3 250 ) ( + ( * v0 63 ) v1 ) ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-zero", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( / v1 4 ) v2 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 180 ) 168 ) ) -168 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 180 ) 168 ) ) -168 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 64 ) ) ) ( + ( * v0 8 ) ( + ( / v1 4 ) ( * v2 64 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 255 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 255 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["eq-x-x", "div-consts-mul", "mul-assoc", "mul-comm"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( * v2 252 ) ) ( + ( / v1 4 ) 251 ) ) ( + ( / v1 4 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( - ( + ( * ( + v0 1 ) 8 ) v1 ) 5 ) )", "end": "0"}, "rules": ["add-assoc", "add-dist-mul", "sub-to-add", "mul-assoc", "lt-swap-out", "lt-swap", "mul-comm", "mul-zero", "add-comm", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( + ( + ( / v0 8 ) ( + ( * v1 20 ) ( + ( * v2 32 ) ( * v3 3 ) ) ) ) 17 ) ( + ( min ( / ( + v0 507 ) 8 ) ( + ( min ( + ( / v0 8 ) ( * v2 32 ) ) v4 ) 31 ) ) ( * v3 3 ) ) ) ( min ( + ( + ( / v0 8 ) ( + ( * v1 20 ) ( + ( * v2 32 ) ( * v3 3 ) ) ) ) 17 ) ( + ( min ( / ( + v0 507 ) 8 ) ( + ( min ( + ( / v0 8 ) ( * v2 32 ) ) v4 ) 31 ) ) ( * v3 3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) 54 ) 16 ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-const-mod", "lt-mul-div-cancel", "and-min-to-lt", "max-consts-or", "eqlt-to-not-gt", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * ( - ( + 12 0 ) 1 ) 4 ) 3 ) 47 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( max ( * ( min v0 248 ) 2 ) -3 ) ( * v1 15 ) ) ( + ( max ( * ( min v0 248 ) 2 ) -3 ) ( * v1 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( - 16 ( max ( * ( % v0 3 ) 6 ) 10 ) ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "mul-assoc", "mod-minus-in", "add-comm", "eqgt-to-not-lt", "sub-to-add", "lt-mul-pos-cancel", "lt-const-mod", "mul-comm", "max-consts-and", "lt-swap"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 500 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 500 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( - ( + ( * ( + v0 v1 ) 4 ) 0 ) 7 ) ( - ( * ( + v0 v1 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v0 v1 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v0 v1 ) 4 ) 3 ) 7 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 125 ) ( - ( + 0 ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 2 ) 0 ) ( + ( * v3 2 ) 0 ) ) ) ( >= ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["add-zero", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( min v0 1999 ) ( * v1 1000 ) ) ( + ( min v0 1999 ) ( * v1 1000 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "eqgt-to-not-lt", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "sub-to-add"]}, {"expression": {"start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * ( min ( - v1 ( max ( min v2 509 ) 10 ) ) -11 ) 4 ) 48 ) ) 1 ) )", "end": "0"}, "rules": ["Eq-a-b", "eq-mul-x-y-0", "eq-swap", "add-assoc", "sub-to-add", "eq-x-y-0", "add-const", "mul-comm"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) 8 ) v1 ) ( min ( + ( * v0 8 ) 8 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( * v1 8 ) ( + v2 v3 ) ) ) ( - v4 4 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 8 ) ( + v2 v3 ) ) ) ( - v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["lt-to-zero", "lt-swap-in", "add-assoc", "not-gt-to-eqlt", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( * v0 12 ) 20 ) -1 ) 4 ) 4 ) ( * ( max ( * v0 12 ) 20 ) -1 ) )", "end": "1"}, "rules": ["mul-assoc", "sub-to-add", "div-minus-out", "div-consts-mul", "mul-comm", "max-to-min", "add-fact-mul", "eq-x-y-0", "min-mul-in-neg", "eq-mul-x-y-0", "min-div-in-pos"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( + ( * v1 4 ) v2 ) 0 ) 4 ) 0 ) ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v1 4 ) v2 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 15 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-dist-mul", "mul-comm", "eqlt-to-not-gt", "lt-to-zero", "add-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( * v0 4 ) 17 ) ( - ( + ( - ( * v0 4 ) 17 ) ( + ( * ( min v1 60 ) 4 ) 24 ) ) 1 ) )", "end": "0"}, "rules": ["eq-mul-x-y-0", "add-const", "eq-swap", "eq-comm", "sub-to-add", "Eq-a-b", "add-assoc", "mul-comm", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) 0 ) 2 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) 1 ) 2 ) 1 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "0"}, "rules": ["add-dist-mul", "lt-to-zero", "add-comm", "mul-assoc", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( max ( - ( / v2 125 ) 1 ) ( / v2 125 ) ) ( + ( + ( * 0 4 ) 0 ) ( / v2 125 ) ) ) ) ( >= ( + ( + ( / v2 125 ) ( * ( / v3 8 ) 8 ) ) 7 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( / v2 125 ) ( * ( / v3 8 ) 8 ) ) ) ) ) ( <= ( + ( * 0 32 ) 0 ) 0 ) ) ( >= ( + ( * 1 32 ) 35 ) ( - ( + 64 0 ) 1 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-swap-in", "add-dist-mul", "lt-swap-out", "max-to-min", "min-comm", "min-x-x-plus-a-pos", "lt-to-zero", "add-assoc", "eqlt-to-not-gt", "sub-to-add", "add-comm"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 3 ) ( - ( min ( * ( max ( * ( + v0 1 ) 2 ) ( + ( * ( max ( min ( * ( + ( * v1 8 ) v2 ) 2 ) 499 ) 0 ) 2 ) 1 ) ) 2 ) ( + ( * ( + v0 1 ) 4 ) 2 ) ) 6 ) )", "end": "0"}, "rules": ["mul-assoc", "add-fact-mul", "add-dist-mul", "min-comm", "add-comm", "add-assoc", "and-min-to-lt", "min-sub-both", "lt-swap-in", "mul-comm", "and-lt-to-max", "sub-to-add"]}, {"expression": {"start": "( >= 0 ( - ( + 0 ( + ( + ( / ( - 0 ( max ( - ( * ( max ( min ( * v0 2 ) 509 ) 10 ) 4 ) v1 ) ( + ( * v2 4 ) 52 ) ) ) 4 ) v2 ) 14 ) ) 1 ) )", "end": "1"}, "rules": ["lt-mul-div-cancel", "add-assoc", "min-min-div-pos", "and-comm", "max-to-min", "add-dist-mul", "and-min-to-lt", "add-denom-mul", "add-fact-mul", "eqgt-to-not-lt", "min-add-both", "sub-to-add", "mul-zero", "mul-assoc", "add-comm", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * 0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * 4 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 12 ) ) ( + ( / v0 8 ) ( * v1 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( + ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) 7 ) v4 ) ( min ( + ( min ( + ( + ( * v0 32 ) ( + ( * v1 126 ) v2 ) ) 22 ) ( + v3 v2 ) ) 7 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 46 ) ) ( + ( / v0 4 ) ( * v1 46 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( + ( * v1 16 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( / v1 8 ) ) 3 ) ( - ( - v0 ( / v1 8 ) ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( / v1 4 ) ( * v3 12 ) ) 11 ) ) ( * v3 -12 ) ) ( + ( / v1 4 ) v4 ) ) ( - ( + ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( + ( + ( / v1 4 ) ( * v3 12 ) ) 11 ) ) ( * v3 -12 ) ) ( + ( / v1 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 285 ( + ( * v0 9 ) ( * v1 143 ) ) ) ( - 142 ( * v0 9 ) ) ) ( min ( - 285 ( + ( * v0 9 ) ( * v1 143 ) ) ) ( - 142 ( * v0 9 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 8 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 8 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + 494 14 ) 256 ) 256 ) ( * v0 504 ) ) ( + ( * ( / ( + 494 14 ) 256 ) 256 ) ( * v0 504 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 2 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( max ( min ( / v0 16 ) 126 ) 2 ) ( * v1 32 ) ) 2 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 35 ) 104 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) ( + ( min ( * v0 35 ) 104 ) ( * ( / ( + v1 v2 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 257 ) 252 ) ( / ( + v0 257 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 32 ) ) ) ( + ( max ( min ( min ( / ( - ( + v3 v4 ) 1 ) 16 ) ( + ( + ( / v4 16 ) ( * v5 64 ) ) 63 ) ) 121 ) -3 ) 2 ) ) ( min ( + ( * v0 4 ) ( + ( max ( min v1 126 ) 2 ) ( * v2 32 ) ) ) ( + ( max ( min ( min ( / ( - ( + v3 v4 ) 1 ) 16 ) ( + ( + ( / v4 16 ) ( * v5 64 ) ) 63 ) ) 121 ) -3 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * ( / v1 125 ) 125 ) ) ( + ( / v0 4 ) ( * ( / v1 125 ) 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 249 ( * v0 32 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 32 ) v3 ) ) 12 ) ) ( min ( - 249 ( * v0 32 ) ) ( + ( - ( max ( min ( * ( / ( + ( + v1 v2 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( * v0 32 ) v3 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) v2 ) ( min ( + ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) 13 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 v3 ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( / v0 4 ) v1 ) 4 ) ( * ( + ( / v0 4 ) v1 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 63 ) ) ( + ( / v0 8 ) ( * v1 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( - ( / v1 4 ) ( / ( + ( + v2 v1 ) 31 ) 4 ) ) ) ( + ( * v0 4 ) ( - ( / v1 4 ) ( / ( + ( + v2 v1 ) 31 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( * v1 8 ) ) ( / v2 4 ) ) ( - ( - v0 ( * v1 8 ) ) ( / v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / ( + ( * v0 2 ) 25 ) 125 ) 125 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 2 ) ) ( + ( * ( / ( + ( * v0 2 ) 25 ) 125 ) 125 ) ( * ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 253 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) ( min ( + ( + ( * v0 253 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + ( min ( + ( * v1 500 ) 500 ) v3 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) ( + ( * v1 40 ) ( + v2 v3 ) ) ) ( + ( + v2 v3 ) 71 ) ) ( min ( + ( * v0 8 ) ( + ( * v1 40 ) ( + v2 v3 ) ) ) ( + ( + v2 v3 ) 71 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + v2 124 ) ) ( min ( / ( + ( + v0 v1 ) 999 ) 4 ) ( + v2 124 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( + ( - ( * v0 32 ) ( + ( * v1 -126 ) ( + v2 v3 ) ) ) v3 ) -22 ) ( * v4 8 ) ) ( + ( max ( + ( - ( * v0 32 ) ( + ( * v1 -126 ) ( + v2 v3 ) ) ) v3 ) -22 ) ( * v4 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 1 ) 4 ) v3 ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) 1 ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 20 ) 8 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 20 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 4 ) ) ( + ( / v0 4 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / v0 4 ) ( * v1 8 ) ) ( - ( / v0 4 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 15 ) ( * ( / ( - 125 ( % ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 250 ) ) 250 ) 64 ) ) ( + ( * v0 15 ) ( * ( / ( - 125 ( % ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) 250 ) ) 250 ) 64 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -63 ( % ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) ) 4 ) ( * v4 4 ) ) ( + ( / ( - -63 ( % ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) 4 ) ) 4 ) ( * v4 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( / ( - v0 ( max ( min v1 1996 ) -3 ) ) 4 ) 0 ) ( / ( + v2 11 ) 4 ) ) ( min ( max ( / ( - v0 ( max ( min v1 1996 ) -3 ) ) 4 ) 0 ) ( / ( + v2 11 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 35 ) 34 ) ( * ( / v1 250 ) 8 ) ) ( + ( * ( / v0 35 ) 34 ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 2 ) ( - ( max ( min ( * v1 8 ) 125 ) 1 ) ( max ( min ( * v1 8 ) 113 ) -11 ) ) ) ( + ( * v0 2 ) ( - ( max ( min ( * v1 8 ) 125 ) 1 ) ( max ( min ( * v1 8 ) 113 ) -11 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( % ( + v0 v1 ) 4 ) 255 ) 4 ) ( / ( + v0 v1 ) 4 ) ) ( + ( / ( + ( % ( + v0 v1 ) 4 ) 255 ) 4 ) ( / ( + v0 v1 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 249 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 252 ) ) 249 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - v0 v1 ) -11 ) 2 ) 26 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-a-b", "add-comm", "mul-comm", "eq-swap", "sub-to-add"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 251 ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) ( + v2 251 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( / ( min ( + ( * v0 125 ) v1 ) ( - ( + v2 v1 ) 125 ) ) 4 ) 4 ) 4 ) 4 ) ( * ( / ( min ( + ( * v0 125 ) v1 ) ( - ( + v2 v1 ) 125 ) ) 4 ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( == ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 250 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) 31 ) ) ( min ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + v2 249 ) ) ( + ( + ( * v3 250 ) ( + ( / v1 4 ) ( * v4 32 ) ) ) 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 20 ) 8 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) 20 ) 8 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 46 ) 36 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 8 ) 46 ) 36 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * v0 4 ) v1 ) 8 ) ( + ( * v2 63 ) v3 ) ) ( + ( * ( + ( * v0 4 ) v1 ) 8 ) ( + ( * v2 63 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * ( / ( + ( - ( max ( * v0 4 ) -3 ) v1 ) 3 ) 32 ) 32 ) v1 ) ( - ( max ( * v0 4 ) -3 ) 28 ) ) ( min ( + ( * ( / ( + ( - ( max ( * v0 4 ) -3 ) v1 ) 3 ) 32 ) 32 ) v1 ) ( - ( max ( * v0 4 ) -3 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -32 ) 8 ) 8 ) ( * v0 -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "eq-x-x", "mul-comm", "mul-assoc"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) v1 ) ( + ( + ( min ( * v2 16 ) 109 ) ( + v3 v4 ) ) 12 ) ) ( min ( + ( * v0 12 ) v1 ) ( + ( + ( min ( * v2 16 ) 109 ) ( + v3 v4 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( * v1 4 ) ) ( + ( / v0 8 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( / ( + ( % v0 4 ) 155 ) 16 ) ( - ( + 0 11 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["lt-mul-div-cancel", "lt-const-mod", "eqlt-to-not-gt", "max-consts-or", "lt-swap-out", "and-min-to-lt"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2060 ) 61 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2060 ) 61 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( min ( / ( + ( min ( + ( * v0 500 ) ( + v1 v2 ) ) ( + v3 253 ) ) 507 ) 8 ) ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * ( / ( + ( % ( + ( * v0 500 ) ( + v1 v4 ) ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) 81 ) ) ( * v5 3 ) ) ( + ( min ( min ( / ( + ( min ( + ( * v0 500 ) ( + v1 v2 ) ) ( + v3 253 ) ) 507 ) 8 ) ( + ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) ( * ( / ( + ( % ( + ( * v0 500 ) ( + v1 v4 ) ) 8 ) 507 ) 32 ) 4 ) ) 3 ) ) ( + ( / ( + ( * v0 500 ) ( + v1 v2 ) ) 8 ) 81 ) ) ( * v5 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 16 ) 57 ) ( * v1 4 ) ) ( + ( max ( * v0 16 ) 57 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( + v2 3 ) ) ( min ( / ( + ( + v0 v1 ) 135 ) 8 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 v0 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 77 ) 65 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( / v1 8 ) ) 2 ) 77 ) 65 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * ( / v0 250 ) 64 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 89 ) ) ( min ( max ( * ( / v0 250 ) 64 ) ( + ( / v1 4 ) 69 ) ) ( + ( * ( + ( / v0 250 ) v2 ) 64 ) 89 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 31 ) ) ( min ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( max ( min ( * ( / v1 125 ) 8 ) 125 ) 1 ) ) ( + v2 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 513 ) 503 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 4 ) 513 ) 503 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) ) ( + ( / v0 8 ) ( + ( min ( + ( * v1 -16 ) v2 ) 3 ) ( * ( / ( min ( + ( * v1 16 ) 15 ) v2 ) 8 ) 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + v1 34 ) 32 ) ) -32 ) 4 ) 4 ) ( * ( % v0 ( / ( + v1 34 ) 32 ) ) -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( == ( min ( - 124 ( * v0 63 ) ) ( + ( - ( * ( / ( - ( + v1 v2 ) 1 ) 4 ) 4 ) ( + ( * v0 63 ) v3 ) ) 3 ) ) ( min ( - 124 ( * v0 63 ) ) ( + ( - ( * ( / ( - ( + v1 v2 ) 1 ) 4 ) 4 ) ( + ( * v0 63 ) v3 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 3 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( < ( - ( + ( * v0 8 ) v1 ) 5 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 5 ) )", "end": "1"}, "rules": ["lt-swap-out", "add-comm", "sub-to-add", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( < ( + ( * v0 5 ) v1 ) ( + ( * v0 5 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 114 ) ) ( min ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( + v2 114 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 4 ) ) ( min ( max ( - ( * ( / v0 4 ) 4 ) 8 ) v1 ) ( + ( * ( + ( / v0 4 ) v2 ) 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 252 ) 248 ) ( + v1 v2 ) ) ( + ( min ( * v0 252 ) 248 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( min ( * v2 32 ) 93 ) v3 ) ( + ( + ( min ( * v2 32 ) 93 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 32 ) 93 ) v3 ) 31 ) ( + ( + ( min ( * v2 32 ) 93 ) ( - ( + 32 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "add-comm", "add-assoc", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( * v4 8 ) ) ( / v1 4 ) ) ( - ( - ( - ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 32 ) ) ( * v3 16 ) ) ( * v4 8 ) ) ( / v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 5 ) 7 ) ) ( - ( + 0 7 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["add-comm", "lt-swap", "mul-assoc", "sub-to-add", "max-consts-or", "lt-swap-out", "mod-minus-in", "and-min-to-lt", "lt-mul-pos-cancel", "lt-const-mod", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -7 ) v2 ) ) ( + ( + ( * v1 32 ) v2 ) 28 ) ) ( min ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -7 ) v2 ) ) ( + ( + ( * v1 32 ) v2 ) 28 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 2 ) 61 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 2 ) 61 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-x-x-sub-a", "lt-swap-out"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( max ( min v3 2 ) 0 ) ( max ( min v3 2 ) 0 ) ) ) ( >= ( max ( min v3 2 ) 0 ) ( max ( min v3 2 ) 0 ) ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm", "lt-to-zero"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 5 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "sub-to-add", "add-assoc", "lt-swap", "add-comm", "lt-x-x-sub-a", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) ( * ( - v1 ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) ) 2 ) ) 4 ) 3 ) ( + ( * v1 8 ) 3 ) ) ) ( <= ( - ( * v2 8 ) 5 ) ( - ( * v2 8 ) 5 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( + ( * v2 8 ) 7 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )", "end": "1"}, "rules": ["add-assoc", "mul-comm", "eqgt-to-not-lt", "sub-to-add", "eqlt-to-not-gt", "lt-swap-in", "lt-swap", "lt-to-zero", "add-comm", "add-dist-mul", "mul-assoc"]}, {"expression": {"start": "( <= ( + ( + v0 v1 ) 5 ) ( - ( - ( + ( - v0 1 ) v1 ) 4 ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "lt-swap-in", "lt-x-x-sub-a", "lt-swap-out", "add-comm", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( < ( + ( * v0 4 ) 1 ) ( - ( * ( + v0 1 ) 4 ) 5 ) )", "end": "1"}, "rules": ["mul-comm", "add-dist-mul", "add-fact-mul", "lt-swap-in", "mul-zero", "mul-assoc", "add-assoc", "add-comm", "sub-to-add"]}, {"expression": {"start": "( >= ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 4 ) v2 ) 1 ) )", "end": "1"}, "rules": ["add-comm", "not-gt-to-eqlt", "eq-x-x", "sub-to-add", "min-x-x-plus-a-neg", "Eq-lt-min", "add-dist-mul", "add-assoc", "eqgt-to-not-lt", "mul-comm"]}, {"expression": {"start": "( == ( - ( max ( * v0 63 ) 62 ) 124 ) ( - ( + ( - ( max ( * v0 63 ) 62 ) 124 ) ( - 129 ( max ( * v0 63 ) 62 ) ) ) 1 ) )", "end": "0"}, "rules": ["Eq-min-c-neg", "add-assoc", "min-mul-in-pos", "mul-assoc", "max-to-min", "mul-zero", "add-comm", "eq-comm", "Eq-a-b", "sub-to-add", "mul-comm", "min-add-both", "eq-swap", "add-fact-mul", "eq-mul-x-y-0"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 9 ) 672 ) ) ( - v0 ( * ( / v1 9 ) 672 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 77 ) 63 ) ( / ( + v0 77 ) 63 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 504 ) 494 ) v1 ) ( + ( + ( * v0 504 ) 494 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + ( * ( + ( / v0 4 ) ( * v2 251 ) ) 4 ) 1002 ) ) ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + ( * ( + ( / v0 4 ) ( * v2 251 ) ) 4 ) 1002 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 45 ) 32 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) 45 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - v0 ( / v1 4 ) ) 7 ) ( - ( - v0 ( / v1 4 ) ) 7 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 126 ) 120 ) v1 ) ( min ( + ( * v0 126 ) 120 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( + ( max ( min v0 14 ) 7 ) v1 ) 7 ) v2 ) ( max ( - ( + ( max ( min v0 14 ) 7 ) v1 ) 7 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 253 v0 ) ( + v1 4 ) ) ( min ( - 253 v0 ) ( + v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 32 ( * v0 17 ) ) ( - 5 ( + ( * ( min ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( * v3 16 ) ) ( + ( / v2 4 ) 15 ) ) -4 ) ( + ( * v0 17 ) ( + ( * v4 33 ) ( * ( / v2 4 ) 4 ) ) ) ) ) ) ( min ( - 32 ( * v0 17 ) ) ( - 5 ( + ( * ( min ( - ( / ( + ( + v1 v2 ) 3 ) 4 ) ( * v3 16 ) ) ( + ( / v2 4 ) 15 ) ) -4 ) ( + ( * v0 17 ) ( + ( * v4 33 ) ( * ( / v2 4 ) 4 ) ) ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) ( min ( + ( + ( min ( * v0 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 507 ) 8 ) ( * v3 4 ) ) ( - ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 507 ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 252 ) 246 ) v1 ) ( min ( + ( * v0 252 ) 246 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 -168 ) ( + ( min ( / ( + ( + v3 v0 ) 3 ) 4 ) ( + ( + ( / v0 4 ) ( + ( min ( * ( / ( min ( + ( * v4 -12 ) v5 ) ( + ( * v2 168 ) 11 ) ) 4 ) 4 ) ( + ( * v2 168 ) 8 ) ) ( * v4 12 ) ) ) 3 ) ) ( * v4 -12 ) ) ) ) ( - ( + ( / v0 4 ) v1 ) ( + ( * v2 -168 ) ( + ( min ( / ( + ( + v3 v0 ) 3 ) 4 ) ( + ( + ( / v0 4 ) ( + ( min ( * ( / ( min ( + ( * v4 -12 ) v5 ) ( + ( * v2 168 ) 11 ) ) 4 ) 4 ) ( + ( * v2 168 ) 8 ) ) ( * v4 12 ) ) ) 3 ) ) ( * v4 -12 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 174 ) 169 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 174 ) 169 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 247 ) v1 ) ( min ( + v0 247 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) 1 ) v2 ) ( min ( + ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * v2 128 ) ) ) ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ( * v2 128 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + v2 237 ) ) ( min ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( + v2 237 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 504 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 504 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 125 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 125 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( * v0 44 ) 84 ) ( * v1 16 ) ) ( + ( max ( * v0 44 ) 84 ) ( * v1 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( * v2 16 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 127 ) 128 ) ( + ( max ( / v3 128 ) -1 ) 1 ) ) ( max ( / ( + ( min ( - ( / ( + ( + v0 v1 ) 15 ) 8 ) ( / v1 8 ) ) ( + v2 1 ) ) 127 ) 128 ) ( + ( max ( / v3 128 ) -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 146 ) 22 ) ( * ( / ( + v1 37 ) 4 ) 4 ) ) ( + ( max ( min v0 113 ) -11 ) 34 ) ) ( min ( + ( max ( min v0 146 ) 22 ) ( * ( / ( + v1 37 ) 4 ) 4 ) ) ( + ( max ( min v0 113 ) -11 ) 34 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 66 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) v2 ) ) ( - ( / ( + ( + v0 v1 ) 66 ) 4 ) ( + ( / ( + v0 v1 ) 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )", "end": "1"}, "rules": ["lt-to-zero", "not-gt-to-eqlt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( - 117 ( max ( * v0 63 ) 62 ) ) ( * v1 8 ) ) ( - ( - 117 ( max ( * v0 63 ) 62 ) ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) 16 ) v1 ) ( min ( + ( * v0 16 ) 16 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( min v0 251 ) 14 ) 4 ) ( / ( + ( min v0 251 ) 14 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( min ( * v1 8 ) 125 ) 1 ) ( * v2 8 ) ) ) ( + ( * v0 4 ) ( + ( max ( min ( * v1 8 ) 125 ) 1 ) ( * v2 8 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 72 ) ) ( + ( / v0 4 ) ( * v1 72 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) ( + v3 7 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 6 ) 4 ) 4 ) ) ( + v3 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 29 ) ) ( min ( / ( + ( + v0 v1 ) 31 ) 4 ) ( + v2 29 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 16 ) v1 ) ( - ( * v2 4 ) 12 ) ) ( min ( + ( * v0 16 ) v1 ) ( - ( * v2 4 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 32 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 32 ) ) -31 ) ( + ( max ( min ( + ( * v0 32 ) v1 ) ( - ( min ( + v2 v1 ) 2031 ) 32 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 32 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 32 ) ) -31 ) ( + ( max ( min ( + ( * v0 32 ) v1 ) ( - ( min ( + v2 v1 ) 2031 ) 32 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -44 ( max ( * ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 2 ) ) ) -1 ) 16 ) -40 ) ) ( - ( min ( * ( max v3 1 ) 16 ) 40 ) 44 ) ) ( max ( - -44 ( max ( * ( min ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 2 ) ) ) -1 ) 16 ) -40 ) ) ( - ( min ( * ( max v3 1 ) 16 ) 40 ) 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 930 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( * v2 4 ) 930 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( min ( + ( * v1 -4 ) v2 ) -11 ) ( * ( / ( min ( - ( * v1 4 ) 9 ) v2 ) 2 ) 2 ) ) ) 21 ) v3 ) ( min ( + ( + ( max ( min ( * v0 8 ) 125 ) 1 ) ( + ( min ( + ( * v1 -4 ) v2 ) -11 ) ( * ( / ( min ( - ( * v1 4 ) 9 ) v2 ) 2 ) 2 ) ) ) 21 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 21 ) ( + ( * v3 3 ) v4 ) ) ) v5 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 21 ) ( + ( * v3 3 ) v4 ) ) ) v5 ) ) ) ( >= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 21 ) ( + ( * v3 3 ) v4 ) ) ) v5 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 21 ) ( + ( * v3 3 ) v4 ) ) ) v5 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 63 ) v3 ) ) 4 ) ) ( - v0 ( * ( + ( * v1 250 ) ( + ( * v2 63 ) v3 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) -1 ) ( + ( * v3 2 ) 3 ) ) ( + ( min ( min ( * ( - ( * ( min ( + v1 v2 ) 125 ) 2 ) ( min ( * ( + v1 v2 ) 2 ) 251 ) ) 2 ) ( - ( / ( min ( * ( min ( + v1 v2 ) 125 ) 16 ) ( + ( + v4 v0 ) 4 ) ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) ) ( * v3 2 ) ) 3 ) ) ( max ( min ( max ( - ( / ( + v0 19 ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) -1 ) ( + ( * v3 2 ) 3 ) ) ( + ( min ( min ( * ( - ( * ( min ( + v1 v2 ) 125 ) 2 ) ( min ( * ( + v1 v2 ) 2 ) 251 ) ) 2 ) ( - ( / ( min ( * ( min ( + v1 v2 ) 125 ) 16 ) ( + ( + v4 v0 ) 4 ) ) 4 ) ( * ( min ( * ( + v1 v2 ) 2 ) 251 ) 2 ) ) ) ( * v3 2 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 497 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 64 ) ) 5 ) ) ( min ( / ( - ( + v0 v1 ) 497 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 64 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 128 ) ) -127 ) ( + ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2127 ) 128 ) ) 0 ) ( * v3 4 ) ) ) ( - ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2000 ) 128 ) ) -127 ) ( + ( max ( min ( + ( * v0 128 ) v1 ) ( - ( min ( + v2 v1 ) 2127 ) 128 ) ) 0 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2500 ) 501 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2500 ) 501 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]}, {"expression": {"start": "( >= ( + ( max v0 500 ) 4 ) 0 )", "end": "1"}, "rules": ["lt-swap-in", "and-comm", "eqgt-to-not-lt", "max-consts-and"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( - ( max ( * v0 2 ) -1 ) v1 ) 2 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "Eq-a-b", "sub-to-add", "mul-comm", "eq-swap", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) ( + ( min ( * v0 4 ) 1999 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( max ( min v1 1999 ) 0 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ( min ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( + ( max ( min v1 1999 ) 0 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) ) ( - v0 ( max ( min ( * ( / ( + v1 v2 ) 125 ) 8 ) 125 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) 3 ) ( + v0 188 ) ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "add-comm", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == v0 ( - ( + v0 250 ) 1 ) )", "end": "0"}, "rules": ["add-dist-mul", "mul-zero", "mul-comm", "add-fact-mul", "eq-comm", "add-const", "eq-x-y-0", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) ( + v3 v2 ) ) ( min ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 253 ( max ( * v0 32 ) 221 ) ) ) 1 ) )", "end": "0"}, "rules": ["min-add-both", "max-to-min", "Eq-min-c-neg", "mul-assoc", "eq-swap", "eq-comm", "add-comm", "min-consts-div-neg", "sub-to-add", "mul-comm", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( * ( / v0 4 ) 4 ) ( - ( + ( * ( / v0 4 ) 4 ) ( + ( * v1 4 ) 4 ) ) 1 ) )", "end": "0"}, "rules": ["eq-mul-x-y-0", "Eq-a-b", "sub-to-add", "add-const", "mul-comm", "eq-x-y-0", "eq-swap", "add-assoc"]}, {"expression": {"start": "( < ( - ( + v0 v1 ) 13 ) ( - ( + ( + v0 1 ) v1 ) 25 ) )", "end": "0"}, "rules": ["sub-to-add", "mul-zero", "lt-swap-out", "add-const", "add-comm", "add-fact-mul", "mul-one", "add-assoc", "mul-comm"]}, {"expression": {"start": "( < ( + ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) 1 ) ( * ( + ( * ( + v0 v1 ) 2 ) ( + v2 1 ) ) 2 ) )", "end": "1"}, "rules": ["add-comm", "lt-mul-pos-cancel", "lt-mul-div-cancel", "lt-swap-in", "lt-x-x-sub-a", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / v1 250 ) ( / ( + 0 v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "0"}, "rules": ["eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( / v0 16 ) ( * v1 4 ) ) 2 ) ) ( - ( + 0 ( + ( / v0 16 ) ( * v1 4 ) ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * v1 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-comm", "add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 8 ) )", "end": "0"}, "rules": ["mul-one", "add-fact-mul", "sub-to-add", "add-comm", "lt-swap-in", "add-const", "mul-comm", "add-assoc", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 0 ) 3 ) ( + ( + 0 ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( <= ( - v3 65 ) ( - ( + 0 v3 ) 65 ) ) ) ( >= ( - v3 3 ) ( - ( + ( - ( + 63 0 ) 1 ) v3 ) 65 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min v2 -1 ) v0 ) 16 ) 12 ) ) ( min ( max ( - ( * v0 16 ) 36 ) v1 ) ( + ( * ( + ( min v2 -1 ) v0 ) 16 ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + v0 v1 ) 10 ) ( - ( + ( - ( + v0 v1 ) 10 ) 143 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-comm", "mul-assoc", "sub-to-add", "eq-comm", "eq-swap", "mul-zero", "add-assoc", "add-fact-mul"]}, {"expression": {"start": "( == -124 ( - ( + -124 ( - 131 ( max ( * v0 4 ) 3 ) ) ) 1 ) )", "end": "0"}, "rules": ["max-to-min", "Eq-a-b", "add-assoc", "mul-comm", "mul-one", "sub-to-add", "min-add-both", "eq-comm", "add-comm", "eq-swap", "mul-assoc", "Eq-min-c-neg"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]}, {"expression": {"start": "( >= ( max ( min v0 0 ) -15 ) ( - ( + ( max ( min v0 0 ) -15 ) ( - 5 ( max ( min v0 0 ) -15 ) ) ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "lt-min-term+cpos", "min-add-both", "sub-to-add", "min-comm", "eqgt-to-not-lt", "add-comm", "max-min-switch", "add-assoc"]}, {"expression": {"start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out", "eqgt-to-not-lt", "add-comm", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( + ( * 0 4 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 3 4 ) 14 ) 3 ) 13 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v2 32 ) v3 ) ( + ( * v2 32 ) v3 ) ) ) ( >= ( + ( * v2 32 ) v3 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( - ( + ( + ( * v0 502 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 502 ) v1 ) ( + v2 1 ) ) 7 ) )", "end": "0"}, "rules": ["lt-swap-out", "add-comm", "add-const", "add-assoc", "sub-to-add", "mul-zero", "mul-comm", "add-fact-mul", "lt-swap-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + ( + ( * v0 16 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + ( + ( * v0 16 ) v1 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-assoc", "add-comm", "eqlt-to-not-gt", "lt-to-zero"]}, {"expression": {"start": "( == ( - ( * v0 8 ) 5 ) ( - ( + ( - ( * v0 8 ) 5 ) ( + ( * ( min v1 3 ) 8 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "Eq-a-b", "eq-comm", "sub-to-add", "eq-swap", "add-assoc", "add-fact-mul", "mul-comm", "add-comm"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 35 ( max ( * v0 12 ) 21 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "add-comm", "eq-comm", "mul-assoc", "mul-comm", "Eq-a-b", "min-consts-div-neg", "max-to-min", "Eq-min-c-neg", "min-add-both", "sub-to-add"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 6 ) ( - ( + ( - ( + v0 v1 ) 6 ) 131 ) 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "add-comm", "lt-swap-out", "add-assoc", "sub-to-add"]}, {"expression": {"start": "( >= ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-comm", "add-assoc", "mul-zero", "add-const", "eqgt-to-not-lt", "add-fact-mul", "sub-to-add", "add-comm"]}, {"expression": {"start": "( >= ( - ( min ( * v0 4 ) 1999 ) 6 ) ( - ( + ( - ( min ( * v0 4 ) 1999 ) 6 ) ( + ( max v1 0 ) 11 ) ) 1 ) )", "end": "0"}, "rules": ["min-comm", "min-consts-div-neg", "min-add-both", "lt-swap-out", "mul-comm", "lt-min-term+cpos", "max-to-min", "eqgt-to-not-lt", "sub-to-add", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ) ) ( <= ( + ( * v8 4 ) 0 ) ( + ( * v8 4 ) 0 ) ) ) ( >= ( + ( * v8 4 ) 3 ) ( + ( * v8 4 ) ( - ( + 4 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 1012 ) ( + v0 1012 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "and-comm", "lt-swap-out", "sub-to-add", "add-comm", "lt-swap-in", "add-assoc"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( / v1 4 ) ( * v2 132 ) ) ) ( + ( * v0 4 ) ( + ( / v1 4 ) ( * v2 132 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( max ( * v0 2 ) -1 ) ( * v1 2 ) ) ( - ( max ( * v0 2 ) -1 ) ( * v1 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 127 ) 126 ) ( min ( + ( + ( * v1 253 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + ( min ( + ( * v2 500 ) 500 ) v4 ) v3 ) ) ) ( + ( min ( * v0 127 ) 126 ) ( min ( + ( + ( * v1 253 ) ( + ( * v2 500 ) v3 ) ) 248 ) ( + ( min ( + ( * v2 500 ) 500 ) v4 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 34 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) ( + ( * v0 34 ) ( + ( * ( / v1 250 ) 16 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( min ( * v0 253 ) 252 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + v3 v2 ) ) ( min ( + ( + ( min ( * v0 253 ) 252 ) ( + ( * v1 500 ) v2 ) ) 248 ) ( + v3 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( * v3 64 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v4 4 ) ) 3 ) ) ( * v4 -4 ) ) ) ( - ( + ( / ( + v0 v1 ) 4 ) v2 ) ( + ( min ( - ( / ( + ( + v0 v1 ) 1003 ) 4 ) ( * v3 64 ) ) ( + ( + ( / ( + v0 v1 ) 4 ) ( * v4 4 ) ) 3 ) ) ( * v4 -4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ) ( - ( min ( * ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( * v1 32 ) ) 2 ) 251 ) ( max ( * ( min ( + ( max ( min ( * ( / v0 125 ) 8 ) 125 ) 1 ) ( min ( + ( * v1 32 ) 19 ) v2 ) ) 113 ) 2 ) -23 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 8 ) ( + ( * v1 64 ) ( + ( / ( + v2 v3 ) 4 ) v4 ) ) ) ( + ( * v0 8 ) ( + ( * v1 64 ) ( + ( / ( + v2 v3 ) 4 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( min ( - ( min ( + ( + ( min ( * v0 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) ( * v0 32 ) ) ( - ( + ( * v4 8 ) v1 ) 11 ) ) ( * v2 126 ) ) ) ( + ( * v0 32 ) ( + ( min ( - ( min ( + ( + ( min ( * v0 32 ) 94 ) v1 ) 22 ) ( + ( * v2 -126 ) ( + v3 v1 ) ) ) ( * v0 32 ) ) ( - ( + ( * v4 8 ) v1 ) 11 ) ) ( * v2 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( * v3 4 ) ) ( / v1 8 ) ) ( - ( - ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( * v3 4 ) ) ( / v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) ( + ( * v2 16 ) 1 ) ) ( min ( * ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) 16 ) ( + ( * v2 16 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 671 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 168 ) ( + ( * v0 16 ) v1 ) ) 4 ) ) 9 ) ) ( min ( - 671 ( * ( + ( * v0 16 ) v1 ) 4 ) ) ( + ( - v2 ( * ( + ( * v3 168 ) ( + ( * v0 16 ) v1 ) ) 4 ) ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( min ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) 1999 ) 0 ) ) ( - v0 ( max ( min ( + ( min ( * v1 8 ) 117 ) ( + v2 v3 ) ) 1999 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 252 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( max ( * v0 8 ) -5 ) ( + ( * v0 8 ) 4 ) ) ( + v1 v2 ) ) ( + ( min ( max ( * v0 8 ) -5 ) ( + ( * v0 8 ) 4 ) ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 8 ) ) ( + ( max ( min ( / ( + v0 v1 ) 16 ) 126 ) 2 ) ( * v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 8 ) v1 ) ( + v2 7 ) ) ( min ( + ( * v0 8 ) v1 ) ( + v2 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * v0 2 ) 249 ) ( * v1 4 ) ) ( + ( * ( min ( + ( max ( min v2 124 ) 0 ) ( * v3 32 ) ) ( + ( max ( min v2 60 ) -64 ) 33 ) ) 2 ) 60 ) ) ( min ( + ( min ( * v0 2 ) 249 ) ( * v1 4 ) ) ( + ( * ( min ( + ( max ( min v2 124 ) 0 ) ( * v3 32 ) ) ( + ( max ( min v2 60 ) -64 ) 33 ) ) 2 ) 60 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 254 ) 252 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 254 ) 252 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 17 ) ( * ( / v1 250 ) 8 ) ) ( + ( * ( / v0 4 ) 17 ) ( * ( / v1 250 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - ( * v0 8 ) v1 ) ( * v2 4 ) ) ( + ( - ( * v0 8 ) v1 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 12 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 31 ) 8 ) ( + ( * v2 12 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 128 ) v1 ) ( - v2 126 ) ) ( min ( + ( * v0 128 ) v1 ) ( - v2 126 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( * ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) 4 ) ( + ( + ( * v1 4 ) v2 ) 52 ) ) ( max ( * ( max ( min ( * ( / v0 8 ) 2 ) 509 ) 10 ) 4 ) ( + ( + ( * v1 4 ) v2 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( + ( + ( + v0 v1 ) v2 ) 16 ) v1 ) ( max ( + ( + ( + v0 v1 ) v2 ) 16 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( + ( max ( min v0 2001 ) 2 ) v2 ) 3 ) ) ( min ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + ( + ( max ( min v0 2001 ) 2 ) v2 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( max ( min v0 2009 ) 10 ) 10 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2009 ) 10 ) v3 ) 8 ) ) ( min ( max ( max ( - ( max ( min v0 2009 ) 10 ) 10 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2009 ) 10 ) v3 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) ( + ( min ( * v0 32 ) 94 ) ( + ( * v1 126 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( + ( / v1 8 ) 11 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 12 ) ) ( + ( / v1 8 ) 11 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - -16 ( - 494 ( * v0 256 ) ) ) ( - -16 ( - 494 ( * v0 256 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( * v0 2 ) ( + ( * ( / ( + v1 v2 ) 250 ) 2 ) v3 ) ) ( - ( * v0 2 ) ( + ( * ( / ( + v1 v2 ) 250 ) 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( max ( min v0 2001 ) 2 ) v3 ) ) ( min ( max ( max ( - ( max ( min v0 2001 ) 2 ) 2 ) v1 ) ( + v2 v1 ) ) ( + ( max ( min v0 2001 ) 2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( - v0 ( / v1 4 ) ) 10 ) ( + ( - v0 ( / v1 4 ) ) 10 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 40 ) 32 ) ( / ( + v0 40 ) 32 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( * v0 12 ) v1 ) ( + ( * v2 4 ) v3 ) ) ( + ( + ( * v0 12 ) v1 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 16 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 32 ) ) ( + ( + ( * v5 8 ) ( + ( / v1 4 ) ( * v0 16 ) ) ) 7 ) ) ( * v5 -8 ) ) ) ) ( + ( * v0 16 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( + ( + v3 v1 ) 3 ) 4 ) ( * v4 32 ) ) ( + ( + ( * v5 8 ) ( + ( / v1 4 ) ( * v0 16 ) ) ) 7 ) ) ( * v5 -8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( / v0 4 ) v1 ) ( + v2 125 ) ) ( min ( + ( / v0 4 ) v1 ) ( + v2 125 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 4 ) v3 ) ( min ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 4 ) v3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( <= ( + ( * v0 16 ) 16 ) ( * v0 16 ) )", "end": "1"}, "rules": ["Eq-lt-min", "eqlt-to-not-gt", "lt-min-term+cpos", "min-x-x-plus-a-pos"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) )", "end": "1"}, "rules": ["add-zero", "sub-to-add", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 32 ( * ( max ( min ( + ( * v0 4 ) v1 ) 8 ) 7 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-swap", "eq-comm", "Eq-a-b", "mul-assoc", "add-comm", "mul-comm", "sub-to-add"]}, {"expression": {"start": "( > ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )", "end": "0"}, "rules": ["mul-comm", "mul-zero", "lt-swap-in", "add-comm", "gt-to-lt", "add-const", "add-fact-mul", "sub-to-add", "add-assoc"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( * v2 64 ) ) ( + ( / ( + v0 v1 ) 4 ) 63 ) ) ( + ( * v3 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 8 ) ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 499 ) 4 ) ( * v2 64 ) ) ( + ( / ( + v0 v1 ) 4 ) 63 ) ) ( + ( * v3 4 ) ( + ( / ( + v0 v1 ) 4 ) ( * v4 8 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - v0 ( * v1 8 ) ) 8 ) 3 ) ( + ( min ( - v0 ( * v1 8 ) ) 8 ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 16 ) ) ( + ( / v1 4 ) 15 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( min ( - ( / ( + ( min ( + ( * v0 16 ) 185 ) ( + v1 v2 ) ) 19 ) 4 ) ( * v3 4 ) ) ( + ( min ( - ( / ( + v1 v2 ) 4 ) ( * v3 4 ) ) ( + ( * ( - v0 v3 ) 4 ) 47 ) ) 4 ) ) ( - ( / ( + v2 19 ) 4 ) ( * v3 4 ) ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( * ( / ( - ( + v4 v5 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( * v6 32 ) ) ( max ( min ( * ( / v5 125 ) 8 ) 125 ) 1 ) ) 19 ) 4 ) 51 ) ) ( min ( max ( max ( min ( - ( / ( + ( min ( + ( * v0 16 ) 185 ) ( + v1 v2 ) ) 19 ) 4 ) ( * v3 4 ) ) ( + ( min ( - ( / ( + v1 v2 ) 4 ) ( * v3 4 ) ) ( + ( * ( - v0 v3 ) 4 ) 47 ) ) 4 ) ) ( - ( / ( + v2 19 ) 4 ) ( * v3 4 ) ) ) -1 ) ( + ( * ( min ( - ( - ( max ( min ( * ( / ( - ( + v4 v5 ) 1 ) 125 ) 8 ) 113 ) -11 ) ( * v6 32 ) ) ( max ( min ( * ( / v5 125 ) 8 ) 125 ) 1 ) ) 19 ) 4 ) 51 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) 4 ) ( * v3 -2 ) ) 3 ) ( + ( + ( / ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 125 ) 8 ) 113 ) -11 ) v2 ) 4 ) ( * v3 -2 ) ) 3 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / v0 4 ) ) ( + 0 ( / v0 4 ) ) ) ) ( >= ( + 3 ( + ( / v0 4 ) 248 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) 248 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v1 16 ) v2 ) ( + ( * v1 16 ) v2 ) ) ) ( >= ( + ( * v1 16 ) v2 ) ( + ( * v1 16 ) v2 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( + ( * v0 35 ) ( * ( + ( / v1 125 ) ( * v2 8 ) ) 8 ) ) ( + ( * v0 35 ) ( * ( + ( / v1 125 ) ( * v2 8 ) ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 29 ) 17 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 125 ) ( / v1 125 ) ) 8 ) 29 ) 17 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 7 ) 6 ) ( * v1 4 ) ) ( + ( min ( * v0 7 ) 6 ) ( * v1 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 64 ) 216 ) 112 ) ) 112 ) 4 ) 4 ) ( * ( % v0 ( / ( + ( * v1 64 ) 216 ) 112 ) ) 112 ) )", "end": "1"}, "rules": ["mul-comm", "mul-assoc", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( + ( / v1 32 ) 1 ) ) -32 ) 8 ) 8 ) ( * ( % v0 ( + ( / v1 32 ) 1 ) ) -32 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-assoc", "mul-comm", "eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 65 ) ( + v1 v2 ) ) ( + ( * v0 65 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + ( + ( * v2 8 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 9 ) 4 ) v1 ) ( / ( + v0 6 ) 4 ) ) ( max ( min ( / ( + v0 9 ) 4 ) v1 ) ( / ( + v0 6 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * ( / v2 8 ) 4 ) ) ( / v1 250 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( * ( / v2 8 ) 4 ) ) ( / v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 128 ) v2 ) ) 0 ) 10 ) ( - ( + ( * v1 128 ) v2 ) 10 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( + ( * v1 128 ) v2 ) 124 ) ) 3 ) 10 ) ( - ( + ( + ( * v1 128 ) v2 ) 127 ) 10 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "sub-to-add", "lt-to-zero", "eqgt-to-not-lt", "add-assoc", "add-comm"]}, {"expression": {"start": "( == ( * ( / ( * ( % v0 ( / ( + ( * v1 64 ) 216 ) 112 ) ) 112 ) 8 ) 8 ) ( * ( % v0 ( / ( + ( * v1 64 ) 216 ) 112 ) ) 112 ) )", "end": "1"}, "rules": ["mod-multiple", "mul-comm", "eq-x-x", "add-zero", "mul-cancel-div", "sub-to-add"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) ( + ( * v4 2 ) v5 ) ) 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * ( + ( * v3 8 ) ( + ( * v4 2 ) v5 ) ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( max ( * ( min ( + ( * v1 -32 ) v2 ) 31 ) -1 ) ( + ( * v1 32 ) ( - ( / v0 4 ) ( / ( + ( + v3 v0 ) 3 ) 4 ) ) ) ) -4 ) 5 ) 65 ) 65 ) ( * v1 128 ) ) ) ( + ( * ( / v0 4 ) 4 ) ( + ( * ( / ( + ( * ( max ( * ( min ( + ( * v1 -32 ) v2 ) 31 ) -1 ) ( + ( * v1 32 ) ( - ( / v0 4 ) ( / ( + ( + v3 v0 ) 3 ) 4 ) ) ) ) -4 ) 5 ) 65 ) 65 ) ( * v1 128 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( * v0 4 ) -3 ) ( + v1 992 ) ) ( min ( max ( * v0 4 ) -3 ) ( + v1 992 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 224 ) ( + ( * v1 672 ) ( + ( * v2 4 ) v3 ) ) ) ( + ( * v0 224 ) ( + ( * v1 672 ) ( + ( * v2 4 ) v3 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( min ( - 2495 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) ( min ( - 2495 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 14 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 14 ) ( + v2 1 ) ) ) v3 ) )", "end": "1"}, "rules": ["add-comm", "lt-x-x-sub-a", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( * v0 3 ) v1 ) 5 ) ( - ( + ( * ( + v0 1 ) 3 ) v1 ) 10 ) )", "end": "0"}, "rules": ["mul-one", "lt-swap-out", "mul-zero", "add-comm", "mul-comm", "add-const", "add-assoc", "add-fact-mul", "sub-to-add", "add-dist-mul"]}, {"expression": {"start": "( == ( * ( / ( * v0 -64 ) 4 ) 4 ) ( * v0 -64 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "mul-assoc", "mul-zero", "sub-to-add", "add-fact-mul", "eq-x-y-0"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * v2 8 ) v3 ) v4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 8 ) v3 ) v4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["add-assoc", "eqlt-to-not-gt", "add-zero", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * v0 126 ) v1 ) 126 ) ( - ( + ( * ( + v0 1 ) 126 ) v1 ) 2 ) )", "end": "0"}, "rules": ["mul-comm", "add-const", "add-fact-mul", "add-dist-mul", "mul-zero", "add-assoc", "add-comm", "lt-swap-in", "lt-swap", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 63 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt"]}, {"expression": {"start": "( < ( + ( + ( * v0 1000 ) v1 ) v2 ) ( + ( + ( * v0 1000 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( <= ( + 0 ( / ( + ( * ( / ( + ( % v0 8 ) 132 ) 8 ) 2 ) 27 ) 15 ) ) 0 )", "end": "0"}, "rules": ["eqlt-to-not-gt", "lt-mul-pos-cancel", "lt-swap", "lt-mul-div-cancel", "div-minus-in", "div-minus-down", "add-comm", "lt-swap-out", "mul-assoc", "lt-const-mod"]}, {"expression": {"start": "( == ( - ( * ( max v0 85 ) 4 ) 357 ) ( - ( + ( - ( * ( max v0 85 ) 4 ) 357 ) ( - 359 ( * ( max v0 85 ) 4 ) ) ) 1 ) )", "end": "0"}, "rules": ["mul-assoc", "add-comm", "sub-to-add", "add-assoc", "eq-swap", "eq-comm", "mul-comm", "add-fact-mul", "Eq-a-b"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 2 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 6 ) v5 ) ( + ( * v4 6 ) v5 ) ) ) ( >= ( + ( * v4 6 ) v5 ) ( + ( * v4 6 ) v5 ) ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( + ( - v0 1 ) 2 ) ( - v0 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 11 ( max ( * ( % v0 3 ) 4 ) 7 ) ) ) 1 ) )", "end": "0"}, "rules": ["eq-comm", "mul-one", "min-add-both", "Eq-min-c-neg", "sub-to-add", "mul-comm", "Eq-a-b", "max-to-min", "add-comm", "eq-swap", "mul-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * v1 8 ) ( + ( * v2 16 ) v3 ) ) ) 0 ) ( + ( + ( * v2 16 ) v3 ) ( * v1 8 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 8 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) 3 ) ( + ( + ( * v2 16 ) v3 ) ( + ( * v1 8 ) 7 ) ) ) ) ( <= ( + ( + ( * v4 1000 ) v5 ) v6 ) ( + ( + ( * v4 1000 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 1000 ) v5 ) v6 ) ( + ( + ( * v4 1000 ) v5 ) v6 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )", "end": "1"}, "rules": ["sub-to-add", "eqlt-to-not-gt", "lt-swap-out", "lt-to-zero", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( min ( * v0 64 ) 436 ) 4 ) 4 ) ( min ( * v0 64 ) 436 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "min-div-in-pos", "min-mul-in-pos", "div-consts-mul", "eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * 0 500 ) v3 ) 0 ) ( + 0 v3 ) ) ) ( >= ( + ( + ( * 1 500 ) v3 ) 499 ) ( + ( - ( + 1000 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-dist-mul", "eqgt-to-not-lt", "mul-assoc", "mul-comm", "add-zero", "add-comm", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 2 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-zero", "add-comm"]}, {"expression": {"start": "( >= ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )", "end": "0"}, "rules": ["lt-swap-out", "sub-to-add", "lt-x-x-sub-a", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 8 ) 9 ) ) ( - ( + 0 9 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["mod-minus-in", "add-comm", "lt-mul-pos-cancel", "eqlt-to-not-gt", "lt-const-mod", "and-min-to-lt", "lt-swap-out", "sub-to-add", "mul-assoc", "max-consts-or", "lt-swap"]}, {"expression": {"start": "( >= ( - 71 ( max ( * ( % v0 8 ) 9 ) 62 ) ) ( - ( + ( - 71 ( max ( * ( % v0 8 ) 9 ) 62 ) ) ( - ( max ( * ( % v0 8 ) 9 ) 62 ) 62 ) ) 1 ) )", "end": "1"}, "rules": ["max-consts-or", "lt-mul-pos-cancel", "max-to-min", "lt-swap-out", "min-consts-div-neg", "lt-swap-in", "lt-swap", "add-assoc", "add-fact-mul", "add-dist-mul", "add-comm", "mul-zero", "eqgt-to-not-lt", "add-const", "sub-to-add", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( max ( * v0 16 ) -5 ) ( + ( * v1 32 ) v2 ) ) 2 ) ( - ( + ( + ( * 0 4 ) ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) ) 0 ) 3 ) ) ) ( >= ( + ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) 17 ) ( - ( + ( + ( * 5 4 ) ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) ) 3 ) 3 ) ) ) ( <= ( - ( + ( * ( + ( * v3 2 ) 0 ) 4 ) 0 ) 1 ) ( + -2 ( + ( * v3 8 ) 1 ) ) ) ) ( >= ( - ( + ( * ( + ( * v3 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + 8 ( + ( * v3 8 ) 1 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "0"}, "rules": ["lt-x-x-sub-a", "sub-to-add", "and-comm", "eqgt-to-not-lt", "add-comm", "lt-swap-out", "add-assoc"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 26 ) 4 ) 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) 23 ) ) ( min ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 499 ) 0 ) ( * ( / ( + v2 26 ) 4 ) 4 ) ) ( + ( max ( min ( * ( + ( min ( * v0 11 ) 53 ) v1 ) 2 ) 477 ) -22 ) 23 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 132 ) ( + ( * v1 252 ) ( + ( / v2 4 ) ( * v3 4 ) ) ) ) ( + ( * v0 132 ) ( + ( * v1 252 ) ( + ( / v2 4 ) ( * v3 4 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 508 ) 504 ) ( / ( + v0 508 ) 504 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 336 ) ( + ( * v1 672 ) v2 ) ) ( + ( * v0 336 ) ( + ( * v1 672 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * v1 250 ) ) ( + ( / v0 4 ) ( * v1 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( * v1 128 ) ) ( - v0 ( * v1 128 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * ( / ( + v1 7 ) 4 ) 4 ) ) ( + ( max ( * ( / ( - ( + v2 v0 ) 1 ) 4 ) 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * ( / ( + v1 7 ) 4 ) 4 ) ) ( + ( max ( * ( / ( - ( + v2 v0 ) 1 ) 4 ) 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 7 ) v1 ) ( min ( + v0 7 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * ( / ( + v3 11 ) 4 ) 4 ) ) ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1992 ) -7 ) 8 ) ) ( min ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * ( / ( + v3 11 ) 4 ) 4 ) ) ( + ( max ( min ( + ( min ( * v0 8 ) 117 ) ( + v1 v2 ) ) 1992 ) -7 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max v0 0 ) ( * v1 8 ) ) ( + ( max v0 0 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == v0 v0 )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 -4 ) ( + ( * v0 4 ) v1 ) ) ( + ( * v0 -4 ) ( + ( * v0 4 ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -5 ) v2 ) ) ( + ( * v0 4 ) ( + ( max ( * v1 32 ) -5 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) v1 ) -11 ) ( + ( + ( * v3 32 ) ( + ( * ( / ( + ( min ( - ( - ( + ( * v2 -126 ) ( + v0 v1 ) ) ( * v3 32 ) ) v1 ) 22 ) 14 ) 8 ) 8 ) ( * v2 126 ) ) ) v1 ) ) ( + ( min ( - ( - ( - ( + v0 v1 ) ( * v2 126 ) ) ( * v3 32 ) ) v1 ) -11 ) ( + ( + ( * v3 32 ) ( + ( * ( / ( + ( min ( - ( - ( + ( * v2 -126 ) ( + v0 v1 ) ) ( * v3 32 ) ) v1 ) 22 ) 14 ) 8 ) 8 ) ( * v2 126 ) ) ) v1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 35 ) 33 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 47 ) 16 ) ( / v1 16 ) ) 35 ) 33 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( max ( / ( + ( - v0 ( + ( * v1 1008 ) v2 ) ) 13 ) 4 ) ( + ( + ( / ( - 9 v2 ) 4 ) ( * v1 -252 ) ) 1 ) ) 0 ) ( / ( + 993 21 ) 4 ) ) ( + ( min ( min ( min ( - ( / ( + v3 14 ) 4 ) ( * v1 252 ) ) ( + ( / ( - 2006 v2 ) 4 ) ( * v1 -252 ) ) ) ( / ( + ( - ( min ( + v4 v0 ) ( + ( min ( + v2 v3 ) 1992 ) 8 ) ) ( + ( * v1 1008 ) v2 ) ) 6 ) 4 ) ) ( / ( + ( - ( min ( + v4 v0 ) ( + ( min ( + v2 v3 ) 1995 ) 5 ) ) ( + ( * v1 1008 ) v2 ) ) 9 ) 4 ) ) 1 ) ) ( max ( min ( max ( max ( / ( + ( - v0 ( + ( * v1 1008 ) v2 ) ) 13 ) 4 ) ( + ( + ( / ( - 9 v2 ) 4 ) ( * v1 -252 ) ) 1 ) ) 0 ) ( / ( + 993 21 ) 4 ) ) ( + ( min ( min ( min ( - ( / ( + v3 14 ) 4 ) ( * v1 252 ) ) ( + ( / ( - 2006 v2 ) 4 ) ( * v1 -252 ) ) ) ( / ( + ( - ( min ( + v4 v0 ) ( + ( min ( + v2 v3 ) 1992 ) 8 ) ) ( + ( * v1 1008 ) v2 ) ) 6 ) 4 ) ) ( / ( + ( - ( min ( + v4 v0 ) ( + ( min ( + v2 v3 ) 1995 ) 5 ) ) ( + ( * v1 1008 ) v2 ) ) 9 ) 4 ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) ( * v1 4 ) ) ( * v0 8 ) ) ( - ( - ( min ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) ( * v1 4 ) ) ( * v0 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v3 ) ) ( max ( - ( / ( + ( + v0 v1 ) 27 ) 4 ) ( + ( / v1 4 ) ( * v2 32 ) ) ) ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) ( + ( / ( - -500 ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) ) 8 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( / v0 125 ) v1 ) 8 ) ( + ( * v2 4 ) v3 ) ) ( + ( * ( + ( / v0 125 ) v1 ) 8 ) ( + ( * v2 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + v2 31 ) ) ( min ( / ( + ( + v0 v1 ) 15 ) 4 ) ( + v2 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( max ( min ( + v0 v1 ) 1996 ) -3 ) ( * v2 2 ) ) ( max ( min ( + v0 v3 ) 1999 ) 0 ) ) ( - ( - ( max ( min ( + v0 v1 ) 1996 ) -3 ) ( * v2 2 ) ) ( max ( min ( + v0 v3 ) 1999 ) 0 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( - ( / v1 4 ) v2 ) ) ( + ( * v0 4 ) ( - ( / v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + v0 132 ) 128 ) ( / ( + v0 132 ) 128 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + ( / v1 4 ) ( * v2 126 ) ) ) ( + ( * v0 32 ) ( + ( / v1 4 ) ( * v2 126 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 1999 ) 0 ) ( * v1 4 ) ) ( + ( max ( min v0 1988 ) -11 ) 8 ) ) ( min ( + ( max ( min v0 1999 ) 0 ) ( * v1 4 ) ) ( + ( max ( min v0 1988 ) -11 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + ( - ( max v0 0 ) v1 ) 13 ) 4 ) 0 ) ( / ( + v2 21 ) 4 ) ) ( + ( / ( min ( min ( - 2006 v1 ) ( + ( min ( min ( - ( + v3 v0 ) v1 ) ( + ( min ( - 1992 v1 ) v2 ) 8 ) ) ( + ( min ( - ( + v3 v0 ) v1 ) ( + ( min ( - 1995 v1 ) v2 ) 5 ) ) 3 ) ) 6 ) ) ( + v2 17 ) ) 4 ) 1 ) ) ( max ( min ( max ( / ( + ( - ( max v0 0 ) v1 ) 13 ) 4 ) 0 ) ( / ( + v2 21 ) 4 ) ) ( + ( / ( min ( min ( - 2006 v1 ) ( + ( min ( min ( - ( + v3 v0 ) v1 ) ( + ( min ( - 1992 v1 ) v2 ) 8 ) ) ( + ( min ( - ( + v3 v0 ) v1 ) ( + ( min ( - 1995 v1 ) v2 ) 5 ) ) 3 ) ) 6 ) ) ( + v2 17 ) ) 4 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( + ( min ( * v2 4 ) 61 ) v3 ) 58 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( + ( min ( * v2 4 ) 61 ) v3 ) 58 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 16 ) v2 ) ) ( + ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) 1 ) ) ( + ( min ( / ( - ( + v4 v0 ) 1 ) 4 ) ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) ) 1 ) ) ( max ( min ( max ( / ( + v0 3 ) 4 ) ( + ( * v1 16 ) v2 ) ) ( + ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) 1 ) ) ( + ( min ( / ( - ( + v4 v0 ) 1 ) 4 ) ( + ( min v3 15 ) ( + ( * v1 16 ) v2 ) ) ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 7 ) ) 3 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( min ( / ( - ( + v2 v3 ) 1 ) 4 ) ( + v1 7 ) ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * ( + ( * ( / ( - ( + ( min v0 751 ) v1 ) 1 ) 250 ) 8 ) v2 ) 8 ) ( + ( * v3 4 ) v4 ) ) ( + ( * ( + ( * ( / ( - ( + ( min v0 751 ) v1 ) 1 ) 250 ) 8 ) v2 ) 8 ) ( + ( * v3 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + v0 v1 ) 4 ) ( + v2 20 ) ) ( min ( * ( + v0 v1 ) 4 ) ( + v2 20 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + v2 v3 ) ) ( min ( + ( + ( * v0 128 ) ( + ( * v1 252 ) v2 ) ) 122 ) ( + v2 v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + v0 v1 ) ( + v2 17 ) ) ( min ( + v0 v1 ) ( + v2 17 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( / ( + v0 25 ) 16 ) v1 ) ( / ( + v0 5 ) 16 ) ) ( max ( min ( / ( + v0 25 ) 16 ) v1 ) ( / ( + v0 5 ) 16 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 7 ) ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 111 ) ) ( min ( * ( + ( / ( + v0 v1 ) 4 ) ( * v2 7 ) ) 4 ) ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 111 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 2004 ) 5 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 2004 ) 5 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 125 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 32 ) ) ) ( + ( * v0 125 ) ( + ( / ( + v1 v2 ) 4 ) ( * v3 32 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -52 ( * ( max ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + ( * ( / v2 4 ) 4 ) 3 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) ( max ( - -52 ( * ( max ( min ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 7 ) 8 ) 2 ) 497 ) -2 ) ( max ( min ( * ( / v1 8 ) 2 ) 509 ) 10 ) ) ( + ( * ( / v2 4 ) 4 ) 3 ) ) -12 ) 4 ) ) ( - ( * ( max v2 -12 ) -4 ) 52 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( + ( * v1 63 ) v2 ) ) ( - v0 ( + ( * v1 63 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( / ( + v0 7 ) 4 ) ( + ( max v1 -1 ) 1 ) ) ( max ( / ( + v0 7 ) 4 ) ( + ( max v1 -1 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) ( - ( / ( - ( + v0 v1 ) 1 ) 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v2 ) 8 ) 172 ) 16 ) 2 ) ) 5 ) ) ( min ( / ( + ( + v0 v1 ) 124 ) 8 ) ( - ( + ( / ( + v0 v1 ) 8 ) ( * ( / ( + ( % ( + v0 v2 ) 8 ) 172 ) 16 ) 2 ) ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - 62 ( / v0 2 ) ) ( + ( / ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 2 ) 1 ) ) ( min ( - 62 ( / v0 2 ) ) ( + ( / ( min ( - ( - ( max ( min ( / ( + ( + v1 v2 ) 47 ) 16 ) 124 ) 0 ) ( * v3 4 ) ) ( max ( min ( / v2 16 ) 126 ) 2 ) ) 1 ) 2 ) 1 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * ( / ( + ( + v0 v1 ) 127 ) 4 ) 4 ) -3 ) 4 ) ) ( min ( + ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) 1999 ) ( * ( / ( + v2 7 ) 4 ) 4 ) ) ( + ( max ( * ( / ( + ( + v0 v1 ) 127 ) 4 ) 4 ) -3 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 32 ) 32 ) v1 ) ( min ( + ( * v0 32 ) 32 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( / ( - ( + v0 v1 ) 497 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 64 ) ) 5 ) ) ( * v3 32 ) ) ( + ( min ( / ( - ( + v0 v1 ) 497 ) 8 ) ( - ( + ( / v1 8 ) ( * v2 64 ) ) 5 ) ) ( * v3 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 8 ) ) ( + ( max ( min ( + v0 v1 ) 1999 ) 0 ) ( * v2 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( min v0 2001 ) 2 ) ( * v1 4 ) ) ( + ( max ( min v0 1990 ) -9 ) 8 ) ) ( min ( + ( max ( min v0 2001 ) 2 ) ( * v1 4 ) ) ( + ( max ( min v0 1990 ) -9 ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 12 ) v1 ) ( + ( + ( * v2 16 ) ( + v3 v4 ) ) 12 ) ) ( min ( + ( * v0 12 ) v1 ) ( + ( + ( * v2 16 ) ( + v3 v4 ) ) 12 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 68 ) 66 ) ( + v1 v2 ) ) ( + ( min ( * v0 68 ) 66 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( min v0 500 ) v1 ) v2 ) ) 503 ) ( - ( + ( + 0 ( + ( min v0 500 ) v1 ) ) v2 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) v2 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) ) v2 ) 503 ) ) ) ( <= ( + -5 ( - v3 3 ) ) ( + -5 ( - v3 3 ) ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( min ( * v0 252 ) 248 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 252 ) 248 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 64 ) ( + ( min ( + ( * v1 128 ) 123 ) v2 ) v3 ) ) ( + ( * v0 64 ) ( + ( min ( + ( * v1 128 ) 123 ) v2 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 16 ( * ( max ( min v0 8 ) 7 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-comm", "add-comm", "mul-comm", "Eq-a-b", "eq-swap", "mul-assoc"]}, {"expression": {"start": "( == ( + ( * v0 128 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( - ( + v3 v1 ) 1 ) 4 ) ( * v4 252 ) ) ( + ( min ( + ( * v5 68 ) ( + ( / v1 4 ) ( * v0 128 ) ) ) ( + ( + ( min ( * v0 128 ) 124 ) ( / v1 4 ) ) 70 ) ) 57 ) ) ( * v5 -68 ) ) ) ) ( + ( * v0 128 ) ( - ( + ( / v1 4 ) v2 ) ( + ( min ( - ( / ( - ( + v3 v1 ) 1 ) 4 ) ( * v4 252 ) ) ( + ( min ( + ( * v5 68 ) ( + ( / v1 4 ) ( * v0 128 ) ) ) ( + ( + ( min ( * v0 128 ) 124 ) ( / v1 4 ) ) 70 ) ) 57 ) ) ( * v5 -68 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( + ( * v0 32 ) ( + ( / v1 4 ) ( * ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v0 -32 ) v3 ) ) 15 ) 8 ) ( * v2 2 ) ) 8 ) ) ) 1 ) v4 ) ( min ( - ( + ( * v0 32 ) ( + ( / v1 4 ) ( * ( + ( / ( min ( + ( * v2 -16 ) ( + ( * v0 -32 ) v3 ) ) 15 ) 8 ) ( * v2 2 ) ) 8 ) ) ) 1 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 3 ) ( + -2 ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 1 ) ) ) ) ( >= ( + ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 7 ) ( + 8 ( - ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 0 ) ( + ( + ( * 0 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 0 ) ) ) ( >= ( + ( + ( * 2 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 3 ) ( + ( + ( * 2 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 3 ) ) ) ( <= ( * v5 16 ) ( * v5 16 ) ) ) ( >= ( + ( * v5 16 ) 15 ) ( + ( * v5 16 ) 15 ) ) )", "end": "1"}, "rules": ["sub-to-add", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + ( * 0 4 ) ( / v2 4 ) ) 0 ) ( + 0 ( / v2 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v2 4 ) ( * ( / v3 4 ) 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v2 4 ) ( * ( / v3 4 ) 4 ) ) ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( == ( - ( max ( min ( + ( * v0 3 ) v1 ) ( + ( min ( + v2 v1 ) 1997 ) 2 ) ) 0 ) ( max ( min ( + ( * v0 3 ) v1 ) ( + ( min ( + v2 v1 ) 1999 ) 2 ) ) 2 ) ) ( - ( max ( min ( + ( * v0 3 ) v1 ) ( + ( min ( + v2 v1 ) 1997 ) 2 ) ) 0 ) ( max ( min ( + ( * v0 3 ) v1 ) ( + ( min ( + v2 v1 ) 1999 ) 2 ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc", "add-comm"]}, {"expression": {"start": "( < ( + ( + ( * v0 63 ) v1 ) v2 ) ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) )", "end": "1"}, "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( - 6 ( * ( max ( min v0 3 ) 1 ) 2 ) ) ) 1 ) )", "end": "0"}, "rules": ["sub-to-add", "eq-swap", "mul-comm", "eq-comm", "add-comm", "Eq-a-b", "mul-assoc"]}, {"expression": {"start": "( == ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 8 ) ) ( + ( min ( * ( / v0 4 ) 4 ) 1999 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "add-assoc", "mul-zero", "add-const", "sub-to-add", "add-fact-mul", "eq-x-y-0"]}, {"expression": {"start": "( == ( + ( * v0 -32 ) ( + ( * v1 -64 ) ( - ( / ( - ( + v2 v3 ) 1 ) 16 ) ( / v3 16 ) ) ) ) ( + ( * v0 -32 ) ( + ( * v1 -64 ) ( - ( / ( - ( + v2 v3 ) 1 ) 16 ) ( / v3 16 ) ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) v0 ) 0 ) 8 ) ( + ( + ( + ( * 0 4 ) v0 ) 0 ) 8 ) ) ) ( >= ( + ( + ( + ( * ( / ( + ( min ( * v1 16 ) -10 ) 25 ) 4 ) 4 ) v0 ) 3 ) 8 ) ( + ( + ( + ( * ( - ( + ( / ( + ( + ( min ( * v1 16 ) -10 ) 10 ) 19 ) 4 ) 0 ) 1 ) 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) 8 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "sub-to-add", "add-denom-mul", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc"]}, {"expression": {"start": "( == ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) ( min ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * ( / ( - ( + v2 v0 ) 1 ) 250 ) 8 ) 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 146 ) 1 ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * v0 -8 ) 4 ) 4 ) ( * v0 -8 ) )", "end": "1"}, "rules": ["eq-x-y-0", "sub-to-add", "mul-cancel-div", "add-comm", "eq-swap", "eq-x-x", "add-zero", "mod-consts", "eq-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 220 ) v1 ) ) ( + ( min ( * v0 32 ) 220 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 220 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "add-comm", "add-assoc", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( * ( + ( * v0 8 ) v1 ) 2 ) 1 ) ( * ( + ( * v0 8 ) ( + v1 1 ) ) 2 ) )", "end": "1"}, "rules": ["lt-swap-out", "mul-assoc", "add-dist-mul", "lt-swap", "mul-comm", "lt-mul-pos-cancel", "lt-x-x-sub-a", "add-assoc", "add-comm"]}, {"expression": {"start": "( >= ( - ( + v0 v1 ) 2 ) ( - ( + ( - ( + v0 v1 ) 2 ) 69 ) 1 ) )", "end": "0"}, "rules": ["add-assoc", "sub-to-add", "Eq-lt-min", "min-x-x-plus-a-pos", "lt-min-term+cpos", "eqgt-to-not-lt", "add-comm", "not-gt-to-eqlt"]}, {"expression": {"start": "( < ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( min ( max ( * ( + v0 1 ) 4 ) -1 ) ( - ( * ( + v0 1 ) 4 ) 1 ) ) v1 ) )", "end": "0"}, "rules": ["lt-to-zero", "max-consts-and", "lt-swap-in", "and-comm", "lt-swap-out", "add-dist-mul", "sub-to-add", "min-mul-in-neg", "add-comm", "mul-comm", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 4 ) ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "sub-to-add", "lt-swap-out", "add-assoc", "lt-swap-in", "mul-comm", "mul-assoc", "add-comm", "mul-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - v0 6 ) ) 1 ) ( + -5 v0 ) ) ) ( >= ( + ( + 3 ( + v0 996 ) ) 1 ) ( + 1 ( + v0 999 ) ) ) ) ( <= ( + ( + v1 v2 ) 1 ) ( - ( + v1 v2 ) 5 ) ) ) ( >= ( + ( + v1 v2 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )", "end": "0"}, "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-dist-mul", "lt-swap", "lt-to-zero", "add-assoc", "lt-x-x-sub-a", "lt-swap-out", "add-comm", "sub-to-add"]}, {"expression": {"start": "( < ( + ( * v0 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + v0 1 ) 8 ) 5 ) ) ( * ( + v0 1 ) 8 ) ) 1 ) )", "end": "0"}, "rules": ["add-const", "and-comm", "add-fact-mul", "sub-to-add", "add-assoc", "add-dist-mul", "mul-zero", "min-add-both", "and-min-to-lt", "lt-swap-in", "add-comm", "mul-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( min ( * ( / v0 4 ) 4 ) 1999 ) ( + v1 4 ) ) 3 ) ( + -3 v1 ) ) ) ( >= ( + v1 1 ) ( + ( - ( - 5 3 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 3 ) ( + -3 v2 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v2 ) 3 ) 3 ) ( + ( - ( - 5 3 ) 1 ) ( + v2 15 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "0"}, "rules": ["or-comm", "add-comm", "add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-zero", "max-consts-or", "eqlt-to-not-gt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["eq-x-x", "add-assoc", "min-x-x", "add-comm", "add-zero", "not-gt-to-eqlt", "Eq-lt-min", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )", "end": "1"}, "rules": ["eqgt-to-not-lt", "add-zero", "lt-to-zero", "eqlt-to-not-gt"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 5 ) 63 ) ) ( - v0 ( * ( / v1 5 ) 63 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( + ( * v0 128 ) v1 ) 2001 ) 2 ) ( * v2 4 ) ) ( + ( max ( min ( + ( * v0 128 ) v1 ) 2001 ) 2 ) ( * v2 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( + ( * ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) 4 ) v2 ) 4 ) ( * ( + ( * ( max ( min ( * ( / ( + v0 v1 ) 125 ) 8 ) 125 ) 1 ) 4 ) v2 ) 4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( * v2 2 ) ) ( + ( / v1 4 ) v3 ) ) ( - ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( * v2 2 ) ) ( + ( / v1 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( min ( + ( * v4 128 ) ( + ( / v1 4 ) ( * v2 64 ) ) ) ( + ( * v2 64 ) v3 ) ) ) 2 ) ) ( max ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( min ( + ( * v4 128 ) ( + ( / v1 4 ) ( * v2 64 ) ) ) ( + ( * v2 64 ) v3 ) ) ) 2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 672 ) 442 ) v1 ) ( min ( + ( * v0 672 ) 442 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( min v0 2059 ) 60 ) v1 ) ( min ( - ( min v0 2059 ) 60 ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( min v0 1996 ) -3 ) ( + ( * v1 4 ) v2 ) ) ( min ( max ( min v0 1996 ) -3 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + v0 14 ) 4 ) ( * v1 32 ) ) ( - ( / ( + v0 14 ) 4 ) ( * v1 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 44 ) ) ( min ( * ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v2 16 ) 44 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 250 ) 1 ) ( + ( / ( - ( / ( - ( + v0 v1 ) 1 ) 4 ) ( / v1 4 ) ) 250 ) 1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) ( min ( - ( / ( + ( + v0 v1 ) 55 ) 8 ) ( / v1 8 ) ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 27 ) 32 ) ( * v3 -4 ) ) ( + ( / ( + ( % ( + ( min ( * v0 500 ) ( - v1 500 ) ) v2 ) 8 ) 27 ) 32 ) ( * v3 -4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 132 ) 127 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( / v1 4 ) ) 132 ) 127 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( - v0 1 ) 4 ) ( * v1 8 ) ) ( - ( / ( - v0 1 ) 4 ) ( * v1 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( - v0 17 ) v1 ) ( + ( + ( min ( - ( - ( * ( / ( + ( + v2 v3 ) 3 ) 4 ) 4 ) ( * v4 126 ) ) ( * ( / v3 4 ) 4 ) ) 114 ) v0 ) 7 ) ) ( min ( max ( - v0 17 ) v1 ) ( + ( + ( min ( - ( - ( * ( / ( + ( + v2 v3 ) 3 ) 4 ) 4 ) ( * v4 126 ) ) ( * ( / v3 4 ) 4 ) ) 114 ) v0 ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( * v2 32 ) v3 ) ) ( - ( / ( + ( + v0 v1 ) 11 ) 4 ) ( + ( * v2 32 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -71 ( max ( min ( * v0 -36 ) -34 ) -69 ) ) ( - ( max ( * v0 36 ) 34 ) 71 ) ) ( max ( - -71 ( max ( min ( * v0 -36 ) -34 ) -69 ) ) ( - ( max ( * v0 36 ) 34 ) 71 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 5 ) ( * v1 9 ) ) ( + ( * v0 5 ) ( * v1 9 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( / ( + ( - ( / ( + ( + v0 v1 ) 23 ) 8 ) ( / v1 8 ) ) 18 ) 16 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 23 ) 8 ) ( / v1 8 ) ) 18 ) 16 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 32 ) ( + v1 v2 ) ) ( + ( * v0 32 ) ( + v1 v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 500 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) v3 ) ) ( + ( * v0 500 ) ( + ( * ( + ( / v1 4 ) v2 ) 4 ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( - ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) ( * v1 2 ) ) ( * ( / v0 4 ) 4 ) ) ( - ( - ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) ( * v1 2 ) ) ( * ( / v0 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / ( + v0 v1 ) 4 ) ( * v2 32 ) ) ( + ( / ( + v0 v1 ) 4 ) ( * v2 32 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) -1 ) ( + ( * v3 2 ) 7 ) ) ( + ( min ( min ( * ( - ( * v4 2 ) ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) ) 2 ) ( - ( / ( min ( * v4 16 ) ( + ( + v5 v0 ) 4 ) ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) ) ( * v3 2 ) ) 7 ) ) ( max ( min ( max ( - ( / ( + v0 35 ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) -1 ) ( + ( * v3 2 ) 7 ) ) ( + ( min ( min ( * ( - ( * v4 2 ) ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) ) 2 ) ( - ( / ( min ( * v4 16 ) ( + ( + v5 v0 ) 4 ) ) 4 ) ( * ( min ( * ( + ( * v1 2 ) v2 ) 2 ) 253 ) 2 ) ) ) ( * v3 2 ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + ( * v2 4 ) 1002 ) ) ( min ( * ( + ( / v0 4 ) v1 ) 4 ) ( + ( * v2 4 ) 1002 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 24 ) 4 ) 4 ) ( * v0 24 ) )", "end": "1"}, "rules": ["mul-assoc", "mul-comm", "eq-x-x", "div-consts-mul"]}, {"expression": {"start": "( == ( + ( * v0 65 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) ( + ( * v0 65 ) ( + ( min ( * v1 125 ) ( - v2 125 ) ) v3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( + ( * v0 4 ) v1 ) 1 ) v2 ) ( min ( + ( + ( * v0 4 ) v1 ) 1 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( min ( * v0 504 ) 501 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) ( + ( * v3 4 ) v4 ) ) ) ( + ( min ( * v0 504 ) 501 ) ( + ( min ( * v1 1000 ) ( - v2 1000 ) ) ( + ( * v3 4 ) v4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( max ( - ( / ( + ( min ( + v0 v1 ) ( + v2 7 ) ) 13 ) 4 ) ( / v3 4 ) ) ( + ( max ( - ( / v1 4 ) ( / v3 4 ) ) -5 ) 4 ) ) 1 ) v4 ) ( min ( + ( max ( - ( / ( + ( min ( + v0 v1 ) ( + v2 7 ) ) 13 ) 4 ) ( / v3 4 ) ) ( + ( max ( - ( / v1 4 ) ( / v3 4 ) ) -5 ) 4 ) ) 1 ) v4 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - v0 ( max ( * v1 4 ) 3 ) ) ( - v0 ( max ( * v1 4 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * ( / v2 4 ) 4 ) ) ( + ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ( * ( / v2 4 ) 4 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) ( min ( / ( + ( + v0 v1 ) 3 ) 4 ) ( + v2 31 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( / v0 4 ) ( * ( / v1 252 ) 252 ) ) ( + ( / v0 4 ) ( * ( / v1 252 ) 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 252 ) 748 ) v1 ) 252 ) ) ( * v3 252 ) ) ( - ( min ( - ( + v0 v1 ) ( * v2 1000 ) ) ( + ( + ( min ( * v3 252 ) 748 ) v1 ) 252 ) ) ( * v3 252 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( + ( / v1 8 ) 15 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) ( - ( min ( - ( / ( + ( + v0 v1 ) 7 ) 8 ) ( * v2 16 ) ) ( + ( / v1 8 ) 15 ) ) ( + ( / v1 8 ) ( * v3 4 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( - -3 ( * ( + v0 v1 ) 4 ) ) ( - ( * ( + v0 v1 ) 4 ) 1999 ) ) ( max ( - -3 ( * ( + v0 v1 ) 4 ) ) ( - ( * ( + v0 v1 ) 4 ) 1999 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( + ( * v0 32 ) v1 ) ( + ( * v0 32 ) ( + v1 1 ) ) )", "end": "1"}, "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]}, {"expression": {"start": "( == ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) ( min ( - ( / ( - ( + v0 v1 ) 1 ) 250 ) ( / v1 250 ) ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( - ( max ( min v0 113 ) -11 ) ( max ( min v0 146 ) 22 ) ) v1 ) ( min ( - ( max ( min v0 113 ) -11 ) ( max ( min v0 146 ) 22 ) ) v1 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( * v0 4 ) ( + ( max ( * v1 12 ) -5 ) v2 ) ) ( + ( * v0 4 ) ( + ( max ( * v1 12 ) -5 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( max ( max ( - ( + ( * ( / v0 5 ) 672 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 657 ) ( + ( * ( / v0 5 ) 672 ) v1 ) ) 8 ) ) ( min ( max ( max ( - ( + ( * ( / v0 5 ) 672 ) v1 ) 10 ) v2 ) 0 ) ( + ( + ( min v3 657 ) ( + ( * ( / v0 5 ) 672 ) v1 ) ) 8 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -2 ) ) 4 ) v2 ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -2 ) ) 4 ) v2 ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) )", "end": "1"}, "rules": ["div-cancel-mul", "eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) 28 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 28 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )", "end": "1"}, "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( < ( + ( + ( * v0 2 ) v1 ) v2 ) ( + ( + ( * v0 2 ) ( + v1 1 ) ) v2 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-swap-out", "lt-x-x-sub-a"]}, {"expression": {"start": "( == ( - v0 ( * ( / v1 2 ) 250 ) ) ( - v0 ( * ( / v1 2 ) 250 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )", "end": "1"}, "rules": ["sub-to-add", "lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt", "add-assoc"]}, {"expression": {"start": "( == ( * ( / ( * v0 -84 ) 4 ) 4 ) ( * v0 -84 ) )", "end": "1"}, "rules": ["eq-x-x", "mul-assoc", "div-consts-mul", "mul-comm"]}, {"expression": {"start": "( == ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 8 ) ) 7 ) ) ( min ( / ( - ( + v0 v1 ) 1 ) 4 ) ( + ( + ( / v1 4 ) ( * v2 8 ) ) 7 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( - ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 32 ) ) ) ( min ( - ( max ( min ( / ( + ( + v3 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v4 64 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ) ( - ( + ( * v0 2 ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) ( * v2 32 ) ) ) ( min ( - ( max ( min ( / ( + ( + v3 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v4 64 ) ) ( + ( max ( min ( / v1 16 ) 126 ) 2 ) 61 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ( min ( + ( * v0 8 ) v5 ) ( + v6 7 ) ) ) ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ( min ( + ( * v0 8 ) v5 ) ( + v6 7 ) ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( * ( / ( * v0 -126 ) 63 ) 63 ) ( * v0 -126 ) )", "end": "1"}, "rules": ["div-consts-mul", "mul-comm", "eq-x-x", "mul-assoc"]}, {"expression": {"start": "( > ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )", "end": "0"}, "rules": ["add-fact-mul", "gt-to-lt", "mul-assoc", "sub-to-add", "add-assoc", "lt-swap-in", "mul-comm", "add-comm", "mul-zero"]}, {"expression": {"start": "( == ( min ( + ( / ( + v0 v1 ) 4 ) 20 ) v2 ) ( min ( + ( / ( + v0 v1 ) 4 ) 20 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( max ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( + ( max v3 -3 ) 3 ) ) ( max ( min ( - ( / ( + ( + v0 v1 ) 15 ) 4 ) ( / v1 4 ) ) ( + v2 3 ) ) ( + ( max v3 -3 ) 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + v2 3 ) ) ( min ( * ( / ( + v0 v1 ) 4 ) 4 ) ( + v2 3 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( * v0 4 ) ( + ( * v1 4 ) v2 ) ) ( min ( * v0 4 ) ( + ( * v1 4 ) v2 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( < ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * v2 250 ) ) 4 ) 1 ) ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * ( + v2 1 ) 250 ) ) 4 ) 1000 ) )", "end": "1"}, "rules": ["add-comm", "add-assoc", "lt-swap-out", "sub-to-add", "lt-x-x-sub-a", "mul-comm", "add-dist-mul"]}, {"expression": {"start": "( == ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 124 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 124 ) v2 ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 47 ) 16 ) 124 ) 0 ) ( * v2 8 ) ) ( max ( min ( / v1 16 ) 126 ) 2 ) ) 5 ) 4 ) 12 ) ) 1 ) )", "end": "0"}, "rules": ["mul-comm", "eq-swap", "Eq-a-b", "eq-comm", "add-comm", "sub-to-add"]}, {"expression": {"start": "( == ( * ( / ( * v0 32 ) 8 ) 8 ) ( * v0 32 ) )", "end": "1"}, "rules": ["add-assoc", "mul-cancel-div", "sub-to-add", "add-comm", "eq-x-y-0", "eq-x-x", "add-zero", "mod-consts"]}, {"expression": {"start": "( >= ( * v0 4 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )", "end": "0"}, "rules": ["lt-swap", "add-comm", "sub-to-add", "eqgt-to-not-lt", "mul-comm", "lt-to-zero", "add-assoc", "add-dist-mul", "lt-swap-in"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * v2 4 ) ) ) ( >= ( * v2 4 ) ( * v2 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-comm", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-assoc"]}, {"expression": {"start": "( < ( + ( + ( + ( * v0 33 ) v1 ) v2 ) 5 ) ( - ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) 4 ) )", "end": "0"}, "rules": ["lt-swap-in", "mul-comm", "mul-zero", "sub-to-add", "add-assoc", "add-comm", "mul-one", "add-const", "add-fact-mul"]}, {"expression": {"start": "( == ( min ( / ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 27 ) 4 ) ( + ( max ( / ( - v3 v4 ) 4 ) -5 ) 5 ) ) ( min ( / ( + ( min ( - ( - ( * ( / ( + ( + v0 v1 ) 3 ) 4 ) 4 ) ( * v2 126 ) ) ( * ( / v1 4 ) 4 ) ) 114 ) 27 ) 4 ) ( + ( max ( / ( - v3 v4 ) 4 ) -5 ) 5 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( == ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 4 ) v3 ) 419 ) ) ( min ( + ( * v0 4 ) v1 ) ( - ( + ( * v2 4 ) v3 ) 419 ) ) )", "end": "1"}, "rules": ["eq-x-x"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 124 ) ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( - v1 1 ) ( - v1 1 ) ) ) ( >= ( + v1 7 ) ( - ( + 9 ( - v1 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 1 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 15 ) ( + ( * ( + 7 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 4 4 ) 3 ) 19 ) )", "end": "1"}, "rules": ["add-comm", "mul-comm", "lt-to-zero", "add-assoc", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-dist-mul"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= ( min ( * v3 3 ) 134 ) ( + ( min ( * v3 3 ) 134 ) 0 ) ) ) ( >= ( + ( min ( * v3 3 ) 134 ) 2 ) ( + ( min ( * v3 3 ) 134 ) ( - ( + 3 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )", "end": "1"}, "rules": ["add-assoc", "add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-assoc", "add-comm"]}, {"expression": {"start": "( < ( + ( + v0 v1 ) 4 ) ( + ( + v0 1 ) v1 ) )", "end": "0"}, "rules": ["add-fact-mul", "mul-assoc", "sub-to-add", "lt-swap-out", "add-comm", "add-assoc", "mul-comm", "lt-swap-in", "mul-zero"]}, {"expression": {"start": "( >= ( - v0 17 ) ( - ( + ( - v0 17 ) ( + ( min ( + ( - ( - ( min ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v2 4 ) ( * v3 251 ) ) 4 ) 998 ) ) ( * v3 1004 ) ) ( * ( / v2 4 ) 4 ) ) v4 ) -21 ) 22 ) ) 1 ) )", "end": "1"}, "rules": ["and-min-to-lt", "min-add-both", "add-comm", "and-comm", "lt-swap-out", "sub-to-add", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( <= ( max 0 ( + ( min 1 ( - ( + 0 ( / ( + ( % v0 8 ) 1511 ) 504 ) ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["and-min-to-lt", "sub-to-add", "add-comm", "lt-swap-out", "eqlt-to-not-gt", "lt-const-mod", "max-consts-or", "lt-mul-div-cancel"]}, {"expression": {"start": "( < v0 ( min ( max ( - ( + ( min ( * v1 63 ) 62 ) v2 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )", "end": "0"}, "rules": ["lt-swap", "max-consts-and", "min-mul-in-neg", "and-lt-to-min", "sub-to-add", "mul-comm", "min-sub-both", "add-dist-mul", "lt-swap-in", "add-comm", "and-comm"]}, {"expression": {"start": "( < ( + v0 4 ) ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 4 ) 8 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) )", "end": "0"}, "rules": ["lt-swap-in", "and-min-to-lt", "add-comm", "lt-swap-out", "and-comm", "and-lt-to-min", "min-sub-both", "sub-to-add"]}, {"expression": {"start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 2 ) 36 ) ) ( - ( + 0 36 ) 1 ) ) 1 ) ) 0 )", "end": "0"}, "rules": ["min-sub-both", "lt-mul-pos-cancel", "sub-to-add", "lt-swap-out", "and-min-to-lt", "mul-assoc", "max-consts-or", "lt-swap", "eqlt-to-not-gt", "mod-minus-in", "lt-const-mod"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 128 ) 124 ) v1 ) ) ( + ( min ( * v0 128 ) 124 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 124 ) v1 ) 124 ) ) ( + ( + ( min ( * v0 128 ) 124 ) 127 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )", "end": "1"}, "rules": ["lt-to-zero", "add-assoc", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "add-comm"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( * ( + ( * v3 8 ) v4 ) 2 ) ( + ( * ( + ( * v3 8 ) v4 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * v3 8 ) v4 ) 2 ) 1 ) ( + ( * ( + ( * v3 8 ) v4 ) 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) ) 0 ) 5 ) ( - ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) 5 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) ) 3 ) 5 ) ( - ( + ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) 3 ) 5 ) ) ) ( <= ( + ( + ( * v4 2 ) v5 ) v6 ) ( + ( + ( * v4 2 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 2 ) v5 ) v6 ) ( + ( + ( * v4 2 ) v5 ) v6 ) ) )", "end": "1"}, "rules": ["add-zero", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( / v1 4 ) 0 ) 4 ) 0 ) ( + ( * ( / v1 4 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( / v1 4 ) 28 ) 3 ) 4 ) 3 ) ( + ( * ( + ( / v1 4 ) 28 ) 4 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= ( * v2 2 ) ( + ( * v2 2 ) 0 ) ) ) ( >= ( + ( * v2 2 ) 1 ) ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) ) )", "end": "1"}, "rules": ["add-zero", "add-dist-mul", "eqlt-to-not-gt", "add-comm", "lt-to-zero", "add-assoc", "mul-comm", "eqgt-to-not-lt"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min v0 -126 ) ( / ( + ( min v1 1000 ) v2 ) 8 ) ) 4 ) ) ( - ( max ( / ( + ( min v1 1000 ) v2 ) 8 ) ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) ( max v0 -124 ) ) ) 130 ) ) ) ( >= ( + 3 ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) 4 ) ) ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) 1 ) ) ) ( <= ( - v3 5 ) ( + ( + ( + -20 v3 ) 0 ) 15 ) ) ) ( >= ( + v3 15 ) ( + ( + ( + 0 v3 ) 3 ) 15 ) ) ) ( <= ( * v4 9 ) ( * v4 9 ) ) ) ( >= ( + ( * v4 9 ) 8 ) ( + ( * v4 9 ) 8 ) ) )", "end": "0"}, "rules": ["add-comm", "add-assoc", "and-comm", "lt-x-x-sub-a", "eqgt-to-not-lt", "lt-swap-out"]}, {"expression": {"start": "( < ( + v0 5 ) ( - ( min ( + ( max ( + ( + v0 1 ) 7 ) ( + ( max ( * v1 4 ) -9 ) v2 ) ) 2 ) ( + v0 1 ) ) 4 ) )", "end": "0"}, "rules": ["add-comm", "min-comm", "add-assoc", "and-min-to-lt", "min-add-both", "lt-swap-in", "max-consts-and", "min-sub-both", "sub-to-add"]}, {"expression": {"start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v1 39 ) ( + ( - ( + ( + ( - v1 v0 ) 39 ) v0 ) 1 ) 1 ) ) ) ( <= ( + 0 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( + -2 ( + ( * v2 4 ) v3 ) ) ) ) ( >= ( + 3 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( + 1 ( + ( + ( * v2 4 ) v3 ) 3 ) ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )", "end": "0"}, "rules": ["mul-one", "sub-to-add", "eqlt-to-not-gt", "add-comm", "mul-comm", "add-assoc", "add-fact-mul", "add-const", "add-zero", "eq-max-lt", "lt-swap-out", "mul-zero", "max-to-min", "lt-swap", "eq-x-y-0", "eqgt-to-not-lt", "not-gt-to-eqlt"]}]