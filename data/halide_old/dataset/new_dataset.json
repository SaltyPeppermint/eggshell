[
  {
    "expression": {
      "start": "( == ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-comm",
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "eq-swap",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 250 ) ( + ( min ( * v1 32 ) 218 ) v2 ) ) v3 ) ( + ( + ( * v0 250 ) ( + ( min ( * v1 32 ) 218 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 16 ) 109 ) v1 ) v2 ) ( + ( + ( min ( * v0 16 ) 109 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-swap-out", "add-assoc", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 2 ) 123 ) v1 ) v2 ) 1 ) ( + ( + ( min ( * v0 2 ) 123 ) v1 ) ( + v2 1 ) ) )",
      "end": "0"
    },
    "rules": ["lt-to-zero", "add-assoc"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) 8 ) 8 ) ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 250 ) 8 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 2 ) ( - ( * ( + v0 1 ) 8 ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "add-fact-mul",
      "add-to-sub",
      "mul-comm",
      "sub-to-add",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "add-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "max-to-min", "mul-assoc", "div-cancel-mul", "mul-comm"]
  },
  {
    "expression": {
      "start": "( == ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eq-swap",
      "mul-assoc",
      "add-comm",
      "mul-zero",
      "add-fact-mul",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ( % ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) v3 ) 15 ) 16 ) ) ) ( <= ( - ( + ( * ( + v4 v5 ) 4 ) 0 ) 7 ) ( - ( * ( + v4 v5 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v4 v5 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v4 v5 ) 4 ) 3 ) 7 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 255 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 500 ) ( - v4 500 ) ) ) 255 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["min-to-max", "div-cancel-mul", "mul-assoc", "mul-comm", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( == ( * ( + v0 v1 ) 4 ) ( - ( + ( * ( + v0 v1 ) 4 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "mul-assoc",
      "mul-zero",
      "add-comm",
      "eq-swap",
      "sub-to-add",
      "mul-comm",
      "add-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 500 ) v1 ) 499 ) ( + ( * ( + v0 1 ) 500 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "add-to-sub",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 128 ) v1 ) ) ( + ( * v0 128 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 128 ) v1 ) 124 ) ) ( + ( + ( * v0 128 ) v1 ) 127 ) ) ) ( <= v2 v2 ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * v2 4 ) ) ) ( >= ( * v2 4 ) ( * v2 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( - ( * v0 8 ) ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ) ( * ( * v1 8 ) 8 ) ) 7 ) -4 ) 4 ) 4 ) ( * ( min ( + ( - ( * v0 8 ) ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ) ( * ( * v1 8 ) 8 ) ) 7 ) -4 ) )",
      "end": "1"
    },
    "rules": ["min-to-max", "eq-x-x", "div-cancel-mul", "mul-assoc", "mul-comm"]
  },
  {
    "expression": {
      "start": "( >= ( + ( % ( + v0 v1 ) 125 ) 999 ) 0 )",
      "end": "1"
    },
    "rules": [
      "min-mod-const-to-const",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 v0 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 1000 ) 999 ) 0 )", "end": "1" },
    "rules": [
      "min-mod-const-to-const",
      "Eq-lt-min",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "Eq-lt-min",
      "sub-to-add",
      "lt-swap-in",
      "min-x-x-plus-a-pos",
      "not-gt-to-eqlt",
      "lt-min-term+cpos",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 255 0 ) 1 ) v0 ) ( + ( - ( + 255 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * 7 4 ) v1 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) v0 ) 3 ) ) ) ( <= ( / v1 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v1 ) 125 ) ) ) ( >= ( / ( + v1 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v1 ) 125 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 500 ) 500 ) 500 ) ( * v0 500 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 11 ) ( - ( + ( + v0 1 ) v1 ) 14 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "add-fact-mul",
      "add-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( + ( / v2 4 ) 32 ) ( + ( / v2 4 ) 32 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( + ( * v1 4 ) v2 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "lt-swap-in",
      "and-min-to-lt",
      "min-comm",
      "add-assoc",
      "add-comm",
      "min-sub-both",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 8 ) ( + ( * v1 3 ) v2 ) ) 5 ) ( - ( + ( * v0 8 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / v1 8 ) 5 ) ) ( / ( + v2 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / v1 8 ) 5 ) ) ( / ( + v2 515 ) 8 ) ) -8 ) )",
      "end": "1"
    },
    "rules": ["min-to-max", "mul-comm", "div-cancel-mul", "mul-assoc", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( + v0 v1 ) v2 ) 8 ) ( % ( + ( + v0 v1 ) v2 ) 8 ) ) ) ( >= ( % ( + ( + v0 v1 ) v2 ) 8 ) ( % ( + ( + v0 v1 ) v2 ) 8 ) ) ) ( <= ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * v3 8 ) v4 ) v5 ) 1 ) 8 ) ) ) ( <= ( + ( * ( % v6 16 ) 4 ) 0 ) ( + ( * ( % v6 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v6 16 ) 4 ) 3 ) ( + ( * ( % v6 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) 81 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( max ( * v0 252 ) -13 ) ( + ( * v0 252 ) 248 ) ) v1 ) 3 ) ) ( - ( + 0 ( + ( * v0 252 ) v1 ) ) 10 ) ) ) ( >= ( + 3 ( + ( min ( + ( + ( * ( / ( min ( * v0 252 ) -13 ) 4 ) 4 ) ( + ( max ( * v0 252 ) -13 ) v1 ) ) 16 ) ( + ( * v0 252 ) v1 ) ) 251 ) ) ( + ( + 3 ( + ( + ( * v0 252 ) v1 ) 252 ) ) 2 ) ) ) ( <= ( - v2 7 ) ( - v2 7 ) ) ) ( >= ( + v3 4 ) ( + v3 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "min-comm",
      "add-comm",
      "lt-min-term+cpos",
      "eqgt-to-not-lt",
      "min-add-both",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( - ( + ( * ( + v0 1 ) 8 ) v1 ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "add-to-sub",
      "sub-to-add",
      "mul-assoc",
      "lt-swap-out",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * ( + v0 v1 ) 2 ) v2 ) 2 ) 1 ) ( * ( + ( * ( + v0 v1 ) 2 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-comm",
      "lt-x-x-sub-a",
      "add-dist-mul",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v1 8 ) v2 ) ) 0 ) ( + ( * v1 8 ) v2 ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 8 ) v2 ) 4 ) ) 3 ) ( + ( + ( * v1 8 ) v2 ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 125 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) ) ) ( >= ( + ( + ( * ( + ( * v5 2 ) v6 ) 4 ) v7 ) 3 ) ( + ( + ( * ( + ( * v5 2 ) v6 ) 4 ) 3 ) v7 ) ) ) ( <= ( * v8 3 ) ( + ( * v8 3 ) 0 ) ) ) ( >= ( + ( * v8 3 ) 2 ) ( + ( * v8 3 ) ( - ( + 3 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "mul-comm",
      "add-assoc",
      "add-dist-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + v0 11 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 8 ) v1 ) ( + ( + ( * v0 8 ) ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + ( * 0 4 ) ( / v2 4 ) ) 0 ) ( + 0 ( / v2 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v2 4 ) ( * ( / v3 4 ) 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v2 4 ) ( * ( / v3 4 ) 4 ) ) ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 1 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * ( - ( + 12 0 ) 1 ) 4 ) 3 ) ( + ( * ( - ( + 12 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 7 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 250 ) 1999 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "add-comm", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-assoc",
      "add-assoc",
      "lt-swap-in",
      "add-fact-mul",
      "mul-comm",
      "lt-swap-out",
      "mul-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 16 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 16 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v0 ) ( + ( - ( + 16 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( min ( * v3 4 ) 133 ) 0 ) ( + ( min ( * v3 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 133 ) 3 ) ( + ( min ( * v3 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - v0 5 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-to-sub",
      "sub-to-add",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + 3 ( + v0 64 ) ) ( + ( + ( * 16 4 ) v0 ) 3 ) ) ) ( <= ( + ( * v1 6 ) v2 ) ( + ( * v1 6 ) v2 ) ) ) ( >= ( + ( + ( * v1 6 ) v2 ) 5 ) ( + ( + ( * v1 6 ) v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( * v2 8 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) 1 ) 4 ) 3 ) 5 ) ( - ( + 8 ( - ( * v2 8 ) 5 ) ) 1 ) ) ) ( <= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) ) ( >= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "lt-min-term+cpos",
      "sub-to-add",
      "and-comm",
      "lt-mul-div-cancel",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "min-x-x-plus-a-pos",
      "Eq-lt-min",
      "add-assoc",
      "add-dist-mul",
      "mul-assoc",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 4 ) v1 ) ) 2 ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( - ( + 2 ( + ( + ( * v0 4 ) v1 ) 6 ) ) 2 ) ( + ( - ( + 4 ( + ( * v0 4 ) v1 ) ) 1 ) 3 ) ) ) ( <= ( - ( max ( * v2 8 ) ( + ( * v3 8 ) 5 ) ) 1 ) ( + -2 ( + ( * v3 8 ) 1 ) ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( + 3 ( + ( * v3 8 ) 8 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( * v4 32 ) ) 0 ) ( + ( + ( * 0 4 ) ( * v4 32 ) ) 0 ) ) ) ( >= ( + ( + ( * 2 4 ) ( + ( * v4 32 ) 24 ) ) 3 ) ( + ( + ( * 2 4 ) ( + ( * v4 32 ) 24 ) ) 3 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "sub-to-add",
      "mul-comm",
      "and-comm",
      "min-comm",
      "Eq-lt-min",
      "min-sub-both",
      "lt-swap-out",
      "min-mul-in-neg",
      "add-comm",
      "add-to-sub",
      "lt-min-term+cpos",
      "eqlt-to-not-gt",
      "max-to-min",
      "add-assoc",
      "add-zero",
      "min-to-max",
      "min-add-both",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 4 ) 0 ) ( + ( * v2 4 ) 0 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( / ( + ( min v0 4 ) v1 ) 4 ) ) 1 ) ( - ( + 0 ( / ( + ( min v0 4 ) v1 ) 4 ) ) 1 ) ) ) ( >= ( - ( + 3 ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( / ( + v2 1 ) 4 ) 4 ) ) ) 1 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( / ( + v2 1 ) 4 ) 4 ) ) ) 1 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 31 ) ( - ( + 32 ( / v3 4 ) ) 1 ) ) ) ( <= ( + ( * v4 104 ) v5 ) ( + ( * v4 104 ) v5 ) ) ) ( >= ( + ( * v4 104 ) v5 ) ( + ( * v4 104 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + ( + v0 v1 ) v2 ) v3 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) v3 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 8 ) ( + v2 4 ) ) ( + v2 0 ) ) ) ( >= ( + v2 4 ) ( + v2 4 ) ) ) ( <= ( + ( min ( * v3 64 ) 129 ) v4 ) ( + 0 ( + ( * v3 64 ) v4 ) ) ) ) ( >= ( + ( + ( min ( * v3 64 ) 61 ) v4 ) 67 ) ( + 4 ( + ( min ( + ( - ( + ( * ( / ( - 124 ( max ( * v3 64 ) 93 ) ) 4 ) 4 ) ( + ( * v3 64 ) v4 ) ) ( max ( * v3 64 ) 121 ) ) 93 ) ( + ( min ( * v3 64 ) 61 ) v4 ) ) 63 ) ) ) ) ( <= ( + ( + ( * 0 4 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 22 4 ) 89 ) 3 ) 88 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "sub-to-add",
      "min-comm",
      "max-to-min",
      "lt-swap-out",
      "add-fact-mul",
      "add-to-sub",
      "lt-x-x-sub-a",
      "not-gt-to-eqlt",
      "add-zero",
      "add-dist-mul",
      "and-min-to-eqlt",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) ) ( >= ( + ( * v3 69 ) v4 ) ( + ( * v3 69 ) v4 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) 0 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) ) 3 ) ( + ( + ( * v0 4 ) ( + ( * v1 8 ) v2 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( >= ( + ( max ( * v0 16 ) -22 ) 22 ) ( - ( + ( + ( max ( * v0 16 ) -22 ) 22 ) ( + ( max ( min ( * v0 16 ) -22 ) -23 ) 23 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "and-min-to-lt",
      "min-add-both",
      "max-min-switch",
      "eqgt-to-not-lt",
      "min-comm",
      "min-sub-both",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 2 ) 18 ) ) ( - ( + 0 18 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "eq-mul-x-y-0",
      "eq-max-lt",
      "Eq-lt-min",
      "min-max-const",
      "Eq-max-c-neg",
      "lt-swap-out",
      "Eq-max-c-pos",
      "sub-to-add",
      "mul-comm",
      "min-mul-in-pos",
      "add-comm",
      "mul-assoc",
      "min-add-both",
      "min-mod-const-to-mod",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "eq-comm",
      "min-max-switch",
      "min-comm",
      "ineq-to-eq",
      "min-div-out-neg",
      "lt-swap-in",
      "min-mod-const-to-const",
      "and-lt-to-max",
      "min-max-min-y",
      "lt-max-term+neg-term",
      "min-div-in-pos",
      "max-to-min",
      "min-mul-in-neg",
      "lt-min-term-term+pos",
      "and-eqlt-to-min",
      "lt-mul-pos-cancel",
      "mod-minus-in",
      "lt-min-mutual-term",
      "and-x-x",
      "div-minus-up"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "min-to-max",
      "mul-one",
      "min-mul-out-pos",
      "mul-zero",
      "add-zero",
      "Eq-min-c-pos",
      "min-sub-both",
      "or-comm",
      "sub-to-add",
      "mul-assoc",
      "eq-swap",
      "min-add-both",
      "add-fact-mul",
      "min-div-mul",
      "div-cancel-mul",
      "and-x-1",
      "add-comm",
      "lt-swap-out",
      "lt-max-mutual-term",
      "and-eqlt-to-max",
      "and-x-not-x",
      "mod-one",
      "eq-comm",
      "min-mul-in-neg",
      "min-mul-in-pos",
      "lt-mul-pos-cancel",
      "add-div-mod",
      "min-div-out-neg",
      "min-div-out-pos",
      "Eq-max-c-neg",
      "lt-min-mutual-term",
      "ineq-to-eq",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + ( + v0 v1 ) v2 ) 125 ) ( - ( / ( + ( + ( - v0 1 ) v1 ) v2 ) 125 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "div-minus-in",
      "min-div-mul",
      "min-x-x-plus-a-pos",
      "add-to-sub",
      "min-comm",
      "eqlt-to-not-gt",
      "min-mul-in-neg",
      "mul-assoc",
      "min-max",
      "add-comm",
      "min-sub-both",
      "not-gt-to-eqlt",
      "add-denom-mul",
      "sub-to-add",
      "min-mul-in-pos",
      "mul-comm",
      "min-max-min-y",
      "mul-zero",
      "and-x-not-x",
      "min-div-out-pos",
      "eq-x-x",
      "lt-min-term+neg-term",
      "add-denom-div",
      "ineq-to-eq",
      "mod-const-sub",
      "lt-mul-div-cancel",
      "mod-const-add",
      "min-mul-out-pos",
      "eq-comm",
      "min-max-max-x",
      "Eq-lt-min",
      "lt-min-term+cpos",
      "max-to-min",
      "mul-one",
      "min-max-const",
      "mod-two",
      "and-eqlt-eqgt-to-0",
      "div-minus-down",
      "add-assoc",
      "lt-max-term+neg-term",
      "div-zero",
      "and-min-to-eqlt",
      "or-comm",
      "mul-cancel-div"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ) 2 ) ( - ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 2 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 8 ) ) 2 ) ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 6 ) ) ) ( <= ( + ( + ( + ( * v3 63 ) v4 ) v5 ) 3 ) ( - ( + ( + ( * v3 63 ) v4 ) v5 ) 2 ) ) ) ( >= ( + ( + ( + ( * v3 63 ) v4 ) v5 ) 3 ) ( + ( + ( + ( * v3 63 ) v4 ) v5 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "not-gt-to-eqlt",
      "and-eqlt-eqgt-to-0",
      "Eq-min-lt",
      "lt-swap-out",
      "min-max-min-y",
      "Eq-min-c-neg",
      "div-zero",
      "ineq-to-eq",
      "lt-mul-div-cancel",
      "and-x-not-x",
      "min-max-switch",
      "lt-const-pos",
      "min-max-max-x",
      "Eq-min-c-pos",
      "and-min-to-lt",
      "lt-min-term-term+pos",
      "lt-min-max-cancel",
      "min-sub-both",
      "eq-mul-x-y-0",
      "mod-x-x",
      "and-comm",
      "max-min-switch",
      "and-assoc",
      "min-x-x-plus-a-neg",
      "not-not",
      "mod-one",
      "min-ass",
      "lt-x-x-sub-a",
      "min-mul-out-neg",
      "mod-minus-out",
      "and-eqlt-to-min",
      "add-fact-mul",
      "mul-comm",
      "min-div-mul",
      "or-x-and-x-y",
      "eqlt-to-not-gt",
      "lt-max-term+neg-term",
      "gt-to-lt",
      "or-over-and",
      "eq-comm",
      "eq-x-x",
      "min-mul-in-neg",
      "Eq-lt-min",
      "lt-min-term+cpos",
      "min-mod-const-to-mod",
      "not-eq-to-ineq",
      "min-mul-in-pos",
      "mod-const-sub",
      "min-x-x",
      "Eq-max-c-pos",
      "lt-min-term+neg-term",
      "div-cancel",
      "div-cancel-mul",
      "and-max-to-eqlt",
      "lt-max-term-term+pos",
      "min-div-out-neg",
      "mod-const-add",
      "div-minus-up",
      "and-lt-to-min",
      "or-to-and",
      "mod-zero",
      "and-x-1",
      "eqgt-to-not-lt",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + ( * v0 16 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + ( + ( * v0 16 ) v1 ) 15 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 13 ) ( - ( + ( + ( * v0 32 ) v1 ) ( + v2 1 ) ) 25 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-to-sub",
      "add-fact-mul",
      "mul-assoc",
      "lt-swap-in",
      "mul-comm",
      "add-assoc",
      "add-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / v1 4 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "and-lt-to-min",
      "sub-to-add",
      "min-sub-both",
      "lt-swap-out",
      "add-comm",
      "and-min-to-lt",
      "add-assoc",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-zero",
      "lt-swap-in",
      "mul-zero",
      "add-fact-mul",
      "add-comm",
      "gt-to-lt",
      "mul-comm",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + ( + v0 v1 ) v2 ) 4 ) ( + ( + ( / ( + ( + ( - v0 1 ) v1 ) v2 ) 4 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-max",
      "add-assoc",
      "eq-swap",
      "add-denom-mul",
      "mul-one",
      "add-fact-mul",
      "div-minus-in",
      "lt-swap-in",
      "mul-comm",
      "sub-to-add",
      "min-x-x",
      "min-mul-in-neg",
      "min-ass",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "min-div-mul",
      "min-div-out-pos",
      "lt-swap-out",
      "Eq-lt-min",
      "min-sub-both",
      "lt-mul-div-cancel",
      "mul-cancel-div",
      "eqgt-to-not-lt",
      "add-comm",
      "min-max-max-x",
      "div-minus-down",
      "and-eqlt-eqgt-to-0",
      "not-not",
      "min-div-in-pos",
      "lt-max-mutual-term",
      "eq-x-x",
      "add-to-sub",
      "mod-one",
      "min-div-out-neg",
      "min-mul-out-neg",
      "eq-max-lt",
      "ineq-to-eq",
      "lt-min-mutual-term",
      "eq-mul-x-y-0",
      "gt-to-lt",
      "min-x-x-plus-a-neg",
      "lt-x-x-sub-a",
      "mul-assoc",
      "min-mul-in-pos"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "and-min-to-eqlt",
      "max-to-min",
      "lt-swap-in",
      "lt-mul-div-cancel",
      "mul-assoc",
      "add-comm",
      "min-to-max",
      "sub-to-add",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 10 ( + ( * v0 673 ) v1 ) ) ( - 2009 ( + ( * v0 673 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "gt-to-lt",
      "mul-zero",
      "mul-comm",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - ( + ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 10 ) 8 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "max-min-switch",
      "mul-assoc",
      "min-comm",
      "not-gt-to-eqlt",
      "min-mul-in-neg",
      "mul-zero",
      "sub-to-add",
      "lt-swap-in",
      "and-min-to-eqlt",
      "add-fact-mul",
      "max-to-min",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "min-to-max",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 64 ) 936 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( + ( * v1 2 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 1 ) ( + ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) v2 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 125 ) ( - ( + v0 ( + v1 1 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "lt-swap-out",
      "add-fact-mul",
      "add-to-sub",
      "sub-to-add",
      "add-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) 15 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "mul-assoc",
      "add-dist-mul",
      "mul-comm",
      "add-zero",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 4 ) 2 ) ( + ( + ( * 0 4 ) ( - ( / v0 4 ) 2 ) ) 0 ) ) ) ( >= ( / ( + v0 531 ) 4 ) ( + ( + ( * ( / ( + ( % v0 4 ) 539 ) 16 ) 4 ) ( + ( / v0 4 ) 130 ) ) 3 ) ) ) ( <= ( + 0 ( min ( * ( / v1 4 ) 4 ) ( - ( * ( + ( / v1 4 ) ( / ( + ( % v1 4 ) 503 ) 4 ) ) 4 ) 3 ) ) ) ( * ( / v1 4 ) 4 ) ) ) ( >= ( + 3 ( - ( * ( + ( / v1 4 ) ( / ( + ( % v1 4 ) 503 ) 4 ) ) 4 ) 3 ) ) ( * ( - ( + ( / ( + ( % v1 4 ) 507 ) 4 ) ( / v1 4 ) ) 1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "min-x-x",
      "min-div-out-pos",
      "min-comm",
      "and-min-to-eqlt",
      "and-lt-to-min",
      "min-mul-in-neg",
      "mul-assoc",
      "min-max",
      "add-zero",
      "Eq-min-lt",
      "lt-swap-in",
      "lt-mul-pos-cancel",
      "lt-to-zero",
      "div-minus-in",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "min-ass",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "min-div-mul",
      "and-min-to-lt",
      "not-gt-to-eqlt",
      "mul-comm",
      "add-denom-div",
      "sub-to-add",
      "add-comm",
      "add-dist-mul",
      "div-cancel"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( + ( * v0 2 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) ( - ( + 2 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 125 ) ( + 0 ( / v2 125 ) ) ) ) ( >= ( + ( + ( / v2 125 ) ( * ( / v3 4 ) 4 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v2 125 ) ( * ( / v3 4 ) 4 ) ) ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 15 4 ) 3 ) ( - ( + 64 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 7 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 1007 ) 8 ) ( / ( + v3 1007 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 1 ) ) ) ( >= ( - ( + v0 263 ) 3 ) ( - ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "mul-zero",
      "lt-swap-in",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( / ( + ( max v0 0 ) 138 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "add-to-sub",
      "add-dist-mul",
      "min-to-max",
      "mul-assoc",
      "and-max-to-eqlt",
      "min-div-in-pos",
      "min-add-both",
      "max-to-min",
      "div-minus-in",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + 0 ( + ( * v1 4 ) v2 ) ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v1 4 ) v2 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( * v1 500 ) v2 ) ( + ( + ( * v1 500 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 500 ) v2 ) 499 ) ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 748 ) v1 ) ) ( + ( min ( * v0 252 ) 748 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 748 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 748 ) 251 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 250 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) 250 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 250 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( / v1 4 ) ) 0 ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) 28 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 28 ) ) ) ) ( <= ( + ( * v2 104 ) 0 ) ( + ( * v2 104 ) 0 ) ) ) ( >= ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-fact-mul",
      "add-comm",
      "mul-zero",
      "eq-swap",
      "eq-comm",
      "add-assoc",
      "sub-to-add",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) 3 ) ( - ( - ( + ( - v0 1 ) v1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "sub-to-add",
      "lt-swap-out",
      "add-assoc",
      "eqlt-to-not-gt",
      "min-mod-const-to-const",
      "add-comm",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( - ( + ( * v0 1008 ) v1 ) 9 ) ) 0 ) 2 ) ( - ( + ( * v0 1008 ) v1 ) 11 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( + ( * v0 1008 ) v1 ) 1004 ) ) 3 ) 2 ) ( + ( + ( * v0 1008 ) v1 ) 1005 ) ) ) ( <= ( - ( + ( + ( * v2 126 ) v3 ) v4 ) 2 ) ( - ( + ( + ( * v2 126 ) v3 ) v4 ) 11 ) ) ) ( >= ( - ( + ( + ( * v2 126 ) v3 ) v4 ) 2 ) ( - ( + ( + ( * v2 126 ) v3 ) v4 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "and-comm",
      "add-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "Eq-max-c-neg",
      "min-div-out-pos",
      "and-eqlt-eqgt-to-0",
      "div-minus-up",
      "or-over-and",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-zero",
      "and-lt-to-max",
      "min-div-in-neg",
      "Eq-min-c-pos",
      "mul-max-min",
      "and-assoc",
      "or-x-and-x-y",
      "mod-const-add",
      "not-not",
      "add-denom-div",
      "and-eqlt-gt-to-0",
      "and-min-to-eqlt",
      "eq-x-x",
      "min-x-x",
      "min-max-min-y",
      "and-max-to-eqlt",
      "lt-min-max-cancel",
      "and-eqlt-to-min",
      "and-ineq-eq",
      "lt-mul-pos-cancel",
      "min-mul-in-pos",
      "div-minus-out",
      "mod-const-sub",
      "or-comm",
      "lt-mul-div-cancel",
      "mul-one",
      "div-zero",
      "Eq-lt-min",
      "eq-comm",
      "or-to-and",
      "lt-max-term-term+pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 10 ) ) ( + -10 v0 ) ) ) ( >= ( + 3 ( + v0 63 ) ) ( + ( - ( - 13 10 ) 1 ) ( + v0 64 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "add-to-sub",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 8 ) 117 ) ( + ( * v2 2 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 13 13 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 2 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 2 ) v1 ) ( + v2 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "add-assoc", "sub-to-add", "lt-x-x-sub-a", "add-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * ( + ( * v1 8 ) 0 ) 4 ) 0 ) ( * v1 32 ) ) ) ( >= ( + ( * ( + ( * v1 8 ) 7 ) 4 ) 3 ) ( + ( * v1 32 ) 31 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero",
      "add-dist-mul",
      "mul-comm",
      "mul-assoc",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 8 ) 0 ) ( + ( * v3 8 ) 0 ) ) ) ( >= ( + ( * v3 8 ) ( - ( + 8 0 ) 1 ) ) ( + ( * v3 8 ) ( - ( + 8 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 4 ) 4 ) 0 )", "end": "1" },
    "rules": [
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "min-max-const",
      "eqgt-to-not-lt",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 2 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( - ( max ( * v1 8 ) ( + v2 4 ) ) 1 ) ( + -2 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( - 6 2 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-dist-mul",
      "min-add-both",
      "min-comm",
      "and-comm",
      "not-gt-to-eqlt",
      "min-to-max",
      "add-comm",
      "sub-to-add",
      "and-min-to-eqlt",
      "max-to-min",
      "mul-assoc",
      "or-x-and-x-y",
      "add-assoc",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + v1 v2 ) -16 ) 17 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "and-comm",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "lt-to-zero",
      "lt-swap-out",
      "sub-to-add",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - v1 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "add-to-sub",
      "min-comm",
      "lt-swap-out",
      "and-min-to-lt",
      "sub-to-add",
      "add-comm",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 12 ) v1 ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 12 ) v1 ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) ( + ( * v0 12 ) v1 ) ) 4 ) 15 ) ( + ( * ( + 3 ( + ( * v2 4 ) ( + ( * v0 12 ) v1 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ) ) ( >= ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ( + ( * v3 4 ) ( + ( * v4 2 ) v5 ) ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "mul-comm",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - ( + ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - -78 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-min-to-eqlt",
      "mul-comm",
      "max-to-min",
      "min-comm",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "max-min-switch",
      "add-fact-mul",
      "mul-zero",
      "mul-assoc",
      "not-gt-to-eqlt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -11 ) ( - ( + ( max ( min v0 0 ) -11 ) ( - 5 ( max ( min v0 0 ) -11 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "min-comm",
      "add-comm",
      "eqgt-to-not-lt",
      "max-min-switch",
      "lt-min-term+cpos",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 8 ) 117 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 8 ) 117 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "min-add-both",
      "lt-min-term-term+pos",
      "add-comm",
      "lt-min-term+cpos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ) ) ( >= ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ( + ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) v3 ) ) ) ( <= ( + v4 0 ) ( + 0 v4 ) ) ) ( >= ( + v4 3 ) ( + ( - ( + 4 0 ) 1 ) v4 ) ) ) ( <= ( + ( min ( * v5 35 ) 102 ) v6 ) ( + ( min ( * v5 35 ) 102 ) v6 ) ) ) ( >= ( + ( min ( * v5 35 ) 102 ) v6 ) ( + ( min ( * v5 35 ) 102 ) v6 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( / ( - 0 ( min ( min ( - 1999 ( * v0 4 ) ) ( + ( * v0 4 ) 3 ) ) 0 ) ) 4 ) ( - ( + 0 ( / ( + ( max v1 0 ) 7 ) 4 ) ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "max-to-min",
      "eq-max-lt",
      "add-comm",
      "min-comm",
      "min-div-in-pos",
      "mul-comm",
      "eq-comm",
      "Eq-max-c-pos",
      "min-to-max",
      "min-max-const",
      "min-max-max-x",
      "Eq-lt-min",
      "min-mul-in-neg",
      "min-add-both",
      "div-minus-in",
      "add-dist-mul",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( + ( + ( * v0 4 ) v1 ) 6 ) ) ) ( <= ( - v2 2 ) ( - v2 2 ) ) ) ( >= ( + v2 127 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "sub-to-add",
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 128 ) v2 ) ) 0 ) 10 ) ( - ( + ( * v1 128 ) v2 ) 10 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( + ( * v1 128 ) v2 ) 124 ) ) 3 ) 10 ) ( - ( + ( + ( * v1 128 ) v2 ) 127 ) 10 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( / v0 4 ) ( * v1 3 ) ) 2 ) ( + ( / v0 4 ) ( * ( + v1 1 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "mul-zero",
      "lt-swap-in",
      "mul-assoc",
      "add-to-sub",
      "sub-to-add",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( * ( + ( * v4 2 ) v5 ) 4 ) ( * ( + ( * v4 2 ) v5 ) 4 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) v0 ) 3 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( - v0 7 ) ( - ( + ( - v0 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "mul-assoc",
      "add-fact-mul",
      "sub-to-add",
      "eq-swap",
      "add-comm",
      "add-assoc",
      "mul-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( - ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 208 0 ) 1 ) ( - ( + 208 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add",
      "add-to-sub",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) 78 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * v0 8 ) 1 ) ( - ( + ( - ( * v0 8 ) 1 ) 13 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-comm",
      "mul-zero",
      "lt-swap-in",
      "add-comm",
      "add-fact-mul",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 8 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 8 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 8 ) v1 ) 20 ) ) 5 ) ( + ( + ( * v0 8 ) v1 ) 12 ) ) ) ( <= ( - ( max ( + v2 16 ) v3 ) 11 ) ( - v2 4 ) ) ) ( >= ( + v2 5 ) ( + v2 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "min-comm",
      "mul-one",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "and-comm",
      "mul-comm",
      "add-comm",
      "max-to-min",
      "min-sub-both",
      "sub-to-add",
      "lt-swap-in",
      "lt-swap-out",
      "and-min-to-eqlt",
      "eqlt-to-not-gt",
      "and-max-to-eqlt",
      "lt-max-term-term+pos",
      "min-div-out-pos",
      "mul-cancel-div",
      "lt-mul-pos-cancel",
      "min-max",
      "and-ineq-eq",
      "or-comm",
      "gt-to-lt",
      "div-minus-up",
      "min-ass"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-comm",
      "lt-swap-in",
      "lt-swap-out",
      "add-assoc",
      "add-comm",
      "sub-to-add",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 2 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 11 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "add-fact-mul",
      "lt-swap-in",
      "mul-assoc",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + ( + v0 v1 ) v2 ) 4 ) ( - ( / ( + ( + ( - v0 1 ) v1 ) v2 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-in",
      "and-min-to-eqlt",
      "min-mul-in-neg",
      "add-assoc",
      "min-max",
      "max-to-min",
      "div-minus-in",
      "add-zero",
      "eq-comm",
      "eq-swap",
      "min-comm",
      "sub-to-add",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "div-minus-down",
      "min-div-out-neg",
      "mul-assoc",
      "add-denom-mul",
      "min-x-x-plus-a-neg",
      "min-add-both",
      "lt-mul-div-cancel",
      "mul-comm",
      "min-x-x",
      "min-div-mul",
      "lt-swap-out",
      "min-max-max-x",
      "not-gt-to-eqlt",
      "and-eqlt-to-min",
      "mul-zero",
      "mul-one",
      "mod-one",
      "not-eq-to-ineq",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 250 ) v1 ) 249 ) ( + ( * ( + v0 1 ) 250 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "add-dist-mul",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( - ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ( * v0 8 ) ) 4 ) 4 ) 4 ) ( * ( - ( min ( + ( * v0 8 ) ( * ( * v1 8 ) 8 ) ) ( + ( * v2 64 ) 81 ) ) ( * v0 8 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 4 ) 271 ) 0 )", "end": "1" },
    "rules": [
      "Eq-lt-min",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( - ( min ( * v0 16 ) 109 ) 5 ) v1 ) 0 ) 3 ) ( - ( + ( min ( * v0 16 ) 109 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( + ( min ( * v0 16 ) 109 ) 15 ) v1 ) 3 ) 3 ) ( + ( + ( min ( * v0 16 ) 109 ) v1 ) 18 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-assoc",
      "add-dist-mul",
      "lt-min-term+cpos",
      "min-to-max",
      "Eq-lt-min",
      "div-cancel-mul",
      "mul-one",
      "add-zero",
      "lt-mul-pos-cancel",
      "add-assoc",
      "lt-swap-in",
      "add-comm",
      "and-assoc",
      "eqlt-to-not-gt",
      "min-div-mul",
      "mul-comm",
      "add-div-mod",
      "Eq-min-lt",
      "not-gt-to-eqlt",
      "lt-min-term-term+pos",
      "div-minus-out",
      "eq-swap",
      "Eq-min-c-pos",
      "Eq-max-c-neg",
      "mod-x-x",
      "eq-x-x",
      "eqgt-to-not-lt",
      "and-eqlt-eqgt-to-0",
      "min-x-x-plus-a-neg",
      "lt-const-neg",
      "and-min-to-lt"
    ]
  },
  {
    "expression": { "start": "( > ( - 10 v0 ) ( - 509 v0 ) )", "end": "0" },
    "rules": [
      "lt-swap-in",
      "mul-zero",
      "add-comm",
      "add-assoc",
      "gt-to-lt",
      "add-fact-mul",
      "mul-comm",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 17 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "add-comm",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 1 ) ( - ( + 0 v0 ) 1 ) ) ) ( >= ( - ( + 3 v0 ) 1 ) ( - ( + ( - ( + 4 0 ) 1 ) v0 ) 1 ) ) ) ( <= ( - ( + ( + ( * 0 2 ) v1 ) 0 ) 1 ) ( - ( + 0 v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * 3 2 ) v1 ) 1 ) 1 ) ( - ( + ( - ( + 8 0 ) 1 ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + 0 v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "mul-comm",
      "add-comm",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( - ( min ( max ( + ( + v0 1 ) 16 ) v1 ) ( + ( + v0 1 ) 7 ) ) 11 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "sub-to-add",
      "lt-swap-out",
      "mul-comm",
      "add-to-sub",
      "and-comm",
      "mul-zero",
      "add-comm",
      "and-min-to-lt",
      "add-fact-mul",
      "add-assoc",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / ( + ( * v0 500 ) v1 ) 16 ) 2 ) ( - ( + 0 ( / ( + ( * v0 500 ) v1 ) 16 ) ) 2 ) ) ) ( >= ( / ( + ( + ( * v0 500 ) v1 ) 547 ) 16 ) ( + ( + 3 ( + ( / ( + ( * v0 500 ) v1 ) 16 ) ( * ( / ( + ( % ( + ( * v0 500 ) v1 ) 16 ) 499 ) 64 ) 4 ) ) ) 3 ) ) ) ( <= ( - ( max ( * v2 8 ) ( + ( * ( + v3 v2 ) 8 ) 5 ) ) 1 ) ( + -2 ( + ( * ( + v3 v2 ) 8 ) 1 ) ) ) ) ( >= ( + ( * ( + v3 v2 ) 8 ) 11 ) ( + 3 ( + ( * ( + v3 v2 ) 8 ) 8 ) ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 15 4 ) 3 ) 63 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "and-comm",
      "mul-zero",
      "lt-swap-in",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "add-comm",
      "lt-swap-out",
      "mul-comm",
      "and-min-to-eqlt",
      "sub-to-add",
      "add-to-sub",
      "and-x-x",
      "max-to-min",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "min-x-x",
      "add-assoc",
      "add-comm",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + v0 251 ) ) ) ( <= ( - ( max ( min ( * ( / v1 4 ) 4 ) 1999 ) ( + v2 6 ) ) 5 ) ( - v2 2 ) ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-comm",
      "add-to-sub",
      "max-to-min",
      "and-min-to-eqlt",
      "min-sub-both",
      "not-gt-to-eqlt",
      "add-dist-mul",
      "and-comm",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / v1 250 ) ( / ( + 0 v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( + ( * v1 4 ) v2 ) 0 ) 4 ) 0 ) ( * ( + ( * v1 4 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v1 4 ) v2 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 15 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 7 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 10 ) ( - ( + ( - ( + v0 v1 ) 10 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "add-to-sub",
      "mul-comm",
      "add-comm",
      "mul-assoc",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + ( + ( + v0 v1 ) v2 ) v3 ) v4 ) ( + ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) v3 ) v4 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) 0 ) ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) ) ) ( >= ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) 3 ) ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) 3 ) v5 ) ) ) ( <= ( + ( min ( * v6 5 ) 13 ) v7 ) ( + ( min ( * v6 5 ) 13 ) v7 ) ) ) ( >= ( + ( min ( * v6 5 ) 13 ) v7 ) ( + ( min ( * v6 5 ) 13 ) v7 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 6 ) ( - ( + ( - ( + v0 v1 ) 6 ) 131 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "mul-assoc",
      "eq-swap",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( - ( + ( * ( + v0 1 ) 8 ) v1 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "lt-swap-in",
      "mul-comm",
      "lt-swap-out",
      "add-dist-mul",
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 4 ) ) ( + 0 ( - v0 4 ) ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( - ( + 4 0 ) 1 ) ( + v0 28 ) ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v0 ) 0 ) 61 ) ( - ( + 0 v0 ) 66 ) ) ) ( >= ( - ( + ( + ( max ( * 249 4 ) -5 ) v0 ) 3 ) 61 ) ( - ( + 3 ( + v0 1004 ) ) 66 ) ) ) ( <= ( + ( + ( max ( * v1 3 ) -5 ) ( + ( * v2 9 ) v3 ) ) 3 ) ( - ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 2 ) ) ) ( >= ( + ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 5 ) ( + ( + ( * v1 3 ) ( + ( * v2 9 ) v3 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "and-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( max ( * ( + v0 1 ) 2 ) -1 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "mul-comm",
      "max-to-min",
      "sub-to-add",
      "min-comm",
      "add-to-sub",
      "lt-swap-in",
      "add-dist-mul",
      "min-sub-both",
      "add-fact-mul",
      "add-comm",
      "lt-swap-out",
      "min-add-both",
      "lt-min-term+cpos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) v2 ) ( + ( + ( * v0 2 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 125 ) 125 ) 125 ) ( * v0 125 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( >= ( * v0 8 ) ( - ( + ( * v0 8 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * v0 4 ) ( - ( + ( * v0 4 ) 12 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / v1 4 ) 4 ) 1999 ) ( + ( + v0 1 ) 6 ) ) ( + ( + v0 1 ) 3 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-add-both",
      "min-comm",
      "lt-swap-in",
      "and-min-to-lt",
      "lt-swap-out",
      "min-sub-both",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 91 ) ( + ( min ( * v1 46 ) 45 ) ( + ( min ( * v2 16 ) 30 ) v3 ) ) ) v4 ) ( + ( + ( * v0 91 ) ( + ( min ( * v1 46 ) 45 ) ( + ( min ( * v2 16 ) 30 ) ( + v3 1 ) ) ) ) v4 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 8 ) 8 ) 8 ) ( * v0 8 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( + ( * ( max ( min ( / ( + ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) v1 ) 128 ) 3 ) 0 ) 32 ) ( * ( % v0 ( / ( + v1 499 ) 500 ) ) 125 ) ) -4 ) 4 ) 4 ) ( * ( + ( * ( max ( min ( / ( + ( * ( % v0 ( / ( + v1 499 ) 500 ) ) -500 ) v1 ) 128 ) 3 ) 0 ) 32 ) ( * ( % v0 ( / ( + v1 499 ) 500 ) ) 125 ) ) -4 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "eq-x-x",
      "add-to-sub",
      "div-cancel-mul",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) ) ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 32 ) 468 ) ( * v2 8 ) ) v3 ) 4 ) ) ( + ( + ( min ( * v1 32 ) 468 ) ( + ( * v2 8 ) 7 ) ) v3 ) ) ) ( <= ( + v4 v5 ) ( + v4 v5 ) ) ) ( >= ( + v4 v5 ) ( + v4 v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) 0 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) ) ( >= ( + ( + ( * ( - 1 ( max v1 1 ) ) 4 ) ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ) 3 ) ( + ( min ( - ( + ( * v1 4 ) ( + ( * v2 8 ) v3 ) ) ( * ( max v1 1 ) 4 ) ) ( + ( * v2 8 ) v3 ) ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "sub-to-add",
      "mul-assoc",
      "lt-to-zero",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-dist-mul",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 4 ) ( + v1 v2 ) ) ( + ( + ( * ( - v0 1 ) 4 ) ( + v1 v2 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "mul-assoc",
      "lt-swap-out",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "mul-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * v1 8 ) ( + ( * v2 16 ) v3 ) ) ) 0 ) ( + ( + ( * v2 16 ) v3 ) ( * v1 8 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 8 ) ( + ( * v2 16 ) v3 ) ) 4 ) ) 3 ) ( + ( + ( * v2 16 ) v3 ) ( + ( * v1 8 ) 7 ) ) ) ) ( <= ( + ( + ( * v4 1000 ) v5 ) v6 ) ( + ( + ( * v4 1000 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 1000 ) v5 ) v6 ) ( + ( + ( * v4 1000 ) v5 ) v6 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "lt-swap-in",
      "add-comm",
      "mul-comm",
      "sub-to-add",
      "add-to-sub",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v0 ) 0 ) 5 ) ( - v0 4 ) ) ) ( >= ( + ( + ( + ( max ( * 251 4 ) -9 ) v0 ) 3 ) 5 ) ( + v0 1012 ) ) ) ( <= ( + ( + ( + ( * v1 8 ) v2 ) v3 ) 5 ) ( - ( + ( + ( * v1 8 ) v2 ) v3 ) 4 ) ) ) ( >= ( + ( + ( + ( * v1 8 ) v2 ) v3 ) 5 ) ( + ( + ( + ( * v1 8 ) v2 ) v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "sub-to-add",
      "add-fact-mul",
      "mul-zero",
      "Eq-lt-min",
      "mul-comm",
      "Eq-min-c-pos",
      "eq-swap",
      "min-sub-both",
      "eq-comm",
      "min-add-both",
      "add-assoc",
      "mul-assoc",
      "and-comm",
      "lt-mul-div-cancel"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( min ( * ( + ( / v0 4 ) v1 ) 4 ) 1999 ) ( + v2 4 ) ) 3 ) ( - v2 3 ) ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= ( + 0 ( - v3 5 ) ) ( - v3 5 ) ) ) ( >= ( + 3 ( + v3 998 ) ) ( + v3 1004 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "and-comm",
      "add-comm",
      "lt-swap-in",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( min v0 1 ) 9 ) ( + ( min ( * v1 2 ) 7 ) v2 ) ) ( + ( * ( min v0 1 ) 9 ) ( + ( min ( * v1 2 ) 7 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( - ( + ( * ( + v2 v3 ) 4 ) 0 ) 7 ) ( - ( + ( * ( + v2 v3 ) 4 ) 0 ) 7 ) ) ) ( >= ( - ( + ( * ( + v2 v3 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v2 v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 14 ) ( - ( + 0 ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 14 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 14 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 48 ) v1 ) 4 ) ( * v2 4 ) ) ) 14 ) ) ) ( <= ( * v3 4 ) ( * v3 4 ) ) ) ( >= ( * v3 4 ) ( * v3 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 500 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 500 ) v1 ) ( + v2 1 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 34 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 34 ) v1 ) ( + v2 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "mul-zero",
      "mul-assoc",
      "add-fact-mul",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 8 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-to-sub",
      "add-fact-mul",
      "add-comm",
      "mul-zero",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "mul-assoc",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "lt-swap-in",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 32 ) 93 ) v1 ) v2 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-assoc", "add-comm", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v0 ) 0 ) 5 ) ( - v0 4 ) ) ) ( >= ( + ( + ( + ( max ( * 125 4 ) -9 ) v0 ) 3 ) 5 ) ( + v0 508 ) ) ) ( <= ( + ( + v1 v2 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + v1 v2 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "and-comm",
      "min-to-max",
      "and-eqlt-to-min",
      "add-fact-mul",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "not-gt-to-eqlt",
      "mul-zero",
      "sub-to-add",
      "add-dist-mul",
      "and-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( / v2 4 ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 29 ) ) ( + ( / v2 4 ) 32 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-zero",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) v3 ) ( + ( + ( * v1 4 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) v3 ) ( + ( + ( * v1 4 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 125 ) v2 ) v3 ) ( + ( + ( * v1 125 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 125 ) v2 ) v3 ) ( + ( + ( * v1 125 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 1000 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "eqgt-to-not-lt",
      "min-max-const",
      "not-gt-to-eqlt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( max ( min ( * ( + ( * v0 64 ) v1 ) 2 ) 491 ) -8 ) ( max ( min ( * ( + ( * v0 64 ) v1 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * ( + ( * v0 16 ) v2 ) 4 ) v1 ) 2 ) 491 ) -8 ) ( max ( min ( * ( + ( * ( + ( * v0 16 ) v2 ) 4 ) v1 ) 2 ) 499 ) 0 ) ) ) 4 ) 40 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "eqlt-to-not-gt",
      "and-min-to-lt",
      "add-comm",
      "lt-mul-pos-cancel",
      "add-zero",
      "mul-assoc",
      "lt-swap-out",
      "min-mul-in-neg",
      "div-minus-in",
      "max-min-switch",
      "min-mul-in-pos",
      "max-to-min",
      "div-minus-down",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "min-to-max",
      "add-to-sub",
      "Eq-lt-min",
      "min-div-in-neg",
      "mul-one",
      "mod-zero",
      "eq-comm",
      "div-zero",
      "and-x-x",
      "min-x-x-plus-a-neg",
      "and-max-to-eqlt",
      "sub-to-add",
      "and-lt-to-min",
      "lt-min-term+neg-term",
      "and-eqlt-to-max",
      "min-max-switch",
      "and-comm",
      "lt-x-x-sub-a",
      "and-lt-gt-to-0",
      "min-ass",
      "add-fact-mul",
      "min-lt-cancel",
      "lt-min-max-cancel",
      "and-min-to-eqlt",
      "and-ineq-eq"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) v0 ) 4 ) 0 ) ( + ( * ( * v0 2 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * 2 4 ) v0 ) 4 ) 15 ) ( + ( * ( + ( * v0 2 ) 23 ) 2 ) 3 ) ) ) ( <= ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 4 ) ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 4 ) 3 ) ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "mul-assoc",
      "Eq-lt-min",
      "add-denom-div",
      "not-gt-to-eqlt",
      "add-dist-mul",
      "eq-x-x",
      "lt-swap-in",
      "mul-comm",
      "lt-mul-pos-cancel",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( > ( - 0 v0 ) ( - 124 v0 ) )", "end": "0" },
    "rules": [
      "sub-to-add",
      "mul-zero",
      "mul-assoc",
      "lt-swap-out",
      "add-assoc",
      "mul-comm",
      "gt-to-lt",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 2 ) ( + ( * ( + v0 1 ) 2 ) v1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-zero",
      "mul-assoc",
      "add-to-sub",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "lt-swap-in",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - ( + ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - 13 ( * ( min ( - v0 v1 ) 5 ) 2 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "min-mul-in-pos",
      "sub-to-add",
      "mul-zero",
      "not-gt-to-eqlt",
      "min-add-both",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "add-assoc",
      "min-comm",
      "mul-assoc",
      "and-min-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( - ( min ( * ( min ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 64 ) ( + ( * ( max ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 8 ) 1 ) ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) ) 8 ) 193 ) ) 4 ) ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 256 ) 3 ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 64 ) ( + ( * ( max ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 8 ) 1 ) ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) ) 8 ) 193 ) ) 4 ) ( + ( * ( / ( min ( + ( * ( % v0 ( + ( / v1 3 ) 1 ) ) 24 ) ( - ( * ( / v2 250 ) 8 ) 5 ) ) ( - ( * ( / ( - ( + v3 v2 ) 1 ) 250 ) 8 ) 21 ) ) 8 ) 256 ) 3 ) ) 20 ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "min-ass",
      "add-denom-div",
      "sub-to-add",
      "add-dist-mul",
      "add-comm",
      "min-x-x-plus-a-pos",
      "min-mul-in-pos",
      "mul-assoc",
      "eq-x-x",
      "mul-comm",
      "eqlt-to-not-gt",
      "Eq-max-c-neg",
      "lt-mul-pos-cancel",
      "or-x-and-x-y",
      "and-x-not-x",
      "min-comm",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) 1 ) ( - ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 1 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( min ( + ( min ( * v0 32 ) ( + ( - ( max ( * v1 4 ) -3 ) v2 ) 3 ) ) v2 ) ( + ( max ( * v1 4 ) -3 ) 3 ) ) ( + ( * v0 32 ) v2 ) ) ( - ( min ( + ( min ( + ( * v0 32 ) v3 ) ( + ( - ( max ( * v1 4 ) -3 ) v2 ) 3 ) ) v2 ) ( + ( max ( * v1 4 ) -3 ) 3 ) ) ( + ( + ( * v0 32 ) v3 ) v2 ) ) ) 5 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "min-comm",
      "max-to-min",
      "mul-zero",
      "min-to-max",
      "min-add-both",
      "eqlt-to-not-gt",
      "mul-assoc",
      "add-dist-mul",
      "add-fact-mul",
      "sub-to-add",
      "min-ass",
      "min-max-max-x",
      "and-min-to-lt",
      "lt-const-neg",
      "div-minus-out",
      "add-zero",
      "eq-max-lt",
      "min-div-out-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "mul-assoc",
      "add-to-sub",
      "lt-swap-out",
      "add-fact-mul",
      "add-assoc",
      "mul-comm",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + v5 v6 ) ( + v5 v6 ) ) ) ( >= ( + v5 v6 ) ( + v5 v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "add-dist-mul",
      "add-assoc",
      "mul-comm",
      "eqlt-to-not-gt",
      "mul-assoc",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + v0 v1 ) 4 ) ( - ( / ( + ( - v0 1 ) v1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "min-x-x",
      "Eq-min-lt",
      "add-assoc",
      "eq-x-x",
      "and-eqlt-to-min",
      "lt-mul-pos-cancel",
      "div-minus-in",
      "Eq-lt-min",
      "max-to-min",
      "lt-swap-out",
      "min-div-out-pos",
      "div-cancel-mul",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-comm",
      "min-max-max-x",
      "add-denom-mul",
      "and-min-to-eqlt",
      "lt-mul-div-cancel",
      "lt-swap-in",
      "min-comm",
      "mul-assoc",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-neg",
      "min-div-mul",
      "sub-to-add",
      "min-mul-in-pos",
      "lt-min-term+cpos",
      "and-eqlt-gt-to-0"
    ]
  },
  {
    "expression": { "start": "( < ( + v0 4 ) ( + v0 1 ) )", "end": "0" },
    "rules": [
      "mul-comm",
      "add-assoc",
      "add-comm",
      "lt-swap-out",
      "add-fact-mul",
      "add-to-sub",
      "sub-to-add",
      "mul-zero",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * v2 16 ) ) 22 ) ( - ( + ( / ( + ( min v0 4 ) v1 ) 4 ) ( * ( + v2 1 ) 16 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-one",
      "mul-comm",
      "add-fact-mul",
      "add-denom-mul",
      "add-assoc",
      "max-to-min",
      "mul-assoc",
      "add-comm",
      "lt-swap-in",
      "sub-to-add",
      "mul-zero",
      "and-ineq-eq",
      "Eq-max-c-neg",
      "min-max-const",
      "Eq-max-c-pos",
      "and-x-not-x",
      "mod-minus-in",
      "and-comm",
      "and-lt-gt-to-0",
      "mod-minus-out"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "mul-assoc",
      "gt-to-lt",
      "lt-swap-out",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 v1 ) 8 ) ( + ( + ( / ( + ( - v0 1 ) v1 ) 8 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "div-minus-out",
      "min-comm",
      "min-sub-both",
      "add-comm",
      "min-div-in-pos",
      "sub-to-add",
      "min-x-x",
      "min-x-x-plus-a-neg",
      "min-div-out-neg",
      "min-mul-out-neg",
      "min-div-mul",
      "and-max-to-eqlt",
      "lt-mul-pos-cancel",
      "div-minus-in",
      "min-max-min-y",
      "lt-min-term+cpos",
      "add-fact-mul",
      "min-to-max",
      "mul-comm",
      "div-minus-down",
      "min-ass",
      "mul-assoc",
      "lt-mul-div-cancel",
      "add-denom-mul",
      "not-gt-to-eqlt",
      "add-assoc",
      "eqgt-to-not-lt",
      "min-mul-in-pos",
      "add-denom-div",
      "and-comm",
      "and-lt-to-max",
      "Eq-lt-min",
      "and-x-x",
      "mod-zero",
      "mod-one",
      "min-mod-const-to-const",
      "Eq-min-lt",
      "or-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 39 ) ( + v0 39 ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 35 ) v1 ) 35 ) ( + ( * ( + v0 1 ) 35 ) v1 ) )",
      "end": "0"
    },
    "rules": ["add-assoc", "add-dist-mul", "add-comm", "lt-to-zero", "mul-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) v2 ) ) ( >= ( + ( + ( * 31 4 ) v2 ) 3 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 13 13 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 16 ) v1 ) ) 2 ) ( - ( + ( * v0 16 ) v1 ) 2 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 16 ) v1 ) 20 ) ) 2 ) ( + ( + ( * v0 16 ) v1 ) 18 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "Eq-lt-min",
      "eq-comm",
      "mul-one",
      "add-comm",
      "mul-comm",
      "eq-swap",
      "add-assoc",
      "eqlt-to-not-gt",
      "and-comm",
      "lt-swap-in",
      "add-fact-mul",
      "mul-zero",
      "mul-assoc",
      "lt-min-term+neg-term",
      "and-lt-gt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["max-to-min", "div-cancel-mul", "eq-x-x", "mul-assoc", "mul-comm"]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 504 ) 503 ) 0 )", "end": "1" },
    "rules": [
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "Eq-lt-min",
      "lt-swap-in",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 2 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 258 ) ( - ( + ( - v0 258 ) 265 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 500 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) v1 ) v2 ) ( - ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) v1 ) v2 ) ) ) ( <= ( + 0 ( - ( + ( min v3 0 ) v4 ) 1 ) ) ( - ( + 0 ( + ( min v3 0 ) v4 ) ) 1 ) ) ) ( >= ( + 3 ( min ( + ( + ( * ( / ( max v3 0 ) 4 ) 4 ) ( + ( min v3 0 ) v4 ) ) 3 ) ( + v3 v4 ) ) ) ( - ( + 3 ( + ( + ( * ( / ( max v3 0 ) 4 ) 4 ) ( + ( min v3 0 ) v4 ) ) 4 ) ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 2 ) ( - ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 2 ) ) ) ( >= ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 6 ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 6 ) ) ) ( <= ( + ( + ( + ( + ( min ( * v3 16 ) 484 ) v4 ) v5 ) 0 ) 3 ) ( - ( + ( + ( min ( * v3 16 ) 484 ) v4 ) v5 ) 2 ) ) ) ( >= ( + ( + ( + ( + ( min ( * v3 16 ) 484 ) v4 ) v5 ) 3 ) 3 ) ( + ( + ( + ( min ( * v3 16 ) 484 ) v4 ) v5 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "sub-to-add",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "and-comm",
      "and-min-to-lt",
      "div-minus-down",
      "add-dist-mul",
      "mul-comm",
      "div-cancel-mul",
      "mod-two",
      "and-x-1",
      "div-zero",
      "and-lt-to-max",
      "lt-min-term+cpos",
      "lt-mul-pos-cancel",
      "min-mod-const-to-const",
      "add-to-sub",
      "max-min-switch",
      "add-zero",
      "or-to-and",
      "min-div-in-neg",
      "Eq-max-c-neg",
      "lt-min-max-cancel",
      "min-lt-cancel",
      "min-max-min-y",
      "min-ass",
      "and-lt-to-min",
      "eqgt-to-not-lt",
      "min-mul-out-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 2 ) v6 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( + ( % ( + v0 v1 ) 250 ) 999 ) 0 )",
      "end": "1"
    },
    "rules": [
      "min-mod-const-to-const",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) ) 2 ) 0 ) 10 ) ( - ( * ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) 2 ) 10 ) ) ) ( >= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) ) 2 ) 3 ) 10 ) ( - ( + ( * ( + ( * v1 2 ) ( + ( * v2 8 ) v3 ) ) 2 ) 3 ) 10 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + v0 ( / ( + ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 3 ) 4 ) ) ( / ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + v0 ( / ( + ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 3 ) 4 ) ) ( / ( + ( min ( * v1 32 ) 93 ) ( + v2 v3 ) ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "max-to-min", "mul-comm", "mul-assoc", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 5 ) ) ( - 17 ( * v0 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "lt-swap-out",
      "gt-to-lt",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 3 ) ( + ( + ( - v0 1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 116 ) ( - ( + ( + ( + v0 v1 ) 116 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "gt-to-lt",
      "add-fact-mul",
      "add-comm",
      "add-assoc",
      "mul-assoc",
      "mul-zero",
      "sub-to-add",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) ) ( >= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / ( - -40 ( % v0 4 ) ) 8 ) ( / ( + ( % v0 4 ) 63 ) 8 ) ) ( / ( - -40 ( % v0 4 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-mod-const-to-const",
      "min-comm",
      "min-div-in-pos",
      "sub-to-add",
      "min-div-mul",
      "min-mul-out-neg",
      "add-assoc",
      "eqlt-to-not-gt",
      "or-over-and",
      "add-zero",
      "min-mul-in-pos",
      "div-minus-in",
      "not-gt-to-eqlt",
      "min-max-min-y",
      "mul-comm",
      "eq-comm",
      "Eq-lt-min",
      "and-min-to-eqlt",
      "min-x-x",
      "add-denom-mul",
      "min-max-switch",
      "Eq-max-c-pos",
      "lt-max-term-term+pos",
      "add-dist-mul",
      "and-eqlt-gt-to-0",
      "Eq-min-lt",
      "div-minus-down",
      "and-lt-to-max",
      "min-mul-out-pos",
      "min-lt-cancel",
      "mul-zero",
      "mul-assoc",
      "and-x-not-x",
      "ineq-to-eq",
      "add-fact-mul",
      "add-to-sub",
      "min-max",
      "lt-swap-out",
      "and-x-1",
      "and-lt-to-min",
      "min-max-const",
      "and-comm",
      "not-not",
      "eq-mul-x-y-0",
      "min-x-x-plus-a-neg",
      "Eq-max-c-neg",
      "min-sub-both",
      "mul-one",
      "lt-mul-div-cancel",
      "and-x-x",
      "and-min-to-lt",
      "lt-x-x-sub-a",
      "mod-one",
      "min-ass"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * v0 8 ) 1 ) ( - ( + ( - ( * v0 8 ) 1 ) 13 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "sub-to-add",
      "mul-assoc",
      "eq-swap",
      "add-fact-mul",
      "mul-comm",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 1 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 1 ) ) ) ( >= ( - ( + ( + ( * 62 4 ) v0 ) 3 ) 1 ) ( - ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v2 4 ) 29 ) ) 4 ) 4 ) v1 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 29 ( max ( * v2 4 ) 29 ) ) 7 ) 4 ) 0 ) 1 ) 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-denom-mul",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + v0 v1 ) 2 ) 2 ) ( * ( + ( + v0 1 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": ["add-dist-mul", "add-comm", "add-assoc", "lt-to-zero", "mul-comm"]
  },
  {
    "expression": { "start": "( > ( - 1 ( max v0 1 ) ) 2 )", "end": "0" },
    "rules": [
      "add-comm",
      "min-to-max",
      "and-min-to-lt",
      "max-to-min",
      "mul-assoc",
      "and-comm",
      "gt-to-lt",
      "min-add-both",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 4 ) ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-in",
      "sub-to-add",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 4 ) 9 ) 0 )", "end": "1" },
    "rules": [
      "min-sub-both",
      "add-comm",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 3 ) ( + ( + 0 v1 ) v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v1 ) v0 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 16 ) ) ( - 63 ( * v0 16 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "lt-swap-in",
      "mul-assoc",
      "add-fact-mul",
      "add-zero",
      "gt-to-lt",
      "add-comm",
      "mul-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + v0 v1 ) 8 ) ( - ( / ( + ( - v0 1 ) v1 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-div-in-pos",
      "min-to-max",
      "min-ass",
      "add-fact-mul",
      "and-eqlt-to-max",
      "add-denom-mul",
      "mul-comm",
      "and-min-to-eqlt",
      "Eq-lt-min",
      "eq-swap",
      "eqlt-to-not-gt",
      "min-max-max-x",
      "lt-mul-div-cancel",
      "div-minus-down",
      "div-minus-in",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "min-div-out-neg",
      "min-div-mul",
      "min-sub-both",
      "min-max",
      "mul-zero",
      "mul-assoc",
      "and-min-to-lt",
      "and-eqlt-gt-to-0",
      "not-gt-to-eqlt",
      "and-lt-to-min",
      "min-mod-const-to-mod",
      "min-x-x",
      "min-mul-out-neg",
      "or-to-and",
      "lt-min-max-cancel",
      "lt-max-term+neg-term",
      "add-to-sub",
      "lt-to-zero",
      "lt-min-term+neg-term",
      "lt-min-mutual-term",
      "mod-one",
      "eq-mul-x-y-0",
      "min-mul-in-neg",
      "mod-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "add-to-sub"
    ]
  },
  {
    "expression": {
      "start": "( <= v0 ( - ( - ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "add-to-sub",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) ( + ( * ( / ( - v3 v2 ) 4 ) 8 ) 7 ) ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) ( + ( * ( / ( - v3 v2 ) 4 ) 8 ) 7 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-zero"]
  },
  {
    "expression": {
      "start": "( == ( + ( + v0 v1 ) 110 ) ( - ( + ( + ( + v0 v1 ) 110 ) 23 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eq-swap",
      "mul-assoc",
      "add-to-sub",
      "add-comm",
      "add-fact-mul",
      "mul-comm",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( min ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) 1999 ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( <= ( + ( * ( + ( * 0 4 ) v3 ) 4 ) 0 ) ( + ( * ( + 0 v3 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( + ( min ( - ( * ( min ( - ( - 3 ( * v4 2 ) ) v5 ) 0 ) 2 ) v6 ) -1 ) 1 ) 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( min ( - ( * ( min ( - ( - 3 ( * v4 2 ) ) v5 ) 0 ) 2 ) v6 ) -1 ) 4 ) 7 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "mul-one",
      "add-assoc",
      "max-to-min",
      "min-mul-in-neg",
      "mul-assoc",
      "mul-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "add-comm",
      "eqgt-to-not-lt",
      "min-max"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( min ( max ( * ( + v0 1 ) 2 ) -1 ) ( - ( * ( + v0 1 ) 2 ) 1 ) ) v1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "min-comm",
      "lt-to-zero",
      "sub-to-add",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "and-min-to-lt",
      "lt-swap-out"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( + ( - v0 1 ) 1 ) )", "end": "1" },
    "rules": ["lt-swap-out", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + v0 v1 ) 2 ) 4 ) ( - ( + ( - ( * ( + v0 v1 ) 2 ) 4 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "sub-to-add",
      "add-fact-mul",
      "eq-swap",
      "add-assoc",
      "mul-comm",
      "add-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( min ( * ( / v0 4 ) 4 ) 1999 ) ( + v1 4 ) ) 3 ) ( + -3 v1 ) ) ) ( >= ( + v1 1 ) ( + ( - ( - 5 3 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 3 ) ( + -3 v2 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v2 ) 3 ) 3 ) ( + ( - ( - 5 3 ) 1 ) ( + v2 15 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "max-to-min",
      "min-max-const",
      "add-dist-mul",
      "min-sub-both",
      "mul-assoc",
      "eq-swap",
      "min-comm",
      "min-to-max",
      "Eq-min-c-pos",
      "Eq-lt-min",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * v0 8 ) ( - ( + ( * v0 8 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "sub-to-add",
      "eq-comm",
      "add-assoc",
      "add-comm",
      "eq-swap",
      "add-fact-mul",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 132 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eq-swap",
      "add-fact-mul",
      "mul-zero",
      "eq-comm",
      "add-comm",
      "mul-assoc",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 8 ) ( - ( min ( max ( / v1 4 ) ( + ( + v0 1 ) 10 ) ) ( + v0 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "add-comm",
      "lt-swap-in",
      "min-comm",
      "sub-to-add",
      "add-assoc",
      "and-min-to-lt",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( min ( * v1 8 ) 117 ) v2 ) ( + ( + ( min ( * v1 8 ) 117 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) 7 ) ( + ( + ( min ( * v1 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "add-zero",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( + v0 v1 ) 116 ) ( - ( + ( + ( + v0 v1 ) 116 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-to-sub",
      "add-comm",
      "add-assoc",
      "mul-assoc",
      "sub-to-add",
      "mul-zero",
      "mul-comm",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v4 503 ) v5 ) v6 ) v7 ) 3 ) 8 ) ) ) ( <= ( + ( * v8 4 ) 0 ) ( + ( * v8 4 ) 0 ) ) ) ( >= ( + ( * v8 4 ) 3 ) ( + ( * v8 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 1003 ) 1007 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "lt-swap-in",
      "min-mod-const-to-const"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 500 ) v1 ) v2 ) ( + ( + ( * v0 500 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( / ( min ( + ( * v0 125 ) v1 ) ( - ( + v2 v1 ) 125 ) ) 4 ) 4 ) 4 ) 4 ) ( * ( / ( min ( + ( * v0 125 ) v1 ) ( - ( + v2 v1 ) 125 ) ) 4 ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 31 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ( + ( + ( min ( * v2 223 ) 444 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( + ( max ( + v0 9 ) v1 ) ( * ( / ( + ( min ( - v0 v1 ) -9 ) 9 ) 4 ) 4 ) ) v0 ) 9 ) 4 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "mul-zero",
      "max-to-min",
      "mul-one",
      "min-sub-both",
      "add-fact-mul",
      "mul-comm",
      "min-div-mul",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "add-assoc",
      "add-dist-mul",
      "max-min-switch",
      "min-div-out-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - v0 4 ) ) ) ( >= ( - ( + ( + ( * 7 4 ) v0 ) 3 ) 4 ) ( + v0 27 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 13 13 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ) ) ( >= ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ( % ( + ( * ( + v0 v1 ) 2 ) v2 ) 4 ) ) ) ( <= ( % ( + ( * v3 2 ) v4 ) 4 ) ( % ( + ( * v3 2 ) v4 ) 4 ) ) ) ( >= ( % ( + ( * v3 2 ) v4 ) 4 ) ( % ( + ( * v3 2 ) v4 ) 4 ) ) ) ( <= ( + ( min ( * v5 4 ) 14 ) 0 ) ( + ( min ( * v5 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 14 ) 3 ) ( + ( min ( * v5 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 1 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "min-x-x",
      "eq-x-x",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "Eq-lt-min",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "sub-to-add",
      "mul-zero",
      "eq-comm",
      "add-assoc",
      "add-comm",
      "add-fact-mul",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( min ( + ( * v0 4 ) ( * ( * v1 16 ) 4 ) ) 122 ) 2 ) 2 ) ( min ( + ( * v0 4 ) ( * ( * v1 16 ) 4 ) ) 122 ) )",
      "end": "1"
    },
    "rules": [
      "mod-minus-in",
      "add-to-sub",
      "mul-zero",
      "add-dist-mul",
      "mul-comm",
      "add-comm",
      "div-minus-down",
      "add-assoc",
      "sub-to-add",
      "min-mul-in-pos",
      "add-denom-mul",
      "min-to-max",
      "mul-cancel-div",
      "mul-assoc",
      "min-div-in-neg",
      "eq-comm",
      "min-add-both",
      "add-zero",
      "add-fact-mul",
      "eq-swap",
      "lt-const-neg",
      "min-lt-cancel"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * -11 4 ) 48 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( - ( + ( + ( * v0 8 ) ( + v1 1 ) ) v2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( / v5 125 ) ( / ( + 0 v5 ) 125 ) ) ) ( >= ( / ( + v5 999 ) 125 ) ( / ( + ( - ( + 1000 0 ) 1 ) v5 ) 125 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "lt-to-zero",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( - ( min ( + ( max ( + ( + v0 1 ) 8 ) ( + v1 v2 ) ) 1 ) ( + v0 1 ) ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-assoc",
      "and-min-to-lt",
      "lt-swap-in",
      "add-comm",
      "min-sub-both",
      "min-comm",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( + ( min ( * v0 128 ) 372 ) v1 ) ) ( + ( min ( * v0 128 ) 372 ) v1 ) ) ) ( >= ( + ( + ( * 3 4 ) 3 ) ( + ( + ( min ( * v0 128 ) 372 ) v1 ) 112 ) ) ( + ( + ( min ( * v0 128 ) 372 ) 127 ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) 15 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 64 ) v1 ) 63 ) ) ) ( <= ( - ( max ( min ( * ( / v2 4 ) 4 ) 1999 ) ( + v3 6 ) ) 5 ) ( - v3 2 ) ) ) ( >= ( + v3 1 ) ( + v3 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "eq-max-lt",
      "min-comm",
      "and-min-to-eqlt",
      "min-add-both",
      "max-to-min",
      "min-sub-both",
      "eq-comm",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eq-swap",
      "and-comm",
      "add-to-sub",
      "add-dist-mul",
      "lt-swap-out",
      "sub-to-add",
      "min-mul-out-pos",
      "min-to-max",
      "add-denom-mul",
      "and-lt-gt-to-0",
      "min-max"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( max ( * v0 8 ) -5 ) ( + ( * v0 8 ) 4 ) ) v1 ) 3 ) ) ( - ( + ( * v0 8 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 7 ) ) ( + ( + ( * v0 8 ) v1 ) 10 ) ) ) ( <= ( - ( + ( min v2 4 ) v3 ) 6 ) ( - ( + ( min v2 4 ) v3 ) 6 ) ) ) ( >= ( + ( + v2 v3 ) 2 ) ( + ( + v2 v3 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-in",
      "mul-zero",
      "max-to-min",
      "add-to-sub",
      "mul-comm",
      "and-lt-to-max",
      "add-fact-mul",
      "lt-to-zero",
      "eq-swap",
      "or-x-and-x-y",
      "min-div-mul",
      "mod-minus-in",
      "eq-max-lt",
      "mod-two",
      "lt-const-pos",
      "eqgt-to-not-lt",
      "and-eqlt-eqgt-to-0",
      "not-gt-to-eqlt",
      "mul-assoc",
      "min-mul-out-pos",
      "and-eqlt-to-min",
      "mul-cancel-div",
      "min-mod-const-to-mod",
      "and-eqlt-gt-to-0",
      "not-not",
      "lt-swap-out",
      "lt-min-mutual-term",
      "and-assoc",
      "lt-min-term+cpos",
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "div-minus-out",
      "div-cancel-mul",
      "min-add-both",
      "add-dist-mul",
      "mod-const-add",
      "min-max-const",
      "min-div-out-pos",
      "and-min-to-lt",
      "min-x-x-plus-a-neg"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + v0 v1 ) v2 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 503 ) v1 ) 0 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 503 ) v1 ) 0 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 503 ) v1 ) ( - ( + 503 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 503 ) v1 ) ( - ( + 503 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - ( - ( + ( + ( * v2 503 ) v3 ) v4 ) 5 ) 3 ) ( - ( - ( + ( + ( * v2 503 ) v3 ) v4 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v2 503 ) v3 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v2 503 ) v3 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( + ( + ( * ( / ( + v0 v1 ) 8 ) 2 ) v2 ) 10 ) ( - ( + ( + ( + ( * ( / ( + v0 v1 ) 8 ) 2 ) v2 ) 10 ) ( + -10 11 ) ) 1 ) )",
      "end": "1"
    },
    "rules": ["eq-comm", "sub-to-add", "eq-x-x", "eq-swap"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 16 ) v1 ) ( + ( * v0 16 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 125 ) 1499 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "min-mod-const-to-const",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 3 ( - ( + 4 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 499 ) ( + ( - ( + 500 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * 2 4 ) v1 ) 3 ) ( + ( + ( * 2 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 500 ) 499 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "min-mod-const-to-const",
      "Eq-lt-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 63 ) 62 ) v1 ) 62 ) ( + ( * ( + v0 1 ) 63 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "min-add-both",
      "lt-min-term+cpos",
      "lt-swap-in",
      "add-assoc",
      "add-dist-mul",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( - ( + ( * 0 4 ) v1 ) 2 ) 0 ) 8 ) ( + -2 ( - v1 8 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 35 0 ) 1 ) 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 8 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 131 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + v0 v1 ) v2 ) 8 ) ( - ( + ( + ( + v0 1 ) v1 ) v2 ) 8 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * 125 4 ) v0 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * 125 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) v2 ) ( - ( + ( + v0 v1 ) v2 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + 3 v2 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 4 ) ( - ( + ( + v0 1 ) v1 ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / v1 4 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) ( * v2 4 ) ) ) ) ) ( <= ( + ( * v3 16 ) 0 ) ( + ( * v3 16 ) 0 ) ) ) ( >= ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( + ( * v0 8 ) v1 ) v2 ) 4 ) 3 ) ( * ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-to-sub",
      "add-dist-mul",
      "lt-swap-out",
      "mul-comm",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 4 ) ( min ( max ( / v1 8 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-comm",
      "min-comm",
      "sub-to-add",
      "and-min-to-lt",
      "min-add-both",
      "min-sub-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 8 ) v4 ) ( + ( * v3 8 ) v4 ) ) ) ( >= ( + ( * v3 8 ) v4 ) ( + ( * v3 8 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 7 ) ( - ( + ( + v0 1 ) v1 ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-zero",
      "lt-swap-in",
      "lt-swap-out",
      "add-assoc",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + v0 999 ) ) ) ( <= ( / v1 8 ) ( / v1 8 ) ) ) ( >= ( / ( + v1 132 ) 8 ) ( / ( + v1 132 ) 8 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-zero",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 4 ) v2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "mul-zero",
      "sub-to-add",
      "add-assoc",
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "mul-comm",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 4 ) ) ) ( >= ( - ( + ( + ( * 15 4 ) v0 ) 3 ) 4 ) ( - ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 3 ( - ( + 4 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - v1 1 ) ( + v0 1 ) ) ( - ( + v0 1 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "sub-to-add",
      "lt-swap-out",
      "and-min-to-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 251 ) ( + ( + ( + ( * 0 4 ) 0 ) v1 ) v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 251 ) ( + ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) v0 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( min ( * ( / v0 4 ) 4 ) 1999 ) 3 ) ( - ( max ( - ( min ( * ( / v0 4 ) 4 ) 1999 ) 4 ) ( min ( * ( / v0 4 ) 4 ) 1999 ) ) 3 ) ) ) ( >= ( + ( max ( * ( / ( + v0 127 ) 4 ) 4 ) -3 ) 4 ) ( + ( + ( max ( * ( / ( + v0 127 ) 4 ) 4 ) -3 ) 3 ) 1 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 3 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "lt-swap-out",
      "add-to-sub",
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 32 ) 0 ) ( + ( * v4 32 ) 0 ) ) ) ( >= ( + ( * v4 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v4 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - 1999 ( max ( + ( * v0 8 ) v1 ) 1999 ) ) ( - ( max ( + ( * v0 8 ) v1 ) 1999 ) 1991 ) ) ( - 1999 ( max ( + ( * v0 8 ) v1 ) 1999 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "and-min-to-eqlt",
      "min-add-both",
      "add-to-sub",
      "sub-to-add",
      "add-assoc",
      "mul-zero",
      "min-comm",
      "max-to-min",
      "add-fact-mul",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 1 ) ( - ( - ( - v0 1 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( / v0 4 ) 4 ) 128 ) ( * ( / v0 4 ) 4 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 3 ) ( + ( * v1 9 ) v2 ) ) 5 ) ( - ( + ( * ( + v0 1 ) 3 ) ( + ( * v1 9 ) v2 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "add-fact-mul",
      "mul-comm",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 3 ) 122 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 122 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 14 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 14 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "add-comm", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) v0 ) ) ( >= ( + v0 3 ) ( + v0 3 ) ) ) ( <= ( / v1 8 ) ( / v1 8 ) ) ) ( >= ( / ( + v1 132 ) 8 ) ( / ( + v1 132 ) 8 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= ( - ( + v3 v2 ) 1 ) ( - ( + v3 v2 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v2 32 ) v3 ) ( + ( * v2 32 ) v3 ) ) ) ( >= ( + ( * v2 32 ) v3 ) ( + ( * v2 32 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( max ( - ( + ( / v0 125 ) ( * v1 8 ) ) 1 ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ( + ( + ( * 0 4 ) 0 ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ) ) ( >= ( + ( + ( / v0 125 ) ( * v1 8 ) ) 7 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( / v0 125 ) ( * v1 8 ) ) ) ) ) ( <= ( + ( * 0 32 ) 0 ) 0 ) ) ( >= ( + ( * 1 32 ) 35 ) ( - ( + 64 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-pos",
      "add-assoc",
      "lt-max-mutual-term",
      "add-to-sub",
      "eq-x-x",
      "Eq-lt-min",
      "sub-to-add",
      "not-gt-to-eqlt",
      "mul-comm",
      "min-comm",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "add-zero",
      "add-comm",
      "min-mul-out-neg",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( max ( + ( / v0 4 ) v1 ) ( + ( min ( / v0 4 ) ( - ( + ( / v0 4 ) v1 ) ( max v1 34 ) ) ) 34 ) ) 4 ) 4 ) ( - ( * ( + ( / v0 4 ) ( + v1 1 ) ) 4 ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "min-to-max",
      "max-to-min",
      "min-max",
      "mul-comm",
      "add-comm",
      "lt-swap-in",
      "add-dist-mul",
      "add-zero",
      "add-fact-mul",
      "min-comm",
      "add-assoc",
      "min-sub-both",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 8 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "add-to-sub",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * v2 8 ) v3 ) v4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 8 ) v3 ) v4 ) ( + ( + ( * v2 8 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( * ( max ( min v0 25 ) 22 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 22 ) 8 ) ) ) ( - ( * ( max ( min v0 25 ) 22 ) 8 ) 204 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "max-min-switch",
      "and-comm",
      "add-assoc",
      "and-min-to-eqlt",
      "sub-to-add",
      "min-mul-in-pos",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "min-add-both",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * 0 500 ) v3 ) 0 ) ( + 0 v3 ) ) ) ( >= ( + ( + ( * 1 500 ) v3 ) 499 ) ( + ( - ( + 1000 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "mul-comm",
      "add-dist-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 502 ) 501 ) ( + ( * v1 251 ) v2 ) ) v3 ) 1 ) ( - ( + ( + ( min ( * v0 502 ) 501 ) ( + ( * v1 251 ) ( + v2 1 ) ) ) v3 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "lt-swap-out",
      "sub-to-add",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "add-to-sub",
      "add-assoc",
      "min-max-const",
      "min-mul-out-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * v0 2 ) ( + v1 1 ) ) 2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( min v0 12 ) 4 ) 52 ) ( - ( + ( - ( * ( min v0 12 ) 4 ) 52 ) ( + ( * ( min v0 12 ) -4 ) 56 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "min-mul-in-pos",
      "not-gt-to-eqlt",
      "add-comm",
      "and-min-to-eqlt",
      "and-comm",
      "sub-to-add",
      "add-fact-mul",
      "add-assoc",
      "mul-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( + 0 ( * v4 69 ) ) ( * v4 69 ) ) ) ( >= ( + 3 ( + ( * v4 69 ) 68 ) ) ( + ( * v4 69 ) 68 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "mul-comm",
      "add-assoc",
      "and-comm",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "lt-mul-div-cancel",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 7 ) ( - ( + ( - v0 7 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-fact-mul",
      "add-to-sub",
      "mul-assoc",
      "mul-comm",
      "mul-zero",
      "add-assoc",
      "sub-to-add",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( - ( + ( * ( + v0 v1 ) 4 ) 0 ) 7 ) ( - ( * ( + v0 v1 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v0 v1 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v0 v1 ) 4 ) 3 ) 7 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) ( + 0 ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( * v4 4 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( min ( * v4 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "and-min-to-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "min-add-both",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 500 ) v1 ) 5 ) ) 3 ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 500 ) v1 ) 1000 ) ) 3 ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "mul-one",
      "add-comm",
      "mul-assoc",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "and-eqlt-to-min",
      "and-assoc",
      "and-comm",
      "min-sub-both",
      "and-min-to-eqlt",
      "sub-to-add",
      "min-ass",
      "not-gt-to-eqlt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 125 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 63 ) 62 ) v2 ) ( + ( + ( min ( * v1 63 ) 62 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) 62 ) ( + ( + ( min ( * v1 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + 3 ( + v0 12 ) ) ) ) ( <= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( max ( min ( max ( - ( + ( * ( + ( + v0 v1 ) v2 ) 4 ) v3 ) 4 ) ( + ( * ( + v2 v1 ) 4 ) v4 ) ) 1999 ) ( - ( max ( + ( * ( + ( + v0 v1 ) v2 ) 4 ) v5 ) 5 ) 4 ) ) ( + ( - ( max ( + ( * ( + ( + v0 v1 ) v2 ) 4 ) ( - v5 1 ) ) 4 ) 4 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-lt-cancel",
      "lt-swap-out",
      "min-comm",
      "lt-swap-in",
      "eqgt-to-not-lt",
      "add-assoc",
      "and-lt-gt-to-0",
      "add-comm",
      "mul-assoc",
      "and-min-to-lt",
      "sub-to-add",
      "max-to-min",
      "min-to-max",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 1 ) ) ) ( >= ( - ( + v0 263 ) 3 ) ( - ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ) ) ( <= v1 v1 ) ) ( >= ( - ( + ( + ( + ( * ( max v2 10 ) -3 ) 30 ) 3 ) v1 ) 1 ) ( - ( + ( + ( + ( * ( max v2 10 ) -3 ) 30 ) 3 ) v1 ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "mul-assoc",
      "eq-x-x",
      "add-fact-mul",
      "min-x-x",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "Eq-lt-min",
      "mul-zero",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + ( * v2 64 ) v3 ) ) 3 ) ) ) ( <= ( / v4 4 ) ( / v4 4 ) ) ) ( >= ( / ( + ( + v5 v4 ) 3 ) 4 ) ( / ( + ( + v5 v4 ) 3 ) 4 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( * ( + v2 v3 ) 8 ) 5 ) ( - ( + ( * ( + v2 v3 ) 8 ) 0 ) 5 ) ) ) ( >= ( + ( * ( + v2 v3 ) 8 ) 2 ) ( - ( + ( * ( + v2 v3 ) 8 ) ( - ( + 8 0 ) 1 ) ) 5 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 10 ) ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 10 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 10 ) ( - ( + ( + ( * v1 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) 10 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ) ) ( >= ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ) ) ( <= ( - ( + ( + ( * v3 4 ) v4 ) 0 ) 10 ) ( - ( + ( + ( * v3 4 ) v4 ) 0 ) 10 ) ) ) ( >= ( - ( + ( + ( * v3 4 ) v4 ) 3 ) 10 ) ( - ( + ( + ( * v3 4 ) v4 ) ( - ( + 4 0 ) 1 ) ) 10 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 253 ) 4 ) ( / ( + v2 253 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -15 ) ( - ( + ( max ( min v0 0 ) -15 ) ( - 5 ( max ( min v0 0 ) -15 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "max-min-switch",
      "add-comm",
      "not-gt-to-eqlt",
      "add-to-sub",
      "and-min-to-eqlt",
      "add-assoc",
      "add-fact-mul",
      "and-comm",
      "mul-assoc",
      "mul-comm",
      "mul-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 128 ) v1 ) ) 3 ) ( - ( + ( * v0 128 ) v1 ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 128 ) v1 ) 124 ) ) 3 ) ( - ( + ( + ( * v0 128 ) 127 ) v1 ) 3 ) ) ) ( <= ( + ( + ( * v2 2 ) v3 ) v4 ) ( + ( + ( * v2 2 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 2 ) v3 ) v4 ) ( + ( + ( * v2 2 ) v3 ) v4 ) ) ) ( <= ( * ( + ( * v5 3 ) v6 ) 8 ) ( + ( * v5 24 ) ( * v6 8 ) ) ) ) ( >= ( + ( * ( + ( * v5 3 ) v6 ) 8 ) 7 ) ( + ( * v5 24 ) ( + ( * v6 8 ) 7 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 11 ) ( - v0 11 ) ) ) ( >= ( + v0 134 ) ( - ( + 146 ( - v0 11 ) ) 1 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) 3 ) ( - ( * ( + v0 1 ) 4 ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "add-to-sub",
      "sub-to-add",
      "mul-assoc",
      "mul-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "add-assoc",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 2 ) 1 ) )", "end": "0" },
    "rules": [
      "eq-swap",
      "add-fact-mul",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-comm",
      "mul-assoc",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( + ( * v0 33 ) v1 ) v2 ) v3 ) 5 ) ( - ( + ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) v3 ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) 3 ) ( min ( max ( * ( + v0 1 ) 4 ) ( - ( * ( / v1 4 ) 4 ) 7 ) ) ( - ( * ( + v0 1 ) 4 ) 7 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-in",
      "and-min-to-lt",
      "add-assoc",
      "add-comm",
      "mul-comm",
      "min-sub-both",
      "add-dist-mul",
      "min-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( - 16 ( max ( * ( % v0 3 ) 6 ) 10 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "add-comm",
      "eqgt-to-not-lt",
      "mul-assoc",
      "and-min-to-lt",
      "mul-comm",
      "lt-swap-out",
      "min-add-both",
      "Eq-lt-min",
      "min-mul-in-pos",
      "or-to-and",
      "max-to-min",
      "and-min-to-eqlt",
      "min-mod-const-to-mod",
      "min-to-max",
      "and-x-1",
      "lt-mul-pos-cancel",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 4 ) v1 ) ( + ( + ( * ( - v0 1 ) 4 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-dist-mul",
      "sub-to-add",
      "add-assoc",
      "min-x-x-plus-a-neg",
      "add-comm",
      "mul-comm",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) ( - ( + ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 146 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + ( min v0 494 ) v1 ) 505 ) ( - ( + ( - ( + ( min v0 494 ) v1 ) 505 ) ( + ( max v0 494 ) 18 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "eq-swap",
      "eq-comm",
      "Eq-min-c-pos",
      "sub-to-add",
      "add-dist-mul",
      "min-add-both",
      "min-mul-in-neg",
      "mul-assoc",
      "add-assoc",
      "mul-one",
      "add-comm",
      "add-to-sub",
      "add-fact-mul",
      "add-zero",
      "mul-zero",
      "and-eqlt-to-min",
      "div-minus-down",
      "lt-mul-div-cancel",
      "min-mul-in-pos",
      "min-mul-out-pos",
      "eq-mul-x-y-0",
      "mod-const-sub",
      "Eq-lt-min",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 2 ) ( - ( min ( max ( * ( / ( + ( min v1 8 ) v2 ) 4 ) 4 ) ( + ( + v0 1 ) 27 ) ) ( + ( + v0 1 ) 15 ) ) 25 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "and-comm",
      "add-dist-mul",
      "lt-swap-out",
      "add-assoc",
      "and-lt-to-min",
      "and-min-to-lt",
      "sub-to-add",
      "add-comm",
      "min-sub-both",
      "mul-one",
      "div-cancel-mul",
      "and-lt-to-max",
      "lt-const-neg",
      "div-minus-out",
      "min-x-x"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( / v0 4 ) ( * ( min v1 10 ) 3 ) ) 2 ) ( + ( / v0 4 ) ( * ( + v1 1 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-mul-in-pos",
      "lt-min-term+cpos",
      "lt-swap-in",
      "sub-to-add",
      "add-dist-mul",
      "min-add-both",
      "mul-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( - v0 7 ) ) 0 ) ( + -2 ( - v0 5 ) ) ) ) ( >= ( + ( + ( * 34 4 ) ( + v0 104 ) ) 3 ) ( + 1 ( + v0 128 ) ) ) ) ( <= ( + ( + v1 v2 ) 1 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-to-sub",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "and-comm",
      "min-max-max-x",
      "eq-mul-x-y-0",
      "add-dist-mul",
      "mod-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 3 ) 13 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 13 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * 0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * 4 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / v1 125 ) ( / ( + 0 v1 ) 125 ) ) ) ( >= ( / ( + v1 124 ) 125 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 125 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / ( + ( min v0 4 ) v1 ) 4 ) ( + v2 11 ) ) 3 ) ( - v2 2 ) ) ) ( >= ( + v2 8 ) ( + v2 8 ) ) ) ( <= ( + ( + ( * 0 4 ) v3 ) 0 ) ( + ( + ( * 0 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v4 8 ) 25 ) ) 4 ) 4 ) v3 ) 3 ) ( + ( + ( * ( / ( - 32 ( max ( * v4 8 ) 25 ) ) 4 ) 4 ) v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 47 47 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "lt-to-zero",
      "add-assoc",
      "sub-to-add",
      "add-to-sub",
      "Eq-lt-min",
      "min-mul-in-neg",
      "min-comm",
      "min-sub-both",
      "Eq-min-lt",
      "and-min-to-eqlt",
      "eq-swap",
      "mul-zero",
      "eq-comm",
      "add-comm",
      "max-to-min",
      "div-minus-down",
      "min-div-in-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 64 ) v1 ) 5 ) ) 3 ) ( - ( + ( * v0 64 ) v1 ) 2 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 64 ) v1 ) 128 ) ) 3 ) ( + ( + ( * v0 64 ) v1 ) 66 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "mul-comm",
      "add-to-sub",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "sub-to-add",
      "mul-zero",
      "mul-assoc",
      "add-assoc",
      "and-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( min v0 4 ) v1 ) ) 0 ) 4 ) ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) v2 ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) v2 ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) v2 ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) v2 ) 515 ) 8 ) ) -8 ) )",
      "end": "1"
    },
    "rules": [
      "min-mul-out-pos",
      "min-mul-in-neg",
      "mul-assoc",
      "max-to-min",
      "eq-x-x",
      "div-cancel-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 21 ) 104 ) v1 ) v2 ) 21 ) ( - ( + ( + ( min ( * v0 21 ) 104 ) v1 ) ( + v2 1 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "mul-assoc",
      "mul-zero",
      "lt-swap-in",
      "add-fact-mul",
      "add-comm",
      "lt-swap-out",
      "div-zero",
      "and-lt-gt-to-0",
      "mod-x-x",
      "Eq-max-c-neg",
      "ineq-to-eq",
      "min-comm",
      "and-x-1",
      "lt-max-term-term+pos",
      "lt-const-neg",
      "lt-const-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( * ( + ( * v3 8 ) v4 ) 2 ) ( + ( * ( + ( * v3 8 ) v4 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * v3 8 ) v4 ) 2 ) 1 ) ( + ( * ( + ( * v3 8 ) v4 ) 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": { "start": "( >= ( - ( max v0 252 ) 1 ) 0 )", "end": "1" },
    "rules": [
      "sub-to-add",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) 4 ) ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 15 ) 4 ) ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) 4 ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "mul-comm",
      "add-dist-mul",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "mul-comm",
      "sub-to-add",
      "eq-swap",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ( - ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) 1 ) ) ) ( <= ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 4 ) ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 4 ) ) ) ( >= ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 66 ) 4 ) ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 66 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 17 ) v1 ) v2 ) 10 ) ( - ( + ( + ( * v0 17 ) v1 ) ( + v2 1 ) ) 10 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "mul-assoc",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 4 ) ( + ( * v0 4 ) 0 ) ) ) ( >= ( + ( * v0 4 ) 3 ) ( + ( * v0 4 ) 3 ) ) ) ( <= ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) ) ) ( >= ( + ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) 1 ) ( + ( * ( + ( * ( + v1 v2 ) 2 ) v3 ) 2 ) 1 ) ) ) ( <= ( + ( + ( * 0 16 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 1 16 ) 20 ) 15 ) 19 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "min-x-x",
      "add-zero",
      "Eq-lt-min",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-add-both",
      "and-min-to-eqlt",
      "min-comm",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "sub-to-add",
      "add-assoc",
      "min-x-x",
      "lt-swap-in",
      "eqgt-to-not-lt",
      "min-x-x-plus-a-neg",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 84 ) ( + ( * v1 12 ) ( / ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 4 ) ) ) ( / ( + ( + v2 ( min ( * v3 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["min-to-max", "mul-assoc", "eq-x-x", "mul-comm", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 122 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( max ( min v0 0 ) -11 ) ( - ( + ( max ( min v0 0 ) -11 ) ( - 5 ( max ( min v0 0 ) -11 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "eq-swap",
      "sub-to-add",
      "max-min-switch",
      "add-comm",
      "add-fact-mul",
      "eq-comm",
      "add-assoc",
      "min-add-both",
      "mul-zero",
      "Eq-min-c-pos",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + v0 v1 ) 8 ) 1 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 8 ) 11 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-to-sub",
      "mul-zero",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( max ( * ( - v0 v1 ) 16 ) -22 ) 22 ) ( - ( + ( + ( max ( * ( - v0 v1 ) 16 ) -22 ) 22 ) ( + ( max ( min ( * ( - v0 v1 ) 16 ) -22 ) -23 ) 23 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "min-comm",
      "and-min-to-lt",
      "min-sub-both",
      "add-comm",
      "sub-to-add",
      "min-add-both",
      "max-min-switch",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 7 ) ( + ( - ( + 8 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-zero",
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 125 ) v1 ) ) ( + ( * v0 125 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 125 ) v1 ) 121 ) ) ( + ( + ( * v0 125 ) v1 ) 124 ) ) ) ( <= ( + ( * v2 125 ) v3 ) ( + ( * v2 125 ) v3 ) ) ) ( >= ( + ( + ( * v2 125 ) v3 ) 124 ) ( + ( + ( * v2 125 ) v3 ) 124 ) ) ) ( <= ( + ( * 0 7 ) 0 ) 0 ) ) ( >= ( + ( * 1 7 ) 6 ) 13 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 1 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 1 ) ( + ( + v0 v1 ) 1 ) ) ) ( <= ( - v2 7 ) ( + -2 ( - v2 5 ) ) ) ) ( >= ( + v2 126 ) ( + 1 ( + v2 125 ) ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "mul-zero",
      "add-comm",
      "lt-swap-in",
      "sub-to-add",
      "add-fact-mul",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( / v1 4 ) ) 0 ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 4 ) 32 ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 32 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 250 ) v1 ) v2 ) ( + ( + ( * v0 250 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 5 ) ( - ( + ( + ( * v0 8 ) ( + v1 1 ) ) v2 ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-comm",
      "add-comm",
      "mul-assoc",
      "lt-swap-in",
      "add-fact-mul",
      "mul-zero",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 ( + 0 v0 ) ) ) ( >= ( + v0 1 ) ( + ( - ( + 2 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 31 4 ) v2 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 1012 ) ( + v0 1012 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "and-comm",
      "eqlt-to-not-gt",
      "add-to-sub",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "min-ass",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - v2 10 ) ( - ( + 0 v2 ) 10 ) ) ) ( >= ( + v2 4 ) ( - ( + ( - ( + 15 0 ) 1 ) v2 ) 10 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * 4 4 ) 3 ) ( + ( * 4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - v0 3 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v0 ) 3 ) 3 ) ( + v0 13 ) ) ) ( <= ( - ( max ( + v1 8 ) ( + v2 v3 ) ) 3 ) ( - v1 4 ) ) ) ( >= ( + v1 5 ) ( + v1 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "add-dist-mul",
      "and-x-1",
      "min-comm",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "and-eqlt-to-min",
      "sub-to-add",
      "mul-comm",
      "and-min-to-eqlt",
      "mul-assoc",
      "min-sub-both",
      "not-gt-to-eqlt",
      "max-to-min",
      "add-assoc",
      "div-minus-up",
      "div-minus-out",
      "and-eqlt-gt-to-0",
      "min-lt-cancel",
      "min-to-max",
      "min-max-max-x",
      "or-over-and",
      "min-div-in-pos",
      "and-x-not-x",
      "and-eq-eq",
      "lt-to-zero",
      "and-over-or",
      "mul-zero",
      "mul-one",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 24 ) ) ( + ( + ( * ( - ( + 7 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( min ( * v0 9 ) 128 ) ( + ( * v1 3 ) v2 ) ) ( + ( min ( * v0 9 ) 128 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + v0 v1 ) 4 ) 3 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "mul-comm",
      "add-fact-mul",
      "mul-zero",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( + ( + v0 1 ) 8 ) v1 ) ( + ( + v0 1 ) 5 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-comm",
      "lt-swap-in",
      "mul-assoc",
      "lt-swap-out",
      "min-sub-both",
      "and-min-to-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 12 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) 2 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 12 ) 11 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-to-sub",
      "lt-swap-out",
      "add-dist-mul",
      "mul-comm",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + v0 v1 ) 8 ) 11 ) ( - ( - ( * ( + ( - v0 1 ) v1 ) 8 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-x-x-plus-a-pos",
      "mul-comm",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "eq-swap",
      "eq-max-lt",
      "eq-comm",
      "eqlt-to-not-gt",
      "min-mul-in-neg",
      "sub-to-add",
      "lt-swap-out",
      "and-lt-to-min",
      "add-assoc",
      "lt-min-term+cpos",
      "add-comm",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 42 ) 83 ) ( * v1 3 ) ) v2 ) 2 ) ( + ( + ( min ( * v0 42 ) 83 ) ( * ( + v1 1 ) 3 ) ) v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "mul-comm",
      "min-to-max",
      "lt-swap-in",
      "add-comm",
      "add-dist-mul",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "add-zero",
      "mod-two",
      "max-to-min",
      "Eq-max-c-neg",
      "lt-min-term+cpos",
      "min-max-switch",
      "min-mul-in-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 18 18 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + v1 v2 ) 4 ) 0 ) 7 ) ( - ( + ( * ( + v1 v2 ) 4 ) 0 ) 7 ) ) ) ( >= ( - ( + ( * ( + v1 v2 ) 4 ) 3 ) 7 ) ( - ( + ( * ( + v1 v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 69 ) v3 ) ( + ( * v2 69 ) v3 ) ) ) ( >= ( + ( * v2 69 ) v3 ) ( + ( * v2 69 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( - v0 2 ) ( - ( + ( - v0 2 ) ( + -5 6 ) ) 1 ) )",
      "end": "1"
    },
    "rules": ["eq-swap", "eq-x-x", "eq-comm", "sub-to-add"]
  },
  {
    "expression": {
      "start": "( >= ( + v0 v1 ) ( + ( + v0 ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 126 ) v1 ) 126 ) ( - ( + ( * ( + v0 1 ) 126 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-in",
      "add-comm",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "mul-zero",
      "mul-assoc",
      "mul-comm",
      "eq-swap",
      "add-fact-mul",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + ( + ( * v0 17 ) v1 ) v2 ) 4 ) 267 ) ( - ( * ( + ( + ( * v0 17 ) ( + v1 1 ) ) v2 ) 4 ) 273 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "lt-to-zero",
      "add-zero",
      "add-denom-div",
      "lt-mul-pos-cancel",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 208 0 ) 1 ) ( - ( + 208 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 250 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-zero",
      "add-fact-mul",
      "add-comm",
      "eq-comm",
      "sub-to-add",
      "eq-swap",
      "mul-assoc",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 250 ) ( / ( + 0 v2 ) 250 ) ) ) ( >= ( / ( + v2 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 250 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( + 0 ( - v1 1 ) ) ( + 0 ( - v1 1 ) ) ) ) ( >= ( + 3 ( + v1 60 ) ) ( + ( - ( + 4 0 ) 1 ) ( + v1 60 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) 7 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) ) ( >= ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ( + ( + ( * v2 16 ) ( + ( * v3 4 ) v4 ) ) v5 ) ) ) ( <= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) ) ( >= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "add-zero",
      "mul-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "mul-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) 4 ) 4 ) ( * ( / ( + ( min ( * v0 125 ) ( - v1 125 ) ) v2 ) 4 ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( >= ( - v0 5 ) ( + ( - v0 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 4 ) v4 ) v5 ) ( + ( + ( * v3 4 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 4 ) v4 ) v5 ) ( + ( + ( * v3 4 ) v4 ) v5 ) ) ) ( <= ( + ( * v6 3 ) v7 ) ( + ( * v6 3 ) v7 ) ) ) ( >= ( + ( * v6 3 ) v7 ) ( + ( * v6 3 ) v7 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * 0 4 ) v3 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * 7 4 ) v3 ) 3 ) ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 63 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= ( * ( / v1 4 ) 4 ) ( * ( / v1 4 ) 4 ) ) ) ( >= ( + ( * ( / v1 4 ) 4 ) 128 ) ( * ( - ( + 33 ( / v1 4 ) ) 1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "lt-to-zero",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 3 ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 6 ) ( + ( + ( * v0 4 ) v1 ) 6 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 2 ) ( - v2 2 ) ) ) ( >= ( - ( + ( + ( * 32 4 ) v2 ) 3 ) 2 ) ( + v2 127 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "min-mul-in-pos",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "lt-min-term+cpos",
      "max-to-min",
      "mod-one",
      "min-add-both",
      "eqlt-to-not-gt",
      "mul-assoc",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * v1 4 ) 1999 ) ( + ( + v0 1 ) 6 ) ) ( + ( + v0 1 ) 3 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "sub-to-add",
      "and-min-to-lt",
      "add-comm",
      "min-sub-both",
      "lt-swap-in",
      "min-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "eq-swap",
      "mul-assoc",
      "add-fact-mul",
      "sub-to-add",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + 3 v0 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( * ( + ( * v2 16 ) v3 ) 2 ) 2 ) ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 16 ) v3 ) ) 2 ) 0 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( * v2 16 ) v3 ) 2 ) 31 ) 2 ) ( - ( + ( * ( + ( * 0 2 ) ( + ( + ( * v2 16 ) v3 ) 14 ) ) 2 ) 3 ) 2 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "sub-to-add",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) v2 ) 7 ) ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) ( + v2 1 ) ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( / ( - ( + ( min v1 4 ) v2 ) 36 ) 16 ) ( * v3 4 ) ) ) ( - ( + 0 ( + ( / ( - ( + ( min v1 4 ) v2 ) 4 ) 16 ) ( * v3 4 ) ) ) 2 ) ) ) ( >= ( + 3 ( + ( / ( + ( + ( min v1 4 ) v2 ) 44 ) 16 ) ( * v3 4 ) ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v1 4 ) v2 ) 4 ) 16 ) ( * v3 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-denom-mul",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm",
      "add-zero",
      "min-to-max"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) 0 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) ) 3 ) ( + ( + ( * v2 4 ) ( + ( * v3 8 ) v4 ) ) 3 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "Eq-lt-min",
      "eq-x-x",
      "eqgt-to-not-lt",
      "add-comm",
      "min-x-x",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( max ( + ( + ( + ( * v0 2 ) v1 ) v2 ) 1 ) ( + ( + v3 v2 ) ( + ( * v4 2 ) v1 ) ) ) v5 ) 2 ) ( + ( - ( + ( + ( + v3 v2 ) ( + ( * ( - v4 1 ) 2 ) v1 ) ) v5 ) 1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "min-max-const",
      "min-mul-in-neg",
      "add-assoc",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "mul-assoc",
      "mul-zero",
      "Eq-lt-min",
      "min-add-both",
      "sub-to-add",
      "mul-one",
      "max-to-min",
      "min-ass",
      "add-comm",
      "add-to-sub",
      "add-fact-mul",
      "lt-const-neg",
      "max-min-switch",
      "lt-const-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( / ( + ( min v1 4 ) v2 ) 4 ) 4 ) 2003 ) ( + ( + v0 1 ) 8 ) ) ( + ( + v0 1 ) 4 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-to-sub",
      "min-comm",
      "add-comm",
      "min-sub-both",
      "and-min-to-lt",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-zero",
      "sub-to-add",
      "add-fact-mul",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "add-to-sub",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( * v4 4 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( min ( * v4 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "Eq-lt-min",
      "min-add-both",
      "eq-x-x",
      "eqgt-to-not-lt",
      "min-ass",
      "not-gt-to-eqlt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-to-sub",
      "add-fact-mul",
      "mul-zero",
      "add-comm",
      "add-assoc",
      "mul-comm",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - v0 68 ) 0 ) 63 ) ( + ( max -68 -5 ) v0 ) ) ) ( >= ( + ( + ( + v0 1 ) 3 ) 63 ) ( + 1 ( + v0 63 ) ) ) ) ( <= ( + ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) 1 ) ( + v3 ( + ( min ( * v1 2 ) 123 ) v2 ) ) ) ) ( >= ( + ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) 1 ) ( + v3 ( - ( + 2 ( + ( min ( * v1 2 ) 123 ) v2 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "and-comm",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( max ( min v0 5 ) -58 ) 7 ) ( - ( + ( - ( max ( min v0 5 ) -58 ) 7 ) ( - 9 ( max ( min v0 5 ) -58 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "mul-one",
      "min-to-max",
      "eq-swap",
      "add-fact-mul",
      "Eq-max-c-pos",
      "add-comm",
      "max-min-switch",
      "mul-assoc",
      "add-assoc",
      "min-add-both",
      "mul-comm",
      "eq-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 124 ) ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( - v1 1 ) ( - v1 1 ) ) ) ( >= ( + v1 7 ) ( - ( + 9 ( - v1 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) 28 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) 28 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v0 ) 0 ) 5 ) ( - v0 4 ) ) ) ( >= ( + ( + ( + ( max ( * 15 4 ) -9 ) v0 ) 3 ) 5 ) ( + v0 68 ) ) ) ( <= ( + ( + ( + ( min ( * v1 14 ) 53 ) v2 ) v3 ) 5 ) ( - ( + ( + ( min ( * v1 14 ) 53 ) v2 ) v3 ) 4 ) ) ) ( >= ( + ( + ( + ( min ( * v1 14 ) 53 ) v2 ) v3 ) 5 ) ( + ( + ( + ( min ( * v1 14 ) 53 ) v2 ) v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-to-zero",
      "sub-to-add",
      "add-zero",
      "add-to-sub",
      "and-eqlt-eqgt-to-0",
      "min-ass",
      "lt-max-term-term+pos",
      "and-lt-to-min",
      "div-minus-out",
      "lt-x-x-sub-a",
      "div-cancel-mul",
      "add-denom-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 125 ) ( - ( + 0 ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 8 ) ( + ( - ( + 9 0 ) 1 ) v3 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / v0 8 ) 1 ) ( - ( / ( - v0 1 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "sub-to-add",
      "min-sub-both",
      "mul-assoc",
      "eqlt-to-not-gt",
      "min-div-mul",
      "lt-swap-out",
      "eq-max-lt",
      "min-max",
      "Eq-lt-min",
      "and-min-to-eqlt",
      "div-minus-out",
      "min-x-x-plus-a-neg",
      "add-comm",
      "min-to-max",
      "min-mul-in-neg",
      "lt-mul-pos-cancel",
      "add-assoc",
      "add-dist-mul",
      "add-to-sub",
      "mul-comm",
      "lt-mul-div-cancel",
      "not-gt-to-eqlt",
      "min-div-out-pos",
      "min-mul-in-pos",
      "add-denom-mul",
      "and-x-x",
      "and-eq-eq"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 4 ) ( - ( + ( min ( * ( + ( * v0 2 ) ( + v1 1 ) ) 4 ) ( + ( + ( max ( * ( + v1 1 ) 4 ) -6 ) ( * v0 8 ) ) 6 ) ) v2 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "and-min-to-lt",
      "mul-assoc",
      "mul-zero",
      "add-assoc",
      "min-to-max",
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "add-dist-mul",
      "add-fact-mul",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 16 ) ( - ( + ( - ( + v0 v1 ) 16 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "add-to-sub",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / v0 250 ) ( - ( / ( - v0 1 ) 250 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "min-mul-in-pos",
      "min-comm",
      "add-denom-mul",
      "mul-one",
      "add-assoc",
      "add-dist-mul",
      "mul-assoc",
      "max-to-min",
      "min-div-out-pos",
      "min-mul-in-neg",
      "and-min-to-lt",
      "lt-swap-out",
      "mul-comm",
      "min-max-max-x",
      "mul-cancel-div",
      "min-max",
      "min-div-mul",
      "not-gt-to-eqlt",
      "lt-mul-div-cancel",
      "min-ass",
      "and-min-to-eqlt",
      "and-lt-to-max",
      "Eq-lt-min",
      "sub-to-add",
      "min-x-x-plus-a-neg",
      "add-comm",
      "lt-x-x-sub-a",
      "Eq-min-lt",
      "lt-swap-in",
      "and-lt-gt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( * ( max ( + ( max ( / v0 250 ) v1 ) ( min ( - v1 ( / v0 250 ) ) 0 ) ) v1 ) 8 ) ( min ( max ( * v1 8 ) ( - ( * ( / v0 250 ) 8 ) 5 ) ) ( - ( * v1 8 ) 5 ) ) ) 5 ) 8 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-sub-both",
      "min-mul-in-pos",
      "min-mul-in-neg",
      "min-comm",
      "add-zero",
      "add-dist-mul",
      "min-max",
      "min-x-x-plus-a-pos",
      "sub-to-add",
      "max-to-min",
      "mul-comm",
      "mul-assoc",
      "min-ass",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 121 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-comm", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 1 ) ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 1 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 1 ) ( - ( + ( + ( * v1 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( / v0 8 ) 5 ) ( / ( + ( % v0 8 ) 180 ) 8 ) ) ( - ( / v0 8 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "min-mod-const-to-const",
      "mul-comm",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "min-ass",
      "add-denom-mul",
      "min-x-x-plus-a-pos",
      "mul-cancel-div",
      "min-comm",
      "lt-mul-div-cancel",
      "div-minus-down",
      "min-div-out-pos",
      "add-dist-mul",
      "lt-swap-out",
      "lt-swap-in",
      "mul-assoc",
      "and-eqlt-to-min",
      "min-sub-both",
      "div-minus-in",
      "add-to-sub",
      "div-minus-out",
      "min-div-out-neg",
      "lt-min-term+cpos",
      "add-zero",
      "min-div-mul",
      "add-fact-mul",
      "sub-to-add",
      "mul-zero",
      "add-comm",
      "and-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( >= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 8 ) ( + v1 v2 ) ) ( + ( + ( * v0 8 ) ( + ( - v1 1 ) v2 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 127 ) ( - ( + ( - v0 127 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 5 ) 7 ) ) ( - ( + 0 7 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "min-mul-in-pos",
      "max-to-min",
      "eq-max-lt",
      "eq-swap",
      "eqlt-to-not-gt",
      "and-x-1",
      "mul-assoc",
      "and-min-to-lt",
      "mul-comm",
      "eq-comm",
      "min-ass",
      "and-min-to-eqlt",
      "sub-to-add",
      "add-zero",
      "add-comm",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "lt-mul-pos-cancel",
      "add-dist-mul",
      "and-lt-to-max",
      "and-assoc",
      "add-denom-mul",
      "min-to-max",
      "eqgt-to-not-lt",
      "min-comm",
      "min-max-min-y",
      "and-max-to-lt",
      "mod-const-sub",
      "min-lt-cancel",
      "Eq-min-c-pos",
      "Eq-min-c-neg",
      "min-mod-const-to-mod",
      "mod-two",
      "add-assoc",
      "min-max",
      "min-x-x-plus-a-neg",
      "and-x-x",
      "and-lt-to-min",
      "Eq-max-c-neg",
      "div-minus-out",
      "lt-to-zero",
      "and-eqlt-to-max",
      "min-max-const",
      "Eq-max-c-pos"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 503 ) 502 ) 0 )", "end": "1" },
    "rules": [
      "Eq-lt-min",
      "lt-swap-in",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "min-mod-const-to-const"
    ]
  },
  {
    "expression": {
      "start": "( == ( max ( min v0 0 ) -15 ) ( - ( + ( max ( min v0 0 ) -15 ) ( - 5 ( max ( min v0 0 ) -15 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "Eq-min-c-pos",
      "mul-comm",
      "sub-to-add",
      "add-fact-mul",
      "max-min-switch",
      "add-comm",
      "add-assoc",
      "eq-swap",
      "eq-comm",
      "min-add-both",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ( + ( + ( min ( * v2 16 ) 109 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( % ( + v0 v1 ) 250 ) 1999 ) 0 )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 2 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 6 ) v5 ) ( + ( * v4 6 ) v5 ) ) ) ( >= ( + ( * v4 6 ) v5 ) ( + ( * v4 6 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= v0 ( + ( + ( - v0 1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * v0 16 ) ( * v1 2 ) ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( + ( * v0 16 ) ( * v1 2 ) ) 499 ) 0 ) 2 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) 15 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 15 ) ( - v0 15 ) ) ) ( >= ( + v0 25 ) ( + v0 25 ) ) ) ( <= ( - ( + ( + ( + ( * v1 34 ) v2 ) v3 ) 0 ) 2 ) ( - ( + ( + ( * v1 34 ) v2 ) v3 ) 11 ) ) ) ( >= ( - ( + ( + ( + ( * v1 34 ) v2 ) v3 ) 3 ) 2 ) ( - ( + ( + ( * v1 34 ) v2 ) v3 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "min-sub-both",
      "sub-to-add",
      "eq-swap",
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "Eq-lt-min",
      "mul-assoc",
      "and-comm",
      "eq-comm",
      "min-comm",
      "add-zero",
      "mul-comm",
      "Eq-min-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 16 ) v1 ) 24 ) ( + -5 ( - ( + ( min v0 16 ) v1 ) 19 ) ) ) ) ( >= ( - ( + ( max v0 16 ) ( + ( min v0 16 ) v1 ) ) 10 ) ( + ( - ( - 6 5 ) 1 ) ( - ( + ( + ( max v0 16 ) 10 ) ( - ( + ( min v0 16 ) v1 ) 19 ) ) 1 ) ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 12 ) ( - ( + ( + ( + ( * 0 4 ) 0 ) v3 ) v2 ) 3 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 12 ) ( - ( + ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 8 ( - ( + 9 0 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "min-x-x-plus-a-pos",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-min-term+cpos",
      "and-comm",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + -5 v0 ) 0 ) 3 ) ( + ( + 0 v0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + 3 v0 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "min-comm",
      "min-x-x-plus-a-pos",
      "add-comm",
      "add-assoc",
      "min-x-x",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 2 ) 2 ) ( * v0 2 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( + ( * v1 32 ) v2 ) ) ( + ( * v1 32 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * v1 32 ) v2 ) 28 ) ) ( + ( + ( * v1 32 ) 31 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 32 ) v1 ) ( + ( * v0 32 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v1 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( max ( min v1 2 ) 0 ) 16 ) v2 ) 2 ) v3 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( max ( min v1 2 ) 0 ) 16 ) v2 ) 2 ) v3 ) 2 ) ) 499 ) 0 ) 4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 125 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 500 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 125 ) 124 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 500 ) 499 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "mul-comm",
      "mul-assoc",
      "add-zero",
      "add-assoc",
      "add-dist-mul",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 3 ) v1 ) ( + ( * v0 3 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 4 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 4 ) v1 ) 2 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + -5 v0 ) 0 ) 3 ) ( + ( + 0 v0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + 3 v0 ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "min-x-x",
      "Eq-lt-min",
      "min-x-x-plus-a-pos",
      "add-comm",
      "not-gt-to-eqlt",
      "min-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 64 ) 188 ) v1 ) ) ( + ( min ( * v0 64 ) 188 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 188 ) v1 ) 60 ) ) ( + ( + ( min ( * v0 64 ) 188 ) 63 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) ( + v3 1 ) ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( / v2 250 ) ( / v2 250 ) ) ) ( >= ( / ( - ( + v3 v2 ) 1 ) 250 ) ( / ( - ( + v3 v2 ) 1 ) 250 ) ) ) ( <= ( + v4 ( / v5 ( / ( + v6 95 ) 96 ) ) ) ( + ( / v5 ( / ( + v6 95 ) 96 ) ) v4 ) ) ) ( >= ( + v4 ( / v5 ( / ( + v6 95 ) 96 ) ) ) ( + ( / v5 ( / ( + v6 95 ) 96 ) ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 32 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 32 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 32 ) v1 ) 68 ) ) 5 ) ( + ( + ( * v0 32 ) v1 ) 36 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "and-comm",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt",
      "and-eqlt-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) 5 ) ( + -2 ( - v0 5 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 252 0 ) 1 ) 4 ) v0 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 1000 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-lt",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "lt-to-zero",
      "min-x-x-plus-a-pos",
      "add-assoc",
      "min-comm",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "sub-to-add",
      "and-max-to-lt",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + 3 ( + ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ( * ( / ( - ( + ( / ( + ( + ( min v0 4 ) v1 ) 44 ) 16 ) v2 ) ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ) 4 ) 4 ) ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( * v3 8 ) 1 ) ( - ( + ( * ( + ( * v3 2 ) 0 ) 4 ) 0 ) 1 ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( - ( + ( * ( + ( * v3 2 ) 3 ) 4 ) 3 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "sub-to-add",
      "mul-comm",
      "and-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v2 128 ) 124 ) ( min ( * v1 252 ) 248 ) ) v3 ) ) ( + ( + ( min ( * v1 252 ) 248 ) ( min ( * v2 128 ) 124 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 128 ) 124 ) ( min ( * v1 252 ) 248 ) ) v3 ) 124 ) ) ( + ( + ( min ( * v1 252 ) 248 ) ( + ( min ( * v2 128 ) 124 ) 127 ) ) v3 ) ) ) ( <= ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ) ) ( >= ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ( + ( + ( min ( * v4 63 ) 62 ) v5 ) v6 ) ) ) ( <= v7 v7 ) ) ( >= ( - ( + v8 v7 ) 1 ) ( - ( + v8 v7 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 250 4 ) v0 ) 3 ) ( + ( + ( * 250 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 500 ) v1 ) 2 ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * v0 500 ) v1 ) 502 ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-swap-in",
      "lt-swap-out",
      "add-assoc",
      "and-comm",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min v0 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min v0 249 ) 8 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "sub-to-add",
      "eq-swap",
      "add-assoc",
      "add-comm",
      "mul-comm",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 1 ) ( + ( - v0 1 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * 125 4 ) v0 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * 125 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 8 ) 8 ) ( * v0 8 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ) ( + 0 ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ) ) ) ( >= ( + 3 ( + ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ( * ( / v2 4 ) 4 ) ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 500 ) v1 ) 508 ) 8 ) ( * ( / v2 4 ) 4 ) ) ) ) ) ( <= ( - ( + ( * v3 33 ) v4 ) 1 ) ( - ( + ( + ( * v3 33 ) v4 ) 0 ) 1 ) ) ) ( >= ( + ( + ( * v3 33 ) v4 ) 31 ) ( - ( + ( + ( * v3 33 ) v4 ) ( - ( + 33 0 ) 1 ) ) 1 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-to-sub",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) ( + ( * v0 8 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( * v0 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * v0 2 ) 13 ) ) ( + ( * ( + ( + ( * 1 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) 0 ) ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + ( + ( * v1 8 ) v2 ) v3 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( * ( + ( * v4 3 ) v5 ) 3 ) ( + ( * ( + ( * v4 3 ) v5 ) 3 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 3 ) v5 ) 3 ) 2 ) ( + ( * ( + ( * v4 3 ) v5 ) 3 ) ( - ( + 3 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 8 ) ( - ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "add-to-sub",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 3 ) v1 ) ( - ( + ( * v0 3 ) ( + v1 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-zero",
      "lt-swap-out",
      "add-fact-mul",
      "add-to-sub",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) v2 ) ( + ( + ( + v0 v1 ) ( - v2 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( / ( + ( min ( * v1 16 ) 109 ) v2 ) 4 ) ( / ( + ( + ( min ( * v1 16 ) 109 ) 0 ) v2 ) 4 ) ) ) ( >= ( / ( + ( + ( min ( * v1 16 ) 109 ) v2 ) 15 ) 4 ) ( / ( + ( + ( min ( * v1 16 ) 109 ) ( - ( + 16 0 ) 1 ) ) v2 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "mul-assoc",
      "gt-to-lt",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + v0 v1 ) 250 ) ( - ( / ( + ( - v0 1 ) v1 ) 250 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-min-to-eqlt",
      "lt-mul-div-cancel",
      "add-dist-mul",
      "div-minus-in",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "lt-swap-out",
      "max-to-min",
      "add-comm",
      "min-x-x-plus-a-neg",
      "min-to-max",
      "min-max",
      "min-comm",
      "sub-to-add",
      "add-assoc",
      "min-mul-in-pos",
      "eqlt-to-not-gt",
      "div-minus-down",
      "Eq-lt-min",
      "add-denom-mul",
      "min-mod-const-to-mod",
      "lt-min-term+cpos",
      "min-div-mul",
      "min-div-out-neg",
      "and-eqlt-to-min",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) 4 ) ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) 4 ) ( - ( + ( * ( + ( * v0 4 ) v1 ) 4 ) ( - ( + 16 0 ) 1 ) ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "mul-comm",
      "lt-to-zero",
      "add-assoc",
      "add-dist-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( + ( * v0 63 ) v1 ) ) ( - 1999 ( + ( * v0 63 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "gt-to-lt",
      "add-fact-mul",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 3 ) 997 ) v2 ) ( + ( + ( min ( * v1 3 ) 997 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 3 ) 997 ) v2 ) 2 ) ( + ( + ( min ( * v1 3 ) 997 ) ( - ( + 3 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 125 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( - v0 2 ) ) 0 ) ( + -2 v0 ) ) ) ( >= ( + ( + ( * 1 4 ) ( + v0 9 ) ) 3 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 11 ) ) ) ) ( <= ( - ( max ( + v1 3 ) ( + ( min ( * v2 4 ) 247 ) v3 ) ) 2 ) ( + -2 v1 ) ) ) ( >= ( + v1 1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-dist-mul",
      "and-comm",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-min-term+cpos",
      "min-sub-both",
      "lt-swap-out",
      "max-to-min",
      "add-zero",
      "add-to-sub",
      "sub-to-add",
      "add-assoc",
      "and-lt-to-min",
      "or-over-and"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 4 ) v3 ) 4 ) ( - ( max ( * ( / ( + ( min v0 4 ) v1 ) 4 ) 4 ) ( + ( + ( * ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 4 ) ( + v3 1 ) ) 25 ) ) 21 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "max-to-min",
      "mul-comm",
      "add-dist-mul",
      "lt-swap-in",
      "min-comm",
      "min-sub-both",
      "lt-min-term+cpos",
      "sub-to-add",
      "lt-mul-pos-cancel",
      "and-lt-to-max",
      "mod-minus-out",
      "add-assoc",
      "lt-const-neg",
      "and-min-to-lt",
      "add-zero",
      "div-cancel-mul",
      "min-mul-in-pos",
      "min-x-x-plus-a-pos",
      "add-denom-div",
      "Eq-min-c-neg",
      "and-ineq-eq",
      "eq-max-lt",
      "lt-min-mutual-term",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + 0 ( + ( * v0 16 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( + ( * v2 2 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 2 ) v3 ) 1 ) ( + ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) v3 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( % ( + v0 664 ) 668 ) 671 ) 0 )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "min-mod-const-to-const",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "min-comm",
      "max-min-switch",
      "add-to-sub",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "add-assoc",
      "min-add-both",
      "not-gt-to-eqlt",
      "and-min-to-eqlt",
      "add-comm",
      "eqgt-to-not-lt",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 503 ) v1 ) ( + v2 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "mul-assoc",
      "mul-comm",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "add-to-sub",
      "add-fact-mul",
      "sub-to-add",
      "min-comm",
      "min-add-both",
      "eqgt-to-not-lt",
      "add-comm",
      "and-min-to-eqlt",
      "max-min-switch",
      "add-assoc",
      "mul-comm",
      "mul-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-zero",
      "lt-swap-out",
      "lt-swap-in",
      "add-comm",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 4 ) ( + v1 v2 ) ) ( + ( + ( * v0 4 ) ( + ( - v1 1 ) v2 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( < v0 ( - ( + v0 1 ) 5 ) )", "end": "0" },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add",
      "mul-zero",
      "mul-comm",
      "lt-swap-out",
      "lt-swap-in",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) 3 ) ( - ( min ( * ( max ( * ( + v0 1 ) 2 ) ( + ( * ( max ( min ( * ( + ( * v1 8 ) v2 ) 2 ) 499 ) 0 ) 2 ) 1 ) ) 2 ) ( + ( * ( + v0 1 ) 4 ) 2 ) ) 6 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "and-min-to-lt",
      "lt-swap-out",
      "add-assoc",
      "lt-swap-in",
      "mul-comm",
      "add-denom-div",
      "sub-to-add",
      "add-comm",
      "lt-to-zero",
      "lt-mul-pos-cancel",
      "add-dist-mul",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - v0 3 ) ) ) ( >= ( + v0 1 ) ( + v0 1 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 3 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-min-term+cpos",
      "Eq-lt-min",
      "add-assoc",
      "eq-swap",
      "add-comm",
      "min-sub-both",
      "eqlt-to-not-gt",
      "Eq-min-lt",
      "and-comm",
      "min-x-x-plus-a-pos",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( max ( min v0 5 ) -58 ) 7 ) ( - ( + ( - ( max ( min v0 5 ) -58 ) 7 ) ( - 9 ( max ( min v0 5 ) -58 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "and-min-to-eqlt",
      "add-comm",
      "min-comm",
      "add-to-sub",
      "max-min-switch",
      "add-assoc",
      "not-gt-to-eqlt",
      "mul-assoc",
      "min-add-both",
      "mul-comm",
      "add-fact-mul",
      "sub-to-add",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + ( * v0 3 ) v1 ) 2 ) 4 ) ( - ( min ( max ( * v1 2 ) ( + ( * ( + ( * ( + v0 1 ) 3 ) v1 ) 2 ) 1 ) ) ( * ( + ( * ( + v0 1 ) 3 ) v1 ) 2 ) ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "and-min-to-lt",
      "lt-swap-out",
      "sub-to-add",
      "lt-to-zero",
      "add-comm",
      "add-dist-mul",
      "min-comm",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 8 ( * ( % v0 5 ) 2 ) ) ( - ( + 0 2 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "eq-comm",
      "min-mul-in-pos",
      "min-comm",
      "mul-comm",
      "not-gt-to-eqlt",
      "mul-assoc",
      "min-mul-in-neg",
      "add-comm",
      "lt-swap-out",
      "Eq-min-c-pos",
      "and-x-1",
      "add-assoc",
      "min-ass",
      "sub-to-add",
      "eqlt-to-not-gt",
      "min-max",
      "lt-mul-pos-cancel",
      "lt-swap-in",
      "eq-max-lt",
      "Eq-lt-min",
      "max-to-min",
      "and-x-not-x",
      "or-to-and",
      "min-x-x-plus-a-neg",
      "min-mod-const-to-mod",
      "mul-cancel-div",
      "add-fact-mul",
      "div-minus-out",
      "or-x-and-x-y",
      "and-eqlt-to-min",
      "min-div-out-neg",
      "min-div-out-pos",
      "mul-max-min",
      "div-minus-down",
      "and-min-to-lt",
      "min-add-both",
      "div-minus-in",
      "mod-minus-in",
      "min-max-min-y",
      "div-cancel-mul",
      "min-div-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 17 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "add-to-sub",
      "add-fact-mul",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 5 ) ( - ( + ( - v0 5 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add",
      "add-to-sub",
      "mul-zero",
      "eq-swap",
      "add-comm",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 2 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v2 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( + 125 ( / ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 4 ) ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * v2 1000 ) 1000 ) v3 ) ) 965 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul", "mul-comm", "max-to-min", "mul-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "add-zero", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( >= ( * ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 32 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 2 ) 8 ) ( - ( min ( max ( * v1 2 ) ( + ( * ( + ( + v0 1 ) v1 ) 2 ) 1 ) ) ( * ( + ( + v0 1 ) v1 ) 2 ) ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "lt-swap-out",
      "add-dist-mul",
      "add-assoc",
      "and-comm",
      "lt-to-zero",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 12 ) ( + ( / ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 4 ) 168 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 12 ) ( + ( / ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 4 ) 168 ) ) ( / ( + ( + v1 ( min ( * ( + v2 v3 ) 1000 ) ( - v4 1000 ) ) ) 1003 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["mul-comm", "min-to-max", "eq-x-x", "div-cancel-mul", "mul-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - -30 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "mul-zero",
      "lt-swap-in",
      "mul-assoc",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + ( + v0 v1 ) v2 ) 250 ) ( - ( / ( + ( + ( - v0 1 ) v1 ) v2 ) 250 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "min-x-x-plus-a-pos",
      "min-ass",
      "lt-min-term+cpos",
      "min-div-out-pos",
      "lt-swap-out",
      "sub-to-add",
      "mul-assoc",
      "add-denom-mul",
      "add-dist-mul",
      "min-x-x",
      "min-mul-in-pos",
      "eqlt-to-not-gt",
      "min-div-mul",
      "add-comm",
      "add-assoc",
      "div-minus-in",
      "Eq-lt-min",
      "lt-swap-in",
      "eq-comm",
      "min-max-max-x",
      "max-to-min",
      "min-to-max",
      "lt-mul-div-cancel",
      "min-x-x-plus-a-neg",
      "not-gt-to-eqlt",
      "div-cancel-mul",
      "and-x-1",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 7 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) 3 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 3 ) ) ) ( <= ( + ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 2 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v5 32 ) v6 ) ( + ( * v5 32 ) v6 ) ) ) ( >= ( + ( * v5 32 ) v6 ) ( + ( * v5 32 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-lt",
      "add-assoc",
      "Eq-lt-min",
      "lt-to-zero",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "add-comm",
      "min-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 ( + 0 v0 ) ) ) ( >= ( + v0 511 ) ( + 499 v0 ) ) ) ( <= ( + 0 ( + ( * v1 250 ) v2 ) ) ( + ( + ( * v1 250 ) 0 ) v2 ) ) ) ( >= ( + 124 ( + ( + ( * v1 250 ) v2 ) 125 ) ) ( + ( + ( * v1 250 ) ( - ( + 250 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-sub-both",
      "Eq-lt-min",
      "min-x-x-plus-a-neg",
      "min-add-both",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "eq-x-x",
      "lt-to-zero",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt",
      "add-to-sub",
      "eq-comm",
      "mul-zero",
      "div-minus-down",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 2 ) 123 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 123 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 8 ) 5 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 8 ) 5 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 515 ) 8 ) ) -8 ) )",
      "end": "1"
    },
    "rules": [
      "max-to-min",
      "min-mul-in-neg",
      "div-cancel-mul",
      "min-mul-out-pos",
      "eq-x-x",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 1000 0 ) 1 ) v2 ) ( + ( - ( + 1000 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 504 ) v1 ) ) 8 ) ( - ( + -5 ( + ( * v0 504 ) v1 ) ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 504 ) v1 ) 508 ) ) 8 ) ( - ( + ( - ( - 6 5 ) 1 ) ( + ( + ( * v0 504 ) v1 ) 503 ) ) 3 ) ) ) ( <= ( - ( + ( * v2 252 ) v3 ) 8 ) ( - ( - ( + ( + ( * v2 252 ) v3 ) 0 ) 5 ) 3 ) ) ) ( >= ( + ( + ( * v2 252 ) v3 ) 248 ) ( - ( + ( + ( + ( * v2 252 ) v3 ) ( - ( + 252 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v4 5 ) v5 ) ( + ( * v4 5 ) v5 ) ) ) ( >= ( + ( * v4 5 ) v5 ) ( + ( * v4 5 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-neg",
      "not-gt-to-eqlt",
      "eq-x-x",
      "min-x-x",
      "add-comm",
      "Eq-lt-min",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 64 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-zero",
      "add-comm",
      "lt-swap-in",
      "add-to-sub",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 1 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 17 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "add-comm",
      "mul-assoc",
      "eq-swap",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + v5 v6 ) ( + v5 v6 ) ) ) ( >= ( + v5 v6 ) ( + v5 v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "add-zero",
      "add-comm",
      "mul-assoc",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "add-comm",
      "eqgt-to-not-lt",
      "mul-assoc",
      "not-gt-to-eqlt",
      "Eq-min-c-pos",
      "eq-swap",
      "add-assoc",
      "eq-comm",
      "Eq-lt-min",
      "sub-to-add",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v0 ) ( + ( - ( + 16 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * v1 8 ) v2 ) v3 ) ( + ( + ( * v1 8 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 8 ) v2 ) v3 ) ( + ( + ( * v1 8 ) v2 ) v3 ) ) ) ( <= ( + ( min ( * v4 4 ) 133 ) 0 ) ( + ( min ( * v4 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v4 4 ) 133 ) 3 ) ( + ( min ( * v4 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( - 0 ( max v0 0 ) ) ( - ( + ( - 0 ( max v0 0 ) ) ( + ( max v0 0 ) 3 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "min-to-max",
      "add-fact-mul",
      "Eq-min-c-pos",
      "min-add-both",
      "mul-assoc",
      "eq-comm",
      "add-assoc",
      "add-comm",
      "eq-swap",
      "max-to-min"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 1004 ) 1003 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "lt-swap-in",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( / ( + ( max ( * v0 4 ) -7 ) ( + ( + ( + v1 v2 ) ( min ( * v3 8 ) 117 ) ) 7 ) ) 4 ) -4 ) 4 ) 4 ) ( * ( / ( + ( max ( * v0 4 ) -7 ) ( + ( + ( + v1 v2 ) ( min ( * v3 8 ) 117 ) ) 7 ) ) 4 ) -4 ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "mul-cancel-div",
      "mod-minus-in",
      "sub-to-add",
      "eq-x-x",
      "div-cancel-mul",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + v0 0 ) 8 ) ) ) ( >= ( / ( + v0 3 ) 8 ) ( / ( + v0 3 ) 8 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( + ( * 0 4 ) 0 ) ( min ( * v3 69 ) 68 ) ) ( min ( * v3 69 ) 68 ) ) ) ( >= ( + ( + ( * 2 4 ) 3 ) ( + ( min ( * v3 69 ) 68 ) 60 ) ) ( + ( min ( * v3 69 ) 68 ) 68 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-sub-both",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "add-assoc",
      "min-x-x-plus-a-neg",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "not-gt-to-eqlt",
      "add-zero",
      "sub-to-add",
      "div-minus-out",
      "and-eqlt-to-max"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 136 ( * ( % v0 2 ) 69 ) ) ( - ( + 0 69 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-to-max",
      "mul-comm",
      "and-min-to-eqlt",
      "add-dist-mul",
      "min-mul-in-neg",
      "eqlt-to-not-gt",
      "min-comm",
      "eq-max-lt",
      "eq-comm",
      "and-min-to-lt",
      "add-comm",
      "and-x-1",
      "lt-swap-in",
      "mul-assoc",
      "lt-mul-pos-cancel",
      "min-mod-const-to-mod",
      "max-to-min",
      "sub-to-add",
      "Eq-lt-min",
      "not-not",
      "min-lt-cancel",
      "lt-min-mutual-term",
      "mod-const-add",
      "min-max-const",
      "lt-swap-out",
      "mul-zero",
      "mul-cancel-div",
      "and-comm",
      "and-eqlt-to-max"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + ( * v0 16 ) v1 ) 2 ) 2 ) ( * ( + ( * v0 16 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( == ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( + ( - ( * v0 32 ) ( min ( - ( + v1 v2 ) ( * v3 126 ) ) ( + ( + ( min ( * v0 32 ) 94 ) v2 ) 22 ) ) ) ( + ( * v4 8 ) v2 ) ) 14 ) 7 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-min-c-pos",
      "add-fact-mul",
      "mul-comm",
      "eq-comm",
      "add-comm",
      "max-min-switch",
      "sub-to-add",
      "add-assoc",
      "min-add-both",
      "mul-zero",
      "mul-assoc",
      "eq-swap",
      "mod-zero",
      "div-minus-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 250 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * 0 63 ) v1 ) 0 ) ( + 0 v1 ) ) ) ( >= ( + ( + ( * 1 63 ) v1 ) 62 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "min-comm",
      "min-x-x-plus-a-pos",
      "add-zero",
      "min-x-x",
      "lt-to-zero",
      "not-gt-to-eqlt",
      "and-eqlt-to-max",
      "min-ass",
      "and-min-to-eqlt",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "min-div-out-pos",
      "and-eqlt-gt-to-0",
      "mul-zero",
      "min-lt-cancel",
      "add-fact-mul",
      "lt-max-mutual-term",
      "min-max",
      "lt-const-neg",
      "not-not",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( - ( + ( max ( min v0 46 ) 16 ) ( + ( min v0 16 ) v1 ) ) 72 ) ) ( + -2 ( - ( + ( min v0 16 ) v1 ) 24 ) ) ) ) ( >= ( + ( + ( * 15 4 ) 3 ) ( - ( + ( max v0 16 ) ( + ( min v0 16 ) v1 ) ) 72 ) ) ( + ( - ( - 4 2 ) 1 ) ( - ( + ( + ( max v0 16 ) 15 ) ( - ( + ( min v0 16 ) v1 ) 24 ) ) 1 ) ) ) ) ( <= ( - v2 10 ) ( - ( + ( - ( + ( * 0 4 ) v2 ) 2 ) 0 ) 8 ) ) ) ( >= ( + v2 132 ) ( - ( + ( + ( + ( * ( - ( + 35 0 ) 1 ) 4 ) v2 ) ( - ( - 4 2 ) 1 ) ) 3 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "mul-assoc",
      "sub-to-add",
      "lt-to-zero",
      "max-min-switch",
      "eqgt-to-not-lt",
      "min-ass",
      "div-cancel-mul",
      "lt-swap-out",
      "Eq-lt-min",
      "lt-swap-in",
      "add-assoc",
      "and-min-to-lt",
      "add-comm",
      "add-dist-mul",
      "add-zero",
      "mod-zero",
      "and-eqlt-eqgt-to-0",
      "lt-max-term+neg-term",
      "min-comm",
      "not-gt-to-eqlt",
      "lt-max-mutual-term",
      "and-ineq-eq",
      "min-max-const",
      "max-to-min",
      "not-eq-to-ineq",
      "lt-min-mutual-term",
      "and-x-1"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / v0 125 ) ( - ( / ( - v0 1 ) 125 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-pos",
      "min-comm",
      "add-assoc",
      "div-minus-down",
      "lt-min-term+cpos",
      "add-comm",
      "min-to-max",
      "Eq-lt-min",
      "and-min-to-lt",
      "div-minus-in",
      "lt-swap-out",
      "min-max-max-x",
      "max-to-min",
      "not-gt-to-eqlt",
      "min-ass",
      "lt-mul-div-cancel",
      "min-div-out-neg",
      "add-denom-mul",
      "sub-to-add",
      "add-dist-mul",
      "lt-swap-in",
      "min-div-mul",
      "min-x-x-plus-a-pos",
      "min-max",
      "eqlt-to-not-gt",
      "and-min-to-eqlt",
      "add-to-sub",
      "min-max-min-y"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 4 ) 18 ) ) ( - ( + 0 18 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-max",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "min-mod-const-to-mod",
      "min-mul-in-pos",
      "Eq-lt-min",
      "min-max-min-y",
      "mul-assoc",
      "lt-mul-pos-cancel",
      "eq-comm",
      "min-comm",
      "min-to-max",
      "eq-max-lt",
      "and-min-to-eqlt",
      "min-max-switch",
      "Eq-min-c-neg",
      "sub-to-add",
      "max-to-min",
      "min-add-both",
      "lt-swap-in",
      "add-div-mod",
      "min-ass",
      "mod-minus-in",
      "min-div-out-pos",
      "lt-swap-out",
      "Eq-min-c-pos",
      "and-assoc",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 7 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "and-min-to-eqlt",
      "max-to-min",
      "and-min-to-lt",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "min-max",
      "mul-assoc",
      "min-comm",
      "add-comm",
      "min-mod-const-to-mod",
      "mul-one",
      "eqlt-to-not-gt",
      "mul-comm",
      "eq-max-lt",
      "and-x-1",
      "min-mul-in-neg",
      "lt-swap-out",
      "eq-comm",
      "lt-mul-pos-cancel",
      "lt-swap-in",
      "min-div-in-neg",
      "min-div-in-pos",
      "mod-zero",
      "mul-cancel-div",
      "Eq-min-c-pos",
      "sub-to-add",
      "eq-x-x"
    ]
  },
  {
    "expression": { "start": "( > ( - 2 v0 ) ( - 126 v0 ) )", "end": "0" },
    "rules": [
      "mul-zero",
      "mul-assoc",
      "lt-swap-out",
      "mul-comm",
      "sub-to-add",
      "gt-to-lt",
      "add-assoc",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + 0 v0 ) 2 ) 0 ) ( + ( * ( + 0 v0 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + ( - ( + 3 0 ) 1 ) v0 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( * v1 2 ) 0 ) ( + ( * v1 2 ) 0 ) ) ) ( >= ( + ( * v1 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * v1 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ( + ( + ( min ( * v1 2 ) 123 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 v0 ) 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( + ( + ( - ( + 8 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ( + ( + ( - ( + 8 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( % v3 16 ) 4 ) 0 ) ( + ( * ( % v3 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v3 16 ) 4 ) 3 ) ( + ( * ( % v3 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 2 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "mul-zero",
      "gt-to-lt",
      "add-fact-mul",
      "lt-swap-out",
      "sub-to-add",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 62 4 ) v0 ) ( - ( - 11 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( * v2 8 ) ( * v2 8 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( - ( + 8 ( * v2 8 ) ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 63 ) 62 ) v1 ) v2 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 8 ) v1 ) 2 ) 1 ) ( * ( + ( * v0 8 ) ( + v1 1 ) ) 2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "add-comm",
      "add-dist-mul",
      "add-assoc",
      "lt-x-x-sub-a",
      "mul-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 0 ( * ( + v0 v1 ) 2 ) ) ( - 499 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "add-to-sub",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-in",
      "mul-comm",
      "add-fact-mul",
      "mul-assoc",
      "mul-zero",
      "add-to-sub",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 6 ) v1 ) 5 ) ( + ( * ( + v0 1 ) 6 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-to-sub",
      "sub-to-add",
      "add-comm",
      "add-dist-mul",
      "lt-swap-out",
      "mul-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) v1 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * 7 4 ) v1 ) 3 ) ( + ( + ( * 7 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - v3 8 ) ( - ( - ( + 0 v3 ) 5 ) 3 ) ) ) ( >= ( + v3 60 ) ( - ( + ( + ( - ( + 64 0 ) 1 ) v3 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) 12 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "sub-to-add",
      "add-comm",
      "mul-zero",
      "eq-comm",
      "add-fact-mul",
      "mul-comm",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 250 ) 1 ) )", "end": "0" },
    "rules": [
      "lt-swap-out",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 42 ) 83 ) ( * v1 6 ) ) v2 ) 6 ) ( - ( + ( + ( min ( * v0 42 ) 83 ) ( * ( + v1 1 ) 6 ) ) v2 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-fact-mul",
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "mul-assoc",
      "mul-zero",
      "add-dist-mul",
      "add-to-sub"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( - v1 3 ) ) ( - v1 2 ) ) ) ( >= ( + 3 ( + v1 33 ) ) ( + v1 36 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-x-x-plus-a-neg",
      "and-min-to-lt",
      "Eq-min-lt",
      "lt-to-zero",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "min-sub-both",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-fact-mul",
      "mul-zero",
      "mul-comm",
      "add-assoc",
      "lt-swap-in",
      "sub-to-add",
      "add-to-sub",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "sub-to-add",
      "eq-swap",
      "add-assoc",
      "mul-assoc",
      "mul-comm",
      "eq-comm",
      "mul-zero",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 502 ) 501 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "min-mod-const-to-const",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v1 168 ) 332 ) ( * ( + ( * v2 3 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 168 ) 332 ) ( + ( * ( + ( * v2 3 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) ) ) ( >= ( + ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) v7 ) 13 ) ( + ( + ( + ( min ( * v5 42 ) 83 ) ( * v6 14 ) ) 13 ) v7 ) ) ) ( <= v8 v8 ) ) ( >= v8 v8 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( - ( + ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( + ( * ( max ( min v0 12 ) -3 ) -4 ) 56 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "max-min-switch",
      "mul-zero",
      "add-assoc",
      "min-mul-in-pos",
      "add-fact-mul",
      "eq-swap",
      "Eq-min-c-pos",
      "min-add-both",
      "add-comm",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 0 ) ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * ( % v2 5 ) 4 ) 14 ) 3 ) ( + ( min ( * ( % v2 5 ) 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "eq-x-x",
      "eqgt-to-not-lt",
      "min-x-x",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 2 ) ( + ( + ( + ( - v0 1 ) v1 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-swap-in",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( max ( - ( / v2 125 ) 1 ) ( / v2 125 ) ) ( + ( + ( * 0 4 ) 0 ) ( / v2 125 ) ) ) ) ( >= ( + ( + ( / v2 125 ) ( * ( / v3 8 ) 8 ) ) 7 ) ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( / v2 125 ) ( * ( / v3 8 ) 8 ) ) ) ) ) ( <= ( + ( * 0 32 ) 0 ) 0 ) ) ( >= ( + ( * 1 32 ) 35 ) ( - ( + 64 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "lt-to-zero",
      "min-comm",
      "add-to-sub",
      "max-to-min",
      "add-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) ) ( >= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 1002 ) ( + v0 1002 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-to-sub",
      "and-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-fact-mul",
      "lt-swap-in",
      "add-comm",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( max ( + ( min ( * v0 -4 ) -165 ) 165 ) ( + ( * v1 8 ) ( + ( min ( * v0 4 ) 165 ) ( * ( + ( * v1 2 ) v0 ) -4 ) ) ) ) 0 ) 4 ) 22 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "mul-zero",
      "add-fact-mul",
      "min-x-x",
      "add-dist-mul",
      "add-assoc",
      "min-mul-in-neg",
      "max-to-min",
      "min-comm",
      "min-max-const",
      "mul-comm",
      "mul-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 250 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 250 ) ( + v1 1 ) ) v2 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-zero",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "add-fact-mul",
      "mul-comm",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 0 ) 3 ) ( + ( + 0 ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 11 ) ( - ( min ( max ( * ( / v1 125 ) 8 ) ( + ( * ( + v0 1 ) 8 ) 5 ) ) ( * ( + v0 1 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-dist-mul",
      "min-sub-both",
      "min-comm",
      "sub-to-add",
      "min-add-both",
      "and-min-to-lt",
      "add-assoc",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) 3 ) ( + v0 188 ) ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 ( + 0 v1 ) ) ) ( >= ( + v1 124 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 4 ) 3 ) ( - ( - ( * ( - v0 1 ) 4 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "mul-assoc",
      "mul-zero",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "eq-comm",
      "sub-to-add",
      "eq-swap",
      "Eq-lt-min",
      "add-comm",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 4 ) v1 ) 7 ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 4 ) v1 ) 7 ) -4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "mul-assoc", "div-cancel-mul", "max-to-min", "mul-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -2 4 ) -6 ) v0 ) 0 ) 1 ) ( + -5 v0 ) ) ) ( >= ( + ( + ( + ( max ( * 249 4 ) -6 ) v0 ) 3 ) 1 ) ( + 1 ( + v0 999 ) ) ) ) ( <= ( + ( + v1 v2 ) 1 ) ( - ( + v1 v2 ) 5 ) ) ) ( >= ( + ( + v1 v2 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "add-comm",
      "mul-comm",
      "lt-swap-out",
      "sub-to-add",
      "lt-swap-in",
      "and-max-to-eqlt",
      "gt-to-lt",
      "max-min-switch"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( + -2 v0 ) ) ) ( >= ( - ( + ( + ( * 4 4 ) v0 ) 3 ) 2 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 15 ) ) ) ) ( <= ( - ( max ( + v1 3 ) v2 ) 2 ) ( + -2 v1 ) ) ) ( >= ( + v1 1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "max-to-min",
      "eq-comm",
      "add-assoc",
      "min-ass",
      "add-to-sub",
      "min-sub-both",
      "and-comm",
      "sub-to-add",
      "add-comm",
      "Eq-min-c-pos",
      "Eq-lt-min",
      "add-dist-mul",
      "eq-swap",
      "min-max",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - v0 6 ) ) 1 ) ( + -5 v0 ) ) ) ( >= ( + ( + 3 ( + v0 996 ) ) 1 ) ( + 1 ( + v0 999 ) ) ) ) ( <= ( + ( + v1 v2 ) 1 ) ( - ( + v1 v2 ) 5 ) ) ) ( >= ( + ( + v1 v2 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "add-comm",
      "add-assoc",
      "add-to-sub",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-swap-out",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( / v0 16 ) ( * v1 32 ) ) 34 ) ( - ( + ( / v0 16 ) ( * ( + v1 1 ) 32 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "sub-to-add",
      "lt-swap-in",
      "add-to-sub",
      "mul-comm",
      "add-assoc",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( * ( + ( * v0 64 ) v1 ) 2 ) 3 ) ) ( + ( * ( + ( * v0 64 ) v1 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v0 64 ) v1 ) 2 ) 125 ) ) ( + ( * ( + ( + ( * v0 64 ) v1 ) 63 ) 2 ) 2 ) ) ) ( <= ( + 0 ( * v2 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v2 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 2 ( + ( * v2 2 ) 14 ) ) ( + ( * ( + ( + ( * 1 4 ) v2 ) 3 ) 2 ) 2 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "min-sub-both",
      "add-assoc",
      "Eq-lt-min",
      "sub-to-add",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "min-comm",
      "lt-to-zero",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * v0 4 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-dist-mul",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "mul-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 132 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( max ( * v0 16 ) -5 ) ( + ( * v1 32 ) v2 ) ) 2 ) ( - ( + ( + ( * 0 4 ) ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) ) 0 ) 3 ) ) ) ( >= ( + ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) 17 ) ( - ( + ( + ( * 5 4 ) ( + ( * v0 16 ) ( + ( * v1 32 ) v2 ) ) ) 3 ) 3 ) ) ) ( <= ( - ( + ( * ( + ( * v3 2 ) 0 ) 4 ) 0 ) 1 ) ( + -2 ( + ( * v3 8 ) 1 ) ) ) ) ( >= ( - ( + ( * ( + ( * v3 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + 8 ( + ( * v3 8 ) 1 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 999 ) 250 ) 16 ) 23 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-div-in-pos",
      "mul-zero",
      "sub-to-add",
      "lt-swap-in",
      "min-mul-in-neg",
      "mul-cancel-div",
      "eq-comm",
      "div-minus-in",
      "add-fact-mul",
      "add-comm",
      "min-comm",
      "lt-swap-out",
      "lt-mul-pos-cancel",
      "Eq-lt-min",
      "lt-mul-div-cancel",
      "mul-assoc",
      "min-mod-const-to-const",
      "max-to-min",
      "add-assoc",
      "add-denom-mul",
      "eq-swap",
      "and-min-to-eqlt",
      "add-to-sub",
      "min-sub-both",
      "eqgt-to-not-lt",
      "add-zero",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-neg",
      "mul-one",
      "mul-comm",
      "not-eq-to-ineq"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 17 ) ( - ( + ( - v0 17 ) ( + ( min ( + ( - ( - ( min ( * ( / ( + ( + v1 v2 ) 3 ) 4 ) 4 ) ( + ( * ( + ( / v2 4 ) ( * v3 251 ) ) 4 ) 998 ) ) ( * v3 1004 ) ) ( * ( / v2 4 ) 4 ) ) v4 ) -21 ) 22 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "and-comm",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "sub-to-add",
      "min-add-both",
      "and-min-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 4 ) 59 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "eq-x-x",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "min-x-x",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 32 ) 0 ) v4 ) ( + ( + ( * v3 32 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) v4 ) ( + ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) v4 ) ) ) ( <= ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ) ) ( >= ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ( + ( * ( min v5 1 ) 9 ) ( + ( min ( * v6 2 ) 7 ) v7 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "add-dist-mul",
      "mul-assoc",
      "eqlt-to-not-gt",
      "mul-comm",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( + v0 7 ) ( + ( max ( * v1 4 ) -9 ) v2 ) ) 2 ) ( - v0 4 ) ) ) ( >= ( + v0 5 ) ( + v0 5 ) ) ) ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v3 ) 0 ) 5 ) ( - v3 4 ) ) ) ( >= ( + ( + ( + ( max ( * 16 4 ) -9 ) v3 ) 3 ) 5 ) ( + v3 72 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "min-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "min-sub-both",
      "min-max-const",
      "mul-comm",
      "max-to-min",
      "add-dist-mul",
      "or-comm",
      "Eq-max-c-neg",
      "or-over-and",
      "add-to-sub",
      "add-denom-div",
      "and-lt-gt-to-0",
      "lt-swap-out",
      "Eq-max-c-pos",
      "div-minus-up",
      "gt-to-lt",
      "div-cancel-mul",
      "min-div-out-neg",
      "lt-min-term+cpos",
      "eq-swap",
      "lt-max-term-term+pos",
      "and-min-to-eqlt",
      "min-x-x-plus-a-neg",
      "min-div-out-pos",
      "add-comm",
      "and-eqlt-to-min",
      "mul-zero",
      "min-mod-const-to-mod",
      "min-x-x-plus-a-pos",
      "div-minus-down",
      "lt-swap-in",
      "eq-max-lt",
      "lt-max-term+neg-term",
      "not-not"
    ]
  },
  {
    "expression": {
      "start": "( <= v0 ( - ( - ( - v0 1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "lt-swap-out",
      "lt-swap-in",
      "mul-comm",
      "add-fact-mul",
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 7 ) ( * ( + v0 1 ) 8 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "mul-comm",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( == ( * v0 3 ) ( - ( + ( * v0 3 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "eq-comm",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "eq-swap",
      "mul-assoc",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 8 ) v1 ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) 7 ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) v2 ) ) ( >= ( + ( + ( * ( / ( - v3 1 ) 4 ) 4 ) v2 ) 3 ) ( - ( + v3 v2 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-cancel-div",
      "mul-comm",
      "add-zero",
      "lt-swap-out",
      "Eq-lt-min",
      "lt-swap-in",
      "sub-to-add",
      "not-gt-to-eqlt",
      "mul-zero",
      "mul-one",
      "min-mod-const-to-const",
      "mul-assoc",
      "mod-minus-out",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "add-fact-mul",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - ( + ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - 8 ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "lt-min-term+cpos",
      "add-assoc",
      "min-comm",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( min ( * v0 32 ) 973 ) v1 ) v2 ) 5 ) ( - ( + ( + ( min ( * v0 32 ) 973 ) v1 ) v2 ) 4 ) ) ) ( >= ( + ( + ( + ( min ( * v0 32 ) 973 ) v1 ) v2 ) 5 ) ( + ( + ( + ( min ( * v0 32 ) 973 ) v1 ) v2 ) 5 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v3 ) 0 ) 4 ) ( - v3 4 ) ) ) ( >= ( - ( + ( + ( * 6 4 ) v3 ) 3 ) 4 ) ( + v3 20 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "mul-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "mul-assoc",
      "add-comm",
      "lt-swap-out",
      "min-add-both",
      "add-fact-mul",
      "sub-to-add",
      "and-max-to-eqlt",
      "and-min-to-eqlt",
      "mod-zero",
      "div-cancel-mul",
      "min-to-max",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max ( max ( min ( * v0 4 ) 1 ) ( + ( - ( max ( + ( * v0 4 ) v1 ) -4 ) ( max ( min ( * v0 4 ) 1999 ) ( + ( max ( + ( * v0 4 ) v1 ) -3 ) 4 ) ) ) 5 ) ) 0 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-mul-in-pos",
      "mul-zero",
      "sub-to-add",
      "min-mul-in-neg",
      "min-max-max-x",
      "add-dist-mul",
      "min-max-switch",
      "min-max",
      "min-add-both",
      "min-comm",
      "max-to-min",
      "min-ass",
      "eqlt-to-not-gt",
      "add-comm",
      "and-min-to-lt",
      "mul-comm",
      "mul-assoc",
      "min-mod-const-to-const",
      "and-ineq-eq",
      "ineq-to-eq",
      "min-div-out-neg",
      "and-x-not-x",
      "add-fact-mul",
      "add-div-mod",
      "min-div-in-pos",
      "add-assoc",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 503 ) 4 ) ( / ( + v2 503 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 7 ) ( + -2 ( - v0 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v0 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 1000 ) ) ) ) ( <= ( - ( max ( + v1 8 ) v2 ) 7 ) ( + -2 v1 ) ) ) ( >= ( + v1 1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eq-swap",
      "mul-comm",
      "Eq-min-lt",
      "sub-to-add",
      "add-comm",
      "and-comm",
      "add-fact-mul",
      "min-comm",
      "and-min-to-eqlt",
      "lt-swap-in",
      "mul-one",
      "eqlt-to-not-gt",
      "div-minus-in",
      "add-dist-mul",
      "mul-assoc",
      "min-div-in-pos",
      "div-minus-down",
      "min-sub-both",
      "add-zero",
      "max-to-min",
      "Eq-lt-min",
      "add-denom-mul",
      "min-ass",
      "Eq-max-c-neg",
      "min-lt-cancel",
      "min-max-min-y",
      "and-x-x",
      "lt-min-term+neg-term",
      "and-min-to-lt",
      "mul-zero",
      "Eq-min-c-pos",
      "eq-x-x",
      "mod-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 503 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 503 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 503 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 503 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( / v1 8 ) 5 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "lt-swap-in",
      "lt-swap-out",
      "and-min-to-lt",
      "min-sub-both",
      "and-lt-to-min",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + v0 v1 ) 8 ) 67 ) ( - ( + ( - ( * ( + v0 v1 ) 8 ) 67 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( - ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) -125 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( - ( / ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 4 ) -125 ) 252 ) ) ( / ( - ( + v1 ( min ( + ( * ( + v2 v3 ) 1000 ) 1000 ) v4 ) ) 965 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "max-to-min", "mul-assoc", "eq-x-x", "mul-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / v0 4 ) ( + ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 999 ) 4 ) ) v1 ) 2 ) ) 3 ) ( - ( max ( / v0 4 ) ( + ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 999 ) 4 ) ) v1 ) 2 ) ) 3 ) ) ) ( >= ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 995 ) 4 ) ) v1 ) ( + ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 995 ) 4 ) ) v1 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( + 0 ( / v2 4 ) ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 32 ) ) ( + 3 ( + ( / v2 4 ) 32 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 3 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 500 ) 4 ) 0 )", "end": "1" },
    "rules": [
      "not-gt-to-eqlt",
      "lt-swap-in",
      "min-max-const",
      "Eq-lt-min",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 6 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-fact-mul",
      "add-assoc",
      "add-comm",
      "add-to-sub",
      "lt-swap-in",
      "mul-comm",
      "mul-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 0 ) 1 ) ( - ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 1 ) ) ) ( >= ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 3 ) 1 ) ( - ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) 3 ) v2 ) 1 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 32 ) ( - ( + 33 ( / v3 4 ) ) 1 ) ) ) ( <= ( * v4 16 ) ( + ( * v4 16 ) 0 ) ) ) ( >= ( + ( * v4 16 ) 15 ) ( + ( * v4 16 ) ( - ( + 16 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) v3 ) ) 503 ) ( - ( + ( + 0 ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) ) v3 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) v3 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min v1 500 ) v2 ) ) ) v3 ) 503 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "add-assoc", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 127 0 ) 1 ) v0 ) ( + ( - ( + 127 0 ) 1 ) v0 ) ) ) ( <= ( + 0 ( + ( * v1 8 ) v2 ) ) ( + ( * v1 8 ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * v1 8 ) v2 ) 4 ) ) ( + ( + ( * v1 8 ) 7 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "add-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ( % ( + ( + ( + ( * v2 8 ) v3 ) v4 ) 1 ) 8 ) ) ) ( <= ( + ( * v5 4 ) v6 ) ( + ( * v5 4 ) v6 ) ) ) ( >= ( + ( * v5 4 ) v6 ) ( + ( * v5 4 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( + ( + ( min ( max ( * v0 500 ) -5 ) ( + ( * v0 500 ) 436 ) ) v1 ) 3 ) ) ( - ( + ( * v0 500 ) v1 ) 2 ) ) ) ( >= ( + ( + ( * 15 4 ) 3 ) ( + ( min ( + ( * ( / ( + ( min ( * v0 500 ) -5 ) 504 ) 64 ) 64 ) ( + ( max ( * v0 500 ) -5 ) v1 ) ) ( + ( + ( * v0 500 ) v1 ) 436 ) ) 3 ) ) ( + ( + ( * v0 500 ) v1 ) 502 ) ) ) ( <= ( + 0 ( - v2 2 ) ) ( + ( + ( + -5 v2 ) 0 ) 3 ) ) ) ( >= ( + 64 ( + v2 63 ) ) ( + ( + ( + 124 v2 ) 3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "and-comm",
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 3 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 3 ) ) ) ( >= ( - ( + ( + ( * 63 4 ) v0 ) 3 ) 3 ) ( - ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 0 ) ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 3 ) ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 3 ) ) ) ( <= ( - ( * v3 4 ) 1000 ) ( - ( + ( * v3 4 ) 0 ) 1000 ) ) ) ( >= ( - ( * v3 4 ) 1 ) ( - ( + ( * v3 4 ) ( - ( + 1000 0 ) 1 ) ) 1000 ) ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-out",
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 10 ) 15 ) ( - ( - ( + ( + ( * v0 32 ) v1 ) v2 ) 10 ) 15 ) ) ) ( >= ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) ( - ( - 13 10 ) 1 ) ) 15 ) ( - ( + ( + ( + ( * v0 32 ) v1 ) v2 ) ( - ( - 13 10 ) 1 ) ) 15 ) ) ) ( <= ( - ( + ( * ( + v3 0 ) 4 ) 0 ) 7 ) ( - ( * v3 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + v3 17 ) 4 ) 3 ) 7 ) ( - ( + ( * v3 4 ) 71 ) 7 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-dist-mul",
      "mul-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 v1 ) 4 ) ( - ( + ( / ( + v0 v1 ) 4 ) 33 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( min ( * v1 8 ) 117 ) v2 ) ( + ( + ( min ( * v1 8 ) 117 ) 0 ) v2 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) 7 ) ( + ( + ( min ( * v1 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) ) ( + 0 ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) 28 ) ) ( + 3 ( + ( + ( + ( min ( * v0 64 ) 436 ) ( * v1 32 ) ) v2 ) 28 ) ) ) ) ( <= ( / v3 4 ) ( / ( + 0 v3 ) 4 ) ) ) ( >= ( / ( + v3 31 ) 4 ) ( / ( + ( - ( + 32 0 ) 1 ) v3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 2 ) ( - ( + ( - ( + v0 v1 ) 2 ) 69 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 372 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( + ( min ( * v0 4 ) 3 ) ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 128 ) ) ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 32 ) v0 ) 4 ) ) ( - ( + ( min ( * v0 4 ) 3 ) ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 8 ) v3 ) 16 ) ) ( * ( + ( * ( + ( * ( + ( * ( / v1 8 ) 2 ) v2 ) 8 ) v3 ) 4 ) v0 ) 4 ) ) ) 19 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "min-x-x",
      "add-assoc",
      "eqlt-to-not-gt",
      "and-min-to-lt",
      "min-mul-in-pos",
      "add-dist-mul",
      "add-comm",
      "max-to-min",
      "mul-zero",
      "mul-assoc",
      "add-fact-mul",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 3 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 3 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ( + ( - ( + ( * v1 8 ) v2 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ( + ( + ( + ( * v1 8 ) v2 ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * v3 4 ) v4 ) 0 ) ( + ( + ( * v3 4 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 4 ) v4 ) 3 ) ( + ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( + ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) 0 ) 4 ) ( - ( + ( * ( + ( + ( * v2 4 ) v3 ) 0 ) 2 ) v4 ) 10 ) ) ) ( >= ( - ( + ( + ( * ( + ( * v2 4 ) v3 ) 2 ) v4 ) 3 ) 4 ) ( - ( + ( * ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) 2 ) v4 ) 10 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "mul-comm",
      "add-dist-mul",
      "sub-to-add",
      "add-assoc",
      "and-comm",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 4 ) ( + ( + v0 1 ) v1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "lt-swap-in",
      "add-comm",
      "add-to-sub",
      "add-assoc",
      "mul-assoc",
      "sub-to-add",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= ( - ( + v3 v2 ) 1 ) ( - ( + v3 v2 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / ( + ( min v0 4 ) v1 ) 4 ) ( + v2 11 ) ) 3 ) ( - v2 2 ) ) ) ( >= ( + v2 8 ) ( + v2 8 ) ) ) ( <= ( + ( + ( * 0 4 ) ( / v3 4 ) ) 0 ) ( + ( + ( * 0 4 ) ( / v3 4 ) ) 0 ) ) ) ( >= ( + ( + ( * 4 4 ) ( + ( / v3 4 ) 20 ) ) 3 ) ( + ( + ( * 4 4 ) ( + ( / v3 4 ) 20 ) ) 3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "and-min-to-eqlt",
      "min-add-both",
      "add-dist-mul",
      "min-sub-both",
      "max-to-min",
      "min-comm",
      "not-gt-to-eqlt",
      "add-assoc",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-comm",
      "mod-const-sub",
      "and-min-to-lt",
      "and-max-to-lt",
      "add-denom-div",
      "ineq-to-eq",
      "lt-mul-div-cancel",
      "and-x-x",
      "min-mul-in-neg",
      "add-to-sub"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + ( min v1 111 ) v2 ) -16 ) 17 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "min-comm",
      "eqgt-to-not-lt",
      "min-add-both",
      "add-comm",
      "lt-to-zero",
      "and-min-to-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 3 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + v0 v1 ) 3 ) ( + ( + v0 v1 ) 3 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( * v2 8 ) ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * ( + ( * ( max -1 0 ) 4 ) v2 ) 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 17 4 ) ( + ( * v2 8 ) 37 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * ( + ( * 1 4 ) v2 ) 2 ) 7 ) 4 ) 3 ) 3 ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "mul-comm",
      "min-max",
      "add-assoc",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "mul-assoc",
      "min-mul-in-neg",
      "sub-to-add",
      "min-ass",
      "mul-one",
      "mul-zero",
      "lt-swap-out",
      "min-sub-both",
      "add-fact-mul",
      "min-comm",
      "and-ineq-eq",
      "min-mod-const-to-const",
      "and-eqlt-to-min",
      "add-div-mod",
      "eq-max-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= ( - ( + v3 v2 ) 1 ) ( - ( + v3 v2 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - ( + ( - ( * ( max ( min v0 25 ) 10 ) 8 ) 204 ) ( - 208 ( * ( max ( min v0 25 ) 10 ) 8 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "max-min-switch",
      "add-fact-mul",
      "min-add-both",
      "mul-zero",
      "eq-swap",
      "min-mul-in-pos",
      "add-comm",
      "mul-comm",
      "eq-comm",
      "mul-assoc",
      "Eq-min-c-pos",
      "add-assoc",
      "sub-to-add",
      "and-eqlt-eqgt-to-0",
      "mod-minus-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 3 4 ) v0 ) 3 ) ( + ( + ( * 3 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 42 ) 83 ) ( + ( * v2 3 ) v3 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 24 24 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + 3 v1 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 9 ) v3 ) ( + ( * v2 9 ) v3 ) ) ) ( >= ( + ( * v2 9 ) v3 ) ( + ( * v2 9 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( > ( + ( * v0 -16 ) 62 ) ( + ( * v0 -16 ) 62 ) )",
      "end": "0"
    },
    "rules": ["lt-to-zero", "gt-to-lt"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 32 ) 32 ) ( * v0 32 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 3 ) ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 3 ) ) ) ( >= ( + ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 7 ) ( - ( + ( + v2 11 ) ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 3 ) ) 1 ) ) ) ( <= ( + 0 ( / v3 4 ) ) ( + 0 ( / v3 4 ) ) ) ) ( >= ( + 3 ( + ( / v3 4 ) 32 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v3 4 ) 32 ) ) ) ) ( <= ( + ( * ( + ( * v4 4 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 4 ) v5 ) 2 ) v6 ) ) ) ( >= ( + ( * ( + ( * v4 4 ) v5 ) 2 ) v6 ) ( + ( * ( + ( * v4 4 ) v5 ) 2 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-assoc",
      "lt-max-term-term+pos",
      "lt-swap-out",
      "min-to-max",
      "mod-const-add",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 123 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( max ( min v0 0 ) -62 ) ( - ( + ( max ( min v0 0 ) -62 ) ( - 5 ( max ( min v0 0 ) -62 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-comm",
      "max-min-switch",
      "Eq-min-c-pos",
      "mul-one",
      "add-fact-mul",
      "eq-comm",
      "add-assoc",
      "sub-to-add",
      "min-add-both",
      "eq-swap",
      "mul-zero",
      "add-dist-mul"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 16 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "min-max-const",
      "lt-swap-in",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "lt-swap-in",
      "sub-to-add",
      "lt-swap-out",
      "mul-assoc",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + 0 v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + 3 ( + v0 248 ) ) ) ) ( <= ( / v1 250 ) ( / ( + ( + ( min ( * 0 4 ) 121 ) 0 ) v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( + ( min ( * ( - ( + 32 0 ) 1 ) 4 ) 121 ) ( - ( + 4 0 ) 1 ) ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + ( + v0 v1 ) v2 ) 133 ) ( - ( + ( - ( + ( + v0 v1 ) v2 ) 133 ) 10 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "sub-to-add",
      "mul-assoc",
      "add-fact-mul",
      "add-comm",
      "eq-swap",
      "add-to-sub",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( + ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-zero",
      "min-div-in-pos",
      "mod-minus-out",
      "and-ineq-eq"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 0 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 3 ) ( + ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 1000 0 ) 1 ) v1 ) ( + ( - ( + 1000 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / v0 8 ) ( - ( / ( - v0 1 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-cancel-div",
      "div-cancel-mul",
      "mul-assoc",
      "max-to-min",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "min-ass",
      "mul-zero",
      "div-minus-down",
      "min-to-max",
      "min-mul-in-pos",
      "min-max-min-y",
      "add-denom-mul",
      "lt-mul-div-cancel",
      "mul-one",
      "min-div-in-neg",
      "min-mod-const-to-const",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "sub-to-add",
      "min-comm",
      "min-sub-both",
      "Eq-lt-min",
      "min-max",
      "add-comm",
      "eq-comm",
      "eq-max-lt",
      "and-ineq-eq",
      "div-minus-in",
      "min-div-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * ( + ( / v1 4 ) v2 ) 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "mul-zero",
      "min-comm",
      "mul-comm",
      "and-min-to-lt",
      "add-comm",
      "sub-to-add",
      "lt-swap-in",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - ( + ( - ( * ( min ( - v0 v1 ) 5 ) 2 ) 10 ) ( - 13 ( * ( min ( - v0 v1 ) 5 ) 2 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "mul-comm",
      "eq-mul-x-y-0",
      "add-fact-mul",
      "sub-to-add",
      "min-mul-in-pos",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-assoc",
      "min-add-both",
      "Eq-max-c-pos",
      "eq-comm",
      "eq-swap",
      "mul-max-min",
      "min-max-const",
      "and-eqlt-gt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / v0 125 ) ( / ( + ( % v0 125 ) 249 ) 125 ) ) ( / v0 125 ) )",
      "end": "0"
    },
    "rules": [
      "lt-mul-div-cancel",
      "add-to-sub",
      "and-min-to-eqlt",
      "min-sub-both",
      "add-fact-mul",
      "mul-zero",
      "min-div-out-pos",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-swap-out",
      "min-mul-in-neg",
      "not-gt-to-eqlt",
      "min-comm",
      "and-eqlt-eqgt-to-0",
      "mul-comm",
      "div-minus-in",
      "lt-swap-in",
      "add-denom-mul",
      "Eq-lt-min",
      "mul-assoc",
      "mul-cancel-div",
      "add-comm",
      "add-dist-mul",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( max ( + ( * ( / ( + ( min ( * v0 63 ) -3 ) 65 ) 33 ) 33 ) ( + ( max ( * v0 63 ) -3 ) v1 ) ) ( + ( + ( * v0 63 ) v1 ) 30 ) ) 33 ) ( - ( + ( * ( + v0 1 ) 63 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "and-comm",
      "add-comm",
      "mul-comm",
      "mul-assoc",
      "min-div-in-pos",
      "sub-to-add",
      "lt-swap-in",
      "add-denom-div",
      "div-minus-down",
      "lt-swap-out",
      "add-fact-mul",
      "max-to-min",
      "lt-max-term-term+pos",
      "lt-const-pos",
      "and-min-to-lt",
      "mod-zero",
      "min-lt-cancel",
      "Eq-lt-min",
      "min-div-mul",
      "eqgt-to-not-lt",
      "min-max-switch",
      "or-to-and",
      "mod-x-x",
      "min-mod-const-to-const",
      "and-max-to-eqlt",
      "and-eq-eq",
      "lt-min-term+cpos",
      "and-lt-gt-to-0",
      "add-assoc",
      "and-eqlt-to-min",
      "mul-zero",
      "add-to-sub",
      "div-cancel",
      "and-x-1",
      "and-eqlt-to-max",
      "lt-min-mutual-term",
      "min-max-min-y"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( + -2 v0 ) ) ) ( >= ( + v0 39 ) ( + ( - ( - 11 2 ) 1 ) ( - ( + 32 v0 ) 1 ) ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( + 0 ( / v1 4 ) ) ) ) ( >= ( + 3 ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 4 ) ( * ( / ( + v2 3 ) 4 ) 4 ) ) ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( * v0 65 ) ( + v1 v2 ) ) 10 ) 78 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "add-comm",
      "add-fact-mul",
      "eq-swap",
      "add-to-sub",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 2 ) ( + ( + ( - v0 1 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 1 ) ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 8 ) 7 ) ( * ( + ( * v0 2 ) ( + v1 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "lt-swap-out",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-dist-mul",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ( + 0 ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ( + 3 ( + ( + ( * ( + ( * v0 2 ) v1 ) 8 ) v2 ) 4 ) ) ) ) ( <= ( * ( / v3 4 ) 4 ) ( * ( / v3 4 ) 4 ) ) ) ( >= ( - ( * ( + ( / v3 4 ) v4 ) 4 ) 4 ) ( * ( - ( + ( / v3 4 ) v4 ) 1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-to-zero",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 223 ) 444 ) v1 ) v2 ) ( + ( + ( min ( * v0 223 ) 444 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-min-term-term+pos",
      "lt-min-term+cpos",
      "min-add-both",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( + -2 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) ( + ( - ( - 4 2 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( * ( max v0 63 ) 4 ) ) v1 ) 255 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "mul-one",
      "max-to-min",
      "add-assoc",
      "min-ass",
      "min-div-mul",
      "min-mul-in-neg",
      "add-comm",
      "min-to-max",
      "mul-comm",
      "and-eqlt-to-max",
      "min-div-in-pos",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "min-add-both",
      "min-comm",
      "sub-to-add",
      "Eq-lt-min",
      "mod-minus-in",
      "Eq-min-c-neg",
      "and-over-or",
      "min-div-out-neg",
      "add-denom-div",
      "Eq-max-c-pos",
      "lt-const-neg",
      "mul-cancel-div",
      "not-gt-to-eqlt",
      "or-to-and",
      "and-min-to-eqlt",
      "gt-to-lt",
      "mod-one",
      "and-lt-to-max",
      "and-max-to-eqlt",
      "div-cancel",
      "and-ineq-eq",
      "div-minus-down",
      "lt-min-term-term+pos",
      "eq-max-lt",
      "and-max-to-lt",
      "add-zero",
      "mul-assoc",
      "lt-max-term-term+pos",
      "min-x-x-plus-a-pos",
      "min-max",
      "lt-mul-pos-cancel",
      "min-mod-const-to-const",
      "lt-min-mutual-term",
      "min-max-switch",
      "lt-swap-out",
      "min-max-max-x",
      "min-max-const",
      "lt-max-term+neg-term",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( / ( + v0 v1 ) 8 ) v2 ) ( + ( / ( + v0 v1 ) 8 ) v2 ) ) ) ( >= ( + ( / ( + v0 v1 ) 8 ) v2 ) ( + ( / ( + v0 v1 ) 8 ) v2 ) ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( + ( * v3 2 ) 0 ) v4 ) ) ) ( >= ( + ( + ( * v3 2 ) v4 ) 1 ) ( + ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) v4 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) 0 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) ) 3 ) ( + ( + ( min ( * v5 72 ) 65 ) ( * v6 4 ) ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ( + ( + ( min ( * v3 4 ) 246 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "add-dist-mul",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( - ( / ( + ( min v2 1000 ) v3 ) 8 ) 125 ) ( - ( / ( + ( min v2 1000 ) v3 ) 8 ) 125 ) ) ) ( >= ( / ( + ( + v2 v3 ) 7 ) 8 ) ( / ( + ( + v2 v3 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "and-min-to-eqlt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "and-comm",
      "min-mul-in-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + ( + v3 v2 ) 3 ) 4 ) ( / ( + ( + v3 v2 ) 3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 8 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 8 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( - ( + ( * v2 4 ) v3 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( + ( + ( * v2 4 ) v3 ) 4 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "and-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + 3 v1 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( - 11 ( max ( * ( % v0 3 ) 4 ) 7 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "min-to-max",
      "lt-mul-pos-cancel",
      "eqgt-to-not-lt",
      "min-mod-const-to-mod",
      "add-assoc",
      "lt-to-zero",
      "min-div-in-pos",
      "mul-comm",
      "mod-one",
      "max-to-min",
      "add-comm",
      "add-denom-div",
      "min-sub-both",
      "lt-swap-out",
      "min-comm",
      "add-zero",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 5 ) ( - ( + ( - v0 5 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "lt-swap-out",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - ( + 0 v0 ) 2 ) ) ) ( >= ( + v0 6 ) ( + ( + ( - ( + 4 0 ) 1 ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( - ( * v1 8 ) 1 ) ( + ( - ( + ( * v1 8 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( * v1 8 ) 19 ) ( + ( + ( + ( * v1 8 ) ( - ( + 16 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 0 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( - ( / v0 16 ) 2 ) ) ) ( >= ( - ( + ( / ( + ( % v0 16 ) 223 ) 16 ) ( - ( / v0 16 ) 2 ) ) 1 ) ( - ( + ( / ( + ( % v0 16 ) 223 ) 16 ) ( - ( / v0 16 ) 2 ) ) 1 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * ( + ( * v2 8 ) 0 ) 4 ) 0 ) ( * v2 32 ) ) ) ( >= ( + ( * ( + ( * v2 8 ) 7 ) 4 ) 3 ) ( + ( * v2 32 ) 31 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-dist-mul",
      "add-assoc",
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 16 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 16 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 16 ) v1 ) 36 ) ) 5 ) ( + ( + ( * v0 16 ) v1 ) 20 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-comm",
      "sub-to-add",
      "and-comm",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 250 ) v3 ) v4 ) ( + ( + ( * v2 250 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 250 ) v3 ) v4 ) ( + ( + ( * v2 250 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 131 ) ( - ( + v0 ( + v1 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "lt-swap-out",
      "add-fact-mul",
      "mul-comm",
      "add-to-sub",
      "add-assoc",
      "sub-to-add",
      "mul-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( min ( max ( / v1 16 ) ( + ( + v0 1 ) 5 ) ) ( + v0 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "min-comm",
      "sub-to-add",
      "lt-swap-in",
      "min-sub-both",
      "lt-swap-out",
      "and-min-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) ( - ( + ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "mul-zero",
      "add-to-sub",
      "mul-assoc",
      "sub-to-add",
      "eq-swap",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( - ( min ( max ( + ( + v0 1 ) 20 ) ( + ( min v1 4 ) v2 ) ) ( + ( + v0 1 ) 11 ) ) 15 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "min-sub-both",
      "and-lt-to-min",
      "lt-swap-in",
      "and-comm",
      "add-dist-mul",
      "and-min-to-lt",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( + ( * 0 4 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 3 ) ( - ( - ( - v0 1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-x-x-sub-a",
      "sub-to-add",
      "lt-swap-in",
      "add-assoc",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( + ( * v2 16 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 16 ) v3 ) 15 ) ( + ( + ( * v2 16 ) v3 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - ( + ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - 9 ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "eq-comm",
      "mul-comm",
      "Eq-min-c-pos",
      "add-fact-mul",
      "min-add-both",
      "add-assoc",
      "max-min-switch",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 2 ) ) ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ) ) ( >= ( + 3 ( + v0 5 ) ) ( - ( + ( + ( * 2 4 ) v0 ) 3 ) 2 ) ) ) ( <= ( + ( + ( max ( * v1 126 ) -3 ) v2 ) 1 ) ( - ( + ( * v1 126 ) v2 ) 2 ) ) ) ( >= ( + ( + ( * v1 126 ) v2 ) 126 ) ( + ( + ( * v1 126 ) v2 ) 126 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "and-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 4 ) 2 ) ( + -2 ( / v0 4 ) ) ) ) ( >= ( + ( / v0 4 ) ( / ( + ( % v0 4 ) 1031 ) 4 ) ) ( + ( - ( - 11 2 ) 1 ) ( - ( + ( / ( + ( % v0 4 ) 1003 ) 4 ) ( / v0 4 ) ) 1 ) ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * 11 4 ) 3 ) ( + ( * ( - ( + 12 0 ) 1 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "add-denom-mul",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( * ( max ( min v0 5 ) 2 ) 8 ) 44 ) ( - 48 ( * ( max ( min v0 5 ) 2 ) 8 ) ) ) ( - ( * ( max ( min v0 5 ) 2 ) 8 ) 44 ) )",
      "end": "0"
    },
    "rules": [
      "max-min-switch",
      "add-dist-mul",
      "min-add-both",
      "add-assoc",
      "sub-to-add",
      "mul-assoc",
      "add-comm",
      "max-to-min",
      "add-to-sub",
      "min-mul-in-pos",
      "lt-min-term+cpos",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 32 ) v1 ) v2 ) ( + ( + ( * v0 32 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ) ) ( >= ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ( + ( + ( min ( * v2 42 ) 83 ) ( + ( * v3 14 ) v4 ) ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 v2 ) 4 ) 252 ) ) ( / ( - ( + v1 v2 ) 965 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -125 ) ( - ( / ( + v1 v2 ) 4 ) 252 ) ) ( / ( - ( + v1 v2 ) 965 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "max-to-min", "mul-assoc", "div-cancel-mul", "mul-comm"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( / v0 4 ) 4 ) v1 ) 131 ) ( - ( + ( * ( / v0 4 ) 4 ) ( + v1 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "mul-zero",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 55 ) 54 ) ( * ( + v0 1 ) 55 ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "mul-comm",
      "add-dist-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-comm",
      "add-comm",
      "min-to-max",
      "add-zero",
      "eq-swap",
      "Eq-min-c-pos",
      "sub-to-add",
      "min-sub-both",
      "mul-assoc",
      "min-add-both",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 4 ) 121 ) v1 ) v2 ) ( + ( + ( min ( * v0 4 ) 121 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( + ( * v0 -2 ) ( - ( / ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 4 ) 2 ) ) ( / ( + ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 35 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( max ( + ( * v0 -2 ) ( - ( / ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 4 ) 2 ) ) ( / ( + ( + v1 ( min ( * v2 16 ) ( - v3 16 ) ) ) 35 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["mul-assoc", "div-cancel-mul", "max-to-min", "eq-x-x", "mul-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 224 ) 444 ) v1 ) ) ( + ( min ( * v0 224 ) 444 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 224 ) 444 ) v1 ) 220 ) ) ( + ( + ( min ( * v0 224 ) 444 ) 223 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ( + ( + ( min ( * v2 8 ) 117 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 3 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 1 ) ) ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( min ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) ( + ( + ( max ( * ( + ( * v0 64 ) v2 ) 2 ) ( + ( * ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 2 ) 1 ) ) ( * ( / ( - 0 ( max ( * v1 -4 ) 1 ) ) 4 ) 4 ) ) 3 ) ) 1 ) ) ( + ( * ( + ( + ( * ( + ( * v0 32 ) v1 ) 2 ) v2 ) 1 ) 2 ) 2 ) ) ) ( <= ( + 0 ( * v3 2 ) ) ( + ( * ( + ( + ( * 0 4 ) v3 ) 0 ) 2 ) 0 ) ) ) ( >= ( + 2 ( + ( * v3 2 ) 14 ) ) ( + ( * ( + ( + ( * 1 4 ) v3 ) 3 ) 2 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) ) ( >= ( + ( * v2 16 ) v3 ) ( + ( * v2 16 ) v3 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + v0 999 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-zero",
      "Eq-lt-min",
      "lt-to-zero",
      "min-x-x",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 2 ) 61 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 2 ) 61 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a", "add-comm"]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 4 ) ) ( - 1999 ( * v0 4 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "lt-swap-in",
      "add-assoc",
      "mul-zero",
      "mul-assoc",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ( % ( + ( + ( + ( * v0 8 ) v1 ) v2 ) 1 ) 8 ) ) ) ( <= ( + ( * ( % v3 16 ) 4 ) 0 ) ( + ( * ( % v3 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v3 16 ) 4 ) 3 ) ( + ( * ( % v3 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) v1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v3 4 ) 133 ) 0 ) ( + ( min ( * v3 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 133 ) 3 ) ( + ( min ( * v3 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( / v0 16 ) ( - ( + ( / v0 16 ) ( / ( + ( % v0 16 ) 15 ) 16 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-denom-mul",
      "mul-cancel-div",
      "min-x-x-plus-a-neg",
      "mul-comm",
      "min-sub-both",
      "min-div-out-pos",
      "not-gt-to-eqlt",
      "min-comm",
      "eq-x-x",
      "sub-to-add",
      "Eq-lt-min",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 2 4 ) v0 ) 3 ) ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 2 ) 1 ) ( * ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "sub-to-add",
      "add-to-sub",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-dist-mul",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 136 ( * ( % v0 3 ) 46 ) ) ( - ( + 0 46 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "mod-minus-in",
      "add-comm",
      "eq-max-lt",
      "and-min-to-lt",
      "min-mul-in-pos",
      "min-to-max",
      "sub-to-add",
      "lt-swap-out",
      "and-x-1",
      "add-zero",
      "min-mod-const-to-mod",
      "Eq-lt-min",
      "eq-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "min-add-both",
      "lt-mul-pos-cancel",
      "mul-assoc",
      "and-min-to-eqlt",
      "min-comm",
      "max-to-min",
      "lt-const-neg",
      "and-eqlt-to-min",
      "min-max-const",
      "and-eqlt-to-max"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 89 ) ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) ) 4 ) 4 ) ( + ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 89 ) ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) ) )",
      "end": "1"
    },
    "rules": [
      "max-to-min",
      "min-mul-out-pos",
      "div-cancel-mul",
      "min-mul-in-neg",
      "add-denom-div",
      "min-comm",
      "add-dist-mul",
      "min-x-x-plus-a-pos",
      "mul-comm",
      "eq-x-x",
      "mul-assoc",
      "add-assoc",
      "min-ass"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 16 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( / v5 4 ) ( / v5 4 ) ) ) ( >= ( - ( + v6 ( / v5 4 ) ) 1 ) ( - ( + v6 ( / v5 4 ) ) 1 ) ) ) ( <= ( + ( * v7 12 ) v8 ) ( + ( * v7 12 ) v8 ) ) ) ( >= ( + ( * v7 12 ) v8 ) ( + ( * v7 12 ) v8 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "mul-assoc",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 8 ) v1 ) ) 11 ) ( - ( + ( * v0 8 ) v1 ) 11 ) ) ) ( >= ( - ( + 3 ( + ( + ( * v0 8 ) v1 ) 24 ) ) 11 ) ( + ( + ( * v0 8 ) v1 ) 14 ) ) ) ( <= ( + ( + ( max ( * v2 4 ) -9 ) v3 ) 5 ) ( - ( + ( * v2 4 ) v3 ) 4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 8 ) ( + ( + ( * v2 4 ) v3 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "lt-min-term+cpos",
      "and-comm",
      "mul-comm",
      "add-fact-mul",
      "add-comm",
      "max-to-min",
      "mul-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "mul-zero",
      "not-gt-to-eqlt",
      "sub-to-add",
      "ineq-to-eq",
      "lt-mul-pos-cancel",
      "mod-const-add",
      "min-to-max",
      "min-div-out-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + v0 v1 ) 2 ) 0 ) ( + ( * ( + v0 v1 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + 0 ( * ( + ( * v2 8 ) v3 ) 2 ) ) ( + ( * ( + ( * v2 8 ) v3 ) 2 ) 0 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v2 8 ) v3 ) 2 ) 13 ) ) ( + ( * ( + ( + ( * v2 8 ) v3 ) 7 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= ( + ( min ( * v4 5 ) 13 ) v5 ) ( + ( min ( * v4 5 ) 13 ) v5 ) ) ) ( >= ( + ( min ( * v4 5 ) 13 ) v5 ) ( + ( min ( * v4 5 ) 13 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-dist-mul",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 0 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 5 ) ( - ( + v0 v1 ) 4 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 5 ) ( + ( + v0 v1 ) 5 ) ) ) ( <= ( - ( + ( * v2 32 ) v3 ) 4 ) ( - ( + ( * v2 32 ) v3 ) 4 ) ) ) ( >= ( + ( + ( * v2 32 ) v3 ) 36 ) ( + ( + ( * v2 32 ) v3 ) 36 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( * ( + ( * ( max ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -1 ) 0 ) ( + ( min ( / ( + ( * ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) -1 ) 241 ) 8 ) 7 ) 1 ) ) 8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 515 ) 16 ) 2 ) 2 ) 2 ) ( * ( max ( min ( * ( + ( * ( max ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -1 ) 0 ) ( + ( min ( / ( + ( * ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) -1 ) 241 ) 8 ) 7 ) 1 ) ) 8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 515 ) 16 ) 2 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( >= ( + ( * ( + v0 v1 ) 2 ) v2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 2 ) v2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-zero",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "add-fact-mul",
      "mul-assoc",
      "add-to-sub",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 5 ) ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-zero",
      "mul-comm",
      "lt-swap-in",
      "sub-to-add",
      "lt-swap-out",
      "add-assoc",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 8 ) 9 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "min-max-const",
      "Eq-lt-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 0 ) 3 ) ( - ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 3 ) 3 ) ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( - v2 8 ) ( + -5 ( - v2 3 ) ) ) ) ( >= ( + v2 131 ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v2 3 ) ) 1 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "and-comm",
      "and-eqlt-eqgt-to-0",
      "and-assoc",
      "eqgt-to-not-lt",
      "add-assoc",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 6 ) ( - ( + ( - ( + v0 v1 ) 6 ) 131 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / ( + v0 v1 ) 8 ) 1 ) ( - ( / ( + ( - v0 1 ) v1 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "min-mul-in-neg",
      "min-div-out-pos",
      "div-minus-in",
      "min-div-mul",
      "add-denom-mul",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt",
      "min-mul-out-neg",
      "add-to-sub",
      "mul-comm",
      "mul-assoc",
      "lt-swap-in",
      "min-x-x-plus-a-pos",
      "min-max",
      "add-dist-mul",
      "min-max-max-x",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "lt-swap-out",
      "lt-mul-div-cancel",
      "and-eqlt-to-min",
      "add-assoc",
      "min-ass",
      "add-zero",
      "not-eq-to-ineq",
      "min-comm",
      "eq-mul-x-y-0",
      "and-x-not-x"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( - ( min ( + ( max ( + ( + v0 1 ) 7 ) ( + ( max ( * v1 4 ) -9 ) v2 ) ) 2 ) ( + v0 1 ) ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "min-comm",
      "min-sub-both",
      "min-add-both",
      "add-assoc",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( * v1 4 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "add-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / v0 16 ) ( + v1 5 ) ) 2 ) ( + -2 v1 ) ) ) ( >= ( + v1 3 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v2 ) 0 ) 60 ) ( - ( - ( + ( + ( * ( max -2 0 ) 4 ) 0 ) v2 ) 2 ) 63 ) ) ) ( >= ( - ( + ( + ( max ( * 2 4 ) -5 ) v2 ) 3 ) 60 ) ( - ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ( - ( - 6 2 ) 1 ) ) 63 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "mul-assoc",
      "mul-one",
      "and-min-to-eqlt",
      "mul-comm",
      "max-to-min",
      "add-comm",
      "not-gt-to-eqlt",
      "sub-to-add",
      "and-comm",
      "add-assoc",
      "lt-swap-in",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 20 ) ( - ( + ( - v0 20 ) ( - 24 ( * 2 8 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "eq-swap",
      "eq-comm",
      "mul-zero",
      "sub-to-add",
      "add-fact-mul",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 63 ) v1 ) v2 ) 2 ) ( - ( + ( + ( * v0 63 ) v1 ) v2 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 63 ) v1 ) v2 ) ( - ( - 11 2 ) 1 ) ) ( + ( + ( + ( * v0 63 ) v1 ) v2 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v3 12 ) v4 ) ) 0 ) ( + 0 ( + ( * v3 12 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v5 4 ) ( + ( * v3 12 ) v4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( * v5 4 ) ( + ( * v3 12 ) v4 ) ) ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( - 35 ( max ( * ( % v0 4 ) 9 ) 26 ) ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-denom-div",
      "mul-assoc",
      "min-div-in-pos",
      "max-to-min",
      "lt-swap-out",
      "min-mod-const-to-mod",
      "min-add-both",
      "min-mul-in-pos",
      "add-assoc",
      "min-comm",
      "mul-comm",
      "min-sub-both",
      "lt-mul-pos-cancel",
      "sub-to-add",
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 119 ) ( - ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-fact-mul",
      "sub-to-add",
      "add-comm",
      "lt-swap-in",
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 3 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + v0 v1 ) 2 ) 2 ) ( - ( * ( + ( - v0 1 ) v1 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-assoc",
      "mul-assoc",
      "eqlt-to-not-gt",
      "eq-x-x",
      "mul-comm",
      "or-x-and-x-y",
      "lt-min-max-cancel",
      "sub-to-add",
      "mod-two",
      "add-div-mod",
      "div-minus-down",
      "Eq-max-c-neg",
      "not-gt-to-eqlt",
      "min-max-min-y",
      "max-to-min",
      "mod-zero",
      "min-div-mul",
      "min-x-x-plus-a-pos",
      "add-to-sub",
      "gt-to-lt",
      "min-ass",
      "min-div-in-pos",
      "add-comm",
      "lt-swap-in",
      "min-div-out-neg",
      "not-eq-to-ineq",
      "min-mul-in-pos",
      "mul-zero",
      "mod-x-x",
      "div-cancel-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * 0 4 ) v0 ) 5 ) 0 ) 3 ) ( + -5 ( - v0 3 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 128 0 ) 1 ) 4 ) v0 ) ( - ( - 6 5 ) 1 ) ) 3 ) 3 ) ( + ( - ( - 6 5 ) 1 ) ( + v0 506 ) ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "mul-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-swap-in",
      "lt-swap-out",
      "mul-assoc",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-mul-div-cancel",
      "div-minus-in",
      "lt-min-term-term+pos",
      "and-over-or",
      "and-lt-to-max"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( * ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( * ( + ( * ( max ( min ( / ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 8 ) 0 ) -8 ) -8 ) ( min ( + ( * ( % v0 ( / ( + v1 69 ) 64 ) ) 64 ) ( - ( / v2 8 ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) ) 2 ) 499 ) 0 ) 2 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 9 ) ) ( - 17 ( * v0 9 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-assoc",
      "lt-swap-in",
      "gt-to-lt",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 0 ) 4 ) 4 ) ( * v0 0 ) )",
      "end": "1"
    },
    "rules": ["mul-zero"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -4 ) ) 2 ) v2 ) 16 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * v0 64 ) ( * ( + ( * ( + ( * ( - 0 ( max ( min ( / v1 32 ) 0 ) -4 ) ) 2 ) v2 ) 16 ) v1 ) 2 ) ) 499 ) 0 ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 1 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 1 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 1 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( + ( max ( * v0 8 ) -5 ) v1 ) ) 3 ) ( + ( + ( + -5 ( + ( * v0 8 ) v1 ) ) 0 ) 3 ) ) ) ( >= ( + ( + 3 ( + ( + ( max ( * v0 8 ) -5 ) v1 ) 4 ) ) 3 ) ( + ( + ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) 3 ) 3 ) ) ) ( <= ( - ( * v2 8 ) 1 ) ( + -2 ( + ( * v2 8 ) 1 ) ) ) ) ( >= ( + ( * v2 8 ) 11 ) ( + 3 ( + ( * v2 8 ) 8 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-to-sub",
      "add-comm",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "min-add-both",
      "lt-swap-in",
      "add-zero",
      "sub-to-add",
      "add-assoc",
      "lt-min-term+cpos",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 146 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "add-to-sub",
      "mul-comm",
      "mul-zero",
      "mul-assoc",
      "sub-to-add",
      "eq-swap",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 127 ) ( - ( + ( - v0 127 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "add-fact-mul",
      "add-assoc",
      "mul-zero",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 223 ) 444 ) 0 ) v3 ) ( + ( + ( min ( * v2 223 ) 444 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 223 ) 444 ) ( - ( + 223 0 ) 1 ) ) v3 ) ( + ( + ( min ( * v2 223 ) 444 ) ( - ( + 223 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 20 ) ( - ( + ( - v0 20 ) ( - 24 ( * 2 8 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * 2 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + 3 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= ( + ( * v2 104 ) 0 ) ( + ( * v2 104 ) 0 ) ) ) ( >= ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ( + ( * v2 104 ) ( - ( + 104 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 224 ) 444 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 11 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 17 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-to-sub",
      "add-comm",
      "mul-zero",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) 3 ) ( * ( + v0 1 ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-x-x-sub-a",
      "add-to-sub",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]
  },
  {
    "expression": {
      "start": "( >= v0 ( - ( + v0 ( + ( min ( - v1 ( * ( max ( + ( - ( * v2 16 ) ( / ( - ( + v3 v4 ) 1 ) 4 ) ) v5 ) -15 ) 4 ) ) 0 ) 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "min-sub-both",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm",
      "and-min-to-lt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 9 ) 8 ) ( * ( + v0 1 ) 9 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "add-assoc",
      "lt-x-x-sub-a",
      "mul-comm",
      "lt-swap-out",
      "sub-to-add",
      "add-dist-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 11 ) ( - ( + ( - ( + v0 v1 ) 11 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + v0 7 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( / ( + v1 1003 ) 4 ) ( / ( + v1 1003 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 112 ) ( - ( + ( + ( + v0 v1 ) 112 ) 20 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 8 ) 117 ) v1 ) v2 ) ( + ( + ( min ( * v0 8 ) 117 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + ( + ( * 0 4 ) 0 ) v2 ) ( + 0 v2 ) ) ) ( >= ( + ( + ( * 7 4 ) 3 ) ( + v2 32 ) ) ( + ( - ( + 64 0 ) 1 ) v2 ) ) ) ( <= ( + ( min ( * v3 4 ) 14 ) 0 ) ( + ( min ( * v3 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v3 4 ) 14 ) 3 ) ( + ( min ( * v3 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 11 2 ) 1 ) v0 ) ( + ( - ( - 11 2 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * ( - ( + 12 0 ) 1 ) 4 ) 3 ) 47 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 9 ) ( + ( * v1 3 ) v2 ) ) ( + ( * v0 9 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 3 ) v1 ) v2 ) ( + ( + ( * v0 3 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 18 ( * ( % v0 2 ) 10 ) ) ( - ( + 0 10 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "lt-mul-pos-cancel",
      "min-max-const",
      "mul-assoc",
      "add-to-sub",
      "not-gt-to-eqlt",
      "min-mul-in-neg",
      "eq-max-lt",
      "max-min-switch",
      "min-mod-const-to-mod",
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "eqlt-to-not-gt",
      "Eq-min-c-neg",
      "max-to-min",
      "min-add-both",
      "eq-comm",
      "Eq-min-c-pos",
      "and-max-to-lt",
      "and-eqlt-gt-to-0",
      "eq-mul-x-y-0",
      "add-dist-mul",
      "mod-zero",
      "lt-swap-in",
      "min-mul-out-neg",
      "min-comm",
      "and-eq-eq",
      "and-min-to-eqlt",
      "or-to-and",
      "min-div-out-neg",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 12 ) ) ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * v0 4 ) -6 ) v1 ) 0 ) 1 ) ( + -5 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + ( + ( + ( max ( * v0 4 ) -6 ) v1 ) 3 ) 1 ) ( + 1 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ) ( <= ( - v2 5 ) ( - ( + 0 v2 ) 5 ) ) ) ( >= ( + v2 125 ) ( + ( + ( - ( + 125 0 ) 1 ) v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "min-add-both",
      "div-minus-down",
      "add-assoc",
      "lt-min-term+cpos",
      "mul-one",
      "div-minus-in",
      "mod-one",
      "lt-mul-pos-cancel",
      "min-div-in-neg",
      "mul-comm",
      "sub-to-add",
      "add-denom-mul",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "mul-assoc",
      "and-lt-gt-to-0",
      "min-mul-in-neg",
      "min-max-switch",
      "min-max-min-y",
      "and-eqlt-to-min",
      "and-x-x",
      "eq-mul-x-y-0",
      "mul-zero",
      "add-comm",
      "div-cancel-mul",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 5 ) ( - ( + ( + v0 1 ) v1 ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "and-min-to-eqlt",
      "lt-swap-in",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 65 ) v1 ) 10 ) ( - ( + ( + ( * v0 65 ) 0 ) v1 ) 10 ) ) ) ( >= ( + ( + ( * v0 65 ) v1 ) 54 ) ( - ( + ( + ( * v0 65 ) ( - ( + 65 0 ) 1 ) ) v1 ) 10 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 0 ) 10 ) ( - ( * ( + ( * v2 2 ) v3 ) 2 ) 10 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 3 ) 10 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 2 ) 3 ) 10 ) ) ) ( <= ( * v4 5 ) ( + ( * v4 5 ) 0 ) ) ) ( >= ( + ( * v4 5 ) 4 ) ( + ( * v4 5 ) ( - ( + 5 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 12 ) 52 ) ( * v2 64 ) ) v3 ) ) ( + ( + ( * v2 64 ) ( min ( * v1 12 ) 52 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 12 ) 52 ) ( * v2 64 ) ) v3 ) 8 ) ) ( + ( + ( * v2 64 ) ( + ( min ( * v1 12 ) 52 ) 11 ) ) v3 ) ) ) ( <= ( + v4 v5 ) ( + v4 v5 ) ) ) ( >= ( + v4 v5 ) ( + v4 v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 1 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 15 ) ( + ( * ( + 7 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 4 4 ) 3 ) 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) 7 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) ( + v2 1 ) ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) ) 0 ) 5 ) ( - ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) 5 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) ) 3 ) 5 ) ( - ( + ( + ( * v1 4 ) ( + ( * v2 32 ) v3 ) ) 3 ) 5 ) ) ) ( <= ( + ( + ( * v4 2 ) v5 ) v6 ) ( + ( + ( * v4 2 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 2 ) v5 ) v6 ) ( + ( + ( * v4 2 ) v5 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) v2 ) ( + ( + ( * v0 4 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "add-comm", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 8 ) ( + ( * v1 2 ) v2 ) ) 4 ) ( - ( + ( * v0 8 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) 4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * v1 4 ) 0 ) ( * v1 4 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( * ( min v1 11 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "and-min-to-lt",
      "min-mul-in-pos",
      "min-add-both",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 2 ) 249 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 249 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "add-comm", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 500 ) 0 ) v2 ) ( + ( + ( * v1 500 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ( + ( + ( * v1 500 ) ( - ( + 500 0 ) 1 ) ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( * ( + v0 1 ) 4 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "add-to-sub",
      "lt-x-x-sub-a",
      "add-dist-mul",
      "mul-comm",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - ( + ( + ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) 80 ) ( - -78 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( + v2 v1 ) ( * v3 126 ) ) ( + v1 116 ) ) ) -82 ) -89 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-fact-mul",
      "add-comm",
      "min-add-both",
      "max-min-switch",
      "Eq-min-c-pos",
      "mul-comm",
      "mul-zero",
      "eq-comm",
      "eq-swap",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 134 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "mul-assoc",
      "mul-comm",
      "eq-swap"
    ]
  },
  {
    "expression": { "start": "( > ( - 2 v0 ) ( - 251 v0 ) )", "end": "0" },
    "rules": [
      "gt-to-lt",
      "mul-assoc",
      "add-fact-mul",
      "sub-to-add",
      "lt-swap-out",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 124 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 134 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 32 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( / v2 4 ) ( / ( + 0 v2 ) 4 ) ) ) ( >= ( + ( / v2 4 ) 31 ) ( / ( + ( - ( + 125 0 ) 1 ) v2 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-denom-mul",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + 0 v0 ) 8 ) ) ) ( >= ( / ( + v0 3 ) 8 ) ( / ( + ( - ( + 4 0 ) 1 ) v0 ) 8 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) 0 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) ) 3 ) ( + ( + ( min ( * v3 28 ) 109 ) ( * v4 4 ) ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 4 ) 4 ) ( * v0 4 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( - ( + ( * v0 4 ) v1 ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 1 ) ) ( + ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "mul-zero",
      "min-sub-both",
      "eq-swap",
      "Eq-lt-min",
      "add-to-sub",
      "add-fact-mul",
      "mul-comm",
      "Eq-max-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( - ( * v0 4 ) ( % ( + ( * v0 4 ) v1 ) 8 ) ) v1 ) ) ) 0 ) ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ) ) ( >= ( + ( + ( * 0 4 ) ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= v2 v2 ) ) ( >= ( + v2 8 ) ( + v2 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "div-minus-in",
      "min-x-x",
      "add-zero",
      "and-min-to-lt",
      "add-comm",
      "mul-cancel-div",
      "mul-comm",
      "div-cancel-mul",
      "lt-to-zero",
      "add-assoc",
      "sub-to-add",
      "min-div-in-neg",
      "div-minus-down",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "min-div-out-pos",
      "lt-mul-pos-cancel",
      "mul-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + -65 v0 ) 0 ) 63 ) ( + ( + ( + ( * 0 4 ) 0 ) v0 ) ( max -65 -2 ) ) ) ) ( >= ( + ( + ( + 3 v0 ) 3 ) 63 ) ( + ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 3 ) ) ) ( <= ( + ( + ( * v1 8 ) v2 ) 8 ) ( + v2 ( + ( * v1 8 ) 1 ) ) ) ) ( >= ( + ( + ( * v1 8 ) v2 ) 8 ) ( + v2 ( - ( + 8 ( + ( * v1 8 ) 1 ) ) 1 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "and-eqlt-to-min",
      "eqlt-to-not-gt",
      "and-comm",
      "and-assoc",
      "lt-min-term+cpos",
      "not-gt-to-eqlt",
      "sub-to-add",
      "lt-const-pos",
      "and-eqlt-eqgt-to-0",
      "min-mod-const-to-mod",
      "add-assoc",
      "min-to-max",
      "min-max",
      "ineq-to-eq",
      "min-max-const",
      "add-div-mod"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 3 ) 24 ) ) ( - ( + 0 24 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "mul-comm",
      "Eq-min-c-neg",
      "sub-to-add",
      "and-min-to-eqlt",
      "eq-max-lt",
      "eq-comm",
      "not-gt-to-eqlt",
      "min-mod-const-to-mod",
      "add-comm",
      "eqlt-to-not-gt",
      "Eq-min-c-pos",
      "mod-x-x",
      "and-eq-eq",
      "eq-swap",
      "mul-assoc",
      "add-to-sub",
      "and-eqlt-to-min",
      "lt-const-neg",
      "and-lt-to-min",
      "or-over-and",
      "mul-max-min",
      "lt-to-zero",
      "and-assoc",
      "lt-min-mutual-term",
      "min-add-both",
      "add-div-mod",
      "add-dist-mul",
      "not-eq-to-ineq",
      "min-div-mul",
      "ineq-to-eq",
      "lt-max-term+neg-term",
      "min-x-x-plus-a-neg",
      "div-minus-up",
      "mul-cancel-div",
      "mul-one",
      "min-max-min-y",
      "eq-x-x",
      "lt-swap-in",
      "add-assoc",
      "mod-minus-in",
      "min-mul-out-pos",
      "min-comm",
      "lt-max-term-term+pos",
      "lt-min-term+neg-term",
      "min-mul-in-neg",
      "mod-const-sub",
      "or-comm",
      "min-div-in-pos",
      "add-denom-mul",
      "min-div-out-pos",
      "lt-mul-pos-cancel",
      "max-min-switch",
      "min-max",
      "max-to-min",
      "and-eqlt-to-max",
      "div-cancel-mul"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 2 ) 36 ) ) ( - ( + 0 36 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "mul-assoc",
      "add-comm",
      "min-mod-const-to-mod",
      "Eq-min-c-neg",
      "max-min-switch",
      "mul-one",
      "min-comm",
      "add-to-sub",
      "min-mul-in-neg",
      "eq-max-lt",
      "min-x-x",
      "min-max",
      "div-minus-down",
      "min-add-both",
      "lt-swap-out",
      "eq-comm",
      "add-denom-mul",
      "min-div-in-neg",
      "Eq-lt-min",
      "max-to-min",
      "add-zero",
      "mul-comm",
      "not-gt-to-eqlt",
      "lt-mul-pos-cancel",
      "eqlt-to-not-gt",
      "and-min-to-eqlt",
      "sub-to-add",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 0 ) 9 ) 9 ) ( * v0 0 ) )",
      "end": "1"
    },
    "rules": ["mul-zero"]
  },
  {
    "expression": { "start": "( > ( - 0 v0 ) ( - 1999 v0 ) )", "end": "0" },
    "rules": [
      "add-assoc",
      "lt-swap-out",
      "mul-comm",
      "add-comm",
      "gt-to-lt",
      "mul-zero",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 4 ) ( * ( + ( * v0 4 ) v1 ) 4 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( <= ( + ( - v0 1 ) 2 ) ( - v0 1 ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 2 ) ( - ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 2 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ( + ( + ( min ( * v2 2 ) 249 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 10 ( + ( * v0 253 ) v1 ) ) ( - 2009 ( + ( * v0 253 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-comm",
      "mul-zero",
      "add-assoc",
      "add-comm",
      "gt-to-lt",
      "mul-assoc",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ) ) ( >= ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ) ) ( <= ( + 0 v4 ) ( + 0 v4 ) ) ) ( >= ( + 3 v4 ) ( + ( - ( + 4 0 ) 1 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 4 ) 4 ) 4 ) ( * v0 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 64 ) v1 ) ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 64 ) v1 ) 60 ) ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) 0 ) v3 ) ( + ( + ( min ( * v2 63 ) 62 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v3 ) ( + ( + ( min ( * v2 63 ) 62 ) ( - ( + 63 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) v1 ) ( + ( * v0 8 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + -33 v0 ) 31 ) ( + ( + 0 v0 ) ( max -33 -2 ) ) ) ) ( >= ( + ( + 3 v0 ) 31 ) ( + ( + ( - ( + 32 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v1 2 ) v2 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( * ( + ( * v3 2 ) v4 ) 16 ) ( * ( + ( * v3 2 ) v4 ) 16 ) ) ) ( >= ( + ( * ( + ( * v3 2 ) v4 ) 16 ) 15 ) ( + ( * ( + ( * v3 2 ) v4 ) 16 ) 15 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * 15 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( > ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-fact-mul",
      "lt-swap-in",
      "mul-comm",
      "add-assoc",
      "gt-to-lt",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + ( + v3 v2 ) 7 ) 8 ) ( / ( + ( + v3 v2 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( + v0 1 ) )", "end": "0" },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( min ( * v1 4 ) 1999 ) 5 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) ) ( >= ( - ( + ( + v2 71 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) 1 ) ( - ( + ( + v2 71 ) ( - ( min ( * v1 4 ) 1999 ) 5 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "add-comm", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + ( * v0 2 ) v1 ) 16 ) 16 ) ( * ( + ( * v0 2 ) v1 ) 16 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "add-to-sub",
      "mul-assoc",
      "add-comm",
      "lt-swap-in",
      "mul-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( + ( * 0 4 ) 0 ) 0 ) 0 ) ) ( >= ( + ( + ( * 3 4 ) 14 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( <= ( / v2 4 ) ( / v2 4 ) ) ) ( >= ( / ( + v2 11 ) 4 ) ( / ( + v2 11 ) 4 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * ( min ( + ( * v0 64 ) ( - ( + ( * v1 64 ) ( / v2 8 ) ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 2 ) ( * ( * v4 32 ) 2 ) ) 499 ) 0 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * ( min ( + ( * v0 64 ) ( - ( + ( * v1 64 ) ( / v2 8 ) ) 5 ) ) ( / ( - ( + v3 v2 ) 497 ) 8 ) ) 2 ) ( * ( * v4 32 ) 2 ) ) 499 ) 0 ) 4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( == ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) ( - ( + ( + ( + ( * v0 4 ) ( + v1 v2 ) ) 246 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-comm",
      "add-assoc",
      "mul-comm",
      "eq-swap",
      "mul-zero",
      "sub-to-add",
      "add-to-sub",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) v3 ) ( + ( + ( * v1 2 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 133 ) ( - ( + ( - ( + ( + v0 v1 ) v2 ) 133 ) 10 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( + ( * ( + ( * v0 2 ) 0 ) 4 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * ( + ( * v0 2 ) 1 ) 4 ) v1 ) 3 ) ) ) ( <= ( / ( - ( + ( min v2 3 ) v3 ) 3 ) 4 ) ( / ( + 0 ( - ( + ( min v2 3 ) v3 ) 3 ) ) 4 ) ) ) ( >= ( / ( - ( + v2 v3 ) 1 ) 4 ) ( / ( + ( - ( + 3 0 ) 1 ) ( - ( + v2 v3 ) 3 ) ) 4 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * ( + ( + ( / v0 4 ) ( * v1 4 ) ) 0 ) 4 ) 0 ) ( + ( * ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( / v0 4 ) ( * v1 4 ) ) 3 ) 4 ) 3 ) ( + ( * ( + ( / v0 4 ) ( * v1 4 ) ) 4 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= ( * v2 2 ) ( + ( * v2 2 ) 0 ) ) ) ( >= ( + ( * v2 2 ) 1 ) ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "mul-comm",
      "add-zero",
      "add-dist-mul",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ) ) ( <= ( - ( * ( / v1 125 ) 8 ) 1 ) ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ) ) ( >= ( + ( * ( + ( / v1 125 ) v2 ) 8 ) 11 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ) ) ( <= ( * v3 16 ) ( + ( * v3 16 ) 0 ) ) ) ( >= ( + ( * v3 16 ) 15 ) ( + ( * v3 16 ) ( - ( + 16 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-comm",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( min v0 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min v0 249 ) 8 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "mul-zero",
      "mul-assoc",
      "lt-swap-in",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "eq-swap",
      "mul-zero",
      "mul-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 21 ) ( + ( * v2 3 ) v3 ) ) ) v4 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 21 ) ( + ( * v2 3 ) ( + v3 1 ) ) ) ) v4 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( + ( * v1 63 ) v2 ) v3 ) ( + ( + ( * v1 63 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 63 ) v2 ) v3 ) ( + ( + ( * v1 63 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 5 ) v1 ) ( + ( * v0 5 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 128 ) 124 ) v1 ) ) ( + ( min ( * v0 128 ) 124 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 124 ) v1 ) 124 ) ) ( + ( + ( min ( * v0 128 ) 124 ) 127 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ( + ( + ( min ( * v2 4 ) 121 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + v0 v1 ) 4 ) ( - ( + ( * ( + v0 v1 ) 4 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * v0 4 ) 4 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "mul-comm",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "add-dist-mul",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v0 130 ) ( - ( + 133 ( - v0 2 ) ) 1 ) ) ) ( <= ( + ( + ( * v1 4 ) v2 ) 0 ) ( + ( + ( * v1 4 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 4 ) v2 ) 3 ) ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( / v0 4 ) ) ( - 499 ( / v0 4 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "lt-swap-out",
      "mul-zero",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc",
      "gt-to-lt",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v1 64 ) v2 ) ) 0 ) ( + ( * v1 64 ) v2 ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( + ( * v1 64 ) v2 ) 60 ) ) 3 ) ( + ( + ( * v1 64 ) v2 ) 63 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 68 ) 1 ) )", "end": "0" },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( - ( + ( min v2 1000 ) v3 ) 1000 ) ( - ( + ( min v2 1000 ) v3 ) 1000 ) ) ) ( >= ( - ( + v2 v3 ) 1 ) ( - ( + v2 v3 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) 3 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) 3 ) ) ) ( <= ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) v5 ) 1 ) 8 ) ) ) ( <= ( + ( * v6 32 ) v7 ) ( + ( * v6 32 ) v7 ) ) ) ( >= ( + ( * v6 32 ) v7 ) ( + ( * v6 32 ) v7 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-x-x-plus-a-neg",
      "lt-swap-in",
      "min-x-x",
      "Eq-lt-min",
      "add-assoc",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "sub-to-add",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( * v0 64 ) v1 ) ) 8 ) ( - ( - ( + 0 ( + ( * v0 64 ) v1 ) ) 5 ) 3 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( + ( * v0 -16 ) ( + ( / ( + v2 13 ) 4 ) ( * v0 16 ) ) ) 4 ) ( + ( * v0 64 ) v1 ) ) 4 ) ) 8 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + v2 9 ) 4 ) 4 ) ( + ( * v0 64 ) v1 ) ) ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( max ( - ( + ( * v3 16 ) v4 ) 8 ) v5 ) ( + -5 v5 ) ) ) ( >= v5 ( + ( - ( - 6 5 ) 1 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "min-comm",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "lt-min-term+cpos",
      "lt-swap-in",
      "and-comm",
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max v0 7 ) -4 ) 4 ) 4 ) ( * ( max v0 7 ) -4 ) )",
      "end": "1"
    },
    "rules": ["max-to-min", "eq-x-x", "mul-comm", "mul-assoc", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 8 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-assoc",
      "lt-swap-in",
      "add-comm",
      "sub-to-add",
      "mul-zero",
      "mul-assoc",
      "add-fact-mul",
      "add-to-sub"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 255 ) 4 ) ) -4 ) 4 ) 4 ) ( * ( min ( + ( * v0 32 ) ( / ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 4 ) ) ( / ( + ( + v1 ( min ( * v2 500 ) ( - v3 500 ) ) ) 255 ) 4 ) ) -4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul", "min-to-max", "mul-assoc", "mul-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + 0 ( / v2 4 ) ) ( / v2 4 ) ) ) ( >= ( + 3 ( + ( / v2 4 ) 32 ) ) ( + ( / v2 4 ) 32 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "sub-to-add",
      "and-min-to-lt",
      "min-sub-both",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "min-x-x-plus-a-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 220 ) v1 ) ) ( + ( min ( * v0 32 ) 220 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 220 ) 31 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - ( + ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - -439 ( max ( min v0 -443 ) -506 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "max-min-switch",
      "and-min-to-eqlt",
      "not-gt-to-eqlt",
      "min-comm",
      "add-fact-mul",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-assoc",
      "min-add-both",
      "min-to-max",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( min v0 494 ) v1 ) 505 ) ( - ( + ( - ( + ( min v0 494 ) v1 ) 505 ) ( + ( max v0 494 ) 18 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-to-sub",
      "mul-zero",
      "add-fact-mul",
      "min-add-both",
      "add-comm",
      "and-min-to-eqlt",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "max-to-min",
      "not-gt-to-eqlt",
      "mul-assoc",
      "min-comm",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 4 ) -1 ) v1 ) ( - ( + ( * v0 4 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + 0 ( - v2 4 ) ) ( - ( + 0 v2 ) 1 ) ) ) ( >= ( + 3 ( + v2 1000 ) ) ( - ( + 3 ( + v2 1004 ) ) 1 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "eqgt-to-not-lt",
      "sub-to-add",
      "and-comm",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( * ( / v0 8 ) 256 ) 17 ) ( - ( * ( - ( * ( / v0 8 ) 64 ) 3 ) 4 ) 5 ) ) ) ( >= ( + ( * ( + ( * ( / v0 8 ) 8 ) v1 ) 32 ) 501 ) ( + ( * ( - ( + ( + ( * v1 8 ) 129 ) ( - ( * ( / v0 8 ) 64 ) 3 ) ) 1 ) 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= ( + 0 ( - ( * v2 32 ) 17 ) ) ( + ( + ( * 0 4 ) ( - ( * v2 32 ) 20 ) ) 0 ) ) ) ( >= ( + 3 ( + ( * v2 32 ) 658 ) ) ( + ( + ( * 168 4 ) ( + ( * v2 32 ) 661 ) ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 0 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) 3 ) 1 ) ( - ( + ( * ( + ( * v1 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-x-x",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 2 ) v3 ) 4 ) ) ) ( <= ( - ( + ( * ( + ( * v4 6 ) v5 ) 2 ) 0 ) 2 ) ( - ( * ( + ( * v4 6 ) v5 ) 2 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( + ( * v4 6 ) v5 ) 4 ) 2 ) 3 ) 2 ) ( - ( + ( * ( + ( * v4 6 ) v5 ) 2 ) 11 ) 2 ) ) ) ( <= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) ) ( >= ( + ( * v6 2 ) v7 ) ( + ( * v6 2 ) v7 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "add-assoc",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + v0 v1 ) ( + ( + ( - v0 1 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "lt-to-zero",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 28 ) ) ( + ( + ( * ( - ( + 8 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( * v1 4 ) ( * v1 4 ) ) ) ( >= ( * v1 4 ) ( * v1 4 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 16 ) 16 ) 16 ) ( * v0 16 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( / ( - 29 ( max ( min ( * v0 8 ) 29 ) 25 ) ) 4 ) ( - ( + 0 ( / ( - 36 ( max ( min ( * v0 8 ) 29 ) 25 ) ) 4 ) ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-ass",
      "sub-to-add",
      "eq-comm",
      "div-minus-in",
      "min-div-in-pos",
      "Eq-max-c-pos",
      "min-max",
      "min-add-both",
      "min-max-switch",
      "min-comm",
      "mul-assoc",
      "max-to-min",
      "add-comm",
      "min-to-max",
      "add-dist-mul",
      "min-mul-in-pos",
      "min-max-max-x",
      "mul-zero",
      "Eq-lt-min"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 64 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "min-max-const",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "lt-swap-in"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 1008 ) 1007 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "min-mod-const-to-const"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) 1 ) ( - ( - ( + ( - v0 1 ) v1 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-to-sub",
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( min ( + ( * v0 -4 ) 0 ) -28 ) 4 ) 4 ) ( min ( + ( * v0 -4 ) 0 ) -28 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-to-max",
      "min-mul-in-pos",
      "max-to-min",
      "mul-comm",
      "min-div-in-pos",
      "mul-assoc",
      "add-denom-div",
      "add-dist-mul",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 7 4 ) v0 ) 3 ) ( + v0 31 ) ) ) ( <= ( - ( max ( min ( * v1 4 ) 1999 ) ( + v2 6 ) ) 5 ) ( - v2 2 ) ) ) ( >= ( + v2 1 ) ( + v2 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "and-comm",
      "min-comm",
      "min-sub-both",
      "not-gt-to-eqlt",
      "add-assoc",
      "add-dist-mul",
      "min-to-max",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "sub-to-add",
      "and-min-to-eqlt",
      "add-comm",
      "max-to-min",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 3 ) ) ( - ( + 0 ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ) 2 ) ) ) ( >= ( + 3 ( + ( min ( + ( * ( - v1 ( / ( max ( * v1 4 ) -5 ) 4 ) ) 4 ) ( + ( + ( max ( * v1 4 ) -5 ) ( * v0 64 ) ) v2 ) ) ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) ) 3 ) ) ( - ( + 3 ( + ( + ( * ( + ( * v0 16 ) v1 ) 4 ) v2 ) 8 ) ) 2 ) ) ) ( <= ( - ( + ( min v3 500 ) v4 ) 502 ) ( + ( - ( + ( * 0 63 ) ( - ( + ( min v3 500 ) v4 ) 500 ) ) 5 ) 3 ) ) ) ( >= ( + ( + v3 v4 ) 2 ) ( + ( + ( + ( * 7 63 ) ( - ( + v3 v4 ) 500 ) ) 62 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "min-add-both",
      "add-comm",
      "lt-min-term+cpos",
      "add-assoc",
      "sub-to-add",
      "lt-const-pos",
      "and-comm",
      "min-ass",
      "min-comm",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) 0 ) ( * v0 4 ) ) ) ( >= ( + ( * ( + ( + ( * 62 4 ) v0 ) 3 ) 4 ) 3 ) ( + ( * v0 4 ) 1007 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "add-dist-mul",
      "add-zero",
      "sub-to-add",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "mul-comm",
      "add-comm",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( >= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 1 ) ( / ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 5 ) 8 ) ) ) ( >= v1 ( / ( - ( + ( * ( + ( * v0 2 ) ( + ( * ( - v1 v0 ) 2 ) 1 ) ) 4 ) 3 ) 5 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( <= ( + 0 ( * v5 69 ) ) ( * v5 69 ) ) ) ( >= ( + 3 ( + ( * v5 69 ) 68 ) ) ( + ( * v5 69 ) 68 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "and-comm",
      "add-comm",
      "sub-to-add",
      "add-dist-mul",
      "lt-mul-div-cancel",
      "add-assoc",
      "lt-swap-out",
      "mul-comm",
      "eqgt-to-not-lt",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "min-mul-in-neg",
      "Eq-max-c-pos",
      "eq-comm",
      "min-sub-both",
      "eq-swap",
      "add-zero",
      "eq-mul-x-y-0",
      "add-fact-mul",
      "sub-to-add",
      "mul-comm",
      "mul-assoc",
      "min-add-both",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ( + ( - ( * v0 4 ) ( % ( + ( * v0 4 ) v1 ) 8 ) ) v1 ) ) ( * ( / ( + ( * v0 4 ) v1 ) 8 ) 8 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ( + ( + ( + ( * v2 4 ) v3 ) v4 ) 5 ) ) ) ( <= ( + ( min ( * v5 4 ) 133 ) 0 ) ( min ( * v5 4 ) 133 ) ) ) ( >= ( + ( min ( * v5 4 ) 133 ) 3 ) ( + ( min ( * v5 4 ) 133 ) 3 ) ) )",
      "end": "0"
    },
    "rules": ["eqlt-to-not-gt", "lt-swap-out", "lt-x-x-sub-a", "and-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( / ( + ( min v0 4 ) v1 ) 4 ) ( + v2 11 ) ) 3 ) ( - v2 2 ) ) ) ( >= ( + v2 8 ) ( + v2 8 ) ) ) ( <= ( + 0 ( / v3 4 ) ) ( + 0 ( / v3 4 ) ) ) ) ( >= ( + 3 ( + ( / v3 4 ) 32 ) ) ( + 3 ( + ( / v3 4 ) 32 ) ) ) ) ( <= 0 0 ) ) ( >= 47 47 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-comm",
      "not-gt-to-eqlt",
      "min-comm",
      "add-dist-mul",
      "sub-to-add",
      "and-min-to-eqlt",
      "add-to-sub",
      "min-sub-both",
      "max-to-min",
      "min-div-mul",
      "lt-min-mutual-term",
      "min-max-const",
      "div-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( - ( + ( min v0 ( min v0 v1 ) ) ( * v2 8 ) ) 7 ) ( + ( max v3 ( max v3 v4 ) ) ( * v5 8 ) ) ) ( + ( + ( min v0 ( min v0 v1 ) ) ( * ( - v2 1 ) 8 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-max",
      "sub-to-add",
      "and-min-to-lt",
      "Eq-lt-min",
      "mul-comm",
      "add-comm",
      "not-gt-to-eqlt",
      "lt-to-zero",
      "add-dist-mul",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 v0 ) ( + -5 v0 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v0 ) ( + ( - ( - 6 5 ) 1 ) v0 ) ) ) ( <= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( >= ( % ( + v1 v2 ) 8 ) ( % ( + v1 v2 ) 8 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( * v3 4 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( min ( * v3 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "lt-to-zero",
      "add-zero",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 2 ) v1 ) ( + ( + ( * ( - v0 1 ) 2 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-dist-mul",
      "eq-x-x",
      "add-assoc",
      "add-comm",
      "min-x-x-plus-a-neg",
      "mul-comm",
      "Eq-lt-min",
      "sub-to-add",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 128 ) 872 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ) ) ( >= ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ( + ( + ( min ( * v3 63 ) 187 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 27 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "min-div-in-pos",
      "add-to-sub",
      "lt-mul-div-cancel",
      "min-max-const",
      "mul-comm",
      "add-comm",
      "lt-swap-in",
      "Eq-lt-min",
      "add-zero",
      "min-sub-both",
      "eq-swap",
      "eq-comm",
      "min-mod-const-to-mod",
      "lt-swap-out",
      "sub-to-add",
      "min-mul-in-pos",
      "not-gt-to-eqlt",
      "mod-minus-in",
      "max-to-min",
      "min-to-max",
      "eqgt-to-not-lt",
      "add-denom-mul",
      "div-minus-in",
      "lt-mul-pos-cancel",
      "add-fact-mul",
      "add-assoc",
      "mul-assoc",
      "min-comm",
      "and-x-not-x",
      "and-eq-eq",
      "mod-two",
      "min-div-out-pos",
      "add-denom-div",
      "div-zero",
      "lt-min-term+cpos",
      "min-div-out-neg",
      "and-min-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( / ( - ( + ( min v1 8 ) v2 ) 40 ) 16 ) ( * v3 4 ) ) ) ( - ( + 0 ( + ( / ( - ( + ( min v1 8 ) v2 ) 8 ) 16 ) ( * v3 4 ) ) ) 2 ) ) ) ( >= ( + 3 ( + ( / ( + ( + ( min v1 8 ) v2 ) 40 ) 16 ) ( * v3 4 ) ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v1 8 ) v2 ) 8 ) 16 ) ( * v3 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v4 32 ) v5 ) ( + ( * v4 32 ) v5 ) ) ) ( >= ( + ( * v4 32 ) v5 ) ( + ( * v4 32 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add",
      "add-denom-mul",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-div-mod",
      "lt-min-term-term+pos",
      "div-cancel-mul",
      "and-max-to-eqlt",
      "eq-swap",
      "min-x-x",
      "min-max-switch",
      "not-gt-to-eqlt",
      "add-fact-mul",
      "lt-x-x-sub-a",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / v0 4 ) ( + ( + ( / ( - v0 1 ) 4 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "min-mul-in-pos",
      "add-denom-mul",
      "min-add-both",
      "Eq-lt-min",
      "min-div-out-pos",
      "and-min-to-eqlt",
      "div-minus-in",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "and-eqlt-eqgt-to-0",
      "not-gt-to-eqlt",
      "lt-mul-div-cancel",
      "lt-swap-in",
      "min-x-x-plus-a-pos",
      "mul-comm",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( max v0 -5 ) -8 ) 44 ) ( - ( + ( - ( * ( max v0 -5 ) -8 ) 44 ) ( + ( * ( max v0 -5 ) 8 ) 48 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "max-to-min",
      "min-to-max",
      "sub-to-add",
      "mul-assoc",
      "eq-comm",
      "eq-swap",
      "min-mul-in-neg",
      "add-fact-mul",
      "min-add-both",
      "Eq-min-c-pos",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 33 ( * ( % v0 4 ) 9 ) ) ( - ( + 0 9 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "and-min-to-eqlt",
      "eqlt-to-not-gt",
      "min-max",
      "eq-comm",
      "and-x-1",
      "and-min-to-lt",
      "min-mul-in-pos",
      "lt-swap-out",
      "add-zero",
      "Eq-min-lt",
      "min-comm",
      "eq-mul-x-y-0",
      "Eq-lt-min",
      "sub-to-add",
      "mul-assoc",
      "mod-minus-in",
      "not-gt-to-eqlt",
      "max-to-min",
      "lt-mul-pos-cancel",
      "min-mod-const-to-mod",
      "add-comm",
      "lt-swap-in",
      "lt-max-term-term+pos",
      "min-div-out-pos",
      "lt-min-term+cpos",
      "Eq-min-c-pos",
      "or-comm",
      "lt-const-pos",
      "and-assoc",
      "div-zero",
      "mod-x-x",
      "ineq-to-eq",
      "not-eq-to-ineq",
      "add-dist-mul",
      "and-x-not-x",
      "min-div-out-neg",
      "mod-one",
      "lt-x-x-sub-a",
      "mul-zero",
      "add-to-sub",
      "min-x-x-plus-a-neg",
      "and-eqlt-eqgt-to-0",
      "min-mul-out-neg",
      "lt-min-term+neg-term",
      "lt-const-neg",
      "and-eq-eq"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 968 ) v1 ) ) ( + ( min ( * v0 32 ) 968 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 968 ) 31 ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v2 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + v0 v1 ) 2 ) 4 ) ( - ( + ( - ( * ( + v0 v1 ) 2 ) 4 ) 2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 75 ) ( - v0 75 ) ) ) ( >= ( - v0 3 ) ( - v0 3 ) ) ) ( <= ( - ( + ( + ( + ( * v1 67 ) v2 ) v3 ) 0 ) 2 ) ( - ( + ( + ( * v1 67 ) v2 ) v3 ) 11 ) ) ) ( >= ( - ( + ( + ( + ( * v1 67 ) v2 ) v3 ) 3 ) 2 ) ( - ( + ( + ( * v1 67 ) v2 ) v3 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-to-zero",
      "Eq-lt-min",
      "mul-zero",
      "min-add-both",
      "eq-swap",
      "add-assoc",
      "min-sub-both",
      "min-comm",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "Eq-min-c-pos",
      "and-lt-gt-to-0",
      "and-over-or",
      "eq-comm",
      "and-eqlt-to-min",
      "min-mul-in-neg",
      "Eq-min-lt",
      "or-x-and-x-y",
      "mod-one",
      "div-cancel-mul",
      "mul-assoc",
      "mul-max-min",
      "and-eq-eq",
      "lt-min-max-cancel",
      "sub-to-add",
      "not-not",
      "div-minus-out",
      "add-zero",
      "mod-const-add",
      "Eq-max-c-neg",
      "and-comm",
      "and-x-not-x",
      "add-fact-mul",
      "min-max-switch",
      "and-assoc",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * v0 3 ) ( - ( + ( * v0 3 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + ( + ( * v2 8 ) 0 ) v3 ) ( + ( + ( * v2 8 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 8 ) ( - ( + 8 0 ) 1 ) ) v3 ) ( + ( + ( * v2 8 ) ( - ( + 8 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / ( + v0 v1 ) 4 ) 1 ) ( - ( / ( + ( - v0 1 ) v1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "min-x-x-plus-a-neg",
      "min-div-out-pos",
      "min-sub-both",
      "min-max",
      "lt-swap-in",
      "min-mul-in-pos",
      "min-div-mul",
      "lt-mul-div-cancel",
      "mul-comm",
      "and-min-to-eqlt",
      "add-assoc",
      "min-comm",
      "sub-to-add",
      "add-comm",
      "add-denom-mul",
      "min-max-max-x",
      "min-mul-in-neg",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "and-x-not-x",
      "add-fact-mul",
      "mul-assoc",
      "min-to-max",
      "add-dist-mul",
      "mod-const-add",
      "div-minus-out",
      "add-denom-div",
      "lt-swap-out",
      "add-zero",
      "mul-max-min",
      "and-lt-to-max",
      "and-x-x",
      "lt-min-mutual-term",
      "mod-const-sub",
      "lt-min-term-term+pos"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( + ( min ( - ( + ( + ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + v3 v4 ) ) v5 ) 5 ) v6 ) v7 ) ( + ( + ( + ( + ( * v1 4 ) v2 ) v4 ) v5 ) v8 ) ) ( + ( + ( min ( - ( + ( + ( + ( * ( + v0 v1 ) 4 ) v2 ) ( + v3 v4 ) ) v5 ) 5 ) v6 ) ( - v7 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "eq-x-x",
      "min-max",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "add-zero",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 491 ) -8 ) ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * ( + ( * v0 8 ) v2 ) 4 ) v1 ) 2 ) 491 ) -8 ) ( max ( min ( * ( + ( * ( + ( * v0 8 ) v2 ) 4 ) v1 ) 2 ) 499 ) 0 ) ) ) 4 ) 43 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "lt-max-term-term+pos",
      "add-comm",
      "lt-swap-in",
      "mul-assoc",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "mul-one",
      "add-to-sub",
      "and-min-to-eqlt",
      "and-assoc",
      "sub-to-add",
      "not-gt-to-eqlt",
      "eq-comm",
      "and-min-to-lt",
      "min-to-max",
      "add-dist-mul",
      "min-add-both",
      "max-to-min",
      "lt-mul-pos-cancel",
      "div-minus-out",
      "lt-mul-div-cancel",
      "and-lt-gt-to-0",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 11 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( * v2 8 ) ( * v2 8 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( - ( + 8 ( * v2 8 ) ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 v0 ) ( + -5 v0 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v0 ) ( + ( - ( - 6 5 ) 1 ) v0 ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "min-add-both",
      "lt-to-zero",
      "and-min-to-lt",
      "add-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 70 ( * ( % v0 8 ) 9 ) ) ( - ( + 0 9 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "add-comm",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "min-mod-const-to-mod",
      "lt-swap-out",
      "min-add-both",
      "min-comm",
      "mul-assoc",
      "max-to-min",
      "eq-comm",
      "add-to-sub",
      "lt-min-max-cancel",
      "lt-mul-pos-cancel",
      "eqlt-to-not-gt",
      "and-max-to-lt",
      "max-min-switch",
      "min-max",
      "min-max-min-y",
      "Eq-min-c-neg",
      "mod-zero",
      "and-lt-to-min",
      "and-over-or",
      "div-zero",
      "eq-max-lt",
      "min-x-x-plus-a-pos",
      "min-mod-const-to-const",
      "min-max-const",
      "div-minus-in",
      "eq-mul-x-y-0",
      "not-not",
      "min-max-switch",
      "min-mul-in-pos",
      "and-min-to-lt",
      "mul-comm",
      "sub-to-add",
      "min-lt-cancel",
      "and-min-to-eqlt",
      "or-over-and",
      "and-ineq-eq",
      "Eq-min-lt",
      "Eq-lt-min",
      "min-x-x",
      "lt-mul-div-cancel",
      "mod-const-add",
      "lt-const-pos",
      "and-eq-eq",
      "Eq-min-c-pos",
      "add-zero",
      "div-minus-down"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= ( + ( * ( + ( * v3 3 ) 0 ) 8 ) 0 ) ( * v3 24 ) ) ) ( >= ( + ( * ( + ( * v3 3 ) 2 ) 8 ) 7 ) ( + ( * v3 24 ) 23 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-dist-mul",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc",
      "mul-assoc",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": { "start": "( >= ( - ( max v0 4 ) 1 ) 0 )", "end": "1" },
    "rules": [
      "min-to-max",
      "min-add-both",
      "max-to-min",
      "mul-assoc",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "min-max-const",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( - v0 5 ) 0 ) 3 ) ( + ( + v0 0 ) ( max -5 -2 ) ) ) ) ( >= ( + ( + ( + v0 3 ) 3 ) 3 ) ( + ( + v0 ( - ( + 4 0 ) 1 ) ) 3 ) ) ) ( <= ( + ( + ( * v1 8 ) v2 ) 64 ) ( + v2 ( + ( * v1 8 ) 1 ) ) ) ) ( >= ( + ( + ( * v1 8 ) v2 ) 64 ) ( + v2 ( - ( + 64 ( + ( * v1 8 ) 1 ) ) 1 ) ) ) ) ( <= ( * v3 32 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) 31 ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "min-comm",
      "lt-swap-out",
      "add-dist-mul",
      "sub-to-add",
      "add-comm",
      "eqlt-to-not-gt",
      "mod-one",
      "and-lt-to-min",
      "and-min-to-lt",
      "and-eqlt-to-min",
      "mod-minus-in",
      "eq-max-lt",
      "lt-x-x-sub-a",
      "add-zero",
      "add-denom-div",
      "and-lt-gt-to-0",
      "min-max-max-x",
      "add-assoc",
      "div-minus-down"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + -64 v0 ) 62 ) ( + ( + 0 v0 ) ( max -64 -2 ) ) ) ) ( >= ( + ( + 3 v0 ) 62 ) ( + ( + ( - ( + 63 0 ) 1 ) v0 ) 3 ) ) ) ( <= ( + ( + ( - ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * ( / v1 125 ) 2 ) v2 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 48 0 ) 1 ) ( - ( + 48 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 4 ) ( - ( - v0 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-in",
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * v1 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * v1 2 ) 4 ) ) ( + ( * ( / ( - ( + v2 v3 ) 1 ) 250 ) 64 ) 101 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( + ( * v2 63 ) v3 ) v4 ) ( + ( + ( * v2 63 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 63 ) v3 ) v4 ) ( + ( + ( * v2 63 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( > ( - -2 ( * ( + ( * v0 2 ) v1 ) 2 ) ) ( - 497 ( * ( + ( * v0 2 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-comm",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "mul-zero",
      "add-assoc",
      "gt-to-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( min ( * v0 69 ) 68 ) v1 ) ( + ( min ( * v0 69 ) 68 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 4 ) 59 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 63 ) 62 ) ( + ( min ( * v1 4 ) 59 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-assoc", "add-comm", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 -4 ) 4 ) 4 ) ( * v0 -4 ) )",
      "end": "1"
    },
    "rules": [
      "eq-swap",
      "div-cancel-mul",
      "eq-x-x",
      "mul-cancel-div",
      "mod-minus-in",
      "sub-to-add",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) ) 0 ) 7 ) ( + ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) 7 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) ) 3 ) 7 ) ( + ( + ( + ( * v0 4 ) ( + ( * v1 68 ) v2 ) ) 3 ) 7 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 250 ) 999 ) 0 )", "end": "1" },
    "rules": [
      "Eq-lt-min",
      "min-mod-const-to-const",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ( + ( + ( min ( * v1 16 ) 109 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 8 ) ( / ( + ( min ( * v2 63 ) 62 ) v3 ) 8 ) ) ) ( >= ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 70 ) 8 ) ( / ( + ( + ( min ( * v2 63 ) 62 ) v3 ) 70 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "add-zero", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 4 ) 3 ) ( - ( - ( * ( - v0 1 ) 4 ) 7 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-dist-mul",
      "add-comm",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-to-sub",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 8 ) 11 ) ( - ( - ( * ( - v0 1 ) 8 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "lt-swap-in",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "add-assoc",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ( + -2 ( + ( * ( / v1 125 ) 8 ) 1 ) ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + ( * v2 8 ) 8 ) ( + ( * ( / v1 125 ) 8 ) 1 ) ) 1 ) ) ) ) ( <= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) ) ( >= ( + ( * v3 16 ) v4 ) ( + ( * v3 16 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "min-x-x-plus-a-neg",
      "add-assoc",
      "lt-swap-in",
      "eq-x-x",
      "not-gt-to-eqlt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "add-comm", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - -6 ( max v0 0 ) ) ( - ( + ( - -6 ( max v0 0 ) ) ( + ( max v0 0 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "max-to-min",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "min-add-both",
      "add-assoc",
      "mul-comm",
      "add-dist-mul",
      "eqlt-to-not-gt",
      "and-max-to-eqlt",
      "min-to-max",
      "min-mul-in-neg",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - v0 5 ) ) 3 ) ( - v0 2 ) ) ) ( >= ( + ( + 3 ( + v0 996 ) ) 3 ) ( + v0 1002 ) ) ) ( <= ( + ( + v1 v2 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-to-zero",
      "add-to-sub",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( + -2 ( max ( - ( / v0 16 ) 5 ) ( / v0 16 ) ) ) ) ) ( >= ( + v1 3 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= ( - ( + ( + ( max ( * -2 4 ) -5 ) v2 ) 0 ) 60 ) ( - ( - ( + ( + ( * ( max -2 0 ) 4 ) 0 ) v2 ) 2 ) 63 ) ) ) ( >= ( - ( + ( + ( max ( * 2 4 ) -5 ) v2 ) 3 ) 60 ) ( - ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) ( - ( - 6 2 ) 1 ) ) 63 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "eqgt-to-not-lt",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "max-to-min",
      "lt-to-zero",
      "mul-one",
      "mul-assoc",
      "min-x-x-plus-a-pos",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 0 ) 8 ) ( - ( + 0 ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 8 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 3 ) 8 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v1 1000 ) v2 ) 125 ) ( * v3 4 ) ) ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + v0 v1 ) ( + ( + v0 v1 ) 1 ) )",
      "end": "0"
    },
    "rules": ["eqgt-to-not-lt", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 2 ) ( - ( + ( + v0 1 ) v1 ) 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 500 ) v1 ) v2 ) 4 ) ( + ( + ( * v0 500 ) v1 ) ( + v2 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "lt-swap-in",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( + v0 v1 ) 112 ) ( - ( + ( + ( + v0 v1 ) 112 ) 20 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "add-comm",
      "mul-assoc",
      "eq-swap",
      "sub-to-add",
      "mul-zero",
      "add-assoc",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 1 4 ) ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 15 ) ( + ( * ( + 7 ( + ( * v0 8 ) ( + ( * v1 16 ) v2 ) ) ) 4 ) 3 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 4 4 ) 3 ) 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "mul-comm",
      "add-dist-mul",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) 0 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) ) 3 ) ( + ( + ( * v2 4 ) ( + ( * v3 64 ) v4 ) ) 3 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 249 4 ) v0 ) 3 ) ( + ( + ( * 249 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( / v1 250 ) ( / ( + 0 v1 ) 250 ) ) ) ( >= ( / ( + v1 124 ) 250 ) ( / ( + ( - ( + 125 0 ) 1 ) v1 ) 250 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 7 ) ( + ( - ( + 8 0 ) 1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 2 ) ( - v0 2 ) ) ) ( >= ( + v1 39 ) ( + ( - ( + ( + ( - v1 v0 ) 39 ) v0 ) 1 ) 1 ) ) ) ( <= ( + 0 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( + -2 ( + ( * v2 4 ) v3 ) ) ) ) ( >= ( + 3 ( + ( + ( * v2 4 ) v3 ) 1 ) ) ( + 1 ( + ( + ( * v2 4 ) v3 ) 3 ) ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "mul-assoc",
      "lt-to-zero",
      "and-eqlt-to-min",
      "and-lt-to-max",
      "mod-x-x",
      "add-fact-mul",
      "eq-x-x",
      "Eq-max-c-pos",
      "mod-zero",
      "lt-x-x-sub-a",
      "or-over-and",
      "and-x-1",
      "or-to-and",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) v2 ) 7 ) ( - ( + ( * ( + ( * ( / v0 4 ) 2 ) v1 ) 2 ) ( + v2 1 ) ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + 0 v1 ) ( + 0 v1 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v1 ) ( + ( - ( + 125 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + ( - ( + 16 0 ) 1 ) v3 ) ( + ( - ( + 16 0 ) 1 ) v3 ) ) ) ( <= ( + ( + ( * v4 8 ) v5 ) v6 ) ( + ( + ( * v4 8 ) v5 ) v6 ) ) ) ( >= ( + ( + ( * v4 8 ) v5 ) v6 ) ( + ( + ( * v4 8 ) v5 ) v6 ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) 0 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) ) ( >= ( + ( + ( * 1 4 ) ( + ( min ( * v1 24 ) 113 ) ( * v2 8 ) ) ) 3 ) ( + ( min ( * v1 24 ) 113 ) ( + ( * v2 8 ) 7 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * v0 8 ) 1 ) ( + ( + ( * ( - v0 1 ) 8 ) 11 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "add-to-sub",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ( - ( + ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "sub-to-add",
      "add-fact-mul",
      "mul-zero",
      "eq-swap",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "mul-assoc",
      "mul-comm",
      "eq-comm",
      "add-fact-mul",
      "eq-swap",
      "sub-to-add",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 4 ) ( % ( + v0 v1 ) 4 ) ) ) ( >= ( % ( + v0 v1 ) 4 ) ( % ( + v0 v1 ) 4 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 7 ) ( + -2 ( - v2 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v2 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v2 1000 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-x-x-plus-a-pos",
      "eq-x-x",
      "not-gt-to-eqlt",
      "add-assoc",
      "sub-to-add",
      "min-comm",
      "eqgt-to-not-lt",
      "min-x-x",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 4 ) ( - ( + ( - v0 4 ) 6 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "add-to-sub",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "add-comm",
      "sub-to-add",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( max ( + ( min ( * v0 4 ) 61 ) v1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 61 ) ) ( + ( * v0 4 ) v1 ) ) 0 ) 16 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "min-to-max",
      "min-comm",
      "min-add-both",
      "min-max",
      "mul-zero",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "mul-assoc",
      "max-to-min",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( min ( * v2 8 ) 55 ) v3 ) ( + ( + ( min ( * v2 8 ) 55 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 8 ) 55 ) v3 ) 7 ) ( + ( + ( min ( * v2 8 ) 55 ) ( - ( + 8 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 3 ) v1 ) 5 ) ( - ( + ( * ( + v0 1 ) 3 ) v1 ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "add-to-sub",
      "lt-swap-in",
      "add-assoc",
      "mul-assoc",
      "mul-comm",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 0 ) ( - ( + v0 v1 ) 9 ) ) ) ( >= ( + ( + v0 v1 ) 3 ) ( + v0 v1 ) ) ) ( <= ( - ( + ( * v2 128 ) v3 ) 6 ) ( - ( + ( * v2 128 ) v3 ) 6 ) ) ) ( >= ( + ( + ( * v2 128 ) v3 ) 130 ) ( + ( + ( * v2 128 ) v3 ) 130 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "add-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v0 2 ) ) ( - v0 2 ) ) ) ( >= ( + 3 ( + v0 999 ) ) ( + v0 1002 ) ) ) ( <= ( + ( + v1 v2 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-assoc",
      "and-comm",
      "lt-swap-in",
      "lt-x-x-sub-a",
      "add-comm",
      "lt-swap-out",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) v0 ) 0 ) 8 ) ( + ( + ( + ( * 0 4 ) v0 ) 0 ) 8 ) ) ) ( >= ( + ( + ( + ( * ( / ( + ( min ( * v1 16 ) -10 ) 25 ) 4 ) 4 ) v0 ) 3 ) 8 ) ( + ( + ( + ( * ( - ( + ( / ( + ( + ( min ( * v1 16 ) -10 ) 10 ) 19 ) 4 ) 0 ) 1 ) 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) 8 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) ) ( >= ( + ( * v4 16 ) v5 ) ( + ( * v4 16 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-denom-mul",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * ( + ( * v2 7 ) 0 ) 4 ) 0 ) ( * v2 28 ) ) ) ( >= ( + ( * ( + ( * v2 7 ) 6 ) 4 ) 3 ) ( + ( * v2 28 ) 27 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-to-sub",
      "lt-swap-out",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "eqlt-to-not-gt",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * 62 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) ( + ( min ( * v0 4 ) 61 ) v1 ) ) -61 ) 77 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "mul-zero",
      "min-ass",
      "add-to-sub",
      "sub-to-add",
      "add-comm",
      "max-to-min",
      "min-comm",
      "mul-comm",
      "min-max",
      "min-add-both",
      "min-mul-in-neg",
      "add-assoc",
      "mul-assoc",
      "add-fact-mul",
      "add-dist-mul",
      "and-eqlt-to-min",
      "Eq-min-c-neg",
      "div-minus-out",
      "ineq-to-eq",
      "Eq-lt-min",
      "eq-mul-x-y-0"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) ( - ( + ( - ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 10 ) 81 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc",
      "mul-zero",
      "add-comm",
      "add-to-sub",
      "mul-comm",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) v2 ) ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) ( + v2 v3 ) ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 515 ) 8 ) ) -8 ) 8 ) 8 ) ( * ( min ( + ( * v0 32 ) ( - ( / ( + ( * v1 500 ) ( + v2 v3 ) ) 8 ) 5 ) ) ( / ( + ( + ( * v1 500 ) ( + v2 v3 ) ) 515 ) 8 ) ) -8 ) )",
      "end": "1"
    },
    "rules": ["mul-comm", "min-to-max", "mul-assoc", "div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( == ( - v0 3 ) ( - ( + ( - v0 3 ) ( + -4 5 ) ) 1 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "eq-comm", "sub-to-add", "eq-swap"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) 0 ) 7 ) ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + ( / v0 4 ) v1 ) 4 ) 3 ) 7 ) ( + ( * ( min ( / v0 4 ) ( - ( + ( / v0 4 ) v1 ) ( max v1 34 ) ) ) 4 ) 132 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "min-mul-in-neg",
      "max-to-min",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "min-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-swap-in",
      "mul-assoc",
      "add-dist-mul",
      "mul-comm",
      "add-comm",
      "lt-to-zero",
      "lt-swap-out",
      "min-mul-out-pos",
      "and-assoc",
      "and-eqlt-to-min",
      "Eq-min-c-pos",
      "min-x-x-plus-a-neg",
      "mul-one"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( max ( min v3 2 ) 0 ) ( max ( min v3 2 ) 0 ) ) ) ( >= ( max ( min v3 2 ) 0 ) ( max ( min v3 2 ) 0 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -2 4 ) -5 ) v0 ) 0 ) 3 ) ( - v0 2 ) ) ) ( >= ( + ( + ( + ( max ( * 249 4 ) -5 ) v0 ) 3 ) 3 ) ( + v0 1002 ) ) ) ( <= ( + ( + v1 v2 ) 3 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( + ( + v1 v2 ) 3 ) ( + ( + v1 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-to-sub",
      "and-comm",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add",
      "div-zero",
      "and-eqlt-gt-to-0",
      "add-denom-mul",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( + ( + ( + ( * 2 4 ) v0 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * 2 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 16 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 64 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( * 0 500 ) v5 ) 0 ) ( + 0 v5 ) ) ) ( >= ( + ( + ( * 1 500 ) v5 ) 499 ) ( + ( - ( + 1000 0 ) 1 ) v5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "add-zero",
      "add-comm",
      "lt-to-zero",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 257 0 ) 1 ) v0 ) ( + ( - ( + 257 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 4 ) 0 ) ( + ( * v2 4 ) 0 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( * v2 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 3 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * ( + 0 v2 ) 4 ) ) ) ( >= ( + ( * v2 4 ) 4 ) ( * ( + ( - ( + 2 0 ) 1 ) v2 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "add-zero",
      "mul-comm",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( * ( + ( * v2 2 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( * ( + ( * v1 8 ) ( + ( * v2 2 ) v3 ) ) 4 ) v4 ) ) ( + ( + ( * v1 32 ) ( + ( * ( + ( * v2 2 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "mul-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( * ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 15 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 19 ( - ( + 20 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + ( * v0 8 ) v1 ) 4 ) 5 ) ( + ( + ( * ( + ( * v0 8 ) ( - v1 1 ) ) 4 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-mul-pos-cancel",
      "add-dist-mul",
      "min-mul-in-neg"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( / v0 4 ) 1 ) ( - ( / ( - v0 1 ) 4 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-dist-mul",
      "min-x-x-plus-a-neg",
      "add-denom-div",
      "min-max",
      "and-min-to-lt",
      "sub-to-add",
      "add-to-sub",
      "eq-x-x",
      "min-div-mul",
      "min-comm",
      "Eq-lt-min",
      "min-mul-in-neg",
      "div-minus-out",
      "lt-mul-div-cancel",
      "add-assoc",
      "and-min-to-eqlt",
      "and-lt-to-max",
      "min-div-out-pos",
      "add-comm",
      "min-x-x",
      "mul-assoc",
      "not-gt-to-eqlt",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-denom-mul",
      "max-to-min",
      "min-max-min-y",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( + ( / ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 4 ) 2 ) ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "div-minus-in",
      "min-max-max-x",
      "Eq-min-lt",
      "Eq-lt-min",
      "max-to-min",
      "add-dist-mul",
      "min-div-in-pos",
      "mul-assoc",
      "min-max",
      "div-minus-down",
      "eq-comm",
      "eq-mul-x-y-0",
      "sub-to-add",
      "min-comm",
      "min-add-both",
      "max-min-switch",
      "lt-mul-div-cancel",
      "lt-swap-out",
      "min-to-max",
      "add-comm",
      "add-denom-div",
      "and-min-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -5 ( - v0 3 ) ) ( + -5 ( - v0 3 ) ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) ( - ( + 26 ( - v0 3 ) ) 1 ) ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 26 ( - v0 3 ) ) 1 ) ) ) ) ( <= ( + -5 v1 ) ( + -5 v1 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v1 ) ( + ( - ( - 6 5 ) 1 ) v1 ) ) ) ( <= ( + ( * v2 4 ) 0 ) ( * v2 4 ) ) ) ( >= ( + ( * v2 4 ) 3 ) ( + ( min ( * v2 4 ) 5 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "min-add-both",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 0 ) 4 ) ( - ( + 0 v0 ) 4 ) ) ) ( >= ( - ( + v0 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ) ) ( >= ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ( + ( * v2 16 ) ( + ( * v3 2 ) v4 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero", "add-comm"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 2 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 2 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) v0 ) 3 ) 2 ) ( + ( + ( + ( * ( - ( + 2 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "and-min-to-lt",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "min-x-x",
      "Eq-lt-min",
      "lt-swap-in",
      "and-lt-gt-to-0",
      "add-comm",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( - ( + ( - ( * ( max ( min v0 12 ) -3 ) 4 ) 52 ) ( + ( * ( max ( min v0 12 ) -3 ) -4 ) 56 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "max-min-switch",
      "min-mul-in-pos",
      "and-comm",
      "sub-to-add",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "and-min-to-eqlt",
      "mul-zero",
      "add-assoc",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "eq-swap",
      "mul-zero",
      "add-comm",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( > ( - 4 v0 ) ( - 253 v0 ) )", "end": "0" },
    "rules": [
      "mul-assoc",
      "gt-to-lt",
      "mul-zero",
      "mul-comm",
      "lt-swap-in",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 4 ) v1 ) 4 ) ( + 0 ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ) ( >= ( - ( + v0 v1 ) 1 ) ( + ( - ( + 4 0 ) 1 ) ( - ( + v0 v1 ) 4 ) ) ) ) ( <= ( + 0 ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) 4 ) ) ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( max ( + ( min ( * v0 33 ) 98 ) v1 ) ( + ( min ( - ( + ( * v0 33 ) v1 ) ( max ( * v0 33 ) 98 ) ) v1 ) 98 ) ) ( + ( * v0 33 ) v1 ) ) 0 ) 45 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-sub-both",
      "mul-assoc",
      "min-to-max",
      "max-to-min",
      "min-ass",
      "add-dist-mul",
      "add-to-sub",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "add-zero",
      "min-comm",
      "add-fact-mul",
      "min-add-both",
      "min-max"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * ( min ( + ( * v0 128 ) ( + ( * v1 128 ) 123 ) ) v2 ) 2 ) ( * ( + ( / v3 8 ) ( * v4 8 ) ) 2 ) ) 755 ) 256 ) 4 ) 4 ) 4 ) ( * ( max ( min ( + ( * ( min ( + ( * v0 128 ) ( + ( * v1 128 ) 123 ) ) v2 ) 2 ) ( * ( + ( / v3 8 ) ( * v4 8 ) ) 2 ) ) 755 ) 256 ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * v2 4 ) ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( * ( + ( * v4 16 ) v5 ) 2 ) ( + ( * ( + ( * v4 16 ) v5 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 16 ) v5 ) 2 ) 1 ) ( + ( * ( + ( * v4 16 ) v5 ) 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 468 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * ( / v0 2 ) 251 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * ( / v0 2 ) 251 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "lt-swap-in",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "mul-zero",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) 0 ) ( + ( + ( min ( max ( * v0 16 ) -5 ) ( + ( * v0 16 ) 8 ) ) v1 ) 3 ) ) ( + ( + ( + ( - ( * v0 16 ) 5 ) v1 ) 0 ) 3 ) ) ) ( >= ( + ( + ( * 1 4 ) 3 ) ( + ( min ( + ( * ( / ( + ( min ( * v0 16 ) -5 ) 20 ) 8 ) 8 ) ( + ( max ( * v0 16 ) -5 ) v1 ) ) ( + ( + ( * v0 16 ) v1 ) 8 ) ) 3 ) ) ( + ( + ( + ( + ( * v0 16 ) 15 ) v1 ) 3 ) 3 ) ) ) ( <= ( + ( + ( * 0 3 ) 0 ) ( - ( + ( min v2 4 ) v3 ) 6 ) ) ( - ( + ( min v2 4 ) v3 ) 6 ) ) ) ( >= ( + ( + ( * 1 3 ) 2 ) ( - ( + ( max v2 4 ) ( + ( min v2 4 ) v3 ) ) 7 ) ) ( + ( + v2 v3 ) 2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "min-add-both",
      "add-assoc",
      "min-comm",
      "lt-min-term+cpos",
      "and-comm",
      "and-eqlt-gt-to-0",
      "max-to-min",
      "lt-x-x-sub-a",
      "mod-const-sub",
      "lt-min-term+neg-term",
      "mod-minus-in"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 4 ) 246 ) v1 ) v2 ) ( + ( + ( min ( * v0 4 ) 246 ) ( + v1 1 ) ) v2 ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( - ( min ( * v0 4 ) 1999 ) 6 ) ( - ( + ( - ( min ( * v0 4 ) 1999 ) 6 ) ( + ( max v1 0 ) 11 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-pos",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "min-add-both",
      "Eq-min-c-pos",
      "max-to-min",
      "sub-to-add",
      "eq-swap",
      "eq-comm",
      "add-dist-mul",
      "add-comm",
      "mul-zero",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( / v0 250 ) 1 ) ( / ( + ( % v0 250 ) 624 ) 250 ) ) ( - ( / v0 250 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "min-mul-in-pos",
      "add-assoc",
      "eq-swap",
      "mul-assoc",
      "add-dist-mul",
      "min-x-x-plus-a-pos",
      "min-add-both",
      "not-gt-to-eqlt",
      "add-zero",
      "eqlt-to-not-gt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "add-denom-mul",
      "div-minus-in",
      "and-eqlt-eqgt-to-0",
      "and-min-to-eqlt",
      "min-div-out-pos",
      "mul-cancel-div",
      "add-to-sub",
      "lt-mul-div-cancel",
      "mul-comm",
      "Eq-lt-min",
      "mul-zero",
      "lt-swap-in",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( + v0 20 ) ( + ( min v1 4 ) v2 ) ) 15 ) ( - v0 4 ) ) ) ( >= ( + v0 5 ) ( + v0 5 ) ) ) ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v3 ) 0 ) 5 ) ( - v3 4 ) ) ) ( >= ( + ( + ( + ( max ( * 16 4 ) -9 ) v3 ) 3 ) 5 ) ( + v3 72 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "min-sub-both",
      "sub-to-add",
      "and-min-to-eqlt",
      "min-comm",
      "add-assoc",
      "max-to-min",
      "add-to-sub",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "add-comm",
      "not-gt-to-eqlt",
      "add-dist-mul",
      "div-zero",
      "and-lt-to-max",
      "mul-zero",
      "eq-x-x",
      "or-comm",
      "min-mul-in-neg",
      "lt-min-term+cpos",
      "min-x-x",
      "eq-comm",
      "and-x-x",
      "min-x-x-plus-a-pos",
      "min-max-switch"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 16 ) 1 ) )", "end": "0" },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc",
      "add-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 252 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 252 ) v1 ) ( + v2 1 ) ) 8 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "mul-comm",
      "add-fact-mul",
      "lt-swap-in",
      "add-assoc",
      "mul-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) ( - ( + ( - ( * ( min ( + ( * v0 2 ) v1 ) 249 ) 8 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "eq-swap",
      "add-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / v0 4 ) ) ( + 0 ( / v0 4 ) ) ) ) ( >= ( + 3 ( + ( / v0 4 ) 248 ) ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) 248 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v1 16 ) v2 ) ( + ( * v1 16 ) v2 ) ) ) ( >= ( + ( * v1 16 ) v2 ) ( + ( * v1 16 ) v2 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( - ( min ( * ( min ( + ( * v2 64 ) ( * ( / v1 8 ) 64 ) ) ( + ( * v3 8 ) 193 ) ) 4 ) ( + ( * v2 256 ) ( + ( * ( / v1 8 ) 256 ) 3 ) ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( + ( * v2 64 ) ( * ( / v1 8 ) 64 ) ) ( + ( * v3 8 ) 193 ) ) 4 ) ( + ( * v2 256 ) ( + ( * ( / v1 8 ) 256 ) 3 ) ) ) 20 ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "min-mul-in-pos",
      "min-x-x-plus-a-pos",
      "mul-assoc",
      "min-comm",
      "eq-x-x",
      "min-ass",
      "add-denom-div",
      "sub-to-add",
      "min-sub-both",
      "add-dist-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) ( - ( + ( * ( + ( + ( * v0 2 ) v1 ) v2 ) 4 ) 4 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) ( - ( + ( - ( * ( + ( * v0 2 ) v1 ) 8 ) 4 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * 0 4 ) v0 ) 2 ) 0 ) ( + -2 v0 ) ) ) ( >= ( + ( + ( + ( * ( - ( + 64 0 ) 1 ) 4 ) v0 ) ( - ( - 4 2 ) 1 ) ) 3 ) ( + ( - ( - 4 2 ) 1 ) ( + v0 255 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v1 ) ( + ( - ( - 4 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) 0 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) 3 ) ( + ( * ( + ( * v0 4 ) v1 ) 4 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( >= ( + ( * v2 4 ) v3 ) ( + ( * v2 4 ) v3 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) 0 ) 2 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) 1 ) 2 ) 1 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "add-dist-mul",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 6 ) ( - ( + v0 v1 ) 6 ) ) ) ( >= ( - ( + v0 v1 ) 6 ) ( - ( + v0 v1 ) 6 ) ) ) ( <= ( + ( + ( + ( * 0 4 ) ( + ( max ( * v2 8 ) -5 ) v3 ) ) 0 ) 3 ) ( + ( + 0 ( + ( max ( * v2 8 ) -5 ) v3 ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( + ( max ( * v2 8 ) -5 ) v3 ) 4 ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( + ( max ( * v2 8 ) -5 ) v3 ) 4 ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( min ( * v0 4 ) 2003 ) 4 ) ( - ( min ( * v0 4 ) 2003 ) 4 ) ) ) ( >= ( - ( max ( * ( + ( / ( + ( min v1 4 ) v2 ) 4 ) ( * ( + ( / ( + ( min ( + ( * v3 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( / ( + ( min v1 4 ) v2 ) 4 ) ) ) 62 ) 9 ) 8 ) ( * v3 8 ) ) 8 ) ) 4 ) 5 ) 5 ) ( - ( max ( * ( + ( / ( + ( min v1 4 ) v2 ) 4 ) ( * ( + ( / ( + ( min ( + ( * v3 -64 ) ( - ( / ( - ( + v1 v2 ) 1 ) 4 ) ( / ( + ( min v1 4 ) v2 ) 4 ) ) ) 62 ) 9 ) 8 ) ( * v3 8 ) ) 8 ) ) 4 ) 5 ) 5 ) ) ) ( <= ( max ( min ( * v4 4 ) 1999 ) ( + ( max ( + ( * v4 4 ) v5 ) -3 ) 4 ) ) ( max ( min ( * v4 4 ) 1999 ) ( + ( max ( + ( * v4 4 ) v5 ) -3 ) 4 ) ) ) ) ( >= ( + ( max ( + ( * v4 4 ) v5 ) -4 ) 4 ) ( + ( max ( + ( * v4 4 ) v5 ) -4 ) 4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / ( + ( min v2 4 ) v3 ) 4 ) 3 ) ( + -2 ( max ( - ( / ( + ( min v2 4 ) v3 ) 4 ) 11 ) ( - ( / ( + ( min v2 4 ) v3 ) 4 ) 1 ) ) ) ) ) ( >= ( / ( + v4 27 ) 4 ) ( + ( - ( - 11 2 ) 1 ) ( / ( - v4 5 ) 4 ) ) ) ) ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( * ( max v0 1 ) 4 ) ) v1 ) 7 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-denom-mul",
      "and-comm",
      "and-lt-to-max",
      "add-assoc",
      "mul-one",
      "lt-to-zero",
      "and-min-to-lt",
      "add-comm",
      "lt-swap-in",
      "add-to-sub",
      "eqlt-to-not-gt",
      "lt-mul-pos-cancel",
      "min-mul-in-pos",
      "mul-assoc",
      "max-to-min",
      "mod-one",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "div-minus-down",
      "eq-comm",
      "mod-const-add",
      "min-add-both",
      "or-to-and"
    ]
  },
  {
    "expression": { "start": "( > ( - 0 v0 ) ( - 248 v0 ) )", "end": "0" },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "mul-zero",
      "mul-comm",
      "add-fact-mul",
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 0 ( max v0 0 ) ) ( - ( + ( - 0 ( max v0 0 ) ) ( + ( max v0 0 ) 3 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "max-to-min",
      "lt-swap-in",
      "min-to-max",
      "add-fact-mul",
      "add-comm",
      "mul-comm",
      "lt-min-term+cpos",
      "min-comm",
      "add-assoc",
      "mul-assoc",
      "min-add-both",
      "sub-to-add",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( / v0 251 ) 0 ) ( - ( + ( max ( / v0 251 ) 0 ) ( + ( min ( / v0 251 ) 0 ) 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "and-comm",
      "min-add-both",
      "and-min-to-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 8 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-comm",
      "mul-assoc",
      "mul-zero",
      "lt-swap-out",
      "add-assoc",
      "lt-swap-in",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 3 ) ( + -2 ( - ( / ( + ( min v0 4 ) v1 ) 4 ) 1 ) ) ) ) ( >= ( + ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 7 ) ( + 8 ( - ( + ( / ( + ( min v0 4 ) v1 ) 4 ) v2 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 0 ) ( + ( + ( * 0 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 0 ) ) ) ( >= ( + ( + ( * 2 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 3 ) ( + ( + ( * 2 4 ) ( + ( / v3 4 ) ( * v4 12 ) ) ) 3 ) ) ) ( <= ( * v5 16 ) ( * v5 16 ) ) ) ( >= ( + ( * v5 16 ) 15 ) ( + ( * v5 16 ) 15 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( / ( - ( + ( min v0 8 ) v1 ) 40 ) 16 ) ) ( - ( + 0 ( / ( - ( + ( min v0 8 ) v1 ) 8 ) 16 ) ) 2 ) ) ) ( >= ( + 3 ( + ( / ( + ( + ( min v0 8 ) v1 ) 40 ) 16 ) ( * ( / v2 4 ) 4 ) ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / ( - ( + ( min v0 8 ) v1 ) 8 ) 16 ) ( * ( / v2 4 ) 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v3 ) ( + -2 v3 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v3 ) ( + ( - ( - 6 2 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 32 ) v5 ) ( + ( * v4 32 ) v5 ) ) ) ( >= ( + ( * v4 32 ) v5 ) ( + ( * v4 32 ) v5 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "mul-one",
      "lt-to-zero",
      "min-x-x",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "add-denom-mul",
      "eqgt-to-not-lt",
      "add-to-sub",
      "min-div-in-pos",
      "or-comm",
      "mod-two",
      "min-mod-const-to-const",
      "min-mul-in-neg",
      "and-assoc",
      "div-zero",
      "min-max-min-y",
      "div-minus-up",
      "lt-min-term+cpos",
      "add-assoc",
      "div-minus-out",
      "mul-max-min",
      "Eq-max-c-neg",
      "mul-assoc",
      "mod-one",
      "sub-to-add",
      "lt-const-neg",
      "lt-max-term+neg-term",
      "add-denom-div",
      "and-max-to-lt",
      "and-lt-to-max",
      "eq-swap",
      "mod-x-x",
      "and-lt-to-min",
      "Eq-max-c-pos",
      "lt-min-max-cancel",
      "Eq-min-c-pos",
      "min-max-max-x"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 8 ) ( + ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-to-sub",
      "sub-to-add",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "mul-zero",
      "add-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( * v0 4 ) v1 ) 4 ) ( % ( + ( * v0 4 ) v1 ) 4 ) ) ) ( >= ( % ( + ( * v0 4 ) v1 ) 4 ) ( % ( + ( * v0 4 ) v1 ) 4 ) ) ) ( <= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 0 ) ( + ( * ( + ( + ( * v2 4 ) v3 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * v2 4 ) v3 ) 3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-dist-mul",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ( + ( + ( min ( * v1 4 ) 121 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-comm", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + v0 1 ) 2 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-fact-mul",
      "mul-assoc",
      "mul-zero",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "mul-comm",
      "add-to-sub"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( min ( max ( * ( + v0 1 ) 4 ) -1 ) ( - ( * ( + v0 1 ) 4 ) 1 ) ) v1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-comm",
      "add-assoc",
      "lt-to-zero",
      "min-comm",
      "min-add-both",
      "and-min-to-lt",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 33 ) v1 ) v2 ) 5 ) ( - ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "add-assoc",
      "mul-comm",
      "lt-swap-in",
      "lt-swap-out",
      "mul-zero",
      "mul-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) 6 ) ( - ( + ( * ( + v0 1 ) 4 ) v1 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-out",
      "add-to-sub",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 0 ) 2 ) 2 ) ( * v0 0 ) )",
      "end": "1"
    },
    "rules": ["mul-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 4 ) 0 ) 4 ) v1 ) 0 ) ( + ( * v0 16 ) v1 ) ) ) ( >= ( + ( + ( * ( + ( * v0 4 ) 3 ) 4 ) v1 ) 3 ) ( + ( + ( * v0 16 ) 15 ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "add-zero",
      "mul-assoc",
      "eqgt-to-not-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 5 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 8 ) )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "mul-zero",
      "add-assoc",
      "mul-assoc",
      "add-fact-mul",
      "sub-to-add",
      "lt-swap-in",
      "mul-comm",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + v0 v1 ) 1 ) ( - ( + ( + v0 1 ) v1 ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "mul-comm",
      "add-comm",
      "lt-swap-in",
      "sub-to-add",
      "lt-swap-out",
      "add-assoc",
      "mul-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( min ( * v0 252 ) 251 ) ( + ( * v1 63 ) v2 ) ) v3 ) 5 ) ( - ( + ( + ( min ( * v0 252 ) 251 ) ( + ( * v1 63 ) v2 ) ) v3 ) 4 ) ) ) ( >= ( + ( + ( + ( min ( * v0 252 ) 251 ) ( + ( * v1 63 ) v2 ) ) v3 ) 5 ) ( + ( + ( + ( min ( * v0 252 ) 251 ) ( + ( * v1 63 ) v2 ) ) v3 ) 5 ) ) ) ( <= ( + ( + 0 ( - ( + ( min ( * v4 64 ) 440 ) v5 ) 9 ) ) 5 ) ( - ( + ( min ( * v4 64 ) 440 ) v5 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( min ( * v4 64 ) 440 ) v5 ) 60 ) ) 5 ) ( + ( + ( min ( * v4 64 ) 440 ) v5 ) 68 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "lt-swap-out",
      "add-assoc",
      "add-fact-mul",
      "mul-comm",
      "mul-one",
      "eq-swap",
      "Eq-lt-min",
      "mul-assoc",
      "min-to-max",
      "mul-zero",
      "not-gt-to-eqlt",
      "sub-to-add",
      "eqlt-to-not-gt",
      "div-minus-out",
      "max-to-min",
      "min-div-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 5 ) ( - ( + v0 v1 ) 4 ) ) ) ( >= ( + ( + v0 v1 ) 5 ) ( + ( + v0 v1 ) 5 ) ) ) ( <= ( + ( + ( * 0 4 ) ( - v2 11 ) ) 0 ) ( - v2 11 ) ) ) ( >= ( + ( + ( * 35 4 ) ( + v2 130 ) ) 3 ) ( + v2 131 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-to-sub",
      "add-assoc",
      "add-comm",
      "lt-x-x-sub-a",
      "div-cancel"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 0 ) 3 ) ( + ( + 0 ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( >= ( + ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) 3 ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( max ( * v1 8 ) -5 ) v2 ) ) ) 3 ) ) ) ( <= ( - v3 65 ) ( - ( + 0 v3 ) 65 ) ) ) ( >= ( - v3 3 ) ( - ( + ( - ( + 63 0 ) 1 ) v3 ) 65 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( + v0 1 ) 5 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "sub-to-add",
      "add-fact-mul",
      "add-comm",
      "mul-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( > ( - ( * ( min ( - v0 v1 ) 13 ) 32 ) 416 ) 2 )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "and-comm",
      "sub-to-add",
      "min-mul-in-pos",
      "and-min-to-lt",
      "gt-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 0 ) 4 ) ( - ( + 0 ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 4 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 3 ) 4 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min v1 4 ) v2 ) ) ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( max ( - ( max ( min ( * ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * v0 32 ) v2 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * v0 32 ) v2 ) 2 ) 499 ) 0 ) ) ) -17 ) 4 ) 72 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "mul-zero",
      "and-min-to-eqlt",
      "lt-mul-pos-cancel",
      "max-min-switch",
      "add-fact-mul",
      "min-comm",
      "mul-comm",
      "add-denom-div",
      "min-add-both",
      "mul-assoc",
      "add-assoc",
      "min-mul-in-neg",
      "and-eqlt-to-max",
      "div-minus-in",
      "add-comm",
      "eqlt-to-not-gt",
      "eq-swap",
      "min-mul-out-pos",
      "not-gt-to-eqlt",
      "lt-min-mutual-term",
      "and-over-or",
      "sub-to-add",
      "and-min-to-lt",
      "lt-swap-out",
      "add-denom-mul",
      "div-cancel",
      "min-ass",
      "min-to-max",
      "and-lt-gt-to-0",
      "mod-two",
      "mul-cancel-div",
      "lt-max-mutual-term",
      "mod-const-sub",
      "add-dist-mul",
      "lt-const-neg",
      "and-ineq-eq",
      "lt-swap-in",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v3 ) ( + ( - ( + 125 0 ) 1 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 16 ) 984 ) v1 ) ) ( + ( min ( * v0 16 ) 984 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 12 ) ) ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 15 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v2 ) ( + -2 v2 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v2 ) ( + ( - ( - 4 2 ) 1 ) v2 ) ) ) ( <= ( + ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 3 ) ( + ( max -5 -2 ) ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) 1 ) 3 ) 3 ) ( + 1 ( + ( min ( - ( + ( * v0 4 ) v1 ) ( * ( max v0 8 ) 4 ) ) v1 ) 35 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "min-ass",
      "Eq-lt-min",
      "mul-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-comm",
      "min-mul-in-pos",
      "min-x-x",
      "min-add-both",
      "add-assoc",
      "max-to-min",
      "mul-assoc",
      "add-comm",
      "eq-x-x",
      "and-eqlt-eqgt-to-0",
      "min-div-in-pos",
      "and-eq-eq",
      "min-max",
      "min-x-x-plus-a-pos",
      "and-x-not-x",
      "lt-min-mutual-term",
      "add-div-mod",
      "add-denom-mul",
      "and-ineq-eq",
      "and-x-1",
      "div-minus-in",
      "and-max-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 2 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "add-zero",
      "div-minus-out",
      "mod-minus-out",
      "min-div-out-neg",
      "and-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) ( + v1 1 ) ) v2 ) 3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / v0 4 ) ( - ( / ( - v0 1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-x-x-plus-a-neg",
      "min-ass",
      "min-max",
      "min-x-x",
      "max-to-min",
      "add-denom-div",
      "lt-mul-div-cancel",
      "Eq-lt-min",
      "add-comm",
      "min-to-max",
      "min-max-max-x",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "eq-swap",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "add-dist-mul",
      "min-div-mul",
      "min-add-both",
      "min-mul-in-pos",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "min-div-in-pos",
      "add-assoc",
      "div-minus-in",
      "and-lt-to-max",
      "div-minus-down",
      "min-div-out-neg",
      "min-comm",
      "add-denom-mul"
    ]
  },
  {
    "expression": {
      "start": "( > ( - ( min ( * ( - v0 v1 ) 256 ) 352 ) 352 ) 2 )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "and-min-to-lt",
      "min-comm",
      "gt-to-lt",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 64 ) v1 ) ) ( + ( * v0 64 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 64 ) v1 ) 60 ) ) ( + ( + ( * v0 64 ) 63 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ( + ( + ( min ( * v2 63 ) 62 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( - ( + ( * 0 4 ) v1 ) 2 ) 0 ) 5 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( - ( + ( + ( + ( * ( - ( + 33 0 ) 1 ) 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 125 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "Eq-lt-min",
      "eq-x-x",
      "add-assoc",
      "min-x-x-plus-a-neg",
      "add-comm",
      "eqgt-to-not-lt",
      "eq-swap",
      "sub-to-add",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) v1 ) 7 ) ) ) ( <= ( min ( - v2 15 ) v3 ) ( min ( - v2 15 ) v3 ) ) ) ( >= ( min ( + ( + ( * ( / ( - v2 v3 ) 16 ) 16 ) v3 ) 15 ) v2 ) ( min ( + ( + ( * ( / ( - v2 v3 ) 16 ) 16 ) v3 ) 15 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "add-zero",
      "eq-x-x",
      "min-x-x",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 500 ) v0 ) 0 ) ( + 0 v0 ) ) ) ( >= ( + ( + ( * 1 500 ) v0 ) 499 ) ( + 3 ( + v0 996 ) ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 6 4 ) 3 ) 24 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 4 ) v1 ) 4 ) ( + ( * v0 4 ) ( + v1 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-fact-mul",
      "add-to-sub",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "add-comm",
      "mul-zero",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 3 ) ( - ( + ( - v0 3 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 0 ) 3 ) ( + -2 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + ( + ( + ( max ( * v0 4 ) -5 ) v1 ) 3 ) 3 ) ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ) ( <= ( - ( * v2 8 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( * v2 8 ) 11 ) ( + ( + ( + ( * ( + ( * v2 2 ) 1 ) 4 ) 3 ) 3 ) 1 ) ) ) ( <= 0 0 ) ) ( >= ( - ( + 64 0 ) 1 ) ( - ( + 64 0 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "add-comm",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-to-sub",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "and-min-to-eqlt",
      "max-to-min",
      "lt-swap-in",
      "min-max-const",
      "div-minus-in",
      "max-min-switch",
      "eqlt-to-not-gt",
      "min-comm",
      "eq-comm",
      "mul-assoc",
      "min-div-out-pos",
      "lt-min-max-cancel",
      "and-min-to-lt",
      "lt-min-term-term+pos",
      "div-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 10 ) 504 ) ( - ( + ( / ( + v0 10 ) 504 ) ( / ( + ( % ( + v0 10 ) 504 ) 503 ) 504 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "mul-cancel-div",
      "sub-to-add",
      "min-x-x-plus-a-neg",
      "mul-comm",
      "min-div-out-pos",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-assoc",
      "min-comm",
      "add-comm",
      "min-sub-both",
      "add-denom-mul",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) v0 ) 0 ) 4 ) ( - ( + ( + ( * 0 4 ) 0 ) v0 ) 4 ) ) ) ( >= ( - ( + ( + ( * 124 4 ) v0 ) 3 ) 4 ) ( - ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) 4 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= ( - ( + 25 0 ) 1 ) ( - ( + 25 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) 1 ) ( - ( * ( + v0 1 ) 4 ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-in",
      "add-comm",
      "add-zero",
      "sub-to-add",
      "lt-mul-pos-cancel",
      "mul-comm",
      "add-assoc",
      "add-denom-div"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v1 16 ) ( + ( * v2 32 ) v3 ) ) ) 0 ) 3 ) ( - ( - ( + ( + ( * v2 32 ) v3 ) ( * v1 16 ) ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 5 4 ) ( + ( * v1 16 ) ( + ( * v2 32 ) v3 ) ) ) 3 ) 3 ) ( - ( + ( + ( + ( * v2 32 ) v3 ) ( + ( * v1 16 ) 15 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + -2 v4 ) ( + -2 v4 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v4 ) ( + ( - ( - 6 2 ) 1 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-neg",
      "sub-to-add",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "min-x-x",
      "eq-x-x",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 2 ) ( - ( + v0 1 ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "mul-zero",
      "sub-to-add",
      "add-fact-mul",
      "lt-swap-in",
      "add-comm",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * v0 4 ) 177 ) ( - ( + ( - ( * v0 4 ) 177 ) 63 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "sub-to-add",
      "eq-swap",
      "add-fact-mul",
      "add-assoc",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( min ( * v0 8 ) 55 ) v1 ) v2 ) 5 ) ( - ( + ( + ( min ( * v0 8 ) 55 ) v1 ) v2 ) 4 ) ) ) ( >= ( + ( + ( + ( min ( * v0 8 ) 55 ) v1 ) v2 ) 5 ) ( + ( + ( + ( min ( * v0 8 ) 55 ) v1 ) v2 ) 5 ) ) ) ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v3 ) 0 ) 5 ) ( - v3 4 ) ) ) ( >= ( + ( + ( + ( max ( * 125 4 ) -9 ) v3 ) 3 ) 5 ) ( + v3 508 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "and-x-1",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "and-eqlt-eqgt-to-0",
      "sub-to-add",
      "add-comm",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "mul-assoc",
      "and-ineq-eq",
      "min-mod-const-to-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / v0 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / v0 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / v0 8 ) 2 ) ( - ( - ( / ( + ( max ( + ( * ( / v0 8 ) 8 ) 1 ) v0 ) 11 ) 4 ) ( * ( / v0 8 ) 2 ) ) 1 ) ) 4 ) 3 ) ( + ( max ( + ( * ( / v0 8 ) 8 ) 4 ) v0 ) 7 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( * v1 2 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 6 ) ( + ( + ( * v1 2 ) v2 ) 6 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-div-mul",
      "add-fact-mul",
      "div-cancel-mul",
      "div-minus-out",
      "min-comm",
      "min-mul-in-neg",
      "add-comm",
      "Eq-lt-min",
      "min-div-in-pos",
      "eqlt-to-not-gt",
      "mul-assoc",
      "add-dist-mul",
      "sub-to-add",
      "max-to-min",
      "min-sub-both",
      "min-mul-out-pos",
      "min-div-out-pos",
      "min-div-in-neg",
      "min-max-max-x",
      "min-mod-const-to-const",
      "lt-max-term+neg-term",
      "and-max-to-lt",
      "and-over-or",
      "and-eqlt-eqgt-to-0",
      "add-assoc",
      "lt-to-zero",
      "not-eq-to-ineq",
      "add-denom-div",
      "min-mul-out-neg",
      "lt-x-x-sub-a",
      "eq-swap",
      "eq-comm",
      "min-div-out-neg",
      "and-ineq-eq",
      "mul-comm",
      "mul-one",
      "min-lt-cancel",
      "lt-mul-pos-cancel",
      "eq-mul-x-y-0",
      "min-max"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 258 ) ( - ( + ( - v0 258 ) 265 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-zero",
      "add-to-sub",
      "add-comm",
      "add-assoc",
      "add-fact-mul",
      "eq-swap",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + 0 v2 ) ( + 0 v2 ) ) ) ( >= ( + 1 ( + v2 123 ) ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( - 1 ( max v0 1 ) ) 2 )", "end": "0" },
    "rules": [
      "add-comm",
      "add-to-sub",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "and-comm",
      "add-fact-mul",
      "min-sub-both",
      "min-add-both",
      "max-to-min",
      "not-gt-to-eqlt",
      "and-min-to-eqlt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( min v0 500 ) v1 ) v2 ) ) 503 ) ( - ( + ( + 0 ( + ( min v0 500 ) v1 ) ) v2 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) v2 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) ) v2 ) 503 ) ) ) ( <= ( + -5 v3 ) ( + -5 v3 ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) v3 ) ( + ( - ( - 6 5 ) 1 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 8 ) v4 ) v5 ) ( + ( + ( * v3 8 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 8 ) v4 ) v5 ) ( + ( + ( * v3 8 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 2 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-in",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "add-to-sub",
      "add-fact-mul",
      "mul-zero",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( > ( - -14 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "gt-to-lt",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( + ( min ( * v1 63 ) 62 ) v2 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "and-lt-to-min",
      "add-comm",
      "and-min-to-lt",
      "lt-swap-out",
      "min-comm",
      "lt-swap-in",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( max ( min ( * ( + ( * v0 8 ) v1 ) 2 ) 491 ) -8 ) ( max ( min ( * ( + ( * v0 8 ) v1 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * v0 8 ) v1 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * v0 8 ) v1 ) 2 ) 491 ) -8 ) ) ) 4 ) 40 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "max-to-min",
      "mul-zero",
      "not-gt-to-eqlt",
      "add-comm",
      "add-denom-div",
      "lt-mul-pos-cancel",
      "eqlt-to-not-gt",
      "max-min-switch",
      "min-div-in-pos",
      "div-minus-up",
      "or-x-and-x-y",
      "Eq-min-c-neg",
      "or-to-and",
      "and-x-not-x",
      "lt-min-mutual-term",
      "mod-minus-in",
      "min-add-both",
      "mod-one",
      "Eq-max-c-neg",
      "and-eqlt-to-min",
      "mod-zero",
      "min-mul-in-neg",
      "mul-comm",
      "min-to-max",
      "lt-swap-out",
      "min-max-const",
      "and-lt-to-max",
      "and-lt-gt-to-0",
      "lt-max-term-term+pos",
      "lt-max-mutual-term",
      "min-mul-out-pos",
      "sub-to-add",
      "Eq-min-c-pos",
      "mul-one",
      "div-zero",
      "and-max-to-eqlt",
      "min-max",
      "lt-mul-div-cancel",
      "min-max-max-x",
      "add-zero",
      "eq-swap",
      "div-minus-out",
      "and-assoc",
      "min-x-x",
      "eq-x-x",
      "and-x-x",
      "lt-min-term-term+pos",
      "mod-two",
      "add-denom-mul",
      "and-lt-to-min",
      "add-fact-mul",
      "add-assoc",
      "lt-const-neg",
      "gt-to-lt",
      "and-comm",
      "div-minus-down",
      "eq-comm",
      "lt-x-x-sub-a",
      "lt-min-term+cpos",
      "min-ass",
      "min-div-mul",
      "and-max-to-lt",
      "and-min-to-eqlt",
      "mod-const-add",
      "mul-cancel-div",
      "mul-max-min",
      "div-cancel-mul",
      "lt-min-term+neg-term",
      "and-over-or",
      "add-dist-mul",
      "and-eq-eq",
      "not-not",
      "min-max-switch",
      "min-div-out-pos",
      "eq-max-lt",
      "not-eq-to-ineq",
      "lt-min-max-cancel",
      "mod-x-x",
      "mul-assoc",
      "and-min-to-lt",
      "and-x-1",
      "min-lt-cancel",
      "and-eqlt-gt-to-0",
      "and-eqlt-to-max",
      "and-eqlt-eqgt-to-0",
      "min-x-x-plus-a-neg",
      "or-comm",
      "ineq-to-eq"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( / ( + ( + ( max ( * v0 16 ) 9 ) ( * v0 -16 ) ) ( - ( + ( min ( * v1 32 ) 93 ) ( + v2 ( min ( * v3 125 ) ( - v4 125 ) ) ) ) 25 ) ) 4 ) -4 ) 4 ) 4 ) ( * ( / ( + ( + ( max ( * v0 16 ) 9 ) ( * v0 -16 ) ) ( - ( + ( min ( * v1 32 ) 93 ) ( + v2 ( min ( * v3 125 ) ( - v4 125 ) ) ) ) 25 ) ) 4 ) -4 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "mul-assoc",
      "mod-minus-in",
      "div-cancel-mul",
      "eq-x-x",
      "eq-swap",
      "sub-to-add",
      "mul-cancel-div",
      "mod-const-sub",
      "and-lt-to-min",
      "not-not"
    ]
  },
  {
    "expression": { "start": "( == ( - 1 ( max v0 1 ) ) 2 )", "end": "0" },
    "rules": [
      "Eq-min-c-pos",
      "add-assoc",
      "mul-one",
      "max-to-min",
      "min-sub-both",
      "mul-comm",
      "sub-to-add",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "eq-swap",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 125 ) v1 ) ( + ( * v2 63 ) v3 ) ) 3 ) ( - ( + ( + ( * v2 63 ) ( + v3 1 ) ) ( + ( * v0 125 ) v1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "sub-to-add",
      "lt-swap-in",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "lt-swap-out",
      "and-assoc",
      "lt-min-mutual-term",
      "min-comm",
      "and-comm",
      "mod-two",
      "and-eq-eq",
      "min-div-out-neg",
      "add-assoc",
      "div-cancel-mul",
      "min-max-max-x",
      "and-max-to-lt",
      "and-lt-to-max",
      "min-mod-const-to-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( >= ( % ( + v0 v1 ) 8 ) ( % ( + v0 v1 ) 8 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v2 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v2 2 ) ( - ( + 2 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-denom-mul",
      "lt-swap-in",
      "and-comm",
      "mul-comm",
      "sub-to-add",
      "add-comm",
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-denom-div",
      "lt-mul-pos-cancel",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min v0 -126 ) ( / ( + ( min v1 1000 ) v2 ) 8 ) ) 4 ) ) ( - ( max ( / ( + ( min v1 1000 ) v2 ) 8 ) ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) ( max v0 -124 ) ) ) 130 ) ) ) ( >= ( + 3 ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) 4 ) ) ( - ( + ( / ( + ( min v1 1000 ) v2 ) 8 ) v0 ) 1 ) ) ) ( <= ( - v3 5 ) ( + ( + ( + -20 v3 ) 0 ) 15 ) ) ) ( >= ( + v3 15 ) ( + ( + ( + 0 v3 ) 3 ) 15 ) ) ) ( <= ( * v4 9 ) ( * v4 9 ) ) ) ( >= ( + ( * v4 9 ) 8 ) ( + ( * v4 9 ) 8 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "add-assoc",
      "lt-x-x-sub-a",
      "and-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( / ( + ( min v0 500 ) v1 ) 4 ) ) 0 ) 125 ) ( - ( + 0 ( / ( + ( min v0 500 ) v1 ) 4 ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * ( / ( + v2 125 ) 4 ) 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * ( / ( + v2 125 ) 4 ) 4 ) ) ) 125 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * v4 2 ) 0 ) ( + ( * v4 2 ) 0 ) ) ) ( >= ( + ( * v4 2 ) ( - ( + 2 0 ) 1 ) ) ( + ( * v4 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 32 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 4 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 32 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 3 ) v4 ) v5 ) ( + ( + ( * v3 3 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 3 ) v4 ) v5 ) ( + ( + ( * v3 3 ) v4 ) v5 ) ) ) ( <= v6 v6 ) ) ( >= v6 v6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "mul-assoc",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-dist-mul",
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 10 ) ( - ( + ( - v0 10 ) ( + -16 17 ) ) 1 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "add-assoc", "sub-to-add", "add-comm"]
  },
  {
    "expression": {
      "start": "( >= ( / ( + ( + v0 v1 ) v2 ) 8 ) ( + ( + ( / ( + ( + ( - v0 1 ) v1 ) v2 ) 8 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-x-x-plus-a-pos",
      "div-minus-down",
      "min-to-max",
      "mul-assoc",
      "mul-one",
      "lt-x-x-sub-a",
      "min-ass",
      "min-x-x",
      "min-mul-in-neg",
      "mul-comm",
      "min-mul-out-neg",
      "lt-swap-in",
      "min-div-out-pos",
      "Eq-lt-min",
      "add-denom-mul",
      "min-max",
      "min-comm",
      "not-gt-to-eqlt",
      "lt-swap-out",
      "div-minus-out",
      "lt-mul-div-cancel",
      "add-comm",
      "min-div-mul",
      "min-max-max-x",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 16 ) 4 ) 0 )", "end": "1" },
    "rules": [
      "Eq-lt-min",
      "min-max-const",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "lt-swap-in"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 16 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( min ( * v2 4 ) 133 ) 0 ) ( + ( min ( * v2 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 133 ) 3 ) ( + ( min ( * v2 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min ( * v1 4 ) 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "lt-swap-in",
      "lt-swap-out",
      "min-sub-both",
      "and-min-to-lt",
      "and-lt-to-min",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 9 ( * ( % v0 3 ) 4 ) ) ( - ( + 0 4 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "not-gt-to-eqlt",
      "mul-comm",
      "mul-assoc",
      "and-min-to-lt",
      "lt-swap-out",
      "min-mul-in-neg",
      "min-comm",
      "Eq-lt-min",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "max-to-min",
      "min-mod-const-to-mod",
      "lt-mul-pos-cancel",
      "min-max",
      "and-min-to-eqlt",
      "eq-max-lt",
      "and-eqlt-gt-to-0",
      "and-lt-gt-to-0",
      "div-cancel",
      "ineq-to-eq",
      "min-max-const",
      "mod-const-sub",
      "add-dist-mul",
      "and-x-1",
      "Eq-min-c-pos",
      "mul-zero",
      "lt-max-mutual-term",
      "and-max-to-eqlt",
      "and-eqlt-to-max",
      "and-lt-to-max",
      "eq-comm",
      "min-x-x",
      "min-max-max-x",
      "min-div-mul",
      "and-ineq-eq",
      "eq-x-x",
      "lt-mul-div-cancel",
      "add-fact-mul",
      "lt-to-zero",
      "gt-to-lt",
      "add-to-sub",
      "and-assoc",
      "and-max-to-lt",
      "and-eqlt-eqgt-to-0",
      "sub-to-add",
      "mod-minus-out",
      "lt-swap-in",
      "add-denom-div"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * v2 2 ) v3 ) ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) v1 ) 4 ) ( + ( * v2 2 ) ( + v3 1 ) ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 16 ) 15 ) ( * ( + ( * v0 2 ) ( + v1 1 ) ) 16 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-comm",
      "lt-x-x-sub-a",
      "add-to-sub",
      "add-dist-mul",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 0 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) 0 ) v2 ) ) ) ( >= ( + ( + ( + ( + ( * v0 4 ) v1 ) v2 ) 3 ) 3 ) ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) v2 ) ) ) ( <= ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ) ) ( >= ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ( % ( + ( + ( + ( * ( + ( * v3 2 ) v4 ) 4 ) v5 ) v6 ) 1 ) 8 ) ) ) ( <= ( + ( * v7 32 ) v8 ) ( + ( * v7 32 ) v8 ) ) ) ( >= ( + ( * v7 32 ) v8 ) ( + ( * v7 32 ) v8 ) ) )",
      "end": "0"
    },
    "rules": ["add-zero", "lt-swap-out", "eqlt-to-not-gt", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( == ( / ( + v0 v1 ) 4 ) ( - ( + ( / ( + v0 v1 ) 4 ) 33 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "mul-zero",
      "eq-swap",
      "mul-assoc",
      "mul-comm",
      "add-comm",
      "eq-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - 1 ( max v0 1 ) ) ( max v0 1 ) ) ( - 1 ( max v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "mul-one",
      "max-to-min",
      "eqlt-to-not-gt",
      "sub-to-add",
      "mul-comm",
      "mul-assoc",
      "min-add-both",
      "min-sub-both",
      "lt-min-term+cpos",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( + ( * 0 4 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "add-fact-mul",
      "add-assoc",
      "eq-swap",
      "mul-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 151 ) v1 ) 10 ) ( + -2 ( - ( + ( * v0 151 ) v1 ) 8 ) ) ) ) ( >= ( + ( + ( min ( * v0 151 ) 152 ) v1 ) 143 ) ( + ( - ( - 4 2 ) 1 ) ( + ( min ( - ( + ( * v0 151 ) v1 ) ( max ( * v0 151 ) 152 ) ) v1 ) 294 ) ) ) ) ( <= ( + 0 ( - v2 10 ) ) ( + -2 ( - v2 8 ) ) ) ) ( >= ( + 3 ( + v2 129 ) ) ( + ( - ( - 4 2 ) 1 ) ( + v2 131 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-assoc",
      "min-mul-in-pos",
      "and-min-to-lt",
      "add-comm",
      "eqgt-to-not-lt",
      "max-to-min",
      "min-x-x",
      "Eq-lt-min",
      "lt-to-zero",
      "mul-assoc",
      "sub-to-add",
      "min-add-both",
      "eq-x-x",
      "or-x-and-x-y",
      "and-eqlt-to-min",
      "and-eqlt-gt-to-0",
      "and-max-to-eqlt",
      "lt-min-mutual-term",
      "Eq-min-lt",
      "lt-max-mutual-term",
      "and-lt-to-min",
      "eq-swap",
      "and-comm",
      "mod-x-x",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 32 ) 93 ) ( + ( * v2 8 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ) ) ( <= ( / v3 8 ) ( / v3 8 ) ) ) ( >= ( / ( + v3 132 ) 8 ) ( / ( + v3 132 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ) ) ( >= ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ( + ( + ( * v3 91 ) ( + ( min ( * v4 46 ) 45 ) ( + ( min ( * v5 16 ) 30 ) v6 ) ) ) v7 ) ) ) ( <= v8 v8 ) ) ( >= v8 v8 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 8 ) 118 ) ( + ( * v1 2 ) v2 ) ) v3 ) 1 ) ( - ( + ( + ( min ( * v0 8 ) 118 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) v3 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-to-sub",
      "lt-swap-out",
      "mul-comm",
      "add-fact-mul",
      "sub-to-add",
      "mul-assoc",
      "add-comm",
      "add-assoc",
      "and-ineq-eq",
      "and-x-x",
      "eq-swap",
      "and-lt-to-min"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) 4 ) 4 ) ( * ( min ( * ( min ( + ( * v2 16 ) ( * ( * ( / v1 250 ) 4 ) 16 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 64 ) 105 ) ) 4 ) ( + ( * v2 64 ) ( + ( * ( * ( / v1 250 ) 4 ) 64 ) 3 ) ) ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-zero",
      "min-sub-both",
      "eq-x-x",
      "add-dist-mul",
      "sub-to-add",
      "div-cancel-mul",
      "add-fact-mul",
      "min-mul-in-pos",
      "min-comm",
      "add-zero",
      "mul-comm",
      "add-comm",
      "min-ass",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 220 ) ( * v1 4 ) ) v2 ) 3 ) ) ) ( <= ( / v3 4 ) ( / v3 4 ) ) ) ( >= ( + ( / v3 4 ) 32 ) ( + ( / v3 4 ) 32 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - ( + ( - ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) 16 ) ( - 18 ( max ( min ( - ( + ( * v0 8 ) v1 ) ( min ( - ( - ( + v2 v1 ) ( * v3 126 ) ) ( * v4 32 ) ) ( + v1 22 ) ) ) 14 ) 7 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "Eq-min-c-pos",
      "mul-zero",
      "min-add-both",
      "eq-swap",
      "eq-comm",
      "add-fact-mul",
      "mul-comm",
      "mul-assoc",
      "max-min-switch"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ) ) ( >= ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ( + ( + ( min ( * v0 2 ) 255 ) v1 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= ( + ( min ( * v5 4 ) 14 ) 0 ) ( + ( min ( * v5 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 14 ) 3 ) ( + ( min ( * v5 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "lt-to-zero", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 2 ) v0 ) 2 ) 0 ) ( * v0 2 ) ) ) ( >= ( + ( * ( + ( * 7 2 ) v0 ) 2 ) 3 ) ( + ( * v0 2 ) 31 ) ) ) ( <= ( - ( + v1 v2 ) 2 ) ( - ( + v1 v2 ) 2 ) ) ) ( >= ( - ( + v1 v2 ) 2 ) ( - ( + v1 v2 ) 2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "mul-comm",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "sub-to-add",
      "lt-swap-in",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 15 ) 1008 ) ( - ( + ( / ( + v0 15 ) 1008 ) ( / ( + ( % ( + v0 15 ) 1008 ) 1007 ) 1008 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "not-gt-to-eqlt",
      "sub-to-add",
      "mul-cancel-div",
      "min-sub-both",
      "Eq-lt-min",
      "min-x-x-plus-a-neg",
      "min-div-out-pos",
      "add-assoc",
      "min-comm",
      "mul-comm",
      "eqgt-to-not-lt",
      "add-comm",
      "add-denom-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( + ( + ( * 0 4 ) ( * v3 8 ) ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v3 2 ) ( max -2 0 ) ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( * 3 4 ) ( + ( * v3 8 ) 9 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v3 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "eqgt-to-not-lt",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "min-comm",
      "Eq-lt-min",
      "add-comm",
      "min-x-x",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( + ( * v0 8 ) v1 ) 4 ) 1 ) ( - ( - ( * ( + ( * v0 8 ) ( - v1 1 ) ) 4 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "add-to-sub",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "eqlt-to-not-gt",
      "mul-assoc",
      "add-fact-mul",
      "mod-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( max -1 0 ) 16 ) ( max -5 0 ) ) ( + ( * v0 64 ) v1 ) ) ( + ( + ( * ( + ( * v0 16 ) 0 ) 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * 1 16 ) 15 ) ( + ( + ( * v0 64 ) v1 ) 32 ) ) ( + ( + ( * ( + ( * v0 16 ) ( - ( + 16 0 ) 1 ) ) 4 ) v1 ) 3 ) ) ) ( <= ( max ( - ( + ( min v2 4 ) v3 ) 9 ) ( - ( + ( min v2 4 ) v3 ) 4 ) ) ( - ( + ( min v2 4 ) v3 ) 4 ) ) ) ( >= ( - ( + v2 v3 ) 1 ) ( - ( + v2 v3 ) 1 ) ) ) ( <= ( + ( min ( * 0 4 ) 21 ) 0 ) 0 ) ) ( >= ( + ( min ( * 6 4 ) 21 ) 3 ) 24 ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "min-comm",
      "min-to-max",
      "add-comm",
      "add-dist-mul",
      "sub-to-add",
      "max-to-min",
      "mul-assoc",
      "add-assoc",
      "div-cancel",
      "mul-one",
      "eq-mul-x-y-0",
      "and-assoc",
      "and-eq-eq",
      "Eq-min-c-pos",
      "lt-to-zero",
      "div-minus-down",
      "and-lt-gt-to-0",
      "min-mod-const-to-mod",
      "eq-x-x",
      "mod-const-add",
      "min-sub-both",
      "div-cancel-mul",
      "lt-min-max-cancel",
      "min-max-min-y",
      "add-denom-div",
      "lt-const-neg",
      "mul-comm",
      "and-over-or",
      "lt-const-pos",
      "eqgt-to-not-lt",
      "and-eqlt-to-min",
      "min-max",
      "add-div-mod",
      "eqlt-to-not-gt",
      "gt-to-lt",
      "lt-mul-pos-cancel"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -1 4 ) -3 ) v0 ) 0 ) 1 ) ( + -2 v0 ) ) ) ( >= ( + ( + ( + ( max ( * 1 4 ) -3 ) v0 ) 3 ) 1 ) ( + 1 ( + v0 7 ) ) ) ) ( <= ( + ( + ( max ( * v1 2 ) -3 ) v2 ) 1 ) ( + -2 ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 2 ) ( + 1 ( + ( + ( * v1 2 ) v2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "mul-assoc",
      "lt-swap-in",
      "max-to-min",
      "add-comm",
      "mul-zero",
      "and-comm",
      "lt-swap-out",
      "add-fact-mul",
      "sub-to-add",
      "add-assoc",
      "and-min-to-eqlt",
      "mul-comm",
      "eqlt-to-not-gt",
      "lt-mul-pos-cancel",
      "lt-min-term+neg-term",
      "and-x-1",
      "and-lt-gt-to-0",
      "not-gt-to-eqlt",
      "not-not",
      "div-zero",
      "min-mul-out-neg"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -2 4 ) -5 ) v0 ) 0 ) 3 ) ( - v0 2 ) ) ) ( >= ( + ( + ( + ( max ( * 7 4 ) -5 ) v0 ) 3 ) 3 ) ( + v0 34 ) ) ) ( <= ( + ( + ( + ( * v1 250 ) v2 ) v3 ) 3 ) ( - ( + ( + ( * v1 250 ) v2 ) v3 ) 2 ) ) ) ( >= ( + ( + ( + ( * v1 250 ) v2 ) v3 ) 3 ) ( + ( + ( + ( * v1 250 ) v2 ) v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-swap-in",
      "sub-to-add",
      "and-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "mod-two"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( / ( + ( - v0 v1 ) 1 ) 4 ) 0 ) ( - ( + ( max ( / ( + ( - v0 v1 ) 1 ) 4 ) 0 ) ( + ( - ( max ( / ( - v0 v1 ) 4 ) -1 ) ( max ( / ( + ( - v0 v1 ) 1 ) 4 ) 0 ) ) 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "and-lt-to-min",
      "min-x-x-plus-a-neg",
      "not-gt-to-eqlt",
      "max-to-min",
      "add-comm",
      "add-dist-mul",
      "min-comm",
      "lt-swap-out",
      "add-zero",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "min-div-out-pos",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "lt-min-term+cpos",
      "lt-min-mutual-term",
      "and-eqlt-eqgt-to-0",
      "add-assoc",
      "div-cancel-mul",
      "min-mul-in-pos",
      "min-mul-out-neg",
      "lt-min-term-term+pos",
      "and-assoc",
      "and-eqlt-gt-to-0",
      "add-denom-mul",
      "min-ass",
      "div-minus-up",
      "lt-max-term+neg-term",
      "min-max-switch",
      "and-lt-to-max",
      "and-lt-gt-to-0",
      "lt-mul-div-cancel",
      "mul-max-min",
      "div-minus-in",
      "add-fact-mul",
      "min-x-x-plus-a-pos",
      "eq-mul-x-y-0",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( - -165 ( % ( + v0 v1 ) 8 ) ) 8 ) ( - ( + ( / ( - -165 ( % ( + v0 v1 ) 8 ) ) 8 ) ( / ( + ( % ( + v0 v1 ) 8 ) 180 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "min-mod-const-to-const",
      "min-max",
      "lt-min-term+cpos",
      "min-comm",
      "sub-to-add",
      "min-sub-both",
      "min-ass",
      "min-mul-in-pos",
      "div-minus-down",
      "add-denom-mul",
      "eqgt-to-not-lt",
      "min-div-out-neg",
      "not-gt-to-eqlt",
      "add-dist-mul",
      "lt-swap-out",
      "max-to-min",
      "mul-assoc",
      "div-minus-in",
      "lt-mul-div-cancel",
      "min-div-mul",
      "min-mul-out-neg",
      "add-fact-mul",
      "lt-swap-in",
      "Eq-lt-min",
      "mul-zero",
      "add-to-sub",
      "mul-comm",
      "min-max-max-x",
      "min-to-max"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 20 ) ( + v0 20 ) ) ) ( <= ( + ( + ( + ( + ( min ( * v1 34 ) 33 ) v2 ) v3 ) 0 ) 5 ) ( - ( + ( + ( min ( * v1 34 ) 33 ) v2 ) v3 ) 4 ) ) ) ( >= ( + ( + ( + ( + ( min ( * v1 34 ) 33 ) v2 ) v3 ) 3 ) 5 ) ( + ( + ( + ( min ( * v1 34 ) 33 ) v2 ) v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-one",
      "mul-zero",
      "mul-comm",
      "lt-to-zero",
      "sub-to-add",
      "add-assoc",
      "mul-assoc",
      "min-sub-both",
      "and-x-1",
      "lt-swap-out",
      "min-x-x-plus-a-pos",
      "mod-minus-in",
      "lt-max-mutual-term",
      "lt-x-x-sub-a",
      "max-min-switch",
      "and-min-to-eqlt",
      "mod-const-sub",
      "and-eq-eq",
      "add-denom-mul",
      "mul-max-min",
      "min-mul-in-pos",
      "add-comm",
      "or-x-and-x-y",
      "eqlt-to-not-gt",
      "Eq-min-lt",
      "lt-mul-div-cancel",
      "div-cancel",
      "mod-one",
      "add-fact-mul",
      "min-comm",
      "or-comm",
      "min-mod-const-to-mod",
      "lt-max-term+neg-term",
      "add-to-sub",
      "eqgt-to-not-lt",
      "min-mul-out-pos",
      "div-minus-in",
      "and-x-not-x",
      "eq-mul-x-y-0",
      "or-to-and",
      "min-mul-out-neg",
      "and-lt-to-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 v1 ) ( + ( + v0 1 ) v1 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 64 ) 64 ) 64 ) ( * v0 64 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 68 ) v1 ) v2 ) ( + ( + ( * v0 68 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 171 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 177 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "lt-swap-in",
      "add-assoc",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) 7 ) ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( < v0 ( + v0 1 ) )", "end": "1" },
    "rules": ["lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 16 ) ( - ( + ( - ( + v0 v1 ) 16 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "sub-to-add",
      "add-to-sub",
      "add-assoc",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "eq-swap",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( >= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 0 ) ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) ) ) ( >= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 3 ) ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) 3 ) v5 ) ) ) ( <= ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ) ) ( >= ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 4 ) v1 ) 5 ) ( - ( + ( * v0 4 ) ( + v1 1 ) ) 17 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "add-to-sub",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * v2 250 ) ) 4 ) 1 ) ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * ( + v2 1 ) 250 ) ) 4 ) 1000 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-zero",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v0 ) ( + ( - ( + 125 0 ) 1 ) v0 ) ) ) ( <= ( + v1 0 ) ( + 0 v1 ) ) ) ( >= ( + v1 3 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( min ( * v2 32 ) 93 ) v3 ) ( + ( + ( min ( * v2 32 ) 93 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 32 ) 93 ) v3 ) 31 ) ( + ( + ( min ( * v2 32 ) 93 ) ( - ( + 32 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "eq-comm",
      "eq-swap",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + v0 v1 ) 2 ) 0 ) ( + ( * ( + v0 v1 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-x-x",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min v0 5 ) 10 ) ( - ( + ( - ( min v0 5 ) 10 ) ( - 11 ( min v0 5 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "add-fact-mul",
      "min-add-both",
      "Eq-min-c-pos",
      "add-comm",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "add-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * v0 4 ) 7 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v1 ) 0 ) 7 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v1 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 1000 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-neg",
      "not-gt-to-eqlt",
      "sub-to-add",
      "min-x-x",
      "lt-swap-in",
      "add-comm",
      "eqgt-to-not-lt",
      "eq-x-x",
      "Eq-lt-min",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 10 ) ( - ( + ( - v0 10 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "mul-zero",
      "add-assoc",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "eq-swap",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + v0 1 ) 8 ) 5 ) ) ( * ( + v0 1 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-dist-mul",
      "and-lt-to-min",
      "and-min-to-lt",
      "lt-swap-out",
      "min-comm",
      "min-sub-both",
      "lt-swap-in",
      "add-assoc",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 31 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 15 ) ( + ( * ( + 127 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 3 ) ) ) ( <= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( >= ( + ( * ( + v2 v3 ) 4 ) 3 ) ( + ( * ( + v2 v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) 4 ) 4 ) ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-assoc",
      "min-mul-in-pos",
      "min-x-x-plus-a-pos",
      "div-cancel-mul",
      "mul-assoc",
      "add-fact-mul",
      "min-ass",
      "min-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 8 ) ( - ( * ( + 0 v0 ) 8 ) 8 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) 6 ) 4 ) 3 ) 8 ) ( - ( * ( + ( - ( + 4 0 ) 1 ) v0 ) 8 ) 8 ) ) ) ( <= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( >= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-dist-mul",
      "mul-zero",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "sub-to-add",
      "mul-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "mul-assoc",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 4 ) 0 ) ( * v3 4 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * ( min v3 11 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-lt",
      "eq-x-x",
      "min-add-both",
      "add-zero",
      "lt-to-zero",
      "min-x-x",
      "min-mul-in-pos",
      "Eq-lt-min",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 63 ) v1 ) v2 ) ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max v0 1 ) -4 ) 4 ) 4 ) ( * ( max v0 1 ) -4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "max-to-min", "eq-x-x", "mul-comm", "mul-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) ( * ( - v1 ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) ) 2 ) ) 4 ) 3 ) ( + ( * v1 8 ) 3 ) ) ) ( <= ( - ( * v2 8 ) 5 ) ( - ( * v2 8 ) 5 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( + ( * v2 8 ) 7 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-assoc",
      "add-zero",
      "mul-comm",
      "add-to-sub",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "mul-zero",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + v0 v1 ) 8 ) 67 ) ( - ( + ( - ( * ( + v0 v1 ) 8 ) 67 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( + v0 4 ) v1 ) 3 ) ( + -3 v0 ) ) ) ( >= ( + v0 1 ) ( + ( - ( - 5 3 ) 1 ) v0 ) ) ) ( <= ( + ( - ( + ( * 0 4 ) v2 ) 3 ) 0 ) ( + -3 v2 ) ) ) ( >= ( + ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) v2 ) ( - ( - 5 3 ) 1 ) ) 3 ) ( + ( - ( - 5 3 ) 1 ) ( + v2 15 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "eq-swap",
      "min-max-const",
      "min-comm",
      "Eq-lt-min",
      "add-to-sub",
      "add-comm",
      "add-dist-mul",
      "Eq-min-c-pos",
      "min-sub-both",
      "add-assoc",
      "sub-to-add",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( * v0 4 ) 5 ) ( - ( * v0 4 ) 5 ) ) ) ( >= ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( - ( * v1 32 ) 20 ) ) 0 ) ( - ( * ( - ( * v1 8 ) 3 ) 4 ) 5 ) ) ) ( >= ( + ( + ( * 168 4 ) ( + ( * v1 32 ) 661 ) ) 3 ) ( + ( * ( + ( * v1 8 ) 165 ) 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "lt-swap-out",
      "mul-assoc",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-denom-div"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * ( % v2 16 ) 4 ) 0 ) ( + ( * ( % v2 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v2 16 ) 4 ) 3 ) ( + ( * ( % v2 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( * v4 9 ) ( + ( * v4 9 ) 0 ) ) ) ( >= ( + ( * v4 9 ) 8 ) ( + ( * v4 9 ) ( - ( + 9 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "sub-to-add",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 4 ) v1 ) 4 ) ( + 0 ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ) ( >= ( - ( + v0 v1 ) 1 ) ( + ( - ( + 4 0 ) 1 ) ( - ( + v0 v1 ) 4 ) ) ) ) ( <= ( + 0 ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) 4 ) ) ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 220 ) v1 ) ) ( + ( min ( * v0 32 ) 220 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 220 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ) ) ( >= ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( + ( * v1 16 ) v2 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "lt-swap-in",
      "sub-to-add",
      "and-min-to-lt",
      "min-sub-both",
      "lt-swap-out",
      "add-comm",
      "and-lt-to-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) 0 ) ( / v0 4 ) ) 2 ) ( - ( + 0 ( / v0 4 ) ) 2 ) ) ) ( >= ( - ( + ( + ( * 32 4 ) 3 ) ( + ( / v0 4 ) 132 ) ) 2 ) ( - ( + 3 ( + ( / v0 4 ) 260 ) ) 2 ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 2 ( + ( / v1 4 ) 30 ) ) ( - ( + 33 ( / v1 4 ) ) 1 ) ) ) ( <= ( * v2 16 ) ( + ( * v2 16 ) 0 ) ) ) ( >= ( + ( * v2 16 ) 15 ) ( + ( * v2 16 ) ( - ( + 16 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( >= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 0 ) ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 3 ) ( - ( * ( + v0 1 ) 8 ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "add-dist-mul",
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "mul-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 5 ) ( - ( - v0 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - ( + ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - 9 ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "min-sub-both",
      "sub-to-add",
      "min-add-both",
      "mul-one",
      "add-comm",
      "max-min-switch",
      "add-assoc",
      "and-comm",
      "and-min-to-eqlt",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min v0 12 ) 4 ) 52 ) ( - ( + ( - ( * ( min v0 12 ) 4 ) 52 ) ( + ( * ( min v0 12 ) -4 ) 56 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-mul-in-pos",
      "add-assoc",
      "eq-comm",
      "eq-swap",
      "mul-zero",
      "Eq-min-c-pos",
      "sub-to-add",
      "add-fact-mul",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + v0 v1 ) 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + ( + v0 1 ) v1 ) 8 ) 5 ) ) ( * ( + ( + v0 1 ) v1 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-mul-pos-cancel",
      "lt-swap-in",
      "lt-to-zero",
      "lt-swap-out",
      "sub-to-add",
      "mul-comm",
      "add-assoc",
      "and-comm",
      "and-min-to-lt",
      "add-comm",
      "add-denom-div",
      "and-lt-to-min",
      "div-minus-up",
      "and-over-or"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "eq-comm",
      "add-zero",
      "mul-assoc",
      "Eq-min-c-pos",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "add-to-sub",
      "min-add-both",
      "eq-swap",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 16 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + ( / v0 16 ) 66 ) ( + ( + 3 ( + ( / v0 16 ) 60 ) ) 3 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + -2 ( + ( * v1 8 ) 1 ) ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + 3 ( + ( * v1 8 ) 8 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "sub-to-add",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-swap-in",
      "add-comm",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 5 ) ( + -5 v0 ) ) ) ( >= ( + v0 1000 ) ( + 1 ( + v0 999 ) ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 5 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-lt-gt-to-0",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "Eq-lt-min",
      "add-assoc",
      "min-x-x",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 32 ) ) ( - 63 ( * v0 32 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "gt-to-lt",
      "add-fact-mul",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( min ( + ( max ( * v1 8 ) ( + ( + v0 1 ) 4 ) ) 1 ) ( + v0 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "min-sub-both",
      "and-min-to-lt",
      "min-comm",
      "sub-to-add",
      "add-comm",
      "lt-swap-in",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 6 ) ( - ( + ( + v0 1 ) v1 ) 6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 2 ) ( + ( * v0 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( / ( - v1 v0 ) 3 ) 3 ) v0 ) 2 ) 6 ) ( + ( * ( + ( + ( * ( / ( - v1 v0 ) 3 ) 3 ) v0 ) 2 ) 2 ) 2 ) ) ) ( <= ( - ( max ( * v2 2 ) ( + ( * ( + v3 v2 ) 2 ) 1 ) ) 10 ) ( - ( + ( * ( + v3 v2 ) 2 ) 0 ) 10 ) ) ) ( >= ( - ( * ( + v3 v2 ) 2 ) 8 ) ( - ( + ( * ( + v3 v2 ) 2 ) 2 ) 10 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * 4 4 ) 3 ) ( + ( * 4 4 ) 3 ) ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "add-comm",
      "add-to-sub",
      "min-comm",
      "min-sub-both",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "add-dist-mul",
      "max-to-min",
      "lt-swap-in",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "lt-min-term+cpos",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 4 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "lt-swap-in",
      "add-fact-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 42 ) 83 ) ( * v1 3 ) ) v2 ) 5 ) ( - ( + ( + ( min ( * v0 42 ) 83 ) ( * ( + v1 1 ) 3 ) ) v2 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-to-sub",
      "add-assoc",
      "mul-assoc",
      "mul-zero",
      "add-dist-mul",
      "add-fact-mul",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "and-eqlt-gt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( / v1 4 ) 0 ) 4 ) 0 ) 7 ) ( - ( * ( / v1 4 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + ( / v1 4 ) ( - ( + 35 0 ) 1 ) ) 4 ) 3 ) 7 ) ( + ( * ( / v1 4 ) 4 ) 132 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "add-assoc",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 68 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-assoc",
      "mul-zero",
      "mul-comm",
      "eq-comm",
      "add-comm",
      "sub-to-add",
      "eq-swap",
      "add-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 4 ) ( - ( + ( - v0 4 ) 6 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 3 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-zero",
      "eq-swap",
      "mul-comm",
      "add-fact-mul",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "mul-assoc",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -16 ( max ( min v0 116 ) -14 ) ) ( - ( + ( - -16 ( max ( min v0 116 ) -14 ) ) ( + ( max ( min v0 116 ) -14 ) 18 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-pos",
      "eq-comm",
      "add-dist-mul",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "Eq-min-c-pos",
      "add-fact-mul",
      "eq-swap",
      "add-assoc",
      "max-to-min",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 17 ) ( - ( + ( - v0 17 ) ( + ( min ( + ( * ( + ( / v1 4 ) v2 ) 4 ) ( - v3 ( * ( / v1 4 ) 4 ) ) ) -21 ) 22 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "lt-swap-out",
      "lt-swap-in",
      "lt-to-zero",
      "add-comm",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) ( * ( - v1 ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) ) 2 ) ) 4 ) 3 ) ( + ( * v1 8 ) 3 ) ) ) ( <= ( - ( max ( * v2 8 ) ( + v3 10 ) ) 5 ) v3 ) ) ( >= ( + v3 5 ) ( + v3 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "min-comm",
      "mul-assoc",
      "and-comm",
      "lt-min-term+cpos",
      "lt-swap-in",
      "lt-swap-out",
      "add-dist-mul",
      "sub-to-add",
      "min-to-max",
      "min-mul-in-neg",
      "eqlt-to-not-gt",
      "min-sub-both",
      "min-mul-in-pos",
      "max-to-min",
      "ineq-to-eq",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 2 ) ( - ( + ( - ( + v0 v1 ) 2 ) 69 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-to-sub",
      "sub-to-add",
      "eq-swap",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 8 ) v1 ) 5 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 4 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "min-max-const",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( + ( * v0 16 ) v1 ) v2 ) 0 ) 2 ) ( - ( + ( + ( * v0 16 ) v1 ) v2 ) 11 ) ) ) ( >= ( - ( + ( + ( + ( * v0 16 ) v1 ) v2 ) 3 ) 2 ) ( - ( + ( + ( * v0 16 ) v1 ) v2 ) 2 ) ) ) ( <= ( - ( + ( * v3 12 ) v4 ) 11 ) ( - ( + ( * v3 12 ) v4 ) 11 ) ) ) ( >= ( + ( + ( * v3 12 ) v4 ) 9 ) ( + ( + ( * v3 12 ) v4 ) 9 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "eqgt-to-not-lt",
      "min-to-max",
      "and-min-to-eqlt",
      "min-comm",
      "sub-to-add",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "and-x-1",
      "and-eqlt-to-min",
      "div-minus-down",
      "add-comm",
      "add-denom-div",
      "min-div-in-pos",
      "add-zero",
      "min-mod-const-to-const",
      "eqlt-to-not-gt",
      "and-assoc",
      "eq-swap",
      "min-sub-both"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / v0 8 ) ( + ( + ( / ( - v0 1 ) 8 ) 1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-one",
      "eqgt-to-not-lt",
      "mul-assoc",
      "and-comm",
      "min-div-out-pos",
      "mul-comm",
      "lt-mul-div-cancel",
      "div-minus-out",
      "and-min-to-eqlt",
      "min-add-both",
      "add-assoc",
      "min-mul-in-pos",
      "lt-swap-in",
      "min-x-x-plus-a-pos",
      "add-denom-mul",
      "lt-swap-out",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "sub-to-add",
      "add-comm",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( >= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 18 ( * ( % v0 4 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "Eq-min-c-pos",
      "min-ass",
      "eqlt-to-not-gt",
      "min-max-const",
      "eq-comm",
      "add-zero",
      "not-gt-to-eqlt",
      "and-x-1",
      "mul-comm",
      "min-mul-in-pos",
      "and-min-to-lt",
      "mul-assoc",
      "max-to-min",
      "min-comm",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "lt-mul-pos-cancel",
      "min-mod-const-to-mod",
      "ineq-to-eq",
      "add-assoc",
      "lt-min-term+neg-term",
      "div-minus-out",
      "div-zero",
      "min-mul-in-neg",
      "and-max-to-eqlt",
      "lt-max-term+neg-term",
      "min-lt-cancel",
      "Eq-lt-min",
      "add-dist-mul",
      "mul-cancel-div",
      "min-x-x-plus-a-pos",
      "mod-two",
      "eq-max-lt",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "min-mul-out-neg",
      "min-mul-out-pos",
      "eq-x-x",
      "sub-to-add",
      "min-sub-both",
      "min-mul-in-neg",
      "add-denom-div",
      "add-assoc",
      "min-ass",
      "add-fact-mul",
      "min-x-x-plus-a-pos",
      "min-comm",
      "add-comm",
      "mul-comm",
      "mul-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v1 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v3 ) 0 ) 5 ) ( - v3 5 ) ) ) ( >= ( - ( + ( + ( * 126 4 ) v3 ) 3 ) 5 ) ( + v3 501 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "mul-zero",
      "add-comm",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "mul-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "add-assoc",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "add-fact-mul",
      "add-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 5 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-to-sub",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( min ( max ( + ( + v0 1 ) 9 ) ( + ( min v1 4 ) v2 ) ) ( + ( + v0 1 ) 4 ) ) 6 ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "add-comm",
      "sub-to-add",
      "and-comm",
      "and-min-to-lt",
      "add-assoc",
      "and-lt-to-min",
      "lt-swap-out",
      "lt-swap-in",
      "mul-cancel-div"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( + ( * v0 8 ) v1 ) v2 ) 2 ) 2 ) ( * ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": ["add-dist-mul", "lt-to-zero", "mul-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 503 ) v1 ) ( + ( * v2 16 ) v3 ) ) 2 ) ( - ( + ( + ( * v2 16 ) ( + v3 1 ) ) ( + ( * v0 503 ) v1 ) ) 11 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-assoc",
      "add-dist-mul",
      "lt-swap-in",
      "add-fact-mul",
      "lt-max-term-term+pos",
      "Eq-min-c-pos",
      "min-mul-in-pos",
      "Eq-max-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 9 ) 9 ) ( * v0 9 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + ( + v3 v2 ) 7 ) 8 ) ( / ( + ( + v3 v2 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 4 ) 29 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 29 ( max ( * v3 4 ) 29 ) ) 7 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-denom-mul",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 33 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "add-fact-mul",
      "add-comm",
      "mul-zero",
      "mul-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "mul-zero",
      "add-fact-mul",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 0 ) ( * ( + ( * v0 2 ) v1 ) 2 ) ) ) ( >= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 10 ) ( - ( + ( - ( + v0 v1 ) 10 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 1002 ) ) v1 ) ( + ( * v0 4 ) v1 ) ) -1002 ) 1009 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "min-sub-both",
      "sub-to-add",
      "add-fact-mul",
      "min-max-const",
      "add-comm",
      "min-ass",
      "max-to-min",
      "min-to-max",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 8 ) 0 ) 5 ) ( - ( + ( * v0 8 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( >= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( > ( - 10 ( + ( * v0 16 ) v1 ) ) ( - 2009 ( + ( * v0 16 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-assoc",
      "lt-swap-in",
      "gt-to-lt",
      "mul-zero",
      "add-comm",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 125 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 125 ) ( + v1 1 ) ) v2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 2 ) -1 ) v1 ) ( - ( + ( * v0 2 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= ( - ( + 0 ( + ( min v2 0 ) v3 ) ) 1 ) ( - ( + ( min v2 0 ) v3 ) 1 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( max v2 0 ) 4 ) 4 ) ( + ( min v2 0 ) v3 ) ) 4 ) ) 1 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "min-to-max",
      "min-sub-both",
      "mul-comm",
      "add-fact-mul",
      "add-to-sub",
      "add-comm",
      "eq-x-x",
      "min-ass",
      "eq-max-lt",
      "mul-assoc",
      "eq-swap",
      "and-x-1",
      "min-add-both",
      "max-to-min",
      "and-min-to-eqlt",
      "Eq-lt-min",
      "mul-zero",
      "eq-comm",
      "mod-two"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 2 ) 2 ) ( * ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": ["mul-comm", "add-dist-mul", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( >= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( <= v9 v9 ) ) ( >= v9 v9 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( + ( / ( - 0 ( max ( - ( * ( max ( min ( * v0 2 ) 509 ) 10 ) 4 ) v1 ) ( + ( * v2 4 ) 52 ) ) ) 4 ) v2 ) 14 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "div-minus-down",
      "min-sub-both",
      "add-denom-mul",
      "min-add-both",
      "min-comm",
      "min-div-in-neg",
      "mul-assoc",
      "lt-to-zero",
      "sub-to-add",
      "add-denom-div",
      "add-zero",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "and-min-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 0 ( + ( * v0 4 ) v1 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 3 ( + ( + ( * v0 4 ) v1 ) 8 ) ) 2 ) ) ) ( <= ( - v2 2 ) ( + ( + -5 v2 ) 3 ) ) ) ( >= ( + v2 127 ) ( + ( + 124 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "and-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -62 ) ( - ( + ( max ( min v0 0 ) -62 ) ( - 5 ( max ( min v0 0 ) -62 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-min-term+cpos",
      "min-add-both",
      "min-comm",
      "add-assoc",
      "max-min-switch"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max ( min v0 19 ) ( + ( min 19 ( - ( + ( min v0 19 ) ( - 20 ( min v0 19 ) ) ) 1 ) ) 1 ) ) ( min v0 19 ) )",
      "end": "0"
    },
    "rules": [
      "min-max",
      "add-comm",
      "min-sub-both",
      "and-min-to-eqlt",
      "min-comm",
      "min-ass",
      "sub-to-add",
      "max-to-min",
      "add-dist-mul",
      "mul-comm",
      "add-to-sub",
      "min-mul-in-neg"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eq-comm",
      "mul-zero",
      "eq-swap",
      "add-fact-mul",
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 5 ) ( + -5 ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) ) ) ) ( >= ( + ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 16 ) ( + 1 ( + ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 15 ) ) ) ) ( <= ( + ( + ( + v3 v4 ) 0 ) 1 ) ( - ( + v3 v4 ) 5 ) ) ) ( >= ( + ( + ( + v3 v4 ) 3 ) 1 ) ( + ( + v3 v4 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "mul-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-zero",
      "and-eqlt-to-min",
      "and-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-to-max",
      "min-sub-both",
      "and-min-to-eqlt",
      "min-comm",
      "add-dist-mul",
      "and-assoc",
      "lt-min-term-term+pos",
      "mod-x-x"
    ]
  },
  {
    "expression": {
      "start": "( >= v0 ( + ( + ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": ["eqgt-to-not-lt", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( >= ( - v0 7 ) ( - ( + ( - v0 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-in",
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( min ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) 1999 ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( <= ( + ( * ( + ( * 0 4 ) v3 ) 4 ) 0 ) ( + ( * ( + 0 v3 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( - 7 ( max v4 7 ) ) 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( max v4 7 ) -4 ) 31 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "mul-assoc",
      "lt-swap-in",
      "min-mul-in-neg",
      "lt-to-zero",
      "add-dist-mul",
      "max-to-min",
      "mul-comm",
      "min-max-const",
      "min-sub-both",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 1 ) ( - ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 11 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 v1 ) ( + v0 ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( >= ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "add-assoc",
      "sub-to-add",
      "max-to-min",
      "lt-min-term+cpos",
      "min-to-max",
      "lt-swap-in",
      "lt-swap-out",
      "min-sub-both",
      "mul-assoc",
      "add-comm",
      "min-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( + ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( max ( * ( % v0 5 ) 7 ) 27 ) 27 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-mul-pos-cancel",
      "mul-assoc",
      "add-assoc",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm",
      "eqlt-to-not-gt",
      "mod-minus-in",
      "min-mod-const-to-const",
      "add-fact-mul",
      "lt-swap-in",
      "sub-to-add",
      "mul-comm",
      "mul-zero",
      "max-to-min",
      "and-min-to-eqlt"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 64 ) 5 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "min-max-const",
      "Eq-lt-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) ) ( + ( + ( * v3 64 ) ( * v4 32 ) ) v5 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) 28 ) ) ( + ( + ( * v3 64 ) ( + ( * v4 32 ) 31 ) ) v5 ) ) ) ( <= ( + ( + ( min ( * v1 4 ) 7 ) ( min ( * v2 11 ) 53 ) ) v6 ) ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) ) ) ( >= ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) 3 ) ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) 3 ) v6 ) ) ) ( <= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) ) ( >= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-swap-in",
      "add-dist-mul",
      "lt-swap-out",
      "mul-zero",
      "mul-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == 0 ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "min-mul-in-pos",
      "div-minus-in",
      "eq-comm",
      "add-dist-mul",
      "min-add-both",
      "Eq-min-c-pos",
      "max-to-min",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "min-div-in-pos",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) v2 ) ( - ( - ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "and-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( min v0 16 ) v1 ) ) 0 ) 18 ) ( - ( + ( min v0 16 ) v1 ) 18 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( max ( min v0 16 ) ( + v0 20 ) ) v1 ) ) 3 ) 18 ) ( + ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "eqgt-to-not-lt",
      "and-eqlt-eqgt-to-0",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-comm",
      "eq-mul-x-y-0",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "add-denom-div",
      "div-minus-down",
      "eq-comm",
      "lt-swap-out",
      "lt-swap-in",
      "mod-one",
      "and-lt-to-min",
      "mul-cancel-div",
      "and-assoc",
      "and-eq-eq",
      "and-x-1",
      "mod-const-add",
      "max-min-switch",
      "add-zero",
      "and-eqlt-to-max",
      "min-max-max-x",
      "min-to-max",
      "div-cancel",
      "min-max",
      "Eq-min-c-neg"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 267 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 273 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "lt-swap-in",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( min v0 500 ) v1 ) v2 ) ) 503 ) ( - ( + ( + 0 ( + ( min v0 500 ) v1 ) ) v2 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) v2 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) ) v2 ) 503 ) ) ) ( <= ( + -5 ( - v3 3 ) ) ( + -5 ( - v3 3 ) ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) 0 ) ( + ( * v0 4 ) 0 ) ) ) ( >= ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 0 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 15 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( - v4 8 ) ( - ( - ( + 0 v4 ) 5 ) 3 ) ) ) ( >= ( + v4 60 ) ( - ( + ( + ( - ( + 64 0 ) 1 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + ( min v1 116 ) v2 ) -16 ) 17 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-in",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "and-comm",
      "add-comm",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * v2 4 ) ) ) ( >= ( * v2 4 ) ( * v2 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "eq-x-x",
      "lt-to-zero",
      "min-x-x",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 44 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "mul-zero",
      "lt-swap-out",
      "min-comm",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "lt-swap-in",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v0 ) 0 ) 5 ) ( - v0 4 ) ) ) ( >= ( + ( + ( + ( max ( * 63 4 ) -9 ) v0 ) 3 ) 5 ) ( + v0 260 ) ) ) ( <= ( + ( + v1 v2 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + v1 v2 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-to-sub",
      "mul-comm",
      "eqgt-to-not-lt",
      "mul-zero",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "add-assoc",
      "mul-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 3 ) 3 ) ( * v0 3 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 24 24 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 64 ) 440 ) v1 ) 10 ) ) ( - ( + 0 ( + ( min ( * v0 64 ) 440 ) v1 ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 66 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 64 ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) 0 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( <= ( + ( min ( * v5 4 ) 133 ) 0 ) ( + ( min ( * v5 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 133 ) 3 ) ( + ( min ( * v5 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "and-assoc",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "and-comm",
      "and-lt-to-min",
      "max-to-min",
      "add-assoc",
      "min-add-both",
      "add-zero",
      "add-to-sub",
      "mul-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "min-x-x",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max ( + ( min ( / ( - ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 31 ) 32 ) ( - ( + 0 ( + ( / v2 32 ) 1 ) ) 1 ) ) 1 ) ( min ( max ( + ( / ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 32 ) 1 ) 0 ) ( + ( + ( / v2 32 ) 1 ) 0 ) ) ) ( min ( max ( + ( / ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 32 ) 1 ) 0 ) ( + ( + ( / v2 32 ) 1 ) 0 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "min-max-max-x",
      "min-div-out-pos",
      "add-comm",
      "lt-to-zero",
      "min-comm",
      "add-dist-mul",
      "add-assoc",
      "eqlt-to-not-gt",
      "min-ass",
      "div-minus-in",
      "max-to-min",
      "add-denom-mul",
      "min-mul-in-neg",
      "min-add-both",
      "min-to-max",
      "min-x-x-plus-a-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-in",
      "add-assoc",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) 0 ) v1 ) ( + ( * v0 125 ) v1 ) ) ) ( >= ( + ( + ( * v0 125 ) ( - ( + 125 0 ) 1 ) ) v1 ) ( + ( + ( * v0 125 ) v1 ) 124 ) ) ) ( <= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 7 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-assoc",
      "mul-comm",
      "add-to-sub",
      "add-fact-mul",
      "mul-zero",
      "lt-swap-in",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) v0 ) 4 ) 0 ) ( + ( * ( + ( + ( * 0 2 ) v0 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( / ( - 16 ( max ( * ( + ( * v1 2 ) v2 ) 4 ) 13 ) ) 4 ) 4 ) v0 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( + ( * ( / ( - 16 ( max ( * ( + ( * v1 2 ) v2 ) 4 ) 13 ) ) 4 ) 2 ) 1 ) 2 ) v0 ) 1 ) 4 ) 3 ) ) ) ( <= ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1000 ) ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1000 ) ) ) ( >= ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1 ) ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-fact-mul",
      "min-add-both",
      "and-eqlt-to-min",
      "lt-const-neg",
      "sub-to-add",
      "Eq-max-c-pos",
      "min-div-out-neg",
      "min-div-mul",
      "and-eq-eq",
      "or-to-and",
      "min-mul-in-neg",
      "mul-max-min",
      "eq-swap",
      "and-eqlt-gt-to-0",
      "eq-max-lt",
      "add-dist-mul",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "mul-comm",
      "min-div-in-pos",
      "gt-to-lt",
      "and-lt-gt-to-0",
      "and-lt-to-min",
      "lt-max-mutual-term",
      "and-comm",
      "add-to-sub",
      "not-eq-to-ineq",
      "lt-to-zero",
      "min-comm",
      "and-max-to-lt",
      "mod-minus-out",
      "mod-two",
      "min-mod-const-to-mod",
      "lt-max-term-term+pos",
      "add-denom-mul",
      "mod-const-add",
      "min-max-const",
      "min-ass"
    ]
  },
  {
    "expression": {
      "start": "( == ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "min-to-max",
      "eq-comm",
      "eq-swap",
      "Eq-min-c-pos",
      "mul-assoc",
      "add-fact-mul",
      "min-add-both",
      "add-assoc",
      "add-comm",
      "add-dist-mul",
      "max-min-switch",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + ( + ( min ( * 0 8 ) 14 ) 0 ) v0 ) 8 ) ) ) ( >= ( / ( + v0 21 ) 8 ) ( / ( + ( + ( min ( * ( - ( + 3 0 ) 1 ) 8 ) 14 ) ( - ( + 8 0 ) 1 ) ) v0 ) 8 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( + ( * v1 2 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 1 ) ( + ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) v2 ) ) ) ( <= 0 ( + ( min ( * 0 4 ) 133 ) 0 ) ) ) ( >= 139 ( + ( min ( * ( - ( + 35 0 ) 1 ) 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( + ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( max ( * ( % v0 7 ) 5 ) 29 ) 29 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-eqlt",
      "min-mod-const-to-const",
      "max-to-min",
      "not-gt-to-eqlt",
      "mul-assoc",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "mod-minus-in",
      "lt-swap-in",
      "sub-to-add",
      "mul-comm",
      "lt-mul-pos-cancel",
      "add-assoc",
      "eqgt-to-not-lt",
      "mul-zero",
      "add-comm",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 10 ) ) ( - ( + 0 ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 2 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 3 ( / ( + v1 54 ) 4 ) ) ( / ( + v1 66 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eq-x-x",
      "add-denom-mul",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "min-x-x",
      "Eq-lt-min",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( - ( * v0 16 ) 5 ) v1 ) 0 ) 3 ) ( - ( + ( * v0 16 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( + ( * v0 16 ) 15 ) v1 ) 3 ) 3 ) ( + ( + ( * v0 16 ) v1 ) 18 ) ) ) ( <= ( - ( max ( + v2 9 ) ( + ( min v3 4 ) v4 ) ) 6 ) ( - v2 2 ) ) ) ( >= ( + v2 3 ) ( + v2 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "and-min-to-eqlt",
      "max-to-min",
      "add-to-sub",
      "min-comm",
      "eqlt-to-not-gt",
      "and-comm",
      "add-dist-mul",
      "min-sub-both",
      "lt-x-x-sub-a",
      "lt-min-max-cancel",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-mul-in-pos",
      "lt-swap-in",
      "mod-x-x",
      "mul-max-min",
      "add-assoc",
      "and-over-or",
      "min-x-x",
      "mod-one"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 16 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-assoc",
      "mul-zero",
      "eq-comm",
      "add-assoc",
      "mul-comm",
      "add-comm",
      "eq-swap",
      "add-fact-mul",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) 4 ) 4 ) ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-mul-in-neg",
      "mul-assoc",
      "min-x-x-plus-a-pos",
      "add-fact-mul",
      "div-cancel-mul",
      "mul-one",
      "mul-comm",
      "eq-x-x",
      "add-dist-mul",
      "min-ass",
      "add-assoc",
      "max-to-min",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) ( - 48 ( min ( * ( max v0 1 ) 16 ) 40 ) ) ) ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "min-comm",
      "add-to-sub",
      "mul-comm",
      "add-comm",
      "min-add-both",
      "and-min-to-eqlt",
      "mul-assoc",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 2 ) ( - ( + ( + ( * v1 4 ) 0 ) v2 ) 2 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 2 ) ( - ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) 2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * ( + ( * v0 4 ) v2 ) 8 ) v1 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * ( + ( * v0 4 ) v2 ) 8 ) v1 ) 2 ) 499 ) 0 ) ) ) 4 ) 72 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "not-gt-to-eqlt",
      "sub-to-add",
      "lt-mul-pos-cancel",
      "add-comm",
      "add-assoc",
      "add-denom-div",
      "div-minus-down",
      "mul-comm",
      "max-min-switch",
      "and-min-to-lt",
      "min-mul-in-neg",
      "min-comm",
      "add-fact-mul",
      "and-min-to-eqlt",
      "min-mul-in-pos",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "mul-zero",
      "eq-swap",
      "add-zero",
      "div-minus-in",
      "min-to-max",
      "lt-swap-in",
      "and-assoc",
      "min-ass",
      "add-to-sub",
      "and-comm",
      "add-dist-mul",
      "mul-assoc",
      "gt-to-lt",
      "lt-const-pos",
      "Eq-max-c-neg",
      "mul-one",
      "max-to-min",
      "and-x-1",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( >= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( + v0 1 ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "mul-zero",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "lt-swap-in",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 248 ) ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( * ( + v0 1 ) 2 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-dist-mul",
      "add-assoc",
      "lt-swap-in",
      "mul-comm",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 104 ) v1 ) ( + ( * v0 104 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 23 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "min-to-max",
      "mul-assoc",
      "add-comm",
      "min-sub-both",
      "add-zero",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "min-div-in-pos",
      "add-fact-mul",
      "add-to-sub",
      "min-comm",
      "and-min-to-eqlt",
      "mul-zero",
      "min-mul-in-pos",
      "lt-mul-div-cancel",
      "div-minus-in",
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "lt-mul-pos-cancel",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "add-denom-mul",
      "Eq-lt-min",
      "eq-swap",
      "min-x-x-plus-a-pos",
      "Eq-max-c-pos",
      "and-x-1",
      "or-over-and",
      "min-mod-const-to-const",
      "mul-max-min",
      "lt-min-term+neg-term",
      "and-max-to-lt",
      "max-to-min",
      "and-x-not-x",
      "and-assoc",
      "mul-one",
      "lt-to-zero",
      "and-comm",
      "Eq-min-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 4 ) ( + ( + ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-swap-in",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 5 ) ( + -2 ( - ( + ( * v0 4 ) v1 ) 5 ) ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ( + ( - ( - 4 2 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 1002 ) ) v1 ) 1000 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "add-assoc",
      "min-x-x",
      "min-add-both",
      "add-to-sub",
      "min-comm",
      "eq-x-x",
      "add-fact-mul",
      "sub-to-add",
      "add-comm",
      "min-ass",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "max-to-min",
      "not-eq-to-ineq",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) ( - ( max ( + ( * v0 3 ) v1 ) 1999 ) 1996 ) ) ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-min-term+cpos",
      "mul-assoc",
      "eqlt-to-not-gt",
      "and-min-to-eqlt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "Eq-lt-min",
      "min-max",
      "min-comm",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-neg",
      "lt-swap-in",
      "min-to-max",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 12 ) v1 ) ( + ( * v0 12 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( + ( max v0 v1 ) ( min ( - v1 v0 ) 0 ) ) v1 ) 0 ) 4 ) 4 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "add-zero",
      "add-to-sub",
      "mul-assoc",
      "min-comm",
      "add-comm",
      "mul-zero",
      "min-sub-both",
      "max-to-min",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 748 ) v1 ) ) ( + ( min ( * v0 252 ) 748 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 748 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 748 ) 251 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( > ( - 1 v0 ) ( - 125 v0 ) )", "end": "0" },
    "rules": [
      "add-fact-mul",
      "sub-to-add",
      "mul-zero",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "gt-to-lt",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( - ( + ( + v0 v1 ) v2 ) 1 ) ( + v3 v1 ) ) ( + ( - ( + ( + v0 v1 ) ( - v2 1 ) ) 1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-max",
      "eq-x-x",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( == 0 ( - ( + 0 ( / ( + ( max v0 0 ) 138 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-comm",
      "mul-one",
      "min-div-in-pos",
      "max-to-min",
      "eq-swap",
      "add-dist-mul",
      "sub-to-add",
      "eq-comm",
      "Eq-min-c-pos",
      "mul-assoc",
      "div-minus-in",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 4 ) 128 ) ( * v0 4 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 2 ) v1 ) ( + ( + ( * v0 2 ) ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "mul-comm",
      "lt-swap-in",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 16 ) v0 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) 12 ) ) ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 5 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "lt-min-term+cpos",
      "Eq-min-lt",
      "lt-const-neg",
      "eq-max-lt",
      "not-not",
      "lt-const-pos",
      "max-to-min",
      "and-max-to-eqlt",
      "eq-comm",
      "add-denom-mul",
      "lt-min-term+neg-term",
      "div-minus-down",
      "mul-zero",
      "lt-max-mutual-term",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "mul-max-min",
      "or-x-and-x-y"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 125 ) ( - ( + 0 ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 2 ) 0 ) ( + ( * v3 2 ) 0 ) ) ) ( >= ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "mul-zero",
      "lt-swap-in",
      "sub-to-add",
      "add-to-sub",
      "mul-assoc",
      "mul-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "min-x-x",
      "Eq-lt-min",
      "eq-x-x",
      "lt-swap-in",
      "min-x-x-plus-a-neg",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + v0 v1 ) 125 ) ( - ( / ( + ( - v0 1 ) v1 ) 125 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "mul-cancel-div",
      "div-cancel-mul",
      "add-to-sub",
      "add-comm",
      "add-denom-mul",
      "div-minus-down",
      "min-x-x-plus-a-pos",
      "min-sub-both",
      "div-minus-in",
      "and-eqlt-eqgt-to-0",
      "lt-mul-div-cancel",
      "min-mul-out-neg",
      "min-comm",
      "mul-comm",
      "sub-to-add",
      "min-div-out-neg",
      "and-min-to-eqlt",
      "Eq-lt-min",
      "add-assoc",
      "mul-zero",
      "min-mul-in-pos",
      "not-gt-to-eqlt",
      "lt-x-x-sub-a",
      "and-ineq-eq",
      "or-x-and-x-y",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 0 ) 128 ) 128 ) ( * v0 0 ) )",
      "end": "1"
    },
    "rules": ["mul-zero"]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min v1 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "add-assoc",
      "add-to-sub",
      "min-add-both",
      "min-sub-both",
      "sub-to-add",
      "lt-swap-in",
      "add-comm",
      "and-min-to-lt"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 672 ) 671 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "eqgt-to-not-lt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 4 ) ( + ( + ( + ( - v0 1 ) v1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": ["not-gt-to-eqlt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 23 ) ( - ( + ( + v0 1 ) v1 ) 26 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( / v0 16 ) 2 ) ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= ( min ( * v3 3 ) 134 ) ( + ( min ( * v3 3 ) 134 ) 0 ) ) ) ( >= ( + ( min ( * v3 3 ) 134 ) 2 ) ( + ( min ( * v3 3 ) 134 ) ( - ( + 3 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + v0 63 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-to-zero",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( + ( * v2 8 ) v3 ) ) ( + ( * v2 8 ) v3 ) ) ) ( >= ( + 3 ( + ( + ( * v2 8 ) v3 ) 4 ) ) ( + ( + ( * v2 8 ) 7 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 v1 ) ( - ( + v0 v1 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 8 ) v1 ) ( + ( + ( * ( - v0 1 ) 8 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "add-to-sub",
      "sub-to-add",
      "lt-swap-out",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "min-sub-both",
      "lt-min-term+cpos",
      "add-assoc",
      "Eq-min-lt",
      "min-comm",
      "not-gt-to-eqlt",
      "min-add-both",
      "add-comm",
      "sub-to-add",
      "max-min-switch",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 5 ) ( - ( + v0 v1 ) 4 ) ) ) ( >= ( + ( + v0 v1 ) 5 ) ( + ( + v0 v1 ) 5 ) ) ) ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v2 ) 0 ) 5 ) ( - v2 4 ) ) ) ( >= ( + ( + ( + ( max ( * 15 4 ) -9 ) v2 ) 3 ) 5 ) ( + v2 68 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "eq-comm",
      "add-assoc",
      "Eq-min-c-pos",
      "add-denom-mul"
    ]
  },
  {
    "expression": {
      "start": "( > ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "mul-zero",
      "gt-to-lt",
      "lt-swap-out",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 504 ) ( + v1 v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 504 ) ( + v1 ( + v0 504 ) ) ) ) ( <= ( + ( * v2 18 ) v3 ) ( + ( * v2 18 ) v3 ) ) ) ( >= ( + ( + ( * v2 18 ) v3 ) 17 ) ( + ( min ( - ( + ( * v2 18 ) v3 ) ( * ( max v2 1 ) 18 ) ) v3 ) 35 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - v0 3 ) ) ) ( >= ( + v0 250 ) ( - ( + 254 ( - v0 3 ) ) 1 ) ) ) ( <= ( + 0 v1 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + 3 ( + v1 60 ) ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 1000 ) v1 ) v2 ) ( + ( + ( * v0 1000 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ( - ( + ( * ( + 0 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 15 ) 4 ) ( - ( + ( * ( + 3 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 3 ) 4 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( <= ( + ( * 0 2 ) 0 ) 0 ) ) ( >= ( + ( * 9 2 ) 1 ) 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) ) v4 ) ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) ( + v3 1 ) ) ) ) v4 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( - ( / ( + ( min v2 1000 ) v3 ) 125 ) 8 ) ( / ( + 0 ( - ( + ( min v2 1000 ) v3 ) 1000 ) ) 125 ) ) ) ( >= ( / ( - ( + v2 v3 ) 1 ) 125 ) ( / ( + ( - ( + 1000 0 ) 1 ) ( - ( + v2 v3 ) 1000 ) ) 125 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-denom-mul",
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - ( + ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - -439 ( max ( min v0 -443 ) -506 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-one",
      "mul-zero",
      "add-fact-mul",
      "eq-swap",
      "mul-assoc",
      "add-assoc",
      "eq-comm",
      "add-comm",
      "min-to-max",
      "mul-comm",
      "max-min-switch",
      "min-add-both",
      "Eq-max-c-pos",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( > ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "gt-to-lt",
      "sub-to-add",
      "and-min-to-lt",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 8 ( * ( % v0 2 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-neg",
      "add-assoc",
      "mul-assoc",
      "add-zero",
      "and-min-to-lt",
      "min-add-both",
      "and-min-to-eqlt",
      "mul-one",
      "eq-max-lt",
      "eqlt-to-not-gt",
      "max-to-min",
      "Eq-lt-min",
      "lt-mul-pos-cancel",
      "sub-to-add",
      "mul-comm",
      "and-x-1",
      "not-gt-to-eqlt",
      "lt-swap-out",
      "min-max",
      "min-comm",
      "add-comm",
      "min-mod-const-to-mod",
      "eq-comm",
      "and-max-to-eqlt",
      "add-dist-mul",
      "lt-max-mutual-term"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 508 ) ( + v0 508 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "and-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-in",
      "add-comm",
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) 28 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * v2 32 ) 31 ) ) v3 ) ) ) ( <= ( + 0 v4 ) ( + 0 v4 ) ) ) ( >= ( + ( - ( + 32 0 ) 1 ) v4 ) ( + ( - ( + 32 0 ) 1 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 4 ) ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 4 ) 8 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-in",
      "min-sub-both",
      "min-add-both",
      "sub-to-add",
      "and-min-to-lt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( max v0 0 ) ) ( - ( + ( - -6 ( max v0 0 ) ) ( + ( max v0 0 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "max-to-min",
      "add-dist-mul",
      "mul-comm",
      "eq-comm",
      "mul-assoc",
      "min-to-max",
      "add-fact-mul",
      "Eq-max-c-pos",
      "sub-to-add",
      "add-assoc",
      "min-add-both",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 136 ( - ( + 137 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 70 ) 8 ) ( / ( + v2 70 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero", "lt-to-zero"]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 2 ) 1 ) )", "end": "0" },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 16 ) 16 ) ( * v0 16 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - v0 10 ) ( - ( + 0 v0 ) 10 ) ) ) ( >= ( + v0 4 ) ( - ( + ( - ( + 15 0 ) 1 ) v0 ) 10 ) ) ) ( <= ( + ( * v1 4 ) 0 ) ( + ( * v1 4 ) 0 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "and-max-to-eqlt",
      "mul-comm",
      "min-mul-in-neg",
      "add-zero",
      "min-x-x",
      "add-comm",
      "min-add-both",
      "mul-assoc",
      "min-sub-both",
      "add-fact-mul",
      "add-to-sub",
      "Eq-lt-min",
      "sub-to-add",
      "mul-zero",
      "add-assoc",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) v1 ) 31 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 16 ) 15 ) ( * ( + v0 1 ) 16 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "add-to-sub",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) 3 ) ( - ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) 3 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( * ( / v1 4 ) 4 ) 7 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-assoc",
      "sub-to-add",
      "min-sub-both",
      "lt-swap-out",
      "lt-swap-in",
      "and-min-to-lt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( / v0 4 ) 4 ) ( * ( min v1 1 ) 70 ) ) 62 ) ( - ( + ( * ( + v1 1 ) 70 ) ( * ( / v0 4 ) 4 ) ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "min-add-both",
      "add-dist-mul",
      "add-comm",
      "lt-min-term+cpos",
      "min-mul-in-pos",
      "lt-swap-in",
      "mul-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( + ( * v0 3 ) v1 ) ) ( - 1999 ( + ( * v0 3 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-comm",
      "mul-zero",
      "gt-to-lt",
      "add-zero",
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "mul-zero",
      "eq-swap",
      "mul-assoc",
      "add-assoc",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 250 ) 0 ) v3 ) ( + ( + ( * v2 250 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 3 ) ( - ( + ( - v0 3 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "eq-swap",
      "sub-to-add",
      "add-assoc",
      "add-fact-mul",
      "eq-comm",
      "add-comm",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 0 ) ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) ( - ( + ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-min-term+cpos",
      "eqgt-to-not-lt",
      "min-x-x-plus-a-pos",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-dist-mul",
      "mul-assoc",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-assoc",
      "eq-comm",
      "sub-to-add",
      "mul-comm",
      "add-fact-mul",
      "eq-swap",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 500 ) 9 ) 0 )", "end": "1" },
    "rules": [
      "mul-assoc",
      "min-add-both",
      "min-to-max",
      "max-to-min",
      "add-dist-mul",
      "min-max-const",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 1005 ) 1004 ) 0 )", "end": "1" },
    "rules": [
      "not-gt-to-eqlt",
      "lt-swap-in",
      "min-mod-const-to-const",
      "Eq-lt-min",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 13 ) ( - ( + ( + v0 1 ) v1 ) 25 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) ) ( >= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 64 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 64 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 64 ) v1 ) 132 ) ) 5 ) ( + ( + ( * v0 64 ) v1 ) 68 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "and-comm",
      "min-comm",
      "not-gt-to-eqlt",
      "add-to-sub",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 68 ) v1 ) 0 ) ( + ( + ( * v0 68 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 8 ) 25 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 25 ( max ( * v3 8 ) 25 ) ) 11 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "sub-to-add",
      "min-x-x",
      "add-denom-mul",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 5 ) ( - ( - ( - v0 1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-min-lt",
      "lt-min-term+cpos",
      "add-assoc",
      "eq-swap",
      "add-comm",
      "sub-to-add",
      "Eq-lt-min",
      "min-sub-both",
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - ( + ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - 8 ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "add-comm",
      "Eq-min-c-pos",
      "sub-to-add",
      "eq-swap",
      "mul-comm",
      "min-add-both",
      "mul-zero",
      "mul-assoc",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 3 ) v1 ) 3 ) v2 ) ( + ( * ( + ( * v0 3 ) v1 ) 3 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 0 ) 2 ) ( - ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 3 ) 2 ) ( - ( + ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 3 ) 2 ) ) ) ( <= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) ) ( >= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "Eq-lt-min",
      "add-zero",
      "add-comm",
      "eq-x-x",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + 3 v3 ) ( + ( - ( + 4 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "eq-x-x",
      "eqgt-to-not-lt",
      "min-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + ( + ( * v0 16 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + ( + ( * v0 16 ) v1 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 3 ) 1 ) )", "end": "0" },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( <= ( * v5 69 ) ( + ( * v5 69 ) 0 ) ) ) ( >= ( + ( * v5 69 ) 68 ) ( + ( * v5 69 ) ( - ( + 69 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( >= ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + v0 v1 ) 2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 2 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "lt-swap-out",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( min ( - ( max ( * v1 8 ) ( + ( + v0 1 ) 10 ) ) 5 ) ( + v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "min-comm",
      "and-min-to-lt",
      "add-comm",
      "sub-to-add",
      "lt-swap-in",
      "min-sub-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) ) ( >= ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( >= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 502 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 502 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 968 ) v1 ) ) ( + ( min ( * v0 32 ) 968 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 968 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "min-sub-both",
      "min-add-both",
      "add-assoc",
      "min-comm",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * -11 4 ) 48 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "eq-swap",
      "eq-comm",
      "mul-zero",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 110 ) ( - ( + ( + ( + v0 v1 ) 110 ) 23 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "add-assoc",
      "add-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( / v0 16 ) ( * v1 4 ) ) 2 ) ) ( - ( + 0 ( + ( / v0 16 ) ( * v1 4 ) ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * v1 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 1 ( * v0 2 ) ) ( - 125 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "gt-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + ( / ( + ( + ( min v0 4 ) v1 ) 44 ) 16 ) v2 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( * v3 8 ) 1 ) ( - ( + ( + ( * 0 4 ) ( * v3 8 ) ) 0 ) 1 ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( - ( + ( + ( * 3 4 ) ( + ( * v3 8 ) 9 ) ) 3 ) 1 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "and-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 4 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "add-assoc",
      "add-zero",
      "lt-swap-in",
      "add-fact-mul",
      "sub-to-add",
      "eqgt-to-not-lt",
      "mul-comm",
      "mul-assoc",
      "and-comm",
      "min-mul-in-pos",
      "lt-swap-out",
      "min-mul-in-neg",
      "mul-cancel-div",
      "min-div-in-pos",
      "ineq-to-eq",
      "mod-const-add",
      "mul-one",
      "and-min-to-lt",
      "or-x-and-x-y",
      "and-lt-gt-to-0",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 3 ) ( - ( + ( * v0 3 ) v1 ) 3 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 3 ) ( - ( + ( * v0 3 ) v1 ) 1 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 5 ) ( - v2 5 ) ) ) ( >= ( - ( + ( + ( * 126 4 ) v2 ) 3 ) 5 ) ( + v2 501 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-swap-out",
      "and-lt-gt-to-0",
      "sub-to-add",
      "min-sub-both",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "add-assoc",
      "Eq-lt-min",
      "min-x-x",
      "add-comm",
      "lt-to-zero",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= ( + v0 35 ) ( + v0 35 ) ) ) ( <= ( - ( + 0 ( / v1 8 ) ) 2 ) ( - ( / v1 8 ) 2 ) ) ) ( >= ( - ( + 3 ( + ( / v1 8 ) 20 ) ) 2 ) ( + ( / v1 8 ) ( / ( + ( % v1 8 ) 148 ) 8 ) ) ) ) ( <= ( * v2 55 ) ( * v2 55 ) ) ) ( >= ( + ( * v2 55 ) 54 ) ( + ( * v2 55 ) 54 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "min-mod-const-to-const",
      "add-fact-mul",
      "mul-cancel-div",
      "div-minus-in",
      "Eq-lt-min",
      "mod-minus-out",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "mul-comm",
      "mul-zero",
      "eq-comm",
      "lt-mul-div-cancel",
      "add-assoc",
      "add-to-sub",
      "lt-const-pos",
      "lt-min-term+cpos",
      "Eq-min-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "min-ass",
      "min-to-max",
      "mul-assoc",
      "add-assoc",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "add-comm",
      "min-comm",
      "max-to-min",
      "eqlt-to-not-gt",
      "min-div-out-neg",
      "lt-min-max-cancel",
      "and-max-to-eqlt",
      "lt-swap-out",
      "add-dist-mul",
      "lt-max-term+neg-term",
      "or-comm",
      "sub-to-add",
      "mod-const-sub",
      "mod-x-x",
      "and-x-1",
      "min-div-in-neg",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min ( * v0 16 ) 984 ) v1 ) 7 ) ( + -2 ( - ( + ( min ( * v0 16 ) 984 ) v1 ) 5 ) ) ) ) ( >= ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 17 ) ( + 1 ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 16 ) ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 1 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 1 ) ( + ( + v2 v3 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "and-assoc",
      "not-gt-to-eqlt",
      "sub-to-add",
      "and-comm",
      "add-comm",
      "and-eqlt-to-min",
      "min-comm",
      "min-sub-both",
      "add-zero",
      "eqlt-to-not-gt",
      "and-lt-to-min",
      "and-x-1",
      "and-min-to-eqlt",
      "eqgt-to-not-lt",
      "min-ass",
      "not-eq-to-ineq",
      "and-over-or",
      "min-to-max",
      "min-div-mul",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "lt-min-term+cpos",
      "and-max-to-lt",
      "lt-swap-out",
      "and-lt-gt-to-0",
      "lt-const-neg",
      "and-x-x",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v3 10 ) ) ( + -10 v3 ) ) ) ( >= ( + 3 ( + v3 63 ) ) ( + ( - ( - 13 10 ) 1 ) ( + v3 64 ) ) ) ) ( <= ( - ( * v1 4 ) 7 ) ( - ( * v1 4 ) 7 ) ) ) ( >= ( + ( * ( min ( + ( / v0 4 ) 28 ) v1 ) 4 ) 20 ) ( + ( * ( min ( / v0 4 ) ( - v1 ( * ( max v2 4 ) 7 ) ) ) 4 ) 132 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "and-assoc",
      "add-dist-mul",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "min-mul-in-pos",
      "mul-assoc",
      "min-add-both",
      "max-to-min",
      "lt-min-mutual-term",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "add-to-sub",
      "add-assoc",
      "lt-to-zero",
      "lt-swap-in",
      "and-lt-to-min",
      "min-div-out-neg",
      "lt-max-term-term+pos"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 v1 ) 4 ) ( + ( + ( / ( + ( - v0 1 ) v1 ) 4 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-x-x",
      "min-div-mul",
      "min-mul-out-neg",
      "sub-to-add",
      "add-dist-mul",
      "min-x-x-plus-a-neg",
      "min-mul-in-neg",
      "min-sub-both",
      "not-gt-to-eqlt",
      "add-fact-mul",
      "min-mul-out-pos",
      "min-ass",
      "min-div-out-pos",
      "add-denom-mul",
      "lt-mul-div-cancel",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "min-comm",
      "add-comm",
      "mul-assoc",
      "lt-swap-out",
      "mul-comm",
      "min-max",
      "and-eq-eq",
      "lt-max-mutual-term",
      "eq-mul-x-y-0",
      "Eq-min-lt",
      "mul-one",
      "lt-min-term+cpos",
      "gt-to-lt",
      "min-max-min-y",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 v1 ) ( + ( + v0 1 ) v1 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 64 ) 64 ) 64 ) ( * v0 64 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( min ( * v0 8 ) 252 ) v1 ) ( / ( + ( + v2 v3 ) 15 ) 4 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "eq-x-x"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 68 ) v1 ) v2 ) ( + ( + ( * v0 68 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "sub-to-add",
      "add-comm",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 171 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 177 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "lt-swap-in",
      "add-assoc",
      "sub-to-add",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 248 ) v1 ) ) ( + ( min ( * v0 252 ) 248 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 248 ) 251 ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) v4 ) 7 ) ( + ( + ( + ( min ( * v2 32 ) 93 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( < v0 ( + v0 1 ) )", "end": "1" },
    "rules": ["lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 11 ) 53 ) ( + ( min ( * v1 4 ) 7 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-assoc", "lt-x-x-sub-a", "add-comm"]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 16 ) ( - ( + ( - ( + v0 v1 ) 16 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "sub-to-add",
      "add-to-sub",
      "add-assoc",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "eq-swap",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( >= ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ( + ( + ( min ( * v0 3 ) 5 ) v1 ) v2 ) ) ) ( <= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 0 ) ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) ) ) ( >= ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) v5 ) 3 ) ( + ( + ( * ( + ( * v3 4 ) v4 ) 4 ) 3 ) v5 ) ) ) ( <= ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) ) ) ( >= ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ( + ( + ( min ( * v6 69 ) 68 ) ( + ( * v7 23 ) ( + ( min ( * v8 6 ) 17 ) ( * v9 2 ) ) ) ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "add-comm",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 4 ) v1 ) 5 ) ( - ( + ( * v0 4 ) ( + v1 1 ) ) 17 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "mul-assoc",
      "add-to-sub",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 4 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 4 ) ) ) ( >= ( - ( + ( + ( * v0 4 ) v1 ) 3 ) 4 ) ( - ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * v2 250 ) ) 4 ) 1 ) ( - ( * ( + ( / ( + ( min v0 1000 ) v1 ) 4 ) ( * ( + v2 1 ) 250 ) ) 4 ) 1000 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-zero",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 8 ) ( * v0 8 ) ) ) ( >= ( * v0 8 ) ( * v0 8 ) ) ) ( <= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ( - ( + ( * ( + ( * ( / v1 250 ) 2 ) v2 ) 4 ) ( + ( * v3 2 ) v4 ) ) 5 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + 0 v0 ) ) ) ( >= ( + ( - ( + 125 0 ) 1 ) v0 ) ( + ( - ( + 125 0 ) 1 ) v0 ) ) ) ( <= ( + v1 0 ) ( + 0 v1 ) ) ) ( >= ( + v1 3 ) ( + ( - ( + 4 0 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-comm", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( min ( * v2 32 ) 93 ) v3 ) ( + ( + ( min ( * v2 32 ) 93 ) 0 ) v3 ) ) ) ( >= ( + ( + ( min ( * v2 32 ) 93 ) v3 ) 31 ) ( + ( + ( min ( * v2 32 ) 93 ) ( - ( + 32 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "eq-comm",
      "eq-swap",
      "add-comm",
      "add-fact-mul",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + v0 v1 ) 2 ) 0 ) ( + ( * ( + v0 v1 ) 2 ) 0 ) ) ) ( >= ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ( + ( * ( + v0 v1 ) 2 ) ( - ( + 3 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "min-x-x",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min v0 5 ) 10 ) ( - ( + ( - ( min v0 5 ) 10 ) ( - 11 ( min v0 5 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "add-fact-mul",
      "min-add-both",
      "Eq-min-c-pos",
      "add-comm",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "add-assoc",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( * v0 4 ) 7 ) ( + ( + ( * ( - v0 1 ) 4 ) 3 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 4 2 ) 1 ) v0 ) ( + ( - ( - 4 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v1 ) 0 ) 7 ) ( + -2 ( - v1 5 ) ) ) ) ( >= ( - ( + ( + ( * 252 4 ) v1 ) 3 ) 7 ) ( + ( - ( - 4 2 ) 1 ) ( + v1 1000 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x-plus-a-neg",
      "not-gt-to-eqlt",
      "sub-to-add",
      "min-x-x",
      "lt-swap-in",
      "add-comm",
      "eqgt-to-not-lt",
      "eq-x-x",
      "Eq-lt-min",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 10 ) ( - ( + ( - v0 10 ) 8 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-comm",
      "mul-zero",
      "add-assoc",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "eq-swap",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + v0 1 ) 8 ) 5 ) ) ( * ( + v0 1 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-dist-mul",
      "and-lt-to-min",
      "and-min-to-lt",
      "lt-swap-out",
      "min-comm",
      "min-sub-both",
      "lt-swap-in",
      "add-assoc",
      "add-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 ( + 0 v2 ) ) ) ( >= ( + v2 124 ) ( + ( - ( + 125 0 ) 1 ) v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ( + ( * ( + 0 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * 31 4 ) ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 15 ) ( + ( * ( + 127 ( + ( / v0 4 ) ( * v1 128 ) ) ) 4 ) 3 ) ) ) ( <= ( * ( + v2 v3 ) 4 ) ( * ( + v2 v3 ) 4 ) ) ) ( >= ( + ( * ( + v2 v3 ) 4 ) 3 ) ( + ( * ( + v2 v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) 4 ) 4 ) ( * ( min ( * ( min ( + ( * v2 32 ) ( * ( * ( / v1 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v2 4 ) ( * ( * ( / v1 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v3 v1 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v2 128 ) ( + ( * ( * ( / v1 250 ) 2 ) 128 ) 3 ) ) ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "eq-x-x",
      "add-assoc",
      "min-mul-in-pos",
      "min-x-x-plus-a-pos",
      "div-cancel-mul",
      "mul-assoc",
      "add-fact-mul",
      "min-ass",
      "min-comm",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) 0 ) 4 ) 0 ) 8 ) ( - ( * ( + 0 v0 ) 8 ) 8 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) 6 ) 4 ) 3 ) 8 ) ( - ( * ( + ( - ( + 4 0 ) 1 ) v0 ) 8 ) 8 ) ) ) ( <= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( >= ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ( - ( + ( + ( * v1 2 ) v2 ) v3 ) 1 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-dist-mul",
      "mul-zero",
      "add-fact-mul",
      "eqgt-to-not-lt",
      "sub-to-add",
      "mul-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "mul-assoc",
      "lt-swap-out",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 4 ) 0 ) ( * v3 4 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * ( min v3 11 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-lt",
      "eq-x-x",
      "min-add-both",
      "add-zero",
      "lt-to-zero",
      "min-x-x",
      "min-mul-in-pos",
      "Eq-lt-min",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 63 ) v1 ) v2 ) ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 1 4 ) v0 ) 3 ) ( + ( + ( * 1 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max v0 1 ) -4 ) 4 ) 4 ) ( * ( max v0 1 ) -4 ) )",
      "end": "1"
    },
    "rules": ["div-cancel-mul", "max-to-min", "eq-x-x", "mul-comm", "mul-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) ( * ( - v1 ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) ) 2 ) ) 4 ) 3 ) ( + ( * v1 8 ) 3 ) ) ) ( <= ( - ( * v2 8 ) 5 ) ( - ( * v2 8 ) 5 ) ) ) ( >= ( + ( * v2 8 ) 7 ) ( + ( * v2 8 ) 7 ) ) ) ( <= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) ) ( >= ( + ( min ( * v3 69 ) 68 ) v4 ) ( + ( min ( * v3 69 ) 68 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-assoc",
      "add-zero",
      "mul-comm",
      "add-to-sub",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "mul-zero",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( + v0 v1 ) 8 ) 67 ) ( - ( + ( - ( * ( + v0 v1 ) 8 ) 67 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "add-assoc",
      "mul-assoc",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( max ( + v0 4 ) v1 ) 3 ) ( + -3 v0 ) ) ) ( >= ( + v0 1 ) ( + ( - ( - 5 3 ) 1 ) v0 ) ) ) ( <= ( + ( - ( + ( * 0 4 ) v2 ) 3 ) 0 ) ( + -3 v2 ) ) ) ( >= ( + ( + ( + ( * ( - ( + 4 0 ) 1 ) 4 ) v2 ) ( - ( - 5 3 ) 1 ) ) 3 ) ( + ( - ( - 5 3 ) 1 ) ( + v2 15 ) ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "0"
    },
    "rules": [
      "min-to-max",
      "eq-swap",
      "min-max-const",
      "min-comm",
      "Eq-lt-min",
      "add-to-sub",
      "add-comm",
      "add-dist-mul",
      "Eq-min-c-pos",
      "min-sub-both",
      "add-assoc",
      "sub-to-add",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 62 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( >= ( + ( + ( * v1 500 ) v2 ) v3 ) ( + ( + ( * v1 500 ) v2 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( * v0 4 ) 5 ) ( - ( * v0 4 ) 5 ) ) ) ( >= ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ( + ( * v0 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) ( - ( * v1 32 ) 20 ) ) 0 ) ( - ( * ( - ( * v1 8 ) 3 ) 4 ) 5 ) ) ) ( >= ( + ( + ( * 168 4 ) ( + ( * v1 32 ) 661 ) ) 3 ) ( + ( * ( + ( * v1 8 ) 165 ) 4 ) ( - ( - 7 5 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "lt-swap-out",
      "mul-assoc",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-dist-mul",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-denom-div"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + v0 v1 ) 2 ) ( - ( + v0 v1 ) 2 ) ) ) ( >= ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ( + ( + v0 v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * ( % v2 16 ) 4 ) 0 ) ( + ( * ( % v2 16 ) 4 ) 0 ) ) ) ( >= ( + ( * ( % v2 16 ) 4 ) 3 ) ( + ( * ( % v2 16 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= ( * v4 9 ) ( + ( * v4 9 ) 0 ) ) ) ( >= ( + ( * v4 9 ) 8 ) ( + ( * v4 9 ) ( - ( + 9 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "sub-to-add",
      "lt-swap-out",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min v0 4 ) v1 ) 4 ) ( + 0 ( - ( + ( min v0 4 ) v1 ) 4 ) ) ) ) ( >= ( - ( + v0 v1 ) 1 ) ( + ( - ( + 4 0 ) 1 ) ( - ( + v0 v1 ) 4 ) ) ) ) ( <= ( + 0 ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) v4 ) 4 ) ) ( + ( + ( + ( min ( * v2 16 ) 47 ) ( * v3 8 ) ) 7 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 220 ) v1 ) ) ( + ( min ( * v0 32 ) 220 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 220 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 220 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) 4 ) 4 ) ( * ( min ( + ( * v0 4 ) ( * ( * ( / v1 250 ) 16 ) 4 ) ) ( + ( * ( / ( + v1 999 ) 250 ) 64 ) 85 ) ) 4 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ( - ( + 0 ( + ( min v0 4 ) v1 ) ) 4 ) ) ) ( >= ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ( - ( + 3 ( + ( * ( / ( - ( max v0 4 ) 1 ) 4 ) 4 ) ( + ( min v0 4 ) v1 ) ) ) 4 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) v4 ) ( + ( + ( * v2 4 ) v3 ) v4 ) ) ) ( <= 0 0 ) ) ( >= 3 3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( + ( * v1 16 ) v2 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "lt-swap-in",
      "sub-to-add",
      "and-min-to-lt",
      "min-sub-both",
      "lt-swap-out",
      "add-comm",
      "and-lt-to-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) 0 ) ( / v0 4 ) ) 2 ) ( - ( + 0 ( / v0 4 ) ) 2 ) ) ) ( >= ( - ( + ( + ( * 32 4 ) 3 ) ( + ( / v0 4 ) 132 ) ) 2 ) ( - ( + 3 ( + ( / v0 4 ) 260 ) ) 2 ) ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 2 ( + ( / v1 4 ) 30 ) ) ( - ( + 33 ( / v1 4 ) ) 1 ) ) ) ( <= ( * v2 16 ) ( + ( * v2 16 ) 0 ) ) ) ( >= ( + ( * v2 16 ) 15 ) ( + ( * v2 16 ) ( - ( + 16 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( >= ( % ( + ( + v0 v1 ) v2 ) 16 ) ( % ( + ( + v0 v1 ) v2 ) 16 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 0 ) ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * ( % v4 4 ) 3 ) v5 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 8 ) 3 ) ( - ( * ( + v0 1 ) 8 ) 4 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "add-dist-mul",
      "add-comm",
      "add-assoc",
      "lt-x-x-sub-a",
      "mul-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 5 ) ( - ( - v0 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - ( + ( - ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) 7 ) ( - 9 ( max ( min ( - ( * v0 8 ) v1 ) 5 ) -2 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "min-sub-both",
      "sub-to-add",
      "min-add-both",
      "mul-one",
      "add-comm",
      "max-min-switch",
      "add-assoc",
      "and-comm",
      "and-min-to-eqlt",
      "add-fact-mul",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( * ( min v0 12 ) 4 ) 52 ) ( - ( + ( - ( * ( min v0 12 ) 4 ) 52 ) ( + ( * ( min v0 12 ) -4 ) 56 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "min-mul-in-pos",
      "add-assoc",
      "eq-comm",
      "eq-swap",
      "mul-zero",
      "Eq-min-c-pos",
      "sub-to-add",
      "add-fact-mul",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + v0 v1 ) 8 ) 11 ) ( - ( min ( max ( * v1 8 ) ( + ( * ( + ( + v0 1 ) v1 ) 8 ) 5 ) ) ( * ( + ( + v0 1 ) v1 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-mul-pos-cancel",
      "lt-swap-in",
      "lt-to-zero",
      "lt-swap-out",
      "sub-to-add",
      "mul-comm",
      "add-assoc",
      "and-comm",
      "and-min-to-lt",
      "add-comm",
      "add-denom-div",
      "and-lt-to-min",
      "div-minus-up",
      "and-over-or"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "eq-comm",
      "add-zero",
      "mul-assoc",
      "Eq-min-c-pos",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "add-to-sub",
      "min-add-both",
      "eq-swap",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) ) ( >= ( + ( * v3 32 ) v4 ) ( + ( * v3 32 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 16 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 16 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( / v0 16 ) 2 ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + ( / v0 16 ) 66 ) ( + ( + 3 ( + ( / v0 16 ) 60 ) ) 3 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + -2 ( + ( * v1 8 ) 1 ) ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + 3 ( + ( * v1 8 ) 8 ) ) ) ) ( <= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) ) ( >= ( + ( * v2 2 ) v3 ) ( + ( * v2 2 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "mul-zero",
      "sub-to-add",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "lt-swap-in",
      "add-comm",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 5 ) ( + -5 v0 ) ) ) ( >= ( + v0 1000 ) ( + 1 ( + v0 999 ) ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 1 ) ( - ( + v1 v2 ) 5 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 1 ) ( + ( + v1 v2 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "and-lt-gt-to-0",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "sub-to-add",
      "lt-swap-out",
      "lt-x-x-sub-a",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "Eq-lt-min",
      "add-assoc",
      "min-x-x",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( * v0 32 ) ) ( - 63 ( * v0 32 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "gt-to-lt",
      "add-fact-mul",
      "mul-assoc",
      "mul-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( min ( + ( max ( * v1 8 ) ( + ( + v0 1 ) 4 ) ) 1 ) ( + v0 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "min-sub-both",
      "and-min-to-lt",
      "min-comm",
      "sub-to-add",
      "add-comm",
      "lt-swap-in",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * 124 4 ) v0 ) 3 ) ( + ( + ( * 124 4 ) v0 ) 3 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ( + ( + ( min ( * v1 63 ) 62 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 6 ) ( - ( + ( + v0 1 ) v1 ) 6 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( * v0 2 ) ( + ( * v0 2 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( / ( - v1 v0 ) 3 ) 3 ) v0 ) 2 ) 6 ) ( + ( * ( + ( + ( * ( / ( - v1 v0 ) 3 ) 3 ) v0 ) 2 ) 2 ) 2 ) ) ) ( <= ( - ( max ( * v2 2 ) ( + ( * ( + v3 v2 ) 2 ) 1 ) ) 10 ) ( - ( + ( * ( + v3 v2 ) 2 ) 0 ) 10 ) ) ) ( >= ( - ( * ( + v3 v2 ) 2 ) 8 ) ( - ( + ( * ( + v3 v2 ) 2 ) 2 ) 10 ) ) ) ( <= ( + ( * 0 4 ) 0 ) ( + ( * 0 4 ) 0 ) ) ) ( >= ( + ( * 4 4 ) 3 ) ( + ( * 4 4 ) 3 ) ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "add-comm",
      "add-to-sub",
      "min-comm",
      "min-sub-both",
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "add-dist-mul",
      "max-to-min",
      "lt-swap-in",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "lt-min-term+cpos",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 4 ) ( - ( + ( + v0 1 ) v1 ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "lt-swap-in",
      "add-fact-mul",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( min ( * v0 42 ) 83 ) ( * v1 3 ) ) v2 ) 5 ) ( - ( + ( + ( min ( * v0 42 ) 83 ) ( * ( + v1 1 ) 3 ) ) v2 ) 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "add-to-sub",
      "add-assoc",
      "mul-assoc",
      "mul-zero",
      "add-dist-mul",
      "add-fact-mul",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "and-eqlt-gt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -10 v0 ) ( + -10 v0 ) ) ) ( >= ( + ( - ( - 13 10 ) 1 ) v0 ) ( + ( - ( - 13 10 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( / v1 4 ) 0 ) 4 ) 0 ) 7 ) ( - ( * ( / v1 4 ) 4 ) 7 ) ) ) ( >= ( - ( + ( * ( + ( / v1 4 ) ( - ( + 35 0 ) 1 ) ) 4 ) 3 ) 7 ) ( + ( * ( / v1 4 ) 4 ) 132 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-dist-mul",
      "eqgt-to-not-lt",
      "add-assoc",
      "mul-comm",
      "eqlt-to-not-gt",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 68 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-assoc",
      "mul-zero",
      "mul-comm",
      "eq-comm",
      "add-comm",
      "sub-to-add",
      "eq-swap",
      "add-assoc",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 4 ) ( - ( + ( - v0 4 ) 6 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "sub-to-add",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 3 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-zero",
      "eq-swap",
      "mul-comm",
      "add-fact-mul",
      "sub-to-add",
      "add-assoc",
      "add-comm",
      "mul-assoc",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -16 ( max ( min v0 116 ) -14 ) ) ( - ( + ( - -16 ( max ( min v0 116 ) -14 ) ) ( + ( max ( min v0 116 ) -14 ) 18 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-pos",
      "eq-comm",
      "add-dist-mul",
      "mul-comm",
      "add-comm",
      "sub-to-add",
      "mul-assoc",
      "Eq-min-c-pos",
      "add-fact-mul",
      "eq-swap",
      "add-assoc",
      "max-to-min",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 17 ) ( - ( + ( - v0 17 ) ( + ( min ( + ( * ( + ( / v1 4 ) v2 ) 4 ) ( - v3 ( * ( / v1 4 ) 4 ) ) ) -21 ) 22 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "lt-swap-out",
      "lt-swap-in",
      "lt-to-zero",
      "add-comm",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) 0 ) 4 ) 0 ) ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 8 ) ) ) ( >= ( + ( * ( + ( * ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) 2 ) ( * ( - v1 ( / ( - ( min ( * v0 8 ) ( + ( * v1 8 ) 4 ) ) 5 ) 8 ) ) 2 ) ) 4 ) 3 ) ( + ( * v1 8 ) 3 ) ) ) ( <= ( - ( max ( * v2 8 ) ( + v3 10 ) ) 5 ) v3 ) ) ( >= ( + v3 5 ) ( + v3 5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "min-comm",
      "mul-assoc",
      "and-comm",
      "lt-min-term+cpos",
      "lt-swap-in",
      "lt-swap-out",
      "add-dist-mul",
      "sub-to-add",
      "min-to-max",
      "min-mul-in-neg",
      "eqlt-to-not-gt",
      "min-sub-both",
      "min-mul-in-pos",
      "max-to-min",
      "ineq-to-eq",
      "mod-const-sub"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 32 ) 93 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "add-comm", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 2 ) ( - ( + ( - ( + v0 v1 ) 2 ) 69 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-to-sub",
      "sub-to-add",
      "eq-swap",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( * v0 8 ) v1 ) 5 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 4 ) 8 ) 0 )", "end": "1" },
    "rules": [
      "min-max-const",
      "lt-swap-in",
      "not-gt-to-eqlt",
      "eqgt-to-not-lt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( + ( * v0 16 ) v1 ) v2 ) 0 ) 2 ) ( - ( + ( + ( * v0 16 ) v1 ) v2 ) 11 ) ) ) ( >= ( - ( + ( + ( + ( * v0 16 ) v1 ) v2 ) 3 ) 2 ) ( - ( + ( + ( * v0 16 ) v1 ) v2 ) 2 ) ) ) ( <= ( - ( + ( * v3 12 ) v4 ) 11 ) ( - ( + ( * v3 12 ) v4 ) 11 ) ) ) ( >= ( + ( + ( * v3 12 ) v4 ) 9 ) ( + ( + ( * v3 12 ) v4 ) 9 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "eqgt-to-not-lt",
      "min-to-max",
      "and-min-to-eqlt",
      "min-comm",
      "sub-to-add",
      "lt-swap-out",
      "not-gt-to-eqlt",
      "and-x-1",
      "and-eqlt-to-min",
      "div-minus-down",
      "add-comm",
      "add-denom-div",
      "min-div-in-pos",
      "add-zero",
      "min-mod-const-to-const",
      "eqlt-to-not-gt",
      "and-assoc",
      "eq-swap",
      "min-sub-both"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / v0 8 ) ( + ( + ( / ( - v0 1 ) 8 ) 1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-one",
      "eqgt-to-not-lt",
      "mul-assoc",
      "and-comm",
      "min-div-out-pos",
      "mul-comm",
      "lt-mul-div-cancel",
      "div-minus-out",
      "and-min-to-eqlt",
      "min-add-both",
      "add-assoc",
      "min-mul-in-pos",
      "lt-swap-in",
      "min-x-x-plus-a-pos",
      "add-denom-mul",
      "lt-swap-out",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "sub-to-add",
      "add-comm",
      "and-eqlt-eqgt-to-0"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 0 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 3 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( >= ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ( + ( + ( min ( * v3 32 ) 93 ) ( + ( * v4 4 ) v5 ) ) v6 ) ) ) ( <= v7 v7 ) ) ( >= v7 v7 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 18 ( * ( % v0 4 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "Eq-min-c-pos",
      "min-ass",
      "eqlt-to-not-gt",
      "min-max-const",
      "eq-comm",
      "add-zero",
      "not-gt-to-eqlt",
      "and-x-1",
      "mul-comm",
      "min-mul-in-pos",
      "and-min-to-lt",
      "mul-assoc",
      "max-to-min",
      "min-comm",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "lt-mul-pos-cancel",
      "min-mod-const-to-mod",
      "ineq-to-eq",
      "add-assoc",
      "lt-min-term+neg-term",
      "div-minus-out",
      "div-zero",
      "min-mul-in-neg",
      "and-max-to-eqlt",
      "lt-max-term+neg-term",
      "min-lt-cancel",
      "Eq-lt-min",
      "add-dist-mul",
      "mul-cancel-div",
      "min-x-x-plus-a-pos",
      "mod-two",
      "eq-max-lt",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) 4 ) 4 ) ( * ( - ( min ( * ( min ( + ( * v1 76 ) ( * ( * v2 2 ) 4 ) ) ( + ( * v2 8 ) 161 ) ) 4 ) ( + ( * v1 304 ) ( + ( * ( * v2 2 ) 16 ) 3 ) ) ) 20 ) -1 ) )",
      "end": "1"
    },
    "rules": [
      "min-mul-out-neg",
      "min-mul-out-pos",
      "eq-x-x",
      "sub-to-add",
      "min-sub-both",
      "min-mul-in-neg",
      "add-denom-div",
      "add-assoc",
      "min-ass",
      "add-fact-mul",
      "min-x-x-plus-a-pos",
      "min-comm",
      "add-comm",
      "mul-comm",
      "mul-assoc",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v1 2 ) 0 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ( - ( + ( + ( * v0 3 ) v1 ) v2 ) 3 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v3 ) 0 ) 5 ) ( - v3 5 ) ) ) ( >= ( - ( + ( + ( * 126 4 ) v3 ) 3 ) 5 ) ( + v3 501 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "mul-zero",
      "add-comm",
      "mul-assoc",
      "eqgt-to-not-lt",
      "lt-swap-in",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "mul-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( * v0 2 ) ) ( - 499 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "add-assoc",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "add-fact-mul",
      "add-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 5 ) ( + ( + ( + ( - v0 1 ) v1 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-assoc",
      "add-to-sub",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-comm",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 3 ) ( - ( min ( max ( + ( + v0 1 ) 9 ) ( + ( min v1 4 ) v2 ) ) ( + ( + v0 1 ) 4 ) ) 6 ) )",
      "end": "0"
    },
    "rules": [
      "min-sub-both",
      "add-comm",
      "sub-to-add",
      "and-comm",
      "and-min-to-lt",
      "add-assoc",
      "and-lt-to-min",
      "lt-swap-out",
      "lt-swap-in",
      "mul-cancel-div"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( + ( * v0 8 ) v1 ) v2 ) 2 ) 2 ) ( * ( + ( + ( * v0 8 ) v1 ) ( + v2 1 ) ) 2 ) )",
      "end": "0"
    },
    "rules": ["add-dist-mul", "lt-to-zero", "mul-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 503 ) v1 ) ( + ( * v2 16 ) v3 ) ) 2 ) ( - ( + ( + ( * v2 16 ) ( + v3 1 ) ) ( + ( * v0 503 ) v1 ) ) 11 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "lt-swap-out",
      "sub-to-add",
      "add-comm",
      "mul-assoc",
      "mul-zero",
      "add-assoc",
      "add-dist-mul",
      "lt-swap-in",
      "add-fact-mul",
      "lt-max-term-term+pos",
      "Eq-min-c-pos",
      "min-mul-in-pos",
      "Eq-max-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) v1 ) ( + ( * v0 4 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 9 ) 9 ) ( * v0 9 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + ( + v3 v2 ) 7 ) 8 ) ( / ( + ( + v3 v2 ) 7 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( >= ( % ( + v0 v1 ) 16 ) ( % ( + v0 v1 ) 16 ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 4 ) 29 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 29 ( max ( * v3 4 ) 29 ) ) 7 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-denom-mul",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 4 ( * v0 2 ) ) ( - 509 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 33 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 33 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "add-fact-mul",
      "add-comm",
      "mul-zero",
      "mul-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "lt-swap-out",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( - 4 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 509 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "add-comm",
      "mul-zero",
      "add-fact-mul",
      "eq-swap"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 0 ) ( * ( + ( * v0 2 ) v1 ) 2 ) ) ) ( >= ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 10 ) ( - ( + ( - ( + v0 v1 ) 10 ) 143 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( max ( - ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 1002 ) ) v1 ) ( + ( * v0 4 ) v1 ) ) -1002 ) 1009 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "add-to-sub",
      "min-sub-both",
      "sub-to-add",
      "add-fact-mul",
      "min-max-const",
      "add-comm",
      "min-ass",
      "max-to-min",
      "min-to-max",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * v0 8 ) 0 ) 5 ) ( - ( + ( * v0 8 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ( - ( + ( * v0 8 ) ( - ( + 16 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( >= ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ( - ( + ( * v1 8 ) ( + ( * v2 3 ) v3 ) ) 5 ) ) ) ( <= ( + ( * v4 4 ) 0 ) ( + ( * v4 4 ) 0 ) ) ) ( >= ( + ( * v4 4 ) 3 ) ( + ( * v4 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( > ( - 10 ( + ( * v0 16 ) v1 ) ) ( - 2009 ( + ( * v0 16 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-assoc",
      "lt-swap-in",
      "gt-to-lt",
      "mul-zero",
      "add-comm",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 125 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 125 ) ( + v1 1 ) ) v2 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( max ( * v0 2 ) -1 ) v1 ) ( - ( + ( * v0 2 ) v1 ) 1 ) ) ) ( >= ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( + ( * v0 2 ) v1 ) 1 ) ) ) ( <= ( - ( + 0 ( + ( min v2 0 ) v3 ) ) 1 ) ( - ( + ( min v2 0 ) v3 ) 1 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( max v2 0 ) 4 ) 4 ) ( + ( min v2 0 ) v3 ) ) 4 ) ) 1 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "min-to-max",
      "min-sub-both",
      "mul-comm",
      "add-fact-mul",
      "add-to-sub",
      "add-comm",
      "eq-x-x",
      "min-ass",
      "eq-max-lt",
      "mul-assoc",
      "eq-swap",
      "and-x-1",
      "min-add-both",
      "max-to-min",
      "and-min-to-eqlt",
      "Eq-lt-min",
      "mul-zero",
      "eq-comm",
      "mod-two"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 2 ) 2 ) ( * ( + v0 1 ) 2 ) )",
      "end": "0"
    },
    "rules": ["mul-comm", "add-dist-mul", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ( - ( - ( + ( + ( * v0 503 ) v1 ) v2 ) 5 ) 3 ) ) ) ( >= ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ( - ( + ( + ( + ( * v0 503 ) v1 ) v2 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= ( + ( * v3 4 ) 0 ) ( + ( * v3 4 ) 0 ) ) ) ( >= ( + ( * v3 4 ) 3 ) ( + ( * v3 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( >= ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ( + ( + ( min ( * v1 63 ) 62 ) ( + ( min ( * v2 2 ) 61 ) v3 ) ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v1 64 ) 436 ) ( * ( + ( * v2 4 ) v3 ) 4 ) ) v4 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * ( + ( * v2 4 ) v3 ) 4 ) 3 ) ) v4 ) ) ) ( <= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( >= ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ( + ( + ( * v5 250 ) ( + ( min ( * v6 32 ) 218 ) v7 ) ) v8 ) ) ) ( <= v9 v9 ) ) ( >= v9 v9 ) )",
      "end": "1"
    },
    "rules": [
      "lt-swap-in",
      "add-assoc",
      "lt-to-zero",
      "sub-to-add",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( + ( / ( - 0 ( max ( - ( * ( max ( min ( * v0 2 ) 509 ) 10 ) 4 ) v1 ) ( + ( * v2 4 ) 52 ) ) ) 4 ) v2 ) 14 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "div-minus-down",
      "min-sub-both",
      "add-denom-mul",
      "min-add-both",
      "min-comm",
      "min-div-in-neg",
      "mul-assoc",
      "lt-to-zero",
      "sub-to-add",
      "add-denom-div",
      "add-zero",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "and-min-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 0 ( + ( * v0 4 ) v1 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) v1 ) 3 ) ) ( - ( + 3 ( + ( + ( * v0 4 ) v1 ) 8 ) ) 2 ) ) ) ( <= ( - v2 2 ) ( + ( + -5 v2 ) 3 ) ) ) ( >= ( + v2 127 ) ( + ( + 124 v2 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "and-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -62 ) ( - ( + ( max ( min v0 0 ) -62 ) ( - 5 ( max ( min v0 0 ) -62 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-min-term+cpos",
      "min-add-both",
      "min-comm",
      "add-assoc",
      "max-min-switch"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max ( min v0 19 ) ( + ( min 19 ( - ( + ( min v0 19 ) ( - 20 ( min v0 19 ) ) ) 1 ) ) 1 ) ) ( min v0 19 ) )",
      "end": "0"
    },
    "rules": [
      "min-max",
      "add-comm",
      "min-sub-both",
      "and-min-to-eqlt",
      "min-comm",
      "min-ass",
      "sub-to-add",
      "max-to-min",
      "add-dist-mul",
      "mul-comm",
      "add-to-sub",
      "min-mul-in-neg"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( + ( * v0 2 ) v1 ) 2 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 2 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "eq-comm",
      "mul-zero",
      "eq-swap",
      "add-fact-mul",
      "sub-to-add",
      "add-comm",
      "mul-comm",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 5 ) ( + -5 ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) ) ) ) ( >= ( + ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 16 ) ( + 1 ( + ( + ( + ( min ( * v0 48 ) 620 ) ( * v1 16 ) ) v2 ) 15 ) ) ) ) ( <= ( + ( + ( + v3 v4 ) 0 ) 1 ) ( - ( + v3 v4 ) 5 ) ) ) ( >= ( + ( + ( + v3 v4 ) 3 ) 1 ) ( + ( + v3 v4 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "mul-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "add-zero",
      "and-eqlt-to-min",
      "and-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-to-max",
      "min-sub-both",
      "and-min-to-eqlt",
      "min-comm",
      "add-dist-mul",
      "and-assoc",
      "lt-min-term-term+pos",
      "mod-x-x"
    ]
  },
  {
    "expression": {
      "start": "( >= v0 ( + ( + ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": ["eqgt-to-not-lt", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( >= ( - v0 7 ) ( - ( + ( - v0 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-x-x-sub-a",
      "add-assoc",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 252 ) 248 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= ( - ( + v6 v5 ) 1 ) ( - ( + v6 v5 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-in",
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( max ( min ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) 1999 ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( >= ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ) ) ( <= ( + ( * ( + ( * 0 4 ) v3 ) 4 ) 0 ) ( + ( * ( + 0 v3 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( - 7 ( max v4 7 ) ) 4 ) v3 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( max v4 7 ) -4 ) 31 ) v3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "min-comm",
      "mul-assoc",
      "lt-swap-in",
      "min-mul-in-neg",
      "lt-to-zero",
      "add-dist-mul",
      "max-to-min",
      "mul-comm",
      "min-max-const",
      "min-sub-both",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 1 ) ( - ( - ( + ( + ( * v0 4 ) v1 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 11 2 ) 1 ) ) 3 ) 1 ) ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 11 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 v1 ) ( + v0 ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( >= ( - -6 ( max v0 -3 ) ) ( - ( + ( - -6 ( max v0 -3 ) ) ( + ( max v0 -3 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "add-assoc",
      "sub-to-add",
      "max-to-min",
      "lt-min-term+cpos",
      "min-to-max",
      "lt-swap-in",
      "lt-swap-out",
      "min-sub-both",
      "mul-assoc",
      "add-comm",
      "min-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( + ( - 34 ( max ( * ( % v0 5 ) 7 ) 27 ) ) ( - ( max ( * ( % v0 5 ) 7 ) 27 ) 27 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-mul-pos-cancel",
      "mul-assoc",
      "add-assoc",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm",
      "eqlt-to-not-gt",
      "mod-minus-in",
      "min-mod-const-to-const",
      "add-fact-mul",
      "lt-swap-in",
      "sub-to-add",
      "mul-comm",
      "mul-zero",
      "max-to-min",
      "and-min-to-eqlt"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 64 ) 5 ) 0 )", "end": "1" },
    "rules": [
      "eqgt-to-not-lt",
      "lt-swap-in",
      "min-max-const",
      "Eq-lt-min",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) ) ( + ( + ( * v3 64 ) ( * v4 32 ) ) v5 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v3 2 ) v4 ) 32 ) v5 ) 28 ) ) ( + ( + ( * v3 64 ) ( + ( * v4 32 ) 31 ) ) v5 ) ) ) ( <= ( + ( + ( min ( * v1 4 ) 7 ) ( min ( * v2 11 ) 53 ) ) v6 ) ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) ) ) ( >= ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) v6 ) 3 ) ( + ( + ( + ( min ( * v2 11 ) 53 ) ( min ( * v1 4 ) 7 ) ) 3 ) v6 ) ) ) ( <= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) ) ( >= ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ( + ( * ( min v7 1 ) 9 ) ( + ( min ( * v8 2 ) 7 ) v9 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "lt-swap-in",
      "add-dist-mul",
      "lt-swap-out",
      "mul-zero",
      "mul-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc",
      "sub-to-add",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == 0 ( - ( + 0 ( / ( + ( max ( min ( * ( - ( min ( - ( / ( + ( + v0 v1 ) 3 ) 4 ) ( * v2 126 ) ) ( + ( / v1 4 ) 125 ) ) ( + ( / v1 4 ) ( * v3 32 ) ) ) 4 ) 122 ) -7 ) 15 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "min-mul-in-pos",
      "div-minus-in",
      "eq-comm",
      "add-dist-mul",
      "min-add-both",
      "Eq-min-c-pos",
      "max-to-min",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "min-div-in-pos",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( + v0 v1 ) v2 ) ( - ( - ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-assoc",
      "eqlt-to-not-gt",
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "and-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( min v0 16 ) v1 ) ) 0 ) 18 ) ( - ( + ( min v0 16 ) v1 ) 18 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( max ( min v0 16 ) ( + v0 20 ) ) v1 ) ) 3 ) 18 ) ( + ( + v0 v1 ) 2 ) ) ) ( <= ( + ( + v2 v3 ) 3 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + v2 v3 ) 3 ) ( + ( + v2 v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "and-comm",
      "eqgt-to-not-lt",
      "and-eqlt-eqgt-to-0",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "sub-to-add",
      "add-comm",
      "eq-mul-x-y-0",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "add-denom-div",
      "div-minus-down",
      "eq-comm",
      "lt-swap-out",
      "lt-swap-in",
      "mod-one",
      "and-lt-to-min",
      "mul-cancel-div",
      "and-assoc",
      "and-eq-eq",
      "and-x-1",
      "mod-const-add",
      "max-min-switch",
      "add-zero",
      "and-eqlt-to-max",
      "min-max-max-x",
      "min-to-max",
      "div-cancel",
      "min-max",
      "Eq-min-c-neg"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( * ( + v0 v1 ) 4 ) 267 ) ( - ( * ( + ( + v0 1 ) v1 ) 4 ) 273 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "lt-swap-in",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + 0 ( + ( + ( min v0 500 ) v1 ) v2 ) ) 503 ) ( - ( + ( + 0 ( + ( min v0 500 ) v1 ) ) v2 ) 503 ) ) ) ( >= ( - ( + 3 ( + ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) v2 ) ) 503 ) ( - ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * ( / ( + ( max v0 500 ) 9 ) 4 ) 4 ) ( + ( min v0 500 ) v1 ) ) ) v2 ) 503 ) ) ) ( <= ( + -5 ( - v3 3 ) ) ( + -5 ( - v3 3 ) ) ) ) ( >= ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ( + ( - ( - 6 5 ) 1 ) ( - ( + 135 ( - v3 3 ) ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "add-assoc", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) 0 ) ( + ( * v0 4 ) 0 ) ) ) ( >= ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 0 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v1 4 ) v2 ) 4 ) 15 ) ( + ( * ( + ( + ( * v1 4 ) v2 ) 3 ) 4 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "mul-comm",
      "add-dist-mul",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( >= ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ( % ( - ( + ( + ( + ( * v0 126 ) v1 ) v2 ) v3 ) 3 ) 8 ) ) ) ( <= ( - v4 8 ) ( - ( - ( + 0 v4 ) 5 ) 3 ) ) ) ( >= ( + v4 60 ) ( - ( + ( + ( - ( + 64 0 ) 1 ) v4 ) ( - ( - 6 5 ) 1 ) ) 3 ) ) ) ( <= ( + ( * v5 4 ) 0 ) ( + ( * v5 4 ) 0 ) ) ) ( >= ( + ( * v5 4 ) 3 ) ( + ( * v5 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 10 ) ( - ( + ( - v0 10 ) ( + ( min ( + ( min v1 116 ) v2 ) -16 ) 17 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-in",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "and-comm",
      "add-comm",
      "lt-swap-out",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( * v2 4 ) ( * v2 4 ) ) ) ( >= ( * v2 4 ) ( * v2 4 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "eq-x-x",
      "lt-to-zero",
      "min-x-x",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 4 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 4 ) v3 ) 0 ) ( + ( + ( * v2 4 ) v3 ) 0 ) ) ) ( >= ( + ( + ( * v2 4 ) v3 ) 3 ) ( + ( + ( * v2 4 ) v3 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqgt-to-not-lt",
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 44 ) 8 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "mul-zero",
      "lt-swap-out",
      "min-comm",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-assoc",
      "lt-swap-in",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v0 ) 0 ) 5 ) ( - v0 4 ) ) ) ( >= ( + ( + ( + ( max ( * 63 4 ) -9 ) v0 ) 3 ) 5 ) ( + v0 260 ) ) ) ( <= ( + ( + v1 v2 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + v1 v2 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "add-to-sub",
      "mul-comm",
      "eqgt-to-not-lt",
      "mul-zero",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "add-assoc",
      "mul-assoc",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 3 ) 3 ) ( * v0 3 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= 24 24 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 64 ) 440 ) v1 ) 10 ) ) ( - ( + 0 ( + ( min ( * v0 64 ) 440 ) v1 ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 66 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( + ( min ( * v0 64 ) 440 ) v1 ) 64 ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "sub-to-add",
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) 0 ) v1 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( >= ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ( + ( + ( min ( * v2 3 ) 13 ) v3 ) v4 ) ) ) ( <= ( + ( min ( * v5 4 ) 133 ) 0 ) ( + ( min ( * v5 4 ) 133 ) 0 ) ) ) ( >= ( + ( min ( * v5 4 ) 133 ) 3 ) ( + ( min ( * v5 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) ( + ( * v1 4 ) v2 ) ) v3 ) ( + ( + ( * v0 8 ) ( + ( * v1 4 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "add-assoc", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "and-assoc",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-fact-mul",
      "and-comm",
      "and-lt-to-min",
      "max-to-min",
      "add-assoc",
      "min-add-both",
      "add-zero",
      "add-to-sub",
      "mul-assoc",
      "eqgt-to-not-lt",
      "sub-to-add",
      "min-x-x",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max ( + ( min ( / ( - ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 31 ) 32 ) ( - ( + 0 ( + ( / v2 32 ) 1 ) ) 1 ) ) 1 ) ( min ( max ( + ( / ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 32 ) 1 ) 0 ) ( + ( + ( / v2 32 ) 1 ) 0 ) ) ) ( min ( max ( + ( / ( - ( / ( + ( + v3 v4 ) 3 ) 4 ) ( / v4 4 ) ) 32 ) 1 ) 0 ) ( + ( + ( / v2 32 ) 1 ) 0 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "min-max-max-x",
      "min-div-out-pos",
      "add-comm",
      "lt-to-zero",
      "min-comm",
      "add-dist-mul",
      "add-assoc",
      "eqlt-to-not-gt",
      "min-ass",
      "div-minus-in",
      "max-to-min",
      "add-denom-mul",
      "min-mul-in-neg",
      "min-add-both",
      "min-to-max",
      "min-x-x-plus-a-pos"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) 4 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( + v2 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-in",
      "add-assoc",
      "mul-zero",
      "mul-comm",
      "add-comm",
      "add-fact-mul",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) 0 ) v1 ) ( + ( * v0 125 ) v1 ) ) ) ( >= ( + ( + ( * v0 125 ) ( - ( + 125 0 ) 1 ) ) v1 ) ( + ( + ( * v0 125 ) v1 ) 124 ) ) ) ( <= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( >= ( + ( + ( * v2 500 ) v3 ) v4 ) ( + ( + ( * v2 500 ) v3 ) v4 ) ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 126 ) v1 ) v2 ) 7 ) ( - ( + ( + ( * v0 126 ) v1 ) ( + v2 1 ) ) 10 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-assoc",
      "mul-comm",
      "add-to-sub",
      "add-fact-mul",
      "mul-zero",
      "lt-swap-in",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * 0 4 ) v0 ) 4 ) 0 ) ( + ( * ( + ( + ( * 0 2 ) v0 ) 0 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * ( / ( - 16 ( max ( * ( + ( * v1 2 ) v2 ) 4 ) 13 ) ) 4 ) 4 ) v0 ) 4 ) 15 ) ( + ( * ( + ( + ( * ( + ( * ( / ( - 16 ( max ( * ( + ( * v1 2 ) v2 ) 4 ) 13 ) ) 4 ) 2 ) 1 ) 2 ) v0 ) 1 ) 4 ) 3 ) ) ) ( <= ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1000 ) ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1000 ) ) ) ( >= ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1 ) ( - ( * ( + ( / ( + ( min v3 1000 ) v4 ) 4 ) ( * v5 250 ) ) 4 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 19 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-assoc",
      "mul-assoc",
      "eqgt-to-not-lt",
      "add-fact-mul",
      "min-add-both",
      "and-eqlt-to-min",
      "lt-const-neg",
      "sub-to-add",
      "Eq-max-c-pos",
      "min-div-out-neg",
      "min-div-mul",
      "and-eq-eq",
      "or-to-and",
      "min-mul-in-neg",
      "mul-max-min",
      "eq-swap",
      "and-eqlt-gt-to-0",
      "eq-max-lt",
      "add-dist-mul",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "mul-comm",
      "min-div-in-pos",
      "gt-to-lt",
      "and-lt-gt-to-0",
      "and-lt-to-min",
      "lt-max-mutual-term",
      "and-comm",
      "add-to-sub",
      "not-eq-to-ineq",
      "lt-to-zero",
      "min-comm",
      "and-max-to-lt",
      "mod-minus-out",
      "mod-two",
      "min-mod-const-to-mod",
      "lt-max-term-term+pos",
      "add-denom-mul",
      "mod-const-add",
      "min-max-const",
      "min-ass"
    ]
  },
  {
    "expression": {
      "start": "( == ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "min-to-max",
      "eq-comm",
      "eq-swap",
      "Eq-min-c-pos",
      "mul-assoc",
      "add-fact-mul",
      "min-add-both",
      "add-assoc",
      "add-comm",
      "add-dist-mul",
      "max-min-switch",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / v0 8 ) ( / ( + ( + ( min ( * 0 8 ) 14 ) 0 ) v0 ) 8 ) ) ) ( >= ( / ( + v0 21 ) 8 ) ( / ( + ( + ( min ( * ( - ( + 3 0 ) 1 ) 8 ) 14 ) ( - ( + 8 0 ) 1 ) ) v0 ) 8 ) ) ) ( <= ( + ( * v1 2 ) v2 ) ( + ( + ( * v1 2 ) 0 ) v2 ) ) ) ( >= ( + ( + ( * v1 2 ) v2 ) 1 ) ( + ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) v2 ) ) ) ( <= 0 ( + ( min ( * 0 4 ) 133 ) 0 ) ) ) ( >= 139 ( + ( min ( * ( - ( + 35 0 ) 1 ) 4 ) 133 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( + ( - 34 ( max ( * ( % v0 7 ) 5 ) 29 ) ) ( - ( max ( * ( % v0 7 ) 5 ) 29 ) 29 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "and-min-to-eqlt",
      "min-mod-const-to-const",
      "max-to-min",
      "not-gt-to-eqlt",
      "mul-assoc",
      "add-fact-mul",
      "eqlt-to-not-gt",
      "mod-minus-in",
      "lt-swap-in",
      "sub-to-add",
      "mul-comm",
      "lt-mul-pos-cancel",
      "add-assoc",
      "eqgt-to-not-lt",
      "mul-zero",
      "add-comm",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 58 ) ( - ( + ( + ( + v0 v1 ) 58 ) 75 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-assoc",
      "lt-swap-out",
      "add-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 10 ) ) ( - ( + 0 ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) 10 ) ) ) ( >= ( + 3 ( + ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) 2 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( * v0 4 ) ( + ( min ( * v1 64 ) 440 ) v2 ) ) ) ( - ( - 13 10 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "add-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + 0 ( / v1 4 ) ) ( / v1 4 ) ) ) ( >= ( + 3 ( / ( + v1 54 ) 4 ) ) ( / ( + v1 66 ) 4 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "eq-x-x",
      "add-denom-mul",
      "add-zero",
      "lt-to-zero",
      "add-comm",
      "min-x-x",
      "Eq-lt-min",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + ( - ( * v0 16 ) 5 ) v1 ) 0 ) 3 ) ( - ( + ( * v0 16 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( + ( * v0 16 ) 15 ) v1 ) 3 ) 3 ) ( + ( + ( * v0 16 ) v1 ) 18 ) ) ) ( <= ( - ( max ( + v2 9 ) ( + ( min v3 4 ) v4 ) ) 6 ) ( - v2 2 ) ) ) ( >= ( + v2 3 ) ( + v2 3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-out",
      "and-min-to-eqlt",
      "max-to-min",
      "add-to-sub",
      "min-comm",
      "eqlt-to-not-gt",
      "and-comm",
      "add-dist-mul",
      "min-sub-both",
      "lt-x-x-sub-a",
      "lt-min-max-cancel",
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-mul-in-pos",
      "lt-swap-in",
      "mod-x-x",
      "mul-max-min",
      "add-assoc",
      "and-over-or",
      "min-x-x",
      "mod-one"
    ]
  },
  {
    "expression": { "start": "( == v0 ( - ( + v0 16 ) 1 ) )", "end": "0" },
    "rules": [
      "mul-assoc",
      "mul-zero",
      "eq-comm",
      "add-assoc",
      "mul-comm",
      "add-comm",
      "eq-swap",
      "add-fact-mul",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) 4 ) 4 ) ( + ( * ( min ( * ( min ( + ( * v3 32 ) ( * ( * ( / v2 250 ) 2 ) 32 ) ) ( + ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 8 ) 33 ) ) 4 ) ( + ( * v3 128 ) ( + ( * ( * ( / v2 250 ) 2 ) 128 ) 3 ) ) ) -1 ) ( * ( min ( + ( * v3 4 ) ( * ( * ( / v2 250 ) 2 ) 4 ) ) ( + ( * ( / ( - ( + v4 v2 ) 1 ) 250 ) 8 ) 9 ) ) 32 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-mul-in-neg",
      "mul-assoc",
      "min-x-x-plus-a-pos",
      "add-fact-mul",
      "div-cancel-mul",
      "mul-one",
      "mul-comm",
      "eq-x-x",
      "add-dist-mul",
      "min-ass",
      "add-assoc",
      "max-to-min",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) ( - 48 ( min ( * ( max v0 1 ) 16 ) 40 ) ) ) ( - ( min ( * ( max v0 1 ) 16 ) 40 ) 44 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "min-comm",
      "add-to-sub",
      "mul-comm",
      "add-comm",
      "min-add-both",
      "and-min-to-eqlt",
      "mul-assoc",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( - ( + ( + ( * v1 4 ) v2 ) 0 ) 2 ) ( - ( + ( + ( * v1 4 ) 0 ) v2 ) 2 ) ) ) ( >= ( - ( + ( + ( * v1 4 ) v2 ) 3 ) 2 ) ( - ( + ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) v2 ) 2 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 2 ) ) ) ( >= ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 2 ) 1 ) ) 3 ) ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * v0 32 ) v1 ) 2 ) 499 ) 0 ) ) ( - ( max ( min ( * ( + ( * ( + ( * v0 4 ) v2 ) 8 ) v1 ) 2 ) 483 ) -16 ) ( max ( min ( * ( + ( * ( + ( * v0 4 ) v2 ) 8 ) v1 ) 2 ) 499 ) 0 ) ) ) 4 ) 72 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "min-add-both",
      "not-gt-to-eqlt",
      "sub-to-add",
      "lt-mul-pos-cancel",
      "add-comm",
      "add-assoc",
      "add-denom-div",
      "div-minus-down",
      "mul-comm",
      "max-min-switch",
      "and-min-to-lt",
      "min-mul-in-neg",
      "min-comm",
      "add-fact-mul",
      "and-min-to-eqlt",
      "min-mul-in-pos",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "mul-zero",
      "eq-swap",
      "add-zero",
      "div-minus-in",
      "min-to-max",
      "lt-swap-in",
      "and-assoc",
      "min-ass",
      "add-to-sub",
      "and-comm",
      "add-dist-mul",
      "mul-assoc",
      "gt-to-lt",
      "lt-const-pos",
      "Eq-max-c-neg",
      "mul-one",
      "max-to-min",
      "and-x-1",
      "mod-const-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) 0 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * ( / v0 250 ) 2 ) ( + ( * v1 2 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( >= ( - ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 5 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqgt-to-not-lt", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 31 4 ) v0 ) 3 ) ( + ( + ( * 31 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( >= ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ( + ( + ( min ( * v1 8 ) 117 ) v2 ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + ( * v0 8 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + ( + ( * v0 8 ) 7 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-assoc",
      "lt-to-zero",
      "add-comm",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( + v0 1 ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "mul-comm",
      "mul-zero",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "lt-swap-in",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + 3 ( + v0 248 ) ) ( + ( + ( * ( - ( + 63 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 2 ) v1 ) 1 ) ( + ( * ( + v0 1 ) 2 ) v1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-x-x-sub-a",
      "add-dist-mul",
      "add-assoc",
      "lt-swap-in",
      "mul-comm",
      "sub-to-add",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 104 ) v1 ) ( + ( * v0 104 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( >= 0 ( - ( + 0 ( + ( * ( / ( + ( % ( + v0 v1 ) 250 ) 124 ) 250 ) 16 ) 23 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "min-to-max",
      "mul-assoc",
      "add-comm",
      "min-sub-both",
      "add-zero",
      "not-gt-to-eqlt",
      "eqlt-to-not-gt",
      "min-div-in-pos",
      "add-fact-mul",
      "add-to-sub",
      "min-comm",
      "and-min-to-eqlt",
      "mul-zero",
      "min-mul-in-pos",
      "lt-mul-div-cancel",
      "div-minus-in",
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "lt-mul-pos-cancel",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "add-denom-mul",
      "Eq-lt-min",
      "eq-swap",
      "min-x-x-plus-a-pos",
      "Eq-max-c-pos",
      "and-x-1",
      "or-over-and",
      "min-mod-const-to-const",
      "mul-max-min",
      "lt-min-term+neg-term",
      "and-max-to-lt",
      "max-to-min",
      "and-x-not-x",
      "and-assoc",
      "mul-one",
      "lt-to-zero",
      "and-comm",
      "Eq-min-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - v0 4 ) ( + ( + ( - v0 1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-swap-in",
      "add-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 2 ) 0 ) 5 ) ( + -2 ( - ( + ( * v0 4 ) v1 ) 5 ) ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 4 2 ) 1 ) ) 3 ) 5 ) ( + ( - ( - 4 2 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 1002 ) ) v1 ) 1000 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "Eq-lt-min",
      "add-assoc",
      "min-x-x",
      "min-add-both",
      "add-to-sub",
      "min-comm",
      "eq-x-x",
      "add-fact-mul",
      "sub-to-add",
      "add-comm",
      "min-ass",
      "lt-swap-out",
      "eqgt-to-not-lt",
      "max-to-min",
      "not-eq-to-ineq",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) ( - ( max ( + ( * v0 3 ) v1 ) 1999 ) 1996 ) ) ( - 1999 ( max ( + ( * v0 3 ) v1 ) 1999 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-min-term+cpos",
      "mul-assoc",
      "eqlt-to-not-gt",
      "and-min-to-eqlt",
      "sub-to-add",
      "lt-swap-out",
      "add-comm",
      "Eq-lt-min",
      "min-max",
      "min-comm",
      "add-dist-mul",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-neg",
      "lt-swap-in",
      "min-to-max",
      "max-to-min"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 0 ) ( + 0 ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v1 125 ) ( * v2 4 ) ) ) ) ) ( <= ( + ( * v3 32 ) 0 ) ( + ( * v3 32 ) 0 ) ) ) ( >= ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ( + ( * v3 32 ) ( - ( + 32 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 12 ) v1 ) ( + ( * v0 12 ) ( + v1 1 ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-swap-out", "lt-x-x-sub-a"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 132 ) 8 ) ( / ( + v2 132 ) 8 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "add-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( <= ( + ( * ( max ( - ( + ( max v0 v1 ) ( min ( - v1 v0 ) 0 ) ) v1 ) 0 ) 4 ) 4 ) 1024 )",
      "end": "1"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "add-zero",
      "add-to-sub",
      "mul-assoc",
      "min-comm",
      "add-comm",
      "mul-zero",
      "min-sub-both",
      "max-to-min",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 252 ) 748 ) v1 ) ) ( + ( min ( * v0 252 ) 748 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 252 ) 748 ) v1 ) 248 ) ) ( + ( + ( min ( * v0 252 ) 748 ) 251 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( > ( - 1 v0 ) ( - 125 v0 ) )", "end": "0" },
    "rules": [
      "add-fact-mul",
      "sub-to-add",
      "mul-zero",
      "lt-swap-in",
      "mul-comm",
      "add-comm",
      "add-assoc",
      "gt-to-lt",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( - ( + ( + v0 v1 ) v2 ) 1 ) ( + v3 v1 ) ) ( + ( - ( + ( + v0 v1 ) ( - v2 1 ) ) 1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "min-max",
      "eq-x-x",
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "not-gt-to-eqlt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( == 0 ( - ( + 0 ( / ( + ( max v0 0 ) 138 ) 4 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-comm",
      "mul-one",
      "min-div-in-pos",
      "max-to-min",
      "eq-swap",
      "add-dist-mul",
      "sub-to-add",
      "eq-comm",
      "Eq-min-c-pos",
      "mul-assoc",
      "div-minus-in",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 4 ) 128 ) ( * v0 4 ) )",
      "end": "0"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) ( - ( + ( - ( * ( + ( / v0 4 ) v1 ) 4 ) 7 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 2 ) v1 ) ( + ( + ( * v0 2 ) ( - v1 1 ) ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "lt-swap-out",
      "add-assoc",
      "eqgt-to-not-lt",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) v2 ) ) ( + ( + ( + ( min ( * v0 32 ) 968 ) ( * v1 4 ) ) 3 ) v2 ) ) ) ( <= ( + v3 v4 ) ( + v3 v4 ) ) ) ( >= ( + v3 v4 ) ( + v3 v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( + ( * v0 63 ) v1 ) v2 ) 1 ) ( - ( + ( + ( * v0 63 ) v1 ) ( + v2 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "add-comm",
      "add-assoc",
      "mul-zero",
      "add-fact-mul",
      "mul-comm",
      "lt-swap-in",
      "mul-assoc",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 v0 ) ( + ( + ( * 0 16 ) v0 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) 12 ) ) ( + ( + ( * ( / ( + ( - ( * v1 4 ) v0 ) 3 ) 16 ) 16 ) v0 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) ) ( >= ( + ( * v3 2 ) v4 ) ( + ( * v3 2 ) v4 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 5 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "not-gt-to-eqlt",
      "min-x-x-plus-a-pos",
      "eqgt-to-not-lt",
      "Eq-lt-min",
      "lt-min-term+cpos",
      "Eq-min-lt",
      "lt-const-neg",
      "eq-max-lt",
      "not-not",
      "lt-const-pos",
      "max-to-min",
      "and-max-to-eqlt",
      "eq-comm",
      "add-denom-mul",
      "lt-min-term+neg-term",
      "div-minus-down",
      "mul-zero",
      "lt-max-mutual-term",
      "add-assoc",
      "lt-x-x-sub-a",
      "add-comm",
      "mul-max-min",
      "or-x-and-x-y"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 0 ) 125 ) ( - ( + 0 ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 3 ) 125 ) ( - ( + ( - ( + 4 0 ) 1 ) ( + ( / ( + ( min v0 500 ) v1 ) 4 ) ( * v2 4 ) ) ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * v3 2 ) 0 ) ( + ( * v3 2 ) 0 ) ) ) ( >= ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ( + ( * v3 2 ) ( - ( + 2 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 8 ) v1 ) 4 ) ( - ( + ( * v0 8 ) ( + v1 1 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "mul-zero",
      "lt-swap-in",
      "sub-to-add",
      "add-to-sub",
      "mul-assoc",
      "mul-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + -2 v0 ) ( + -2 v0 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v0 ) ( + ( - ( - 6 2 ) 1 ) v0 ) ) ) ( <= ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v1 2 ) 0 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( - ( + ( * ( + ( * v1 2 ) 3 ) 4 ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v1 2 ) ( - ( + 2 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "min-x-x",
      "Eq-lt-min",
      "eq-x-x",
      "lt-swap-in",
      "min-x-x-plus-a-neg",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( / ( + v0 v1 ) 125 ) ( - ( / ( + ( - v0 1 ) v1 ) 125 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "lt-swap-in",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "mul-cancel-div",
      "div-cancel-mul",
      "add-to-sub",
      "add-comm",
      "add-denom-mul",
      "div-minus-down",
      "min-x-x-plus-a-pos",
      "min-sub-both",
      "div-minus-in",
      "and-eqlt-eqgt-to-0",
      "lt-mul-div-cancel",
      "min-mul-out-neg",
      "min-comm",
      "mul-comm",
      "sub-to-add",
      "min-div-out-neg",
      "and-min-to-eqlt",
      "Eq-lt-min",
      "add-assoc",
      "mul-zero",
      "min-mul-in-pos",
      "not-gt-to-eqlt",
      "lt-x-x-sub-a",
      "and-ineq-eq",
      "or-x-and-x-y",
      "mul-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= v1 v1 ) ) ( >= v1 v1 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-comm", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * v0 0 ) 128 ) 128 ) ( * v0 0 ) )",
      "end": "1"
    },
    "rules": ["mul-zero"]
  },
  {
    "expression": {
      "start": "( < ( + v0 1 ) ( - ( min ( max ( min v1 1999 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) 3 ) )",
      "end": "0"
    },
    "rules": [
      "min-comm",
      "add-assoc",
      "add-to-sub",
      "min-add-both",
      "min-sub-both",
      "sub-to-add",
      "lt-swap-in",
      "add-comm",
      "and-min-to-lt"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( % v0 672 ) 671 ) 0 )", "end": "1" },
    "rules": [
      "lt-swap-in",
      "not-gt-to-eqlt",
      "min-mod-const-to-const",
      "eqgt-to-not-lt",
      "Eq-lt-min"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + v0 v1 ) 4 ) ( + ( + ( + ( - v0 1 ) v1 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-comm",
      "sub-to-add",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( >= ( + ( + ( * v0 125 ) v1 ) v2 ) ( + ( + ( * v0 125 ) v1 ) v2 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( * 0 4 ) 0 ) 0 ) ) ( >= ( + ( * 3 4 ) 3 ) 13 ) )",
      "end": "1"
    },
    "rules": ["not-gt-to-eqlt", "eqgt-to-not-lt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 23 ) ( - ( + ( + v0 1 ) v1 ) 26 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "mul-comm",
      "sub-to-add",
      "add-assoc",
      "add-to-sub",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( / v0 16 ) 2 ) ) ( - ( + 0 ( / v0 16 ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * ( / ( + ( % v0 16 ) 499 ) 64 ) 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= ( + -2 v1 ) ( + -2 v1 ) ) ) ( >= ( + ( - ( - 6 2 ) 1 ) v1 ) ( + ( - ( - 6 2 ) 1 ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-comm",
      "add-zero",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) 2 ) 2 ) ( * ( max ( min ( + ( * v0 16 ) ( * ( + ( * ( - 0 ( max ( min ( / v1 8 ) 0 ) -8 ) ) 8 ) v1 ) 2 ) ) 499 ) 0 ) 2 ) )",
      "end": "1"
    },
    "rules": ["eq-x-x", "div-cancel-mul"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + v2 0 ) ( + 0 v2 ) ) ) ( >= ( + v2 3 ) ( + ( - ( + 4 0 ) 1 ) v2 ) ) ) ( <= ( min ( * v3 3 ) 134 ) ( + ( min ( * v3 3 ) 134 ) 0 ) ) ) ( >= ( + ( min ( * v3 3 ) 134 ) 2 ) ( + ( min ( * v3 3 ) 134 ) ( - ( + 3 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) v0 ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + v0 63 ) ) ) ( <= ( / v1 4 ) ( / v1 4 ) ) ) ( >= ( + ( / v1 4 ) 32 ) ( + ( / v1 4 ) 32 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-to-zero",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 v1 ) ( + v0 v1 ) ) ) ( >= ( + v0 v1 ) ( + v0 v1 ) ) ) ( <= ( + 0 ( + ( * v2 8 ) v3 ) ) ( + ( * v2 8 ) v3 ) ) ) ( >= ( + 3 ( + ( + ( * v2 8 ) v3 ) 4 ) ) ( + ( + ( * v2 8 ) 7 ) v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-to-zero",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 v1 ) ( - ( + v0 v1 ) 1 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt"]
  },
  {
    "expression": {
      "start": "( >= ( + ( * v0 8 ) v1 ) ( + ( + ( * ( - v0 1 ) 8 ) v1 ) 1 ) )",
      "end": "1"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "add-to-sub",
      "sub-to-add",
      "lt-swap-out",
      "mul-zero",
      "mul-assoc",
      "add-comm",
      "eqgt-to-not-lt",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( max ( min v0 0 ) -127 ) ( - ( + ( max ( min v0 0 ) -127 ) ( - 5 ( max ( min v0 0 ) -127 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-lt-min",
      "min-sub-both",
      "lt-min-term+cpos",
      "add-assoc",
      "Eq-min-lt",
      "min-comm",
      "not-gt-to-eqlt",
      "min-add-both",
      "add-comm",
      "sub-to-add",
      "max-min-switch",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + v0 v1 ) 5 ) ( - ( + v0 v1 ) 4 ) ) ) ( >= ( + ( + v0 v1 ) 5 ) ( + ( + v0 v1 ) 5 ) ) ) ( <= ( + ( + ( + ( max ( * -3 4 ) -9 ) v2 ) 0 ) 5 ) ( - v2 4 ) ) ) ( >= ( + ( + ( + ( max ( * 15 4 ) -9 ) v2 ) 3 ) 5 ) ( + v2 68 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-x-x-sub-a",
      "eqlt-to-not-gt",
      "lt-swap-out",
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "eq-comm",
      "add-assoc",
      "Eq-min-c-pos",
      "add-denom-mul"
    ]
  },
  {
    "expression": {
      "start": "( > ( - -6 ( * ( + ( * v0 4 ) v1 ) 2 ) ) ( - 499 ( * ( + ( * v0 4 ) v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-comm",
      "add-fact-mul",
      "mul-zero",
      "gt-to-lt",
      "lt-swap-out",
      "mul-assoc",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( + v0 v1 ) 0 ) 504 ) ( + v1 v0 ) ) ) ( >= ( + ( + ( + v0 v1 ) 3 ) 504 ) ( + v1 ( + v0 504 ) ) ) ) ( <= ( + ( * v2 18 ) v3 ) ( + ( * v2 18 ) v3 ) ) ) ( >= ( + ( + ( * v2 18 ) v3 ) 17 ) ( + ( min ( - ( + ( * v2 18 ) v3 ) ( * ( max v2 1 ) 18 ) ) v3 ) 35 ) ) ) ( <= 0 0 ) ) ( >= 2 ( - ( + 3 0 ) 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 19 0 ) 1 ) ( - ( + 19 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 3 ) ( - v0 3 ) ) ) ( >= ( + v0 250 ) ( - ( + 254 ( - v0 3 ) ) 1 ) ) ) ( <= ( + 0 v1 ) ( + ( + ( * 0 4 ) 0 ) v1 ) ) ) ( >= ( + 3 ( + v1 60 ) ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 1000 ) v1 ) v2 ) ( + ( + ( * v0 1000 ) v1 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ( - ( + ( * ( + 0 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 0 ) 4 ) ) ) ( >= ( - ( + ( * ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 15 ) 4 ) ( - ( + ( * ( + 3 ( + ( * v0 4 ) ( + ( * v1 64 ) v2 ) ) ) 4 ) 3 ) 4 ) ) ) ( <= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( >= ( + ( * v3 4 ) v4 ) ( + ( * v3 4 ) v4 ) ) ) ( <= ( + ( * 0 2 ) 0 ) 0 ) ) ( >= ( + ( * 9 2 ) 1 ) 19 ) )",
      "end": "1"
    },
    "rules": [
      "add-dist-mul",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) v2 ) ) v3 ) ( + ( + ( min ( * v0 42 ) 83 ) ( + ( * v1 3 ) ( + v2 1 ) ) ) v3 ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-comm", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) v3 ) ) ) v4 ) ( + ( + ( * v0 64 ) ( + ( * v1 4 ) ( + ( * v2 2 ) ( + v3 1 ) ) ) ) v4 ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "add-comm", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 8 ) v1 ) ) ( + 0 ( + ( * v0 8 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ( + 3 ( + ( + ( * v0 8 ) v1 ) 4 ) ) ) ) ( <= ( - ( / ( + ( min v2 1000 ) v3 ) 125 ) 8 ) ( / ( + 0 ( - ( + ( min v2 1000 ) v3 ) 1000 ) ) 125 ) ) ) ( >= ( / ( - ( + v2 v3 ) 1 ) 125 ) ( / ( + ( - ( + 1000 0 ) 1 ) ( - ( + v2 v3 ) 1000 ) ) 125 ) ) ) ( <= v4 v4 ) ) ( >= ( - ( + v5 v4 ) 1 ) ( - ( + v5 v4 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "add-denom-mul",
      "sub-to-add",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - ( + ( + ( max ( min v0 -443 ) -506 ) 441 ) ( - -439 ( max ( min v0 -443 ) -506 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-one",
      "mul-zero",
      "add-fact-mul",
      "eq-swap",
      "mul-assoc",
      "add-assoc",
      "eq-comm",
      "add-comm",
      "min-to-max",
      "mul-comm",
      "max-min-switch",
      "min-add-both",
      "Eq-max-c-pos",
      "sub-to-add"
    ]
  },
  {
    "expression": {
      "start": "( > ( - ( min ( * v0 -4 ) 11 ) 11 ) 5 )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "gt-to-lt",
      "sub-to-add",
      "and-min-to-lt",
      "and-comm"
    ]
  },
  {
    "expression": {
      "start": "( <= ( max 0 ( + ( min ( - 8 ( * ( % v0 2 ) 5 ) ) ( - ( + 0 5 ) 1 ) ) 1 ) ) 0 )",
      "end": "0"
    },
    "rules": [
      "min-mul-in-neg",
      "add-assoc",
      "mul-assoc",
      "add-zero",
      "and-min-to-lt",
      "min-add-both",
      "and-min-to-eqlt",
      "mul-one",
      "eq-max-lt",
      "eqlt-to-not-gt",
      "max-to-min",
      "Eq-lt-min",
      "lt-mul-pos-cancel",
      "sub-to-add",
      "mul-comm",
      "and-x-1",
      "not-gt-to-eqlt",
      "lt-swap-out",
      "min-max",
      "min-comm",
      "add-comm",
      "min-mod-const-to-mod",
      "eq-comm",
      "and-max-to-eqlt",
      "add-dist-mul",
      "lt-max-mutual-term"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - v0 4 ) ( - v0 4 ) ) ) ( >= ( + v0 508 ) ( + v0 508 ) ) ) ( <= ( + ( + ( + v1 v2 ) 0 ) 5 ) ( - ( + v1 v2 ) 4 ) ) ) ( >= ( + ( + ( + v1 v2 ) 3 ) 5 ) ( + ( + v1 v2 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "and-comm",
      "add-assoc",
      "sub-to-add",
      "lt-swap-in",
      "add-comm",
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) ) ) ( >= ( + 3 ( + ( + ( + ( min ( * v1 64 ) 436 ) ( * v2 32 ) ) v3 ) 28 ) ) ( + ( + ( min ( * v1 64 ) 436 ) ( + ( * v2 32 ) 31 ) ) v3 ) ) ) ( <= ( + 0 v4 ) ( + 0 v4 ) ) ) ( >= ( + ( - ( + 32 0 ) 1 ) v4 ) ( + ( - ( + 32 0 ) 1 ) v4 ) ) ) ( <= v5 v5 ) ) ( >= v5 v5 ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-zero",
      "add-assoc",
      "eqgt-to-not-lt",
      "lt-to-zero",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 4 ) ( min ( max ( / ( - ( + ( min v1 4 ) v2 ) 4 ) 8 ) ( + ( + v0 1 ) 4 ) ) ( + v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-swap-in",
      "min-sub-both",
      "min-add-both",
      "sub-to-add",
      "and-min-to-lt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( >= ( % ( + v2 v3 ) 8 ) ( % ( + v2 v3 ) 8 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "add-zero",
      "lt-to-zero",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - -6 ( max v0 0 ) ) ( - ( + ( - -6 ( max v0 0 ) ) ( + ( max v0 0 ) 8 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "eq-swap",
      "max-to-min",
      "add-dist-mul",
      "mul-comm",
      "eq-comm",
      "mul-assoc",
      "min-to-max",
      "add-fact-mul",
      "Eq-max-c-pos",
      "sub-to-add",
      "add-assoc",
      "min-add-both",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= 0 0 ) ) ( >= 136 ( - ( + 137 0 ) 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "add-comm", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( * v0 4 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 8 ) ( / v2 8 ) ) ) ( >= ( / ( + v2 70 ) 8 ) ( / ( + v2 70 ) 8 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "add-zero", "lt-to-zero"]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 2 ) 1 ) )", "end": "0" },
    "rules": [
      "lt-swap-out",
      "add-assoc",
      "sub-to-add",
      "add-comm",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + ( * v0 16 ) 16 ) ( * v0 16 ) )",
      "end": "0"
    },
    "rules": ["lt-x-x-sub-a", "eqlt-to-not-gt", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( - v0 10 ) ( - ( + 0 v0 ) 10 ) ) ) ( >= ( + v0 4 ) ( - ( + ( - ( + 15 0 ) 1 ) v0 ) 10 ) ) ) ( <= ( + ( * v1 4 ) 0 ) ( + ( * v1 4 ) 0 ) ) ) ( >= ( + ( * v1 4 ) 3 ) ( + ( * v1 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": [
      "and-max-to-eqlt",
      "mul-comm",
      "min-mul-in-neg",
      "add-zero",
      "min-x-x",
      "add-comm",
      "min-add-both",
      "mul-assoc",
      "min-sub-both",
      "add-fact-mul",
      "add-to-sub",
      "Eq-lt-min",
      "sub-to-add",
      "mul-zero",
      "add-assoc",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 32 ) v1 ) ) ( + ( * v0 32 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( * v0 32 ) v1 ) 28 ) ) ( + ( + ( * v0 32 ) v1 ) 31 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "add-comm",
      "lt-to-zero",
      "add-zero"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 16 ) 15 ) ( * ( + v0 1 ) 16 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "add-assoc",
      "add-dist-mul",
      "lt-x-x-sub-a",
      "add-to-sub",
      "sub-to-add",
      "mul-comm",
      "lt-swap-out"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 0 ) 3 ) ( - ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) ) ) ( >= ( - ( + ( + ( * 0 4 ) ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) ) 3 ) 3 ) ( - ( + ( + ( * v0 4 ) ( + ( * v1 12 ) v2 ) ) 3 ) 3 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "eqlt-to-not-gt",
      "add-zero",
      "eqgt-to-not-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 2 ) v1 ) 2 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 2 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-swap-out", "lt-x-x-sub-a", "add-assoc"]
  },
  {
    "expression": {
      "start": "( < v0 ( min ( max ( - ( * ( / v1 4 ) 4 ) 7 ) ( + v0 1 ) ) ( - ( + v0 1 ) 5 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-assoc",
      "sub-to-add",
      "min-sub-both",
      "lt-swap-out",
      "lt-swap-in",
      "and-min-to-lt",
      "min-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( + ( * ( / v0 4 ) 4 ) ( * ( min v1 1 ) 70 ) ) 62 ) ( - ( + ( * ( + v1 1 ) 70 ) ( * ( / v0 4 ) 4 ) ) 7 ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "min-add-both",
      "add-dist-mul",
      "add-comm",
      "lt-min-term+cpos",
      "min-mul-in-pos",
      "lt-swap-in",
      "mul-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 0 ( + ( * v0 3 ) v1 ) ) ( - 1999 ( + ( * v0 3 ) v1 ) ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "mul-comm",
      "mul-zero",
      "gt-to-lt",
      "add-zero",
      "lt-swap-in",
      "sub-to-add",
      "add-comm",
      "add-fact-mul"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( + v0 v1 ) 8 ) ( - ( + ( - ( + v0 v1 ) 8 ) 140 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "add-to-sub",
      "sub-to-add",
      "mul-zero",
      "eq-swap",
      "mul-assoc",
      "add-assoc",
      "add-fact-mul",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) 0 ) v1 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ) ) ( <= ( + ( + ( * v2 250 ) 0 ) v3 ) ( + ( + ( * v2 250 ) 0 ) v3 ) ) ) ( >= ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ( + ( + ( * v2 250 ) ( - ( + 250 0 ) 1 ) ) v3 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "eqgt-to-not-lt",
      "add-comm",
      "eqlt-to-not-gt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( == ( - v0 3 ) ( - ( + ( - v0 3 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "eq-swap",
      "sub-to-add",
      "add-assoc",
      "add-fact-mul",
      "eq-comm",
      "add-comm",
      "mul-assoc",
      "mul-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 16 1 ) ( - 16 1 ) ) ) ( <= v0 v0 ) ) ( >= v0 v0 ) ) ( <= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 0 ) ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) ) ) ( >= ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ( + ( * ( + ( * ( % v1 4 ) 3 ) v2 ) 4 ) 3 ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) ( - ( + ( - ( + ( * v0 4 ) ( + v1 v2 ) ) 2 ) 9 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-min-term+cpos",
      "eqgt-to-not-lt",
      "min-x-x-plus-a-pos",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) ) ( + ( + ( * v0 64 ) ( * v1 8 ) ) v2 ) ) ) ( >= ( + 3 ( + ( + ( * ( + ( * v0 8 ) v1 ) 8 ) v2 ) 4 ) ) ( + ( + ( * v0 64 ) ( + ( * v1 8 ) 7 ) ) v2 ) ) ) ( <= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( >= ( + ( + ( * v3 32 ) v4 ) v5 ) ( + ( + ( * v3 32 ) v4 ) v5 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "add-zero",
      "eqlt-to-not-gt",
      "mul-comm",
      "add-dist-mul",
      "mul-assoc",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( == ( * ( / ( + v0 v1 ) 4 ) 4 ) ( - ( + ( * ( / ( + v0 v1 ) 4 ) 4 ) 128 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "mul-assoc",
      "eq-comm",
      "sub-to-add",
      "mul-comm",
      "add-fact-mul",
      "eq-swap",
      "mul-zero",
      "add-assoc"
    ]
  },
  {
    "expression": { "start": "( >= ( + ( max v0 500 ) 9 ) 0 )", "end": "1" },
    "rules": [
      "mul-assoc",
      "min-add-both",
      "min-to-max",
      "max-to-min",
      "add-dist-mul",
      "min-max-const",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "not-gt-to-eqlt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( + ( + ( - ( * ( + ( * v0 2 ) v1 ) 4 ) 2 ) 0 ) 1 ) ( + ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 2 ) 1 ) ) ) ( >= ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( - 6 2 ) 1 ) ) 3 ) 1 ) ( + ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) ( - ( - 6 2 ) 1 ) ) 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "add-zero", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) 0 ) v0 ) ) ) ( >= ( + ( + ( * 15 4 ) v0 ) 3 ) ( + ( + ( * ( - ( + 16 0 ) 1 ) 4 ) ( - ( + 4 0 ) 1 ) ) v0 ) ) ) ( <= ( + v1 v2 ) ( + v1 v2 ) ) ) ( >= ( + v1 v2 ) ( + v1 v2 ) ) ) ( <= v3 v3 ) ) ( >= ( - ( + v4 v3 ) 1 ) ( - ( + v4 v3 ) 1 ) ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-to-zero",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( % v0 1005 ) 1004 ) 0 )",
      "end": "1"
    },
    "rules": [
      "not-gt-to-eqlt",
      "lt-swap-in",
      "min-mod-const-to-const",
      "Eq-lt-min",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( < ( - ( + v0 v1 ) 13 ) ( - ( + ( + v0 1 ) v1 ) 25 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "add-fact-mul",
      "mul-assoc",
      "add-comm",
      "add-assoc",
      "sub-to-add",
      "mul-comm",
      "mul-zero"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 0 ) ( + 0 ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( >= ( + ( + ( * 0 4 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) 3 ) ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 4 ) ( * v1 4 ) ) ) ) ) ( <= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) ) ( >= ( + ( * v2 3 ) v3 ) ( + ( * v2 3 ) v3 ) ) )",
      "end": "1"
    },
    "rules": [
      "eqlt-to-not-gt",
      "add-assoc",
      "add-comm",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + 0 ( - ( + ( * v0 64 ) v1 ) 9 ) ) 5 ) ( - ( + ( * v0 64 ) v1 ) 4 ) ) ) ( >= ( + ( + 3 ( + ( + ( * v0 64 ) v1 ) 132 ) ) 5 ) ( + ( + ( * v0 64 ) v1 ) 68 ) ) ) ( <= ( + ( + v2 v3 ) 5 ) ( - ( + v2 v3 ) 4 ) ) ) ( >= ( + ( + v2 v3 ) 5 ) ( + ( + v2 v3 ) 5 ) ) ) ( <= 0 0 ) ) ( >= 2 2 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc",
      "lt-swap-out",
      "and-comm",
      "min-comm",
      "not-gt-to-eqlt",
      "add-to-sub",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 68 ) v1 ) 0 ) ( + ( + ( * v0 68 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ( + ( + ( * v0 68 ) v1 ) ( - ( + 68 0 ) 1 ) ) ) ) ( <= ( + ( + ( * 0 4 ) v2 ) 0 ) ( + ( + ( * 0 4 ) v2 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - 32 ( max ( * v3 8 ) 25 ) ) 4 ) 4 ) v2 ) 3 ) ( + ( + ( * ( - ( + ( / ( + ( - 25 ( max ( * v3 8 ) 25 ) ) 11 ) 4 ) 0 ) 1 ) 4 ) v2 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "add-comm",
      "not-gt-to-eqlt",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "sub-to-add",
      "min-x-x",
      "add-denom-mul",
      "eq-x-x"
    ]
  },
  {
    "expression": {
      "start": "( <= ( + v0 5 ) ( - ( - ( - v0 1 ) 4 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "Eq-min-lt",
      "lt-min-term+cpos",
      "add-assoc",
      "eq-swap",
      "add-comm",
      "sub-to-add",
      "Eq-lt-min",
      "min-sub-both",
      "min-x-x-plus-a-pos",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( == ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - ( + ( - ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) 5 ) ( - 8 ( min ( - ( * ( / v0 4 ) 4 ) v1 ) 5 ) ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-assoc",
      "add-fact-mul",
      "add-comm",
      "Eq-min-c-pos",
      "sub-to-add",
      "eq-swap",
      "mul-comm",
      "min-add-both",
      "mul-zero",
      "mul-assoc",
      "eq-comm"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * ( + ( * v0 3 ) v1 ) 3 ) v2 ) ( + ( * ( + ( * v0 3 ) v1 ) 3 ) ( + v2 1 ) ) )",
      "end": "1"
    },
    "rules": ["lt-x-x-sub-a", "lt-swap-out", "add-assoc"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( >= ( + ( * v0 2 ) v1 ) ( + ( * v0 2 ) v1 ) ) ) ( <= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 0 ) 2 ) ( - ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 2 ) ) ) ( >= ( - ( + ( * ( + ( * 0 2 ) ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) ) 2 ) 3 ) 2 ) ( - ( + ( * ( + ( * v2 2 ) ( + ( * v3 16 ) v4 ) ) 2 ) 3 ) 2 ) ) ) ( <= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) ) ( >= ( + ( * v5 2 ) v6 ) ( + ( * v5 2 ) v6 ) ) )",
      "end": "1"
    },
    "rules": [
      "min-x-x",
      "Eq-lt-min",
      "add-zero",
      "add-comm",
      "eq-x-x",
      "lt-to-zero",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ( + ( * ( + ( * v0 2 ) v1 ) 4 ) v2 ) ) ) ( >= ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ( + ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) v2 ) ) ) ( <= ( + 0 v3 ) ( + 0 v3 ) ) ) ( >= ( + 3 v3 ) ( + ( - ( + 4 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) ) ( >= ( + ( * v4 3 ) v5 ) ( + ( * v4 3 ) v5 ) ) )",
      "end": "1"
    },
    "rules": ["eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 4 ) v1 ) 0 ) ( + ( + ( * v0 4 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 4 ) v1 ) 3 ) ( + ( + ( * v0 4 ) v1 ) 3 ) ) ) ( <= ( / v2 125 ) ( / ( + ( + ( min ( * 0 8 ) 117 ) 0 ) v2 ) 125 ) ) ) ( >= ( / ( + v2 124 ) 125 ) ( / ( + ( + ( min ( * ( - ( + 16 0 ) 1 ) 8 ) 117 ) ( - ( + 8 0 ) 1 ) ) v2 ) 125 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "add-comm",
      "Eq-lt-min",
      "not-gt-to-eqlt",
      "eq-x-x",
      "eqgt-to-not-lt",
      "min-x-x"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( * v0 16 ) v1 ) ) ( + ( + ( * v0 16 ) v1 ) 0 ) ) ) ( >= ( + 3 ( + ( + ( * v0 16 ) v1 ) 12 ) ) ( + ( + ( * v0 16 ) v1 ) ( - ( + 16 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "add-comm",
      "lt-to-zero",
      "add-assoc",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": { "start": "( >= v0 ( - ( + v0 3 ) 1 ) )", "end": "0" },
    "rules": [
      "lt-swap-out",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "sub-to-add",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + ( * v0 4 ) ( + ( * v1 2 ) v2 ) ) ( + ( * v0 4 ) ( + ( * v1 2 ) ( + v2 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-assoc", "lt-x-x-sub-a", "lt-swap-out"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 0 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) 3 ) 5 ) ( - ( + ( * ( + ( * v0 2 ) v1 ) 4 ) ( - ( + 4 0 ) 1 ) ) 5 ) ) ) ( <= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( >= ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ( - ( + ( * ( + ( * v2 2 ) v3 ) 4 ) v4 ) 5 ) ) ) ( <= ( * v5 69 ) ( + ( * v5 69 ) 0 ) ) ) ( >= ( + ( * v5 69 ) 68 ) ( + ( * v5 69 ) ( - ( + 69 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["add-zero", "eqgt-to-not-lt", "eqlt-to-not-gt", "lt-to-zero"]
  },
  {
    "expression": {
      "start": "( >= ( - 10 ( * ( + v0 v1 ) 2 ) ) ( - 509 ( * ( + v0 v1 ) 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "lt-swap-out",
      "sub-to-add",
      "lt-x-x-sub-a",
      "eqgt-to-not-lt",
      "add-assoc",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( >= ( * ( + v0 v1 ) 2 ) ( + ( + ( * ( + ( - v0 1 ) v1 ) 2 ) 2 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-dist-mul",
      "lt-swap-out",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "lt-x-x-sub-a",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( < ( + v0 5 ) ( min ( - ( max ( * v1 8 ) ( + ( + v0 1 ) 10 ) ) 5 ) ( + v0 1 ) ) )",
      "end": "0"
    },
    "rules": [
      "min-add-both",
      "min-comm",
      "and-min-to-lt",
      "add-comm",
      "sub-to-add",
      "lt-swap-in",
      "min-sub-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + v0 0 ) ( + 0 v0 ) ) ) ( >= ( + v0 3 ) ( + ( - ( + 4 0 ) 1 ) v0 ) ) ) ( <= ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) ) ( >= ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ( - ( + ( + ( * v2 4 ) 136 ) ( - ( * ( max ( min ( * v1 2 ) 499 ) 0 ) 4 ) 4 ) ) 1 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": ["lt-to-zero", "eqlt-to-not-gt", "eqgt-to-not-lt", "add-comm"]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= 0 0 ) ) ( >= ( - 4 1 ) ( - 4 1 ) ) ) ( <= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( >= ( % ( + ( * v0 2 ) v1 ) 4 ) ( % ( + ( * v0 2 ) v1 ) 4 ) ) ) ( <= ( + ( min ( * v2 4 ) 14 ) 0 ) ( + ( min ( * v2 4 ) 14 ) 0 ) ) ) ( >= ( + ( min ( * v2 4 ) 14 ) 3 ) ( + ( min ( * v2 4 ) 14 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "1"
    },
    "rules": ["eqlt-to-not-gt", "lt-to-zero", "eqgt-to-not-lt"]
  },
  {
    "expression": {
      "start": "( < ( - ( + ( + ( * v0 502 ) v1 ) v2 ) 4 ) ( - ( + ( + ( * v0 502 ) v1 ) ( + v2 1 ) ) 7 ) )",
      "end": "0"
    },
    "rules": [
      "mul-assoc",
      "lt-swap-in",
      "lt-swap-out",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( + ( min ( * v0 32 ) 968 ) v1 ) ) ( + ( min ( * v0 32 ) 968 ) v1 ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 32 ) 968 ) v1 ) 28 ) ) ( + ( + ( min ( * v0 32 ) 968 ) 31 ) v1 ) ) ) ( <= ( + v2 v3 ) ( + v2 v3 ) ) ) ( >= ( + v2 v3 ) ( + v2 v3 ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) )",
      "end": "1"
    },
    "rules": [
      "eqgt-to-not-lt",
      "lt-to-zero",
      "min-sub-both",
      "min-add-both",
      "add-assoc",
      "min-comm",
      "eqlt-to-not-gt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( == ( * v0 4 ) ( - ( + ( * v0 4 ) ( + ( * -11 4 ) 48 ) ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-fact-mul",
      "eq-swap",
      "eq-comm",
      "mul-zero",
      "mul-comm",
      "sub-to-add",
      "mul-assoc",
      "add-comm",
      "add-assoc"
    ]
  },
  {
    "expression": {
      "start": "( >= ( + ( + v0 v1 ) 110 ) ( - ( + ( + ( + v0 v1 ) 110 ) 23 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "sub-to-add",
      "eqgt-to-not-lt",
      "lt-swap-out",
      "add-assoc",
      "add-comm",
      "lt-x-x-sub-a"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( - ( + ( * v0 4 ) v1 ) 5 ) 0 ) 19 ) ( - ( - ( + ( + ( * v0 4 ) 0 ) v1 ) 5 ) 19 ) ) ) ( >= ( - ( + ( + ( + ( * v0 4 ) v1 ) ( - ( - 6 5 ) 1 ) ) 3 ) 19 ) ( - ( + ( + ( + ( * v0 4 ) ( - ( + 4 0 ) 1 ) ) v1 ) ( - ( - 6 5 ) 1 ) ) 19 ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "add-comm",
      "sub-to-add",
      "add-assoc",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( / v0 16 ) ( * v1 4 ) ) 2 ) ) ( - ( + 0 ( + ( / v0 16 ) ( * v1 4 ) ) ) 2 ) ) ) ( >= ( + 3 ( + ( + ( / v0 16 ) ( * v1 4 ) ) 3 ) ) ( + ( + ( - ( + 4 0 ) 1 ) ( + ( / v0 16 ) ( * v1 4 ) ) ) ( - ( - 6 2 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= ( - 8 1 ) ( - 8 1 ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "add-assoc",
      "sub-to-add",
      "eqlt-to-not-gt",
      "eqgt-to-not-lt",
      "lt-to-zero"
    ]
  },
  {
    "expression": {
      "start": "( > ( - 1 ( * v0 2 ) ) ( - 125 ( * v0 2 ) ) )",
      "end": "0"
    },
    "rules": [
      "lt-swap-in",
      "mul-assoc",
      "add-assoc",
      "mul-comm",
      "sub-to-add",
      "mul-zero",
      "add-fact-mul",
      "gt-to-lt",
      "add-comm"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( / ( - ( + ( min v0 4 ) v1 ) 36 ) 16 ) ( + -2 ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) ) ) ( >= ( + ( / ( + ( + ( min v0 4 ) v1 ) 44 ) 16 ) v2 ) ( + ( - ( - 6 2 ) 1 ) ( - ( + ( + v2 1 ) ( / ( - ( + ( min v0 4 ) v1 ) 4 ) 16 ) ) 1 ) ) ) ) ( <= ( - ( * v3 8 ) 1 ) ( - ( + ( + ( * 0 4 ) ( * v3 8 ) ) 0 ) 1 ) ) ) ( >= ( + ( * v3 8 ) 11 ) ( - ( + ( + ( * 3 4 ) ( + ( * v3 8 ) 9 ) ) 3 ) 1 ) ) ) ( <= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 0 ) ) ) ( >= ( + ( * ( + ( * v4 2 ) v5 ) 4 ) 3 ) ( + ( * ( + ( * v4 2 ) v5 ) 4 ) ( - ( + 4 0 ) 1 ) ) ) )",
      "end": "0"
    },
    "rules": [
      "add-comm",
      "lt-x-x-sub-a",
      "lt-swap-out",
      "sub-to-add",
      "add-assoc",
      "and-comm",
      "eqgt-to-not-lt"
    ]
  },
  {
    "expression": {
      "start": "( >= ( - ( + ( + v0 v1 ) v2 ) 4 ) ( + ( + ( + ( + ( - v0 1 ) v1 ) v2 ) 5 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "mul-zero",
      "add-comm",
      "add-assoc",
      "add-zero",
      "lt-swap-in",
      "add-fact-mul",
      "sub-to-add",
      "eqgt-to-not-lt",
      "mul-comm",
      "mul-assoc",
      "and-comm",
      "min-mul-in-pos",
      "lt-swap-out",
      "min-mul-in-neg",
      "mul-cancel-div",
      "min-div-in-pos",
      "ineq-to-eq",
      "mod-const-add",
      "mul-one",
      "and-min-to-lt",
      "or-x-and-x-y",
      "and-lt-gt-to-0",
      "min-max-const"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( + ( * v0 3 ) 0 ) v1 ) 3 ) ( - ( + ( * v0 3 ) v1 ) 3 ) ) ) ( >= ( - ( + ( + ( * v0 3 ) ( - ( + 3 0 ) 1 ) ) v1 ) 3 ) ( - ( + ( * v0 3 ) v1 ) 1 ) ) ) ( <= ( - ( + ( + ( * 0 4 ) v2 ) 0 ) 5 ) ( - v2 5 ) ) ) ( >= ( - ( + ( + ( * 126 4 ) v2 ) 3 ) 5 ) ( + v2 501 ) ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )",
      "end": "1"
    },
    "rules": [
      "add-zero",
      "lt-swap-out",
      "and-lt-gt-to-0",
      "sub-to-add",
      "min-sub-both",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "lt-swap-in",
      "add-assoc",
      "Eq-lt-min",
      "min-x-x",
      "add-comm",
      "lt-to-zero",
      "and-min-to-lt"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= v0 v0 ) ) ( >= ( + v0 35 ) ( + v0 35 ) ) ) ( <= ( - ( + 0 ( / v1 8 ) ) 2 ) ( - ( / v1 8 ) 2 ) ) ) ( >= ( - ( + 3 ( + ( / v1 8 ) 20 ) ) 2 ) ( + ( / v1 8 ) ( / ( + ( % v1 8 ) 148 ) 8 ) ) ) ) ( <= ( * v2 55 ) ( * v2 55 ) ) ) ( >= ( + ( * v2 55 ) 54 ) ( + ( * v2 55 ) 54 ) ) )",
      "end": "1"
    },
    "rules": [
      "sub-to-add",
      "not-gt-to-eqlt",
      "lt-swap-in",
      "lt-swap-out",
      "mul-assoc",
      "add-comm",
      "min-mod-const-to-const",
      "add-fact-mul",
      "mul-cancel-div",
      "div-minus-in",
      "Eq-lt-min",
      "mod-minus-out",
      "eqgt-to-not-lt",
      "eqlt-to-not-gt",
      "add-zero",
      "mul-comm",
      "mul-zero",
      "eq-comm",
      "lt-mul-div-cancel",
      "add-assoc",
      "add-to-sub",
      "lt-const-pos",
      "lt-min-term+cpos",
      "Eq-min-c-pos"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - ( + ( min ( * v0 4 ) 61 ) v1 ) 10 ) ) ( + -10 ( + ( * v0 4 ) v1 ) ) ) ) ( >= ( + 3 ( + ( + ( min ( * v0 4 ) 61 ) v1 ) 2 ) ) ( + ( - ( - 13 10 ) 1 ) ( + ( min ( - ( + ( * v0 4 ) v1 ) ( max ( * v0 4 ) 61 ) ) v1 ) 64 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) )",
      "end": "1"
    },
    "rules": [
      "lt-to-zero",
      "min-ass",
      "min-to-max",
      "mul-assoc",
      "add-assoc",
      "and-min-to-lt",
      "eqgt-to-not-lt",
      "add-comm",
      "min-comm",
      "max-to-min",
      "eqlt-to-not-gt",
      "min-div-out-neg",
      "lt-min-max-cancel",
      "and-max-to-eqlt",
      "lt-swap-out",
      "add-dist-mul",
      "lt-max-term+neg-term",
      "or-comm",
      "sub-to-add",
      "mod-const-sub",
      "mod-x-x",
      "and-x-1",
      "min-div-in-neg",
      "min-add-both"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( min ( * v0 16 ) 984 ) v1 ) 7 ) ( + -2 ( - ( + ( min ( * v0 16 ) 984 ) v1 ) 5 ) ) ) ) ( >= ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 17 ) ( + 1 ( + ( + ( min ( * v0 16 ) 984 ) v1 ) 16 ) ) ) ) ( <= ( + ( + ( + v2 v3 ) 0 ) 1 ) ( - ( + v2 v3 ) 2 ) ) ) ( >= ( + ( + ( + v2 v3 ) 3 ) 1 ) ( + ( + v2 v3 ) 1 ) ) ) ( <= 0 0 ) ) ( >= 1 1 ) )",
      "end": "0"
    },
    "rules": [
      "add-to-sub",
      "and-assoc",
      "not-gt-to-eqlt",
      "sub-to-add",
      "and-comm",
      "add-comm",
      "and-eqlt-to-min",
      "min-comm",
      "min-sub-both",
      "add-zero",
      "eqlt-to-not-gt",
      "and-lt-to-min",
      "and-x-1",
      "and-min-to-eqlt",
      "eqgt-to-not-lt",
      "min-ass",
      "not-eq-to-ineq",
      "and-over-or",
      "min-to-max",
      "min-div-mul",
      "Eq-max-c-neg",
      "min-mul-out-neg",
      "lt-min-term+cpos",
      "and-max-to-lt",
      "lt-swap-out",
      "and-lt-gt-to-0",
      "lt-const-neg",
      "and-x-x",
      "add-dist-mul"
    ]
  },
  {
    "expression": {
      "start": "( && ( && ( && ( && ( && ( && 1 ( <= ( + 0 ( - v3 10 ) ) ( + -10 v3 ) ) ) ( >= ( + 3 ( + v3 63 ) ) ( + ( - ( - 13 10 ) 1 ) ( + v3 64 ) ) ) ) ( <= ( - ( * v1 4 ) 7 ) ( - ( * v1 4 ) 7 ) ) ) ( >= ( + ( * ( min ( + ( / v0 4 ) 28 ) v1 ) 4 ) 20 ) ( + ( * ( min ( / v0 4 ) ( - v1 ( * ( max v2 4 ) 7 ) ) ) 4 ) 132 ) ) ) ( <= v4 v4 ) ) ( >= v4 v4 ) )",
      "end": "1"
    },
    "rules": [
      "and-assoc",
      "add-dist-mul",
      "and-min-to-lt",
      "eqlt-to-not-gt",
      "add-comm",
      "min-mul-in-pos",
      "mul-assoc",
      "min-add-both",
      "max-to-min",
      "lt-min-mutual-term",
      "mul-zero",
      "sub-to-add",
      "mul-comm",
      "eqgt-to-not-lt",
      "add-to-sub",
      "add-assoc",
      "lt-to-zero",
      "lt-swap-in",
      "and-lt-to-min",
      "min-div-out-neg",
      "lt-max-term-term+pos"
    ]
  },
  {
    "expression": {
      "start": "( >= ( / ( + v0 v1 ) 4 ) ( + ( + ( / ( + ( - v0 1 ) v1 ) 4 ) 1 ) 1 ) )",
      "end": "0"
    },
    "rules": [
      "min-x-x",
      "min-div-mul",
      "min-mul-out-neg",
      "sub-to-add",
      "add-dist-mul",
      "min-x-x-plus-a-neg",
      "min-mul-in-neg",
      "min-sub-both",
      "not-gt-to-eqlt",
      "add-fact-mul",
      "min-mul-out-pos",
      "min-ass",
      "min-div-out-pos",
      "add-denom-mul",
      "lt-mul-div-cancel",
      "Eq-lt-min",
      "eqgt-to-not-lt",
      "min-comm",
      "add-comm",
      "mul-assoc",
      "lt-swap-out",
      "mul-comm",
      "min-max",
      "and-eq-eq",
      "lt-max-mutual-term",
      "eq-mul-x-y-0",
      "Eq-min-lt",
      "mul-one",
      "lt-min-term+cpos",
      "gt-to-lt",
      "min-max-min-y",
      "add-zero",
      "add-assoc"
    ]
  }
]
